/*
	Masked Input plugin for jQuery
	Copyright (c) 2007-2013 Josh Bush (digitalbush.com)
	Licensed under the MIT license (http://digitalbush.com/projects/masked-input-plugin/#license)
	Version: 1.3.1
*/
(function(e){function t(){var e=document.createElement("input"),t="onpaste";return e.setAttribute(t,""),"function"==typeof e[t]?"paste":"input"}var n,a=t()+".mask",r=navigator.userAgent,i=/iphone/i.test(r),o=/android/i.test(r);e.mask={definitions:{9:"[0-9]",a:"[A-Za-z]","*":"[A-Za-z0-9]"},dataName:"rawMaskFn",placeholder:"_"},e.fn.extend({caret:function(e,t){var n;if(0!==this.length&&!this.is(":hidden"))return"number"==typeof e?(t="number"==typeof t?t:e,this.each(function(){this.setSelectionRange?this.setSelectionRange(e,t):this.createTextRange&&(n=this.createTextRange(),n.collapse(!0),n.moveEnd("character",t),n.moveStart("character",e),n.select())})):(this[0].setSelectionRange?(e=this[0].selectionStart,t=this[0].selectionEnd):document.selection&&document.selection.createRange&&(n=document.selection.createRange(),e=0-n.duplicate().moveStart("character",-1e5),t=e+n.text.length),{begin:e,end:t})},unmask:function(){return this.trigger("unmask")},mask:function(t,r){var c,l,s,u,f,h;return!t&&this.length>0?(c=e(this[0]),c.data(e.mask.dataName)()):(r=e.extend({placeholder:e.mask.placeholder,completed:null},r),l=e.mask.definitions,s=[],u=h=t.length,f=null,e.each(t.split(""),function(e,t){"?"==t?(h--,u=e):l[t]?(s.push(RegExp(l[t])),null===f&&(f=s.length-1)):s.push(null)}),this.trigger("unmask").each(function(){function c(e){for(;h>++e&&!s[e];);return e}function d(e){for(;--e>=0&&!s[e];);return e}function m(e,t){var n,a;if(!(0>e)){for(n=e,a=c(t);h>n;n++)if(s[n]){if(!(h>a&&s[n].test(R[a])))break;R[n]=R[a],R[a]=r.placeholder,a=c(a)}b(),x.caret(Math.max(f,e))}}function p(e){var t,n,a,i;for(t=e,n=r.placeholder;h>t;t++)if(s[t]){if(a=c(t),i=R[t],R[t]=n,!(h>a&&s[a].test(i)))break;n=i}}function g(e){var t,n,a,r=e.which;8===r||46===r||i&&127===r?(t=x.caret(),n=t.begin,a=t.end,0===a-n&&(n=46!==r?d(n):a=c(n-1),a=46===r?c(a):a),k(n,a),m(n,a-1),e.preventDefault()):27==r&&(x.val(S),x.caret(0,y()),e.preventDefault())}function v(t){var n,a,i,l=t.which,u=x.caret();t.ctrlKey||t.altKey||t.metaKey||32>l||l&&(0!==u.end-u.begin&&(k(u.begin,u.end),m(u.begin,u.end-1)),n=c(u.begin-1),h>n&&(a=String.fromCharCode(l),s[n].test(a)&&(p(n),R[n]=a,b(),i=c(n),o?setTimeout(e.proxy(e.fn.caret,x,i),0):x.caret(i),r.completed&&i>=h&&r.completed.call(x))),t.preventDefault())}function k(e,t){var n;for(n=e;t>n&&h>n;n++)s[n]&&(R[n]=r.placeholder)}function b(){x.val(R.join(""))}function y(e){var t,n,a=x.val(),i=-1;for(t=0,pos=0;h>t;t++)if(s[t]){for(R[t]=r.placeholder;pos++<a.length;)if(n=a.charAt(pos-1),s[t].test(n)){R[t]=n,i=t;break}if(pos>a.length)break}else R[t]===a.charAt(pos)&&t!==u&&(pos++,i=t);return e?b():u>i+1?(x.val(""),k(0,h)):(b(),x.val(x.val().substring(0,i+1))),u?t:f}var x=e(this),R=e.map(t.split(""),function(e){return"?"!=e?l[e]?r.placeholder:e:void 0}),S=x.val();x.data(e.mask.dataName,function(){return e.map(R,function(e,t){return s[t]&&e!=r.placeholder?e:null}).join("")}),x.attr("readonly")||x.one("unmask",function(){x.unbind(".mask").removeData(e.mask.dataName)}).bind("focus.mask",function(){clearTimeout(n);var e;S=x.val(),e=y(),n=setTimeout(function(){b(),e==t.length?x.caret(0,e):x.caret(e)},10)}).bind("blur.mask",function(){y(),x.val()!=S&&x.change()}).bind("keydown.mask",g).bind("keypress.mask",v).bind(a,function(){setTimeout(function(){var e=y(!0);x.caret(e),r.completed&&e==x.val().length&&r.completed.call(x)},0)}),y()}))}})})(jQuery);/**
 * jGrowl 1.2.10
 *
 * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
 * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
 *
 * Written by Stan Lemon <stosh1985@gmail.com>
 * Last updated: 2013.02.14
 *
 * jGrowl is a jQuery plugin implementing unobtrusive userland notifications.  These 
 * notifications function similarly to the Growl Framework available for
 * Mac OS X (http://growl.info).
 *
 * To Do:
 * - Move library settings to containers and allow them to be changed per container
 *
 * Changes in 1.2.10
 * - Fix beforeClose to be called in click event
 *
 * Changes in 1.2.9
 * - Fixed BC break in jQuery 2.0 beta
 *
 * Changes in 1.2.8
 * - Fixes for jQuery 1.9 and the MSIE6 check, note that with jQuery 2.0 support
 *   jGrowl intends to drop support for IE6 altogether
 *
 * Changes in 1.2.6
 * - Fixed js error when a notification is opening and closing at the same time
 * 
 * Changes in 1.2.5
 * - Changed wrapper jGrowl's options usage to "o" instead of $.jGrowl.defaults
 * - Added themeState option to control 'highlight' or 'error' for jQuery UI
 * - Ammended some CSS to provide default positioning for nested usage.
 * - Changed some CSS to be prefixed with jGrowl- to prevent namespacing issues
 * - Added two new options - openDuration and closeDuration to allow 
 *   better control of notification open and close speeds, respectively 
 *   Patch contributed by Jesse Vincet.
 * - Added afterOpen callback.  Patch contributed by Russel Branca.
 *
 * Changes in 1.2.4
 * - Fixed IE bug with the close-all button
 * - Fixed IE bug with the filter CSS attribute (special thanks to gotwic)
 * - Update IE opacity CSS
 * - Changed font sizes to use "em", and only set the base style
 *
 * Changes in 1.2.3
 * - The callbacks no longer use the container as context, instead they use the actual notification
 * - The callbacks now receive the container as a parameter after the options parameter
 * - beforeOpen and beforeClose now check the return value, if it's false - the notification does
 *   not continue.  The open callback will also halt execution if it returns false.
 * - Fixed bug where containers would get confused
 * - Expanded the pause functionality to pause an entire container.
 *
 * Changes in 1.2.2
 * - Notification can now be theme rolled for jQuery UI, special thanks to Jeff Chan!
 *
 * Changes in 1.2.1
 * - Fixed instance where the interval would fire the close method multiple times.
 * - Added CSS to hide from print media
 * - Fixed issue with closer button when div { position: relative } is set
 * - Fixed leaking issue with multiple containers.  Special thanks to Matthew Hanlon!
 *
 * Changes in 1.2.0
 * - Added message pooling to limit the number of messages appearing at a given time.
 * - Closing a notification is now bound to the notification object and triggered by the close button.
 *
 * Changes in 1.1.2
 * - Added iPhone styled example
 * - Fixed possible IE7 bug when determining if the ie6 class shoudl be applied.
 * - Added template for the close button, so that it's content could be customized.
 *
 * Changes in 1.1.1
 * - Fixed CSS styling bug for ie6 caused by a mispelling
 * - Changes height restriction on default notifications to min-height
 * - Added skinned examples using a variety of images
 * - Added the ability to customize the content of the [close all] box
 * - Added jTweet, an example of using jGrowl + Twitter
 *
 * Changes in 1.1.0
 * - Multiple container and instances.
 * - Standard $.jGrowl() now wraps $.fn.jGrowl() by first establishing a generic jGrowl container.
 * - Instance methods of a jGrowl container can be called by $.fn.jGrowl(methodName)
 * - Added glue preferenced, which allows notifications to be inserted before or after nodes in the container
 * - Added new log callback which is called before anything is done for the notification
 * - Corner's attribute are now applied on an individual notification basis.
 *
 * Changes in 1.0.4
 * - Various CSS fixes so that jGrowl renders correctly in IE6.
 *
 * Changes in 1.0.3
 * - Fixed bug with options persisting across notifications
 * - Fixed theme application bug
 * - Simplified some selectors and manipulations.
 * - Added beforeOpen and beforeClose callbacks
 * - Reorganized some lines of code to be more readable
 * - Removed unnecessary this.defaults context
 * - If corners plugin is present, it's now customizable.
 * - Customizable open animation.
 * - Customizable close animation.
 * - Customizable animation easing.
 * - Added customizable positioning (top-left, top-right, bottom-left, bottom-right, center)
 *
 * Changes in 1.0.2
 * - All CSS styling is now external.
 * - Added a theme parameter which specifies a secondary class for styling, such
 *   that notifications can be customized in appearance on a per message basis.
 * - Notification life span is now customizable on a per message basis.
 * - Added the ability to disable the global closer, enabled by default.
 * - Added callbacks for when a notification is opened or closed.
 * - Added callback for the global closer.
 * - Customizable animation speed.
 * - jGrowl now set itself up and tears itself down.
 *
 * Changes in 1.0.1:
 * - Removed dependency on metadata plugin in favor of .data()
 * - Namespaced all events
 */
(function($) {
	/** Compatibility holdover for 1.9 to check IE6 **/
	var $ie6 = (function(){
		return false === $.support.boxModel && $.support.objectAll && $support.leadingWhitespace;
	})();

	/** jGrowl Wrapper - Establish a base jGrowl Container for compatibility with older releases. **/
	$.jGrowl = function( m , o ) {
		// To maintain compatibility with older version that only supported one instance we'll create the base container.
		if ( $('#jGrowl').size() == 0 ) 
			$('<div id="jGrowl"></div>').addClass( (o && o.position) ? o.position : $.jGrowl.defaults.position ).appendTo('body');

		// Create a notification on the container.
		$('#jGrowl').jGrowl(m,o);
	};


	/** Raise jGrowl Notification on a jGrowl Container **/
	$.fn.jGrowl = function( m , o ) {
		if ( $.isFunction(this.each) ) {
			var args = arguments;

			return this.each(function() {
				var self = this;

				/** Create a jGrowl Instance on the Container if it does not exist **/
				if ( $(this).data('jGrowl.instance') == undefined ) {
					$(this).data('jGrowl.instance', $.extend( new $.fn.jGrowl(), { notifications: [], element: null, interval: null } ));
					$(this).data('jGrowl.instance').startup( this );
				}

				/** Optionally call jGrowl instance methods, or just raise a normal notification **/
				if ( $.isFunction($(this).data('jGrowl.instance')[m]) ) {
					$(this).data('jGrowl.instance')[m].apply( $(this).data('jGrowl.instance') , $.makeArray(args).slice(1) );
				} else {
					$(this).data('jGrowl.instance').create( m , o );
				}
			});
		};
	};

	$.extend( $.fn.jGrowl.prototype , {

		/** Default JGrowl Settings **/
		defaults: {
			pool: 			0,
			header: 		'',
			group: 			'',
			sticky: 		false,
			position: 		'top-right',
			glue: 			'after',
			theme: 			'default',
			themeState: 	'highlight',
			corners: 		'10px',
			check: 			250,
			life: 			3000,
			closeDuration:  'normal',
			openDuration:   'normal',
			easing: 		'swing',
			closer: 		true,
			closeTemplate: '&times;',
			closerTemplate: '<div>[ close all ]</div>',
			log: 			function(e,m,o) {},
			beforeOpen: 	function(e,m,o) {},
			afterOpen: 		function(e,m,o) {},
			open: 			function(e,m,o) {},
			beforeClose: 	function(e,m,o) {},
			close: 			function(e,m,o) {},
			animateOpen: 	{
				opacity: 	'show'
			},
			animateClose: 	{
				opacity: 	'hide'
			}
		},
		
		notifications: [],
		
		/** jGrowl Container Node **/
		element: 	null,
	
		/** Interval Function **/
		interval:   null,
		
		/** Create a Notification **/
		create: 	function( message , o ) {
			var o = $.extend({}, this.defaults, o);

			/* To keep backward compatibility with 1.24 and earlier, honor 'speed' if the user has set it */
			if (typeof o.speed !== 'undefined') {
				o.openDuration = o.speed;
				o.closeDuration = o.speed;
			}

			this.notifications.push({ message: message , options: o });
			
			o.log.apply( this.element , [this.element,message,o] );
		},
		
		render: 		function( notification ) {
			var self = this;
			var message = notification.message;
			var o = notification.options;

			// Support for jQuery theme-states, if this is not used it displays a widget header
			o.themeState = (o.themeState == '') ? '' : 'ui-state-' + o.themeState;

			var notification = $('<div/>')
		        .addClass('jGrowl-notification ' + o.themeState + ' ui-corner-all' + ((o.group != undefined && o.group != '') ? ' ' + o.group : ''))
		        .append($('<div/>').addClass('jGrowl-close').html(o.closeTemplate))
		        .append($('<div/>').addClass('jGrowl-header').html(o.header))
		        .append($('<div/>').addClass('jGrowl-message').html(message))
		        .data("jGrowl", o).addClass(o.theme).children('div.jGrowl-close').bind("click.jGrowl", function() {
		        	$(this).parent().trigger('jGrowl.beforeClose');		        
		        })
		        .parent();


			/** Notification Actions **/
			$(notification).bind("mouseover.jGrowl", function() {
				$('div.jGrowl-notification', self.element).data("jGrowl.pause", true);
			}).bind("mouseout.jGrowl", function() {
				$('div.jGrowl-notification', self.element).data("jGrowl.pause", false);
			}).bind('jGrowl.beforeOpen', function() {
				if ( o.beforeOpen.apply( notification , [notification,message,o,self.element] ) != false ) {
					$(this).trigger('jGrowl.open');
				}
			}).bind('jGrowl.open', function() {
				if ( o.open.apply( notification , [notification,message,o,self.element] ) != false ) {
					if ( o.glue == 'after' ) {
						$('div.jGrowl-notification:last', self.element).after(notification);
					} else {
						$('div.jGrowl-notification:first', self.element).before(notification);
					}
					
					$(this).animate(o.animateOpen, o.openDuration, o.easing, function() {
						// Fixes some anti-aliasing issues with IE filters.
						if ($.support.opacity === false) 
							this.style.removeAttribute('filter');

						if ( $(this).data("jGrowl") != null ) // Happens when a notification is closing before it's open.
							$(this).data("jGrowl").created = new Date();
						
						$(this).trigger('jGrowl.afterOpen');
					});
				}
			}).bind('jGrowl.afterOpen', function() {
				o.afterOpen.apply( notification , [notification,message,o,self.element] );
			}).bind('jGrowl.beforeClose', function() {
				if ( o.beforeClose.apply( notification , [notification,message,o,self.element] ) != false )
					$(this).trigger('jGrowl.close');
			}).bind('jGrowl.close', function() {
				// Pause the notification, lest during the course of animation another close event gets called.
				$(this).data('jGrowl.pause', true);
				$(this).animate(o.animateClose, o.closeDuration, o.easing, function() {
					if ( $.isFunction(o.close) ) {
						if ( o.close.apply( notification , [notification,message,o,self.element] ) !== false )
							$(this).remove();
					} else {
						$(this).remove();
					}
				});
			}).trigger('jGrowl.beforeOpen');
		
			/** Optional Corners Plugin **/
			if ( o.corners != '' && $.fn.corner != undefined ) $(notification).corner( o.corners );

			/** Add a Global Closer if more than one notification exists **/
			if ( $('div.jGrowl-notification:parent', self.element).size() > 1 && 
				 $('div.jGrowl-closer', self.element).size() == 0 && this.defaults.closer != false ) {
				$(this.defaults.closerTemplate).addClass('jGrowl-closer ' + this.defaults.themeState + ' ui-corner-all').addClass(this.defaults.theme)
					.appendTo(self.element).animate(this.defaults.animateOpen, this.defaults.speed, this.defaults.easing)
					.bind("click.jGrowl", function() {
						$(this).siblings().trigger("jGrowl.beforeClose");

						if ( $.isFunction( self.defaults.closer ) ) {
							self.defaults.closer.apply( $(this).parent()[0] , [$(this).parent()[0]] );
						}
					});
			};
		},

		/** Update the jGrowl Container, removing old jGrowl notifications **/
		update:	 function() {
			$(this.element).find('div.jGrowl-notification:parent').each( function() {
				if ( $(this).data("jGrowl") != undefined && $(this).data("jGrowl").created != undefined && 
					 ($(this).data("jGrowl").created.getTime() + parseInt($(this).data("jGrowl").life))  < (new Date()).getTime() && 
					 $(this).data("jGrowl").sticky != true && 
					 ($(this).data("jGrowl.pause") == undefined || $(this).data("jGrowl.pause") != true) ) {

					// Pause the notification, lest during the course of animation another close event gets called.
					$(this).trigger('jGrowl.beforeClose');
				}
			});

			if ( this.notifications.length > 0 && 
				 (this.defaults.pool == 0 || $(this.element).find('div.jGrowl-notification:parent').size() < this.defaults.pool) )
				this.render( this.notifications.shift() );

			if ( $(this.element).find('div.jGrowl-notification:parent').size() < 2 ) {
				$(this.element).find('div.jGrowl-closer').animate(this.defaults.animateClose, this.defaults.speed, this.defaults.easing, function() {
					$(this).remove();
				});
			}
		},

		/** Setup the jGrowl Notification Container **/
		startup:	function(e) {
			this.element = $(e).addClass('jGrowl').append('<div class="jGrowl-notification"></div>');
			this.interval = setInterval( function() { 
				$(e).data('jGrowl.instance').update(); 
			}, parseInt(this.defaults.check));
			
			if ($ie6) {
				$(this.element).addClass('ie6');
			}
		},

		/** Shutdown jGrowl, removing it and clearing the interval **/
		shutdown:   function() {
			$(this.element).removeClass('jGrowl').find('div.jGrowl-notification').remove();
			clearInterval( this.interval );
		},
		
		close: 	function() {
			$(this.element).find('div.jGrowl-notification').each(function(){
				$(this).trigger('jGrowl.beforeClose');
			});
		}
	});
	
	/** Reference the Defaults Object for compatibility with older versions of jGrowl **/
	$.jGrowl.defaults = $.fn.jGrowl.prototype.defaults;

})(jQuery);

/*
 *
 * Copyright (c) 2006-2009 Sam Collett (http://www.texotela.co.uk)
 * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
 * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
 *
 * Version 2.2.4
 * Demo: http://www.texotela.co.uk/code/jquery/select/
 *
 * $LastChangedDate: 2009-02-08 00:28:12 +0000 (Sun, 08 Feb 2009) $
 * $Rev: 6185 $
 *
 */
 
;(function($) {
 
/**
 * Adds (single/multiple) options to a select box (or series of select boxes)
 *
 * @name     addOption
 * @author   Sam Collett (http://www.texotela.co.uk)
 * @type     jQuery
 * @example  $("#myselect").addOption("Value", "Text"); // add single value (will be selected)
 * @example  $("#myselect").addOption("Value 2", "Text 2", false); // add single value (won't be selected)
 * @example  $("#myselect").addOption({"foo":"bar","bar":"baz"}, false); // add multiple values, but don't select
 *
 */
$.fn.addOption = function()
{
	var add = function(el, v, t, sO)
	{
		var option = document.createElement("option");
		option.value = v, option.text = t;
		// get options
		var o = el.options;
		// get number of options
		var oL = o.length;
		if(!el.cache)
		{
			el.cache = {};
			// loop through existing options, adding to cache
			for(var i = 0; i < oL; i++)
			{
				el.cache[o[i].value] = i;
			}
		}
		// add to cache if it isn't already
		if(typeof el.cache[v] == "undefined") el.cache[v] = oL;
		el.options[el.cache[v]] = option;
		if(sO)
		{
			option.selected = true;
		}
	};
	
	var a = arguments;
	if(a.length == 0) return this;
	// select option when added? default is true
	var sO = true;
	// multiple items
	var m = false;
	// other variables
	var items, v, t;
	if(typeof(a[0]) == "object")
	{
		m = true;
		items = a[0];
	}
	if(a.length >= 2)
	{
		if(typeof(a[1]) == "boolean") sO = a[1];
		else if(typeof(a[2]) == "boolean") sO = a[2];
		if(!m)
		{
			v = a[0];
			t = a[1];
		}
	}
	this.each(
		function()
		{
			if(this.nodeName.toLowerCase() != "select") return;
			if(m)
			{
				for(var item in items)
				{
					add(this, item, items[item], sO);
				}
			}
			else
			{
				add(this, v, t, sO);
			}
		}
	);
	return this;
};

/**
 * Add options via ajax
 *
 * @name     ajaxAddOption
 * @author   Sam Collett (http://www.texotela.co.uk)
 * @type     jQuery
 * @param    String url      Page to get options from (must be valid JSON)
 * @param    Object params   (optional) Any parameters to send with the request
 * @param    Boolean select  (optional) Select the added options, default true
 * @param    Function fn     (optional) Call this function with the select object as param after completion
 * @param    Array args      (optional) Array with params to pass to the function afterwards
 * @example  $("#myselect").ajaxAddOption("myoptions.php");
 * @example  $("#myselect").ajaxAddOption("myoptions.php", {"code" : "007"});
 * @example  $("#myselect").ajaxAddOption("myoptions.php", {"code" : "007"}, false, sortoptions, [{"dir": "desc"}]);
 *
 */
$.fn.ajaxAddOption = function(url, params, select, fn, args)
{
	if(typeof(url) != "string") return this;
	if(typeof(params) != "object") params = {};
	if(typeof(select) != "boolean") select = true;
	this.each(
		function()
		{
			var el = this;
			$.getJSON(url,
				params,
				function(r)
				{
					$(el).addOption(r, select);
					if(typeof fn == "function")
					{
						if(typeof args == "object")
						{
							fn.apply(el, args);
						} 
						else
						{
							fn.call(el);
						}
					}
				}
			);
		}
	);
	return this;
};

/**
 * Removes an option (by value or index) from a select box (or series of select boxes)
 *
 * @name     removeOption
 * @author   Sam Collett (http://www.texotela.co.uk)
 * @type     jQuery
 * @param    String|RegExp|Number what  Option to remove
 * @param    Boolean selectedOnly       (optional) Remove only if it has been selected (default false)   
 * @example  $("#myselect").removeOption("Value"); // remove by value
 * @example  $("#myselect").removeOption(/^val/i); // remove options with a value starting with 'val'
 * @example  $("#myselect").removeOption(/./); // remove all options
 * @example  $("#myselect").removeOption(/./, true); // remove all options that have been selected
 * @example  $("#myselect").removeOption(0); // remove by index
 * @example  $("#myselect").removeOption(["myselect_1","myselect_2"]); // values contained in passed array
 *
 */
$.fn.removeOption = function()
{
	var a = arguments;
	if(a.length == 0) return this;
	var ta = typeof(a[0]);
	var v, index;
	// has to be a string or regular expression (object in IE, function in Firefox)
	if(ta == "string" || ta == "object" || ta == "function" )
	{
		v = a[0];
		// if an array, remove items
		if(v.constructor == Array)
		{
			var l = v.length;
			for(var i = 0; i<l; i++)
			{
				this.removeOption(v[i], a[1]); 
			}
			return this;
		}
	}
	else if(ta == "number") index = a[0];
	else return this;
	this.each(
		function()
		{
			if(this.nodeName.toLowerCase() != "select") return;
			// clear cache
			if(this.cache) this.cache = null;
			// does the option need to be removed?
			var remove = false;
			// get options
			var o = this.options;
			if(!!v)
			{
				// get number of options
				var oL = o.length;
				for(var i=oL-1; i>=0; i--)
				{
					if(v.constructor == RegExp)
					{
						if(o[i].value.match(v))
						{
							remove = true;
						}
					}
					else if(o[i].value == v)
					{
						remove = true;
					}
					// if the option is only to be removed if selected
					if(remove && a[1] === true) remove = o[i].selected;
					if(remove)
					{
						o[i] = null;
					}
					remove = false;
				}
			}
			else
			{
				// only remove if selected?
				if(a[1] === true)
				{
					remove = o[index].selected;
				}
				else
				{
					remove = true;
				}
				if(remove)
				{
					this.remove(index);
				}
			}
		}
	);
	return this;
};

/**
 * Sort options (ascending or descending) in a select box (or series of select boxes)
 *
 * @name     sortOptions
 * @author   Sam Collett (http://www.texotela.co.uk)
 * @type     jQuery
 * @param    Boolean ascending   (optional) Sort ascending (true/undefined), or descending (false)
 * @example  // ascending
 * $("#myselect").sortOptions(); // or $("#myselect").sortOptions(true);
 * @example  // descending
 * $("#myselect").sortOptions(false);
 *
 */
$.fn.sortOptions = function(ascending)
{
	// get selected values first
	var sel = $(this).selectedValues();
	var a = typeof(ascending) == "undefined" ? true : !!ascending;
	this.each(
		function()
		{
			if(this.nodeName.toLowerCase() != "select") return;
			// get options
			var o = this.options;
			// get number of options
			var oL = o.length;
			// create an array for sorting
			var sA = [];
			// loop through options, adding to sort array
			for(var i = 0; i<oL; i++)
			{
				sA[i] = {
					v: o[i].value,
					t: o[i].text
				}
			}
			// sort items in array
			sA.sort(
				function(o1, o2)
				{
					// option text is made lowercase for case insensitive sorting
					o1t = o1.t.toLowerCase(), o2t = o2.t.toLowerCase();
					// if options are the same, no sorting is needed
					if(o1t == o2t) return 0;
					if(a)
					{
						return o1t < o2t ? -1 : 1;
					}
					else
					{
						return o1t > o2t ? -1 : 1;
					}
				}
			);
			// change the options to match the sort array
			for(var i = 0; i<oL; i++)
			{
				o[i].text = sA[i].t;
				o[i].value = sA[i].v;
			}
		}
	).selectOptions(sel, true); // select values, clearing existing ones
	return this;
};
/**
 * Selects an option by value
 *
 * @name     selectOptions
 * @author   Mathias Bank (http://www.mathias-bank.de), original function
 * @author   Sam Collett (http://www.texotela.co.uk), addition of regular expression matching
 * @type     jQuery
 * @param    String|RegExp|Array value  Which options should be selected
 * can be a string or regular expression, or an array of strings / regular expressions
 * @param    Boolean clear  Clear existing selected options, default false
 * @example  $("#myselect").selectOptions("val1"); // with the value 'val1'
 * @example  $("#myselect").selectOptions(["val1","val2","val3"]); // with the values 'val1' 'val2' 'val3'
 * @example  $("#myselect").selectOptions(/^val/i); // with the value starting with 'val', case insensitive
 *
 */
$.fn.selectOptions = function(value, clear)
{
	var v = value;
	var vT = typeof(value);
	// handle arrays
	if(vT == "object" && v.constructor == Array)
	{
		var $this = this;
		$.each(v, function()
			{
      				$this.selectOptions(this, clear);
    			}
		);
	};
	var c = clear || false;
	// has to be a string or regular expression (object in IE, function in Firefox)
	if(vT != "string" && vT != "function" && vT != "object") return this;
	this.each(
		function()
		{
			if(this.nodeName.toLowerCase() != "select") return this;
			// get options
			var o = this.options;
			// get number of options
			var oL = o.length;
			for(var i = 0; i<oL; i++)
			{
				if(v.constructor == RegExp)
				{
					if(o[i].value.match(v))
					{
						o[i].selected = true;
					}
					else if(c)
					{
						o[i].selected = false;
					}
				}
				else
				{
					if(o[i].value == v)
					{
						o[i].selected = true;
					}
					else if(c)
					{
						o[i].selected = false;
					}
				}
			}
		}
	);
	return this;
};

/**
 * Copy options to another select
 *
 * @name     copyOptions
 * @author   Sam Collett (http://www.texotela.co.uk)
 * @type     jQuery
 * @param    String to  Element to copy to
 * @param    String which  (optional) Specifies which options should be copied - 'all' or 'selected'. Default is 'selected'
 * @example  $("#myselect").copyOptions("#myselect2"); // copy selected options from 'myselect' to 'myselect2'
 * @example  $("#myselect").copyOptions("#myselect2","selected"); // same as above
 * @example  $("#myselect").copyOptions("#myselect2","all"); // copy all options from 'myselect' to 'myselect2'
 *
 */
$.fn.copyOptions = function(to, which)
{
	var w = which || "selected";
	if($(to).size() == 0) return this;
	this.each(
		function()
		{
			if(this.nodeName.toLowerCase() != "select") return this;
			// get options
			var o = this.options;
			// get number of options
			var oL = o.length;
			for(var i = 0; i<oL; i++)
			{
				if(w == "all" || (w == "selected" && o[i].selected))
				{
					$(to).addOption(o[i].value, o[i].text);
				}
			}
		}
	);
	return this;
};

/**
 * Checks if a select box has an option with the supplied value
 *
 * @name     containsOption
 * @author   Sam Collett (http://www.texotela.co.uk)
 * @type     Boolean|jQuery
 * @param    String|RegExp value  Which value to check for. Can be a string or regular expression
 * @param    Function fn          (optional) Function to apply if an option with the given value is found.
 * Use this if you don't want to break the chaining
 * @example  if($("#myselect").containsOption("val1")) alert("Has an option with the value 'val1'");
 * @example  if($("#myselect").containsOption(/^val/i)) alert("Has an option with the value starting with 'val'");
 * @example  $("#myselect").containsOption("val1", copyoption).doSomethingElseWithSelect(); // calls copyoption (user defined function) for any options found, chain is continued
 *
 */
$.fn.containsOption = function(value, fn)
{
	var found = false;
	var v = value;
	var vT = typeof(v);
	var fT = typeof(fn);
	// has to be a string or regular expression (object in IE, function in Firefox)
	if(vT != "string" && vT != "function" && vT != "object") return fT == "function" ? this: found;
	this.each(
		function()
		{
			if(this.nodeName.toLowerCase() != "select") return this;
			// option already found
			if(found && fT != "function") return false;
			// get options
			var o = this.options;
			// get number of options
			var oL = o.length;
			for(var i = 0; i<oL; i++)
			{
				if(v.constructor == RegExp)
				{
					if (o[i].value.match(v))
					{
						found = true;
						if(fT == "function") fn.call(o[i], i);
					}
				}
				else
				{
					if (o[i].value == v)
					{
						found = true;
						if(fT == "function") fn.call(o[i], i);
					}
				}
			}
		}
	);
	return fT == "function" ? this : found;
};

/**
 * Returns values which have been selected
 *
 * @name     selectedValues
 * @author   Sam Collett (http://www.texotela.co.uk)
 * @type     Array
 * @example  $("#myselect").selectedValues();
 *
 */
$.fn.selectedValues = function()
{
	var v = [];
	this.selectedOptions().each(
		function()
		{
			v[v.length] = this.value;
		}
	);
	return v;
};

/**
 * Returns text which has been selected
 *
 * @name     selectedTexts
 * @author   Sam Collett (http://www.texotela.co.uk)
 * @type     Array
 * @example  $("#myselect").selectedTexts();
 *
 */
$.fn.selectedTexts = function()
{
	var t = [];
	this.selectedOptions().each(
		function()
		{
			t[t.length] = this.text;
		}
	);
	return t;
};

/**
 * Returns options which have been selected
 *
 * @name     selectedOptions
 * @author   Sam Collett (http://www.texotela.co.uk)
 * @type     jQuery
 * @example  $("#myselect").selectedOptions();
 *
 */
$.fn.selectedOptions = function()
{
	return this.find("option:selected");
};

})(jQuery);/*! jQuery Migrate v1.2.1 | (c) 2005, 2013 jQuery Foundation, Inc. and other contributors | jquery.org/license */
jQuery.migrateMute===void 0&&(jQuery.migrateMute=!0),function(e,t,n){function r(n){var r=t.console;i[n]||(i[n]=!0,e.migrateWarnings.push(n),r&&r.warn&&!e.migrateMute&&(r.warn("JQMIGRATE: "+n),e.migrateTrace&&r.trace&&r.trace()))}function a(t,a,i,o){if(Object.defineProperty)try{return Object.defineProperty(t,a,{configurable:!0,enumerable:!0,get:function(){return r(o),i},set:function(e){r(o),i=e}}),n}catch(s){}e._definePropertyBroken=!0,t[a]=i}var i={};e.migrateWarnings=[],!e.migrateMute&&t.console&&t.console.log&&t.console.log("JQMIGRATE: Logging is active"),e.migrateTrace===n&&(e.migrateTrace=!0),e.migrateReset=function(){i={},e.migrateWarnings.length=0},"BackCompat"===document.compatMode&&r("jQuery is not compatible with Quirks Mode");var o=e("<input/>",{size:1}).attr("size")&&e.attrFn,s=e.attr,u=e.attrHooks.value&&e.attrHooks.value.get||function(){return null},c=e.attrHooks.value&&e.attrHooks.value.set||function(){return n},l=/^(?:input|button)$/i,d=/^[238]$/,p=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,f=/^(?:checked|selected)$/i;a(e,"attrFn",o||{},"jQuery.attrFn is deprecated"),e.attr=function(t,a,i,u){var c=a.toLowerCase(),g=t&&t.nodeType;return u&&(4>s.length&&r("jQuery.fn.attr( props, pass ) is deprecated"),t&&!d.test(g)&&(o?a in o:e.isFunction(e.fn[a])))?e(t)[a](i):("type"===a&&i!==n&&l.test(t.nodeName)&&t.parentNode&&r("Can't change the 'type' of an input or button in IE 6/7/8"),!e.attrHooks[c]&&p.test(c)&&(e.attrHooks[c]={get:function(t,r){var a,i=e.prop(t,r);return i===!0||"boolean"!=typeof i&&(a=t.getAttributeNode(r))&&a.nodeValue!==!1?r.toLowerCase():n},set:function(t,n,r){var a;return n===!1?e.removeAttr(t,r):(a=e.propFix[r]||r,a in t&&(t[a]=!0),t.setAttribute(r,r.toLowerCase())),r}},f.test(c)&&r("jQuery.fn.attr('"+c+"') may use property instead of attribute")),s.call(e,t,a,i))},e.attrHooks.value={get:function(e,t){var n=(e.nodeName||"").toLowerCase();return"button"===n?u.apply(this,arguments):("input"!==n&&"option"!==n&&r("jQuery.fn.attr('value') no longer gets properties"),t in e?e.value:null)},set:function(e,t){var a=(e.nodeName||"").toLowerCase();return"button"===a?c.apply(this,arguments):("input"!==a&&"option"!==a&&r("jQuery.fn.attr('value', val) no longer sets properties"),e.value=t,n)}};var g,h,v=e.fn.init,m=e.parseJSON,y=/^([^<]*)(<[\w\W]+>)([^>]*)$/;e.fn.init=function(t,n,a){var i;return t&&"string"==typeof t&&!e.isPlainObject(n)&&(i=y.exec(e.trim(t)))&&i[0]&&("<"!==t.charAt(0)&&r("$(html) HTML strings must start with '<' character"),i[3]&&r("$(html) HTML text after last tag is ignored"),"#"===i[0].charAt(0)&&(r("HTML string cannot start with a '#' character"),e.error("JQMIGRATE: Invalid selector string (XSS)")),n&&n.context&&(n=n.context),e.parseHTML)?v.call(this,e.parseHTML(i[2],n,!0),n,a):v.apply(this,arguments)},e.fn.init.prototype=e.fn,e.parseJSON=function(e){return e||null===e?m.apply(this,arguments):(r("jQuery.parseJSON requires a valid JSON string"),null)},e.uaMatch=function(e){e=e.toLowerCase();var t=/(chrome)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||0>e.indexOf("compatible")&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[];return{browser:t[1]||"",version:t[2]||"0"}},e.browser||(g=e.uaMatch(navigator.userAgent),h={},g.browser&&(h[g.browser]=!0,h.version=g.version),h.chrome?h.webkit=!0:h.webkit&&(h.safari=!0),e.browser=h),a(e,"browser",e.browser,"jQuery.browser is deprecated"),e.sub=function(){function t(e,n){return new t.fn.init(e,n)}e.extend(!0,t,this),t.superclass=this,t.fn=t.prototype=this(),t.fn.constructor=t,t.sub=this.sub,t.fn.init=function(r,a){return a&&a instanceof e&&!(a instanceof t)&&(a=t(a)),e.fn.init.call(this,r,a,n)},t.fn.init.prototype=t.fn;var n=t(document);return r("jQuery.sub() is deprecated"),t},e.ajaxSetup({converters:{"text json":e.parseJSON}});var b=e.fn.data;e.fn.data=function(t){var a,i,o=this[0];return!o||"events"!==t||1!==arguments.length||(a=e.data(o,t),i=e._data(o,t),a!==n&&a!==i||i===n)?b.apply(this,arguments):(r("Use of jQuery.fn.data('events') is deprecated"),i)};var j=/\/(java|ecma)script/i,w=e.fn.andSelf||e.fn.addBack;e.fn.andSelf=function(){return r("jQuery.fn.andSelf() replaced by jQuery.fn.addBack()"),w.apply(this,arguments)},e.clean||(e.clean=function(t,a,i,o){a=a||document,a=!a.nodeType&&a[0]||a,a=a.ownerDocument||a,r("jQuery.clean() is deprecated");var s,u,c,l,d=[];if(e.merge(d,e.buildFragment(t,a).childNodes),i)for(c=function(e){return!e.type||j.test(e.type)?o?o.push(e.parentNode?e.parentNode.removeChild(e):e):i.appendChild(e):n},s=0;null!=(u=d[s]);s++)e.nodeName(u,"script")&&c(u)||(i.appendChild(u),u.getElementsByTagName!==n&&(l=e.grep(e.merge([],u.getElementsByTagName("script")),c),d.splice.apply(d,[s+1,0].concat(l)),s+=l.length));return d});var Q=e.event.add,x=e.event.remove,k=e.event.trigger,N=e.fn.toggle,T=e.fn.live,M=e.fn.die,S="ajaxStart|ajaxStop|ajaxSend|ajaxComplete|ajaxError|ajaxSuccess",C=RegExp("\\b(?:"+S+")\\b"),H=/(?:^|\s)hover(\.\S+|)\b/,A=function(t){return"string"!=typeof t||e.event.special.hover?t:(H.test(t)&&r("'hover' pseudo-event is deprecated, use 'mouseenter mouseleave'"),t&&t.replace(H,"mouseenter$1 mouseleave$1"))};e.event.props&&"attrChange"!==e.event.props[0]&&e.event.props.unshift("attrChange","attrName","relatedNode","srcElement"),e.event.dispatch&&a(e.event,"handle",e.event.dispatch,"jQuery.event.handle is undocumented and deprecated"),e.event.add=function(e,t,n,a,i){e!==document&&C.test(t)&&r("AJAX events should be attached to document: "+t),Q.call(this,e,A(t||""),n,a,i)},e.event.remove=function(e,t,n,r,a){x.call(this,e,A(t)||"",n,r,a)},e.fn.error=function(){var e=Array.prototype.slice.call(arguments,0);return r("jQuery.fn.error() is deprecated"),e.splice(0,0,"error"),arguments.length?this.bind.apply(this,e):(this.triggerHandler.apply(this,e),this)},e.fn.toggle=function(t,n){if(!e.isFunction(t)||!e.isFunction(n))return N.apply(this,arguments);r("jQuery.fn.toggle(handler, handler...) is deprecated");var a=arguments,i=t.guid||e.guid++,o=0,s=function(n){var r=(e._data(this,"lastToggle"+t.guid)||0)%o;return e._data(this,"lastToggle"+t.guid,r+1),n.preventDefault(),a[r].apply(this,arguments)||!1};for(s.guid=i;a.length>o;)a[o++].guid=i;return this.click(s)},e.fn.live=function(t,n,a){return r("jQuery.fn.live() is deprecated"),T?T.apply(this,arguments):(e(this.context).on(t,this.selector,n,a),this)},e.fn.die=function(t,n){return r("jQuery.fn.die() is deprecated"),M?M.apply(this,arguments):(e(this.context).off(t,this.selector||"**",n),this)},e.event.trigger=function(e,t,n,a){return n||C.test(e)||r("Global events are undocumented and deprecated"),k.call(this,e,t,n||document,a)},e.each(S.split("|"),function(t,n){e.event.special[n]={setup:function(){var t=this;return t!==document&&(e.event.add(document,n+"."+e.guid,function(){e.event.trigger(n,null,t,!0)}),e._data(this,n,e.guid++)),!1},teardown:function(){return this!==document&&e.event.remove(document,n+"."+e._data(this,n)),!1}}})}(jQuery,window);
/**
 * Ajax Queue Plugin
 * 
 * Homepage: http://jquery.com/plugins/project/ajaxqueue
 * Documentation: http://docs.jquery.com/AjaxQueue
 */

/**

<script>
$(function(){
	jQuery.ajaxQueue({
		url: "test.php",
		success: function(html){ jQuery("ul").append(html); }
	});
	jQuery.ajaxQueue({
		url: "test.php",
		success: function(html){ jQuery("ul").append(html); }
	});
	jQuery.ajaxSync({
		url: "test.php",
		success: function(html){ jQuery("ul").append("<b>"+html+"</b>"); }
	});
	jQuery.ajaxSync({
		url: "test.php",
		success: function(html){ jQuery("ul").append("<b>"+html+"</b>"); }
	});
});
</script>
<ul style="position: absolute; top: 5px; right: 5px;"></ul>

 */
/*
 * Queued Ajax requests.
 * A new Ajax request won't be started until the previous queued 
 * request has finished.
 */

/*
 * Synced Ajax requests.
 * The Ajax request will happen as soon as you call this method, but
 * the callbacks (success/error/complete) won't fire until all previous
 * synced requests have been completed.
 */


(function($) {
	
	var ajax = $.ajax;
	
	var pendingRequests = {};
	
	var synced = [];
	var syncedData = [];
	
	$.ajax = function(settings) {
		// create settings for compatibility with ajaxSetup
		settings = jQuery.extend(settings, jQuery.extend({}, jQuery.ajaxSettings, settings));
		
		var port = settings.port;
		
		switch(settings.mode) {
		case "abort": 
			if ( pendingRequests[port] ) {
				pendingRequests[port].abort();
			}
			return pendingRequests[port] = ajax.apply(this, arguments);
		case "queue": 
			var _old = settings.complete;
			settings.complete = function(){
				if ( _old )
					_old.apply( this, arguments );
				jQuery([ajax]).dequeue("ajax" + port );;
			};
		
			jQuery([ ajax ]).queue("ajax" + port, function(){
				ajax( settings );
			});
			return;
		case "sync":
			var pos = synced.length;
	
			synced[ pos ] = {
				error: settings.error,
				success: settings.success,
				complete: settings.complete,
				done: false
			};
		
			syncedData[ pos ] = {
				error: [],
				success: [],
				complete: []
			};
		
			settings.error = function(){ syncedData[ pos ].error = arguments; };
			settings.success = function(){ syncedData[ pos ].success = arguments; };
			settings.complete = function(){
				syncedData[ pos ].complete = arguments;
				synced[ pos ].done = true;
		
				if ( pos == 0 || !synced[ pos-1 ] )
					for ( var i = pos; i < synced.length && synced[i].done; i++ ) {
						if ( synced[i].error ) synced[i].error.apply( jQuery, syncedData[i].error );
						if ( synced[i].success ) synced[i].success.apply( jQuery, syncedData[i].success );
						if ( synced[i].complete ) synced[i].complete.apply( jQuery, syncedData[i].complete );
		
						synced[i] = null;
						syncedData[i] = null;
					}
			};
		}
		return ajax.apply(this, arguments);
	};
	
})(jQuery);;(function($){
/**
 * jqGrid English Translation
 * Tony Tomov tony@trirand.com
 * http://trirand.com/blog/ 
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
**/
$.jgrid = $.jgrid || {};
$.extend($.jgrid,{
	defaults : {
		recordtext: "View {0} - {1} of {2}",
		emptyrecords: "No records to view",
		loadtext: "Loading...",
		pgtext : "Page {0} of {1}"
	},
	search : {
		caption: "Search...",
		Find: "Find",
		Reset: "Reset",
		odata : ['equal', 'not equal', 'less', 'less or equal','greater','greater or equal', 'begins with','does not begin with','is in','is not in','ends with','does not end with','contains','does not contain'],
		groupOps: [	{ op: "AND", text: "all" },	{ op: "OR",  text: "any" }	],
		matchText: " match",
		rulesText: " rules"
	},
	edit : {
		addCaption: "Add Record",
		editCaption: "Edit Record",
		bSubmit: "Submit",
		bCancel: "Cancel",
		bClose: "Close",
		saveData: "Data has been changed! Save changes?",
		bYes : "Yes",
		bNo : "No",
		bExit : "Cancel",
		msg: {
			required:"Field is required",
			number:"Please, enter valid number",
			minValue:"value must be greater than or equal to ",
			maxValue:"value must be less than or equal to",
			email: "is not a valid e-mail",
			integer: "Please, enter valid integer value",
			date: "Please, enter valid date value",
			url: "is not a valid URL. Prefix required ('http://' or 'https://')",
			nodefined : " is not defined!",
			novalue : " return value is required!",
			customarray : "Custom function should return array!",
			customfcheck : "Custom function should be present in case of custom checking!"
			
		}
	},
	view : {
		caption: "View Record",
		bClose: "Close"
	},
	del : {
		caption: "Delete",
		msg: "Delete selected record(s)?",
		bSubmit: "Delete",
		bCancel: "Cancel"
	},
	nav : {
		edittext: "",
		edittitle: "Edit selected row",
		addtext:"",
		addtitle: "Add new row",
		deltext: "",
		deltitle: "Delete selected row",
		searchtext: "",
		searchtitle: "Find records",
		refreshtext: "",
		refreshtitle: "Reload Grid",
		alertcap: "Warning",
		alerttext: "Please, select row",
		viewtext: "",
		viewtitle: "View selected row"
	},
	col : {
		caption: "Select columns",
		bSubmit: "Ok",
		bCancel: "Cancel"
	},
	errors : {
		errcap : "Error",
		nourl : "No url is set",
		norecords: "No records to process",
		model : "Length of colNames <> colModel!"
	},
	formatter : {
		integer : {thousandsSeparator: ",", defaultValue: '0'},
		number : {decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, defaultValue: '0.00'},
		currency : {decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "", suffix:"", defaultValue: '0.00'},
		date : {
			dayNames:   [
				"Sun", "Mon", "Tue", "Wed", "Thr", "Fri", "Sat",
				"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
			],
			monthNames: [
				"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
				"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
			],
			AmPm : ["am","pm","AM","PM"],
			S: function (j) {return j < 11 || j > 13 ? ['st', 'nd', 'rd', 'th'][Math.min((j - 1) % 10, 3)] : 'th';},
			srcformat: 'Y-m-d',
			newformat: 'n/j/Y',
			masks : {
				// see http://php.net/manual/en/function.date.php for PHP format used in jqGrid
				// and see http://docs.jquery.com/UI/Datepicker/formatDate
				// and https://github.com/jquery/globalize#dates for alternative formats used frequently
				// one can find on https://github.com/jquery/globalize/tree/master/lib/cultures many
				// information about date, time, numbers and currency formats used in different countries
				// one should just convert the information in PHP format
				ISO8601Long:"Y-m-d H:i:s",
				ISO8601Short:"Y-m-d",
				// short date:
				//    n - Numeric representation of a month, without leading zeros
				//    j - Day of the month without leading zeros
				//    Y - A full numeric representation of a year, 4 digits
				// example: 3/1/2012 which means 1 March 2012
				ShortDate: "n/j/Y", // in jQuery UI Datepicker: "M/d/yyyy"
				// long date:
				//    l - A full textual representation of the day of the week
				//    F - A full textual representation of a month
				//    d - Day of the month, 2 digits with leading zeros
				//    Y - A full numeric representation of a year, 4 digits
				LongDate: "l, F d, Y", // in jQuery UI Datepicker: "dddd, MMMM dd, yyyy"
				// long date with long time:
				//    l - A full textual representation of the day of the week
				//    F - A full textual representation of a month
				//    d - Day of the month, 2 digits with leading zeros
				//    Y - A full numeric representation of a year, 4 digits
				//    g - 12-hour format of an hour without leading zeros
				//    i - Minutes with leading zeros
				//    s - Seconds, with leading zeros
				//    A - Uppercase Ante meridiem and Post meridiem (AM or PM)
				FullDateTime: "l, F d, Y g:i:s A", // in jQuery UI Datepicker: "dddd, MMMM dd, yyyy h:mm:ss tt"
				// month day:
				//    F - A full textual representation of a month
				//    d - Day of the month, 2 digits with leading zeros
				MonthDay: "F d", // in jQuery UI Datepicker: "MMMM dd"
				// short time (without seconds)
				//    g - 12-hour format of an hour without leading zeros
				//    i - Minutes with leading zeros
				//    A - Uppercase Ante meridiem and Post meridiem (AM or PM)
				ShortTime: "g:i A", // in jQuery UI Datepicker: "h:mm tt"
				// long time (with seconds)
				//    g - 12-hour format of an hour without leading zeros
				//    i - Minutes with leading zeros
				//    s - Seconds, with leading zeros
				//    A - Uppercase Ante meridiem and Post meridiem (AM or PM)
				LongTime: "g:i:s A", // in jQuery UI Datepicker: "h:mm:ss tt"
				SortableDateTime: "Y-m-d\\TH:i:s",
				UniversalSortableDateTime: "Y-m-d H:i:sO",
				// month with year
				//    Y - A full numeric representation of a year, 4 digits
				//    F - A full textual representation of a month
				YearMonth: "F, Y" // in jQuery UI Datepicker: "MMMM, yyyy"
			},
			reformatAfterEdit : false
		},
		baseLinkUrl: '',
		showAction: '',
		target: '',
		checkbox : {disabled:true},
		idName : 'id'
	}
});
})(jQuery);
/* 
* jqGrid  4.4.4 - jQuery Grid 
* Copyright (c) 2008, Tony Tomov, tony@trirand.com 
* Dual licensed under the MIT and GPL licenses 
* http://www.opensource.org/licenses/mit-license.php 
* http://www.gnu.org/licenses/gpl-2.0.html 
* Date:2013-01-30 
* Modules: grid.base.js; jquery.fmatter.js; grid.custom.js; grid.common.js; grid.formedit.js; grid.filter.js; grid.inlinedit.js; grid.celledit.js; jqModal.js; jqDnR.js; grid.subgrid.js; grid.grouping.js; grid.treegrid.js; grid.import.js; JsonXml.js; grid.tbltogrid.js; grid.jqueryui.js; 
*/
(function(b){b.jgrid=b.jgrid||{};b.extend(b.jgrid,{version:"4.4.4",htmlDecode:function(b){return b&&("&nbsp;"==b||"&#160;"==b||1===b.length&&160===b.charCodeAt(0))?"":!b?b:(""+b).replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/&quot;/g,'"').replace(/&amp;/g,"&")},htmlEncode:function(b){return!b?b:(""+b).replace(/&/g,"&amp;").replace(/\"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;")},format:function(f){var d=b.makeArray(arguments).slice(1);null==f&&(f="");return f.replace(/\{(\d+)\}/g,function(b,
e){return d[e]})},msie:"Microsoft Internet Explorer"==navigator.appName,msiever:function(){var b=-1;null!=/MSIE ([0-9]{1,}[.0-9]{0,})/.exec(navigator.userAgent)&&(b=parseFloat(RegExp.$1));return b},getCellIndex:function(f){f=b(f);if(f.is("tr"))return-1;f=(!f.is("td")&&!f.is("th")?f.closest("td,th"):f)[0];return b.jgrid.msie?b.inArray(f,f.parentNode.cells):f.cellIndex},stripHtml:function(b){var b=""+b,d=/<("[^"]*"|'[^']*'|[^'">])*>/gi;return b?(b=b.replace(d,""))&&"&nbsp;"!==b&&"&#160;"!==b?b.replace(/\"/g,
"'"):"":b},stripPref:function(f,d){var c=b.type(f);if("string"==c||"number"==c)f=""+f,d=""!==f?(""+d).replace(""+f,""):d;return d},stringToDoc:function(b){var d;if("string"!==typeof b)return b;try{d=(new DOMParser).parseFromString(b,"text/xml")}catch(c){d=new ActiveXObject("Microsoft.XMLDOM"),d.async=!1,d.loadXML(b)}return d&&d.documentElement&&"parsererror"!=d.documentElement.tagName?d:null},parse:function(f){"while(1);"==f.substr(0,9)&&(f=f.substr(9));"/*"==f.substr(0,2)&&(f=f.substr(2,f.length-
4));f||(f="{}");return!0===b.jgrid.useJSON&&"object"===typeof JSON&&"function"===typeof JSON.parse?JSON.parse(f):eval("("+f+")")},parseDate:function(f,d){var c={m:1,d:1,y:1970,h:0,i:0,s:0,u:0},e,a,i;e=/[\\\/:_;.,\t\T\s-]/;if(d&&null!=d){d=b.trim(d);d=d.split(e);void 0!==b.jgrid.formatter.date.masks[f]&&(f=b.jgrid.formatter.date.masks[f]);var f=f.split(e),h=b.jgrid.formatter.date.monthNames,g=b.jgrid.formatter.date.AmPm,j=function(a,b){0===a?12===b&&(b=0):12!==b&&(b+=12);return b};e=0;for(a=f.length;e<
a;e++)"M"==f[e]&&(i=b.inArray(d[e],h),-1!==i&&12>i&&(d[e]=i+1,c.m=d[e])),"F"==f[e]&&(i=b.inArray(d[e],h),-1!==i&&11<i&&(d[e]=i+1-12,c.m=d[e])),"a"==f[e]&&(i=b.inArray(d[e],g),-1!==i&&2>i&&d[e]==g[i]&&(d[e]=i,c.h=j(d[e],c.h))),"A"==f[e]&&(i=b.inArray(d[e],g),-1!==i&&1<i&&d[e]==g[i]&&(d[e]=i-2,c.h=j(d[e],c.h))),"g"===f[e]&&(c.h=parseInt(d[e],10)),void 0!==d[e]&&(c[f[e].toLowerCase()]=parseInt(d[e],10));c.m=parseInt(c.m,10)-1;e=c.y;70<=e&&99>=e?c.y=1900+c.y:0<=e&&69>=e&&(c.y=2E3+c.y);void 0!==c.j&&(c.d=
c.j);void 0!==c.n&&(c.m=parseInt(c.n,10)-1)}return new Date(c.y,c.m,c.d,c.h,c.i,c.s,c.u)},jqID:function(b){return(""+b).replace(/[!"#$%&'()*+,.\/:; <=>?@\[\\\]\^`{|}~]/g,"\\$&")},guid:1,uidPref:"jqg",randId:function(f){return(f||b.jgrid.uidPref)+b.jgrid.guid++},getAccessor:function(b,d){var c,e,a=[],i;if("function"===typeof d)return d(b);c=b[d];if(void 0===c)try{if("string"===typeof d&&(a=d.split(".")),i=a.length)for(c=b;c&&i--;)e=a.shift(),c=c[e]}catch(h){}return c},getXmlData:function(f,d,c){var e=
"string"===typeof d?d.match(/^(.*)\[(\w+)\]$/):null;if("function"===typeof d)return d(f);if(e&&e[2])return e[1]?b(e[1],f).attr(e[2]):b(f).attr(e[2]);f=b(d,f);return c?f:0<f.length?b(f).text():void 0},cellWidth:function(){var f=b("<div class='ui-jqgrid' style='left:10000px'><table class='ui-jqgrid-btable' style='width:5px;'><tr class='jqgrow'><td style='width:5px;'></td></tr></table></div>"),d=f.appendTo("body").find("td").width();f.remove();return 5!==d},cell_width:!0,ajaxOptions:{},from:function(f){return new function(d,
c){"string"===typeof d&&(d=b.data(d));var e=this,a=d,i=!0,f=!1,g=c,j=/[\$,%]/g,k=null,l=null,n=0,s=!1,m="",v=[],E=!0;if("object"===typeof d&&d.push)0<d.length&&(E="object"!==typeof d[0]?!1:!0);else throw"data provides is not an array";this._hasData=function(){return null===a?!1:0===a.length?!1:!0};this._getStr=function(a){var b=[];f&&b.push("jQuery.trim(");b.push("String("+a+")");f&&b.push(")");i||b.push(".toLowerCase()");return b.join("")};this._strComp=function(a){return"string"===typeof a?".toString()":
""};this._group=function(a,b){return{field:a.toString(),unique:b,items:[]}};this._toStr=function(a){f&&(a=b.trim(a));a=a.toString().replace(/\\/g,"\\\\").replace(/\"/g,'\\"');return i?a:a.toLowerCase()};this._funcLoop=function(e){var c=[];b.each(a,function(a,b){c.push(e(b))});return c};this._append=function(a){var b;g=null===g?"":g+(""===m?" && ":m);for(b=0;b<n;b++)g+="(";s&&(g+="!");g+="("+a+")";s=!1;m="";n=0};this._setCommand=function(a,b){k=a;l=b};this._resetNegate=function(){s=!1};this._repeatCommand=
function(a,b){return null===k?e:null!==a&&null!==b?k(a,b):null===l||!E?k(a):k(l,a)};this._equals=function(a,b){return 0===e._compare(a,b,1)};this._compare=function(a,b,e){var c=Object.prototype.toString;void 0===e&&(e=1);void 0===a&&(a=null);void 0===b&&(b=null);if(null===a&&null===b)return 0;if(null===a&&null!==b)return 1;if(null!==a&&null===b)return-1;if("[object Date]"===c.call(a)&&"[object Date]"===c.call(b))return a<b?-e:a>b?e:0;!i&&"number"!==typeof a&&"number"!==typeof b&&(a=""+a,b=""+b);return a<
b?-e:a>b?e:0};this._performSort=function(){0!==v.length&&(a=e._doSort(a,0))};this._doSort=function(a,b){var c=v[b].by,f=v[b].dir,i=v[b].type,d=v[b].datefmt;if(b==v.length-1)return e._getOrder(a,c,f,i,d);b++;for(var c=e._getGroup(a,c,f,i,d),f=[],h,i=0;i<c.length;i++){h=e._doSort(c[i].items,b);for(d=0;d<h.length;d++)f.push(h[d])}return f};this._getOrder=function(a,c,f,d,h){var g=[],k=[],l="a"==f?1:-1,n,s;void 0===d&&(d="text");s="float"==d||"number"==d||"currency"==d||"numeric"==d?function(a){a=parseFloat((""+
a).replace(j,""));return isNaN(a)?0:a}:"int"==d||"integer"==d?function(a){return a?parseFloat((""+a).replace(j,"")):0}:"date"==d||"datetime"==d?function(a){return b.jgrid.parseDate(h,a).getTime()}:b.isFunction(d)?d:function(a){a=a?b.trim(""+a):"";return i?a:a.toLowerCase()};b.each(a,function(a,e){n=""!==c?b.jgrid.getAccessor(e,c):e;void 0===n&&(n="");n=s(n,e);k.push({vSort:n,index:a})});k.sort(function(a,b){a=a.vSort;b=b.vSort;return e._compare(a,b,l)});for(var d=0,m=a.length;d<m;)f=k[d].index,g.push(a[f]),
d++;return g};this._getGroup=function(a,c,d,f,i){var h=[],g=null,j=null,k;b.each(e._getOrder(a,c,d,f,i),function(a,d){k=b.jgrid.getAccessor(d,c);null==k&&(k="");e._equals(j,k)||(j=k,null!==g&&h.push(g),g=e._group(c,k));g.items.push(d)});null!==g&&h.push(g);return h};this.ignoreCase=function(){i=!1;return e};this.useCase=function(){i=!0;return e};this.trim=function(){f=!0;return e};this.noTrim=function(){f=!1;return e};this.execute=function(){var c=g,d=[];if(null===c)return e;b.each(a,function(){eval(c)&&
d.push(this)});a=d;return e};this.data=function(){return a};this.select=function(c){e._performSort();if(!e._hasData())return[];e.execute();if(b.isFunction(c)){var d=[];b.each(a,function(a,b){d.push(c(b))});return d}return a};this.hasMatch=function(){if(!e._hasData())return!1;e.execute();return 0<a.length};this.andNot=function(a,b,c){s=!s;return e.and(a,b,c)};this.orNot=function(a,b,c){s=!s;return e.or(a,b,c)};this.not=function(a,b,c){return e.andNot(a,b,c)};this.and=function(a,b,c){m=" && ";return void 0===
a?e:e._repeatCommand(a,b,c)};this.or=function(a,b,c){m=" || ";return void 0===a?e:e._repeatCommand(a,b,c)};this.orBegin=function(){n++;return e};this.orEnd=function(){null!==g&&(g+=")");return e};this.isNot=function(a){s=!s;return e.is(a)};this.is=function(a){e._append("this."+a);e._resetNegate();return e};this._compareValues=function(a,c,d,f,i){var h;h=E?"jQuery.jgrid.getAccessor(this,'"+c+"')":"this";void 0===d&&(d=null);var g=d,k=void 0===i.stype?"text":i.stype;if(null!==d)switch(k){case "int":case "integer":g=
isNaN(Number(g))||""===g?"0":g;h="parseInt("+h+",10)";g="parseInt("+g+",10)";break;case "float":case "number":case "numeric":g=(""+g).replace(j,"");g=isNaN(Number(g))||""===g?"0":g;h="parseFloat("+h+")";g="parseFloat("+g+")";break;case "date":case "datetime":g=""+b.jgrid.parseDate(i.newfmt||"Y-m-d",g).getTime();h='jQuery.jgrid.parseDate("'+i.srcfmt+'",'+h+").getTime()";break;default:h=e._getStr(h),g=e._getStr('"'+e._toStr(g)+'"')}e._append(h+" "+f+" "+g);e._setCommand(a,c);e._resetNegate();return e};
this.equals=function(a,b,c){return e._compareValues(e.equals,a,b,"==",c)};this.notEquals=function(a,b,c){return e._compareValues(e.equals,a,b,"!==",c)};this.isNull=function(a,b,c){return e._compareValues(e.equals,a,null,"===",c)};this.greater=function(a,b,c){return e._compareValues(e.greater,a,b,">",c)};this.less=function(a,b,c){return e._compareValues(e.less,a,b,"<",c)};this.greaterOrEquals=function(a,b,c){return e._compareValues(e.greaterOrEquals,a,b,">=",c)};this.lessOrEquals=function(a,b,c){return e._compareValues(e.lessOrEquals,
a,b,"<=",c)};this.startsWith=function(a,c){var d=null==c?a:c,d=f?b.trim(d.toString()).length:d.toString().length;E?e._append(e._getStr("jQuery.jgrid.getAccessor(this,'"+a+"')")+".substr(0,"+d+") == "+e._getStr('"'+e._toStr(c)+'"')):(d=f?b.trim(c.toString()).length:c.toString().length,e._append(e._getStr("this")+".substr(0,"+d+") == "+e._getStr('"'+e._toStr(a)+'"')));e._setCommand(e.startsWith,a);e._resetNegate();return e};this.endsWith=function(a,c){var d=null==c?a:c,d=f?b.trim(d.toString()).length:
d.toString().length;E?e._append(e._getStr("jQuery.jgrid.getAccessor(this,'"+a+"')")+".substr("+e._getStr("jQuery.jgrid.getAccessor(this,'"+a+"')")+".length-"+d+","+d+') == "'+e._toStr(c)+'"'):e._append(e._getStr("this")+".substr("+e._getStr("this")+'.length-"'+e._toStr(a)+'".length,"'+e._toStr(a)+'".length) == "'+e._toStr(a)+'"');e._setCommand(e.endsWith,a);e._resetNegate();return e};this.contains=function(a,b){E?e._append(e._getStr("jQuery.jgrid.getAccessor(this,'"+a+"')")+'.indexOf("'+e._toStr(b)+
'",0) > -1'):e._append(e._getStr("this")+'.indexOf("'+e._toStr(a)+'",0) > -1');e._setCommand(e.contains,a);e._resetNegate();return e};this.groupBy=function(b,c,d,f){return!e._hasData()?null:e._getGroup(a,b,c,d,f)};this.orderBy=function(a,c,d,f){c=null==c?"a":b.trim(c.toString().toLowerCase());null==d&&(d="text");null==f&&(f="Y-m-d");if("desc"==c||"descending"==c)c="d";if("asc"==c||"ascending"==c)c="a";v.push({by:a,dir:c,type:d,datefmt:f});return e};return e}(f,null)},getMethod:function(f){return this.getAccessor(b.fn.jqGrid,
f)},extend:function(f){b.extend(b.fn.jqGrid,f);this.no_legacy_api||b.fn.extend(f)}});b.fn.jqGrid=function(f){if("string"===typeof f){var d=b.jgrid.getMethod(f);if(!d)throw"jqGrid - No such method: "+f;var c=b.makeArray(arguments).slice(1);return d.apply(this,c)}return this.each(function(){if(!this.grid){var e=b.extend(!0,{url:"",height:150,page:1,rowNum:20,rowTotal:null,records:0,pager:"",pgbuttons:!0,pginput:!0,colModel:[],rowList:[],colNames:[],sortorder:"asc",sortname:"",datatype:"xml",mtype:"GET",
altRows:!1,selarrrow:[],savedRow:[],shrinkToFit:!0,xmlReader:{},jsonReader:{},subGrid:!1,subGridModel:[],reccount:0,lastpage:0,lastsort:0,selrow:null,beforeSelectRow:null,onSelectRow:null,onSortCol:null,ondblClickRow:null,onRightClickRow:null,onPaging:null,onSelectAll:null,onInitGrid:null,loadComplete:null,gridComplete:null,loadError:null,loadBeforeSend:null,afterInsertRow:null,beforeRequest:null,beforeProcessing:null,onHeaderClick:null,viewrecords:!1,loadonce:!1,multiselect:!1,multikey:!1,editurl:null,
search:!1,caption:"",hidegrid:!0,hiddengrid:!1,postData:{},userData:{},treeGrid:!1,treeGridModel:"nested",treeReader:{},treeANode:-1,ExpandColumn:null,tree_root_level:0,prmNames:{page:"page",rows:"rows",sort:"sidx",order:"sord",search:"_search",nd:"nd",id:"id",oper:"oper",editoper:"edit",addoper:"add",deloper:"del",subgridid:"id",npage:null,totalrows:"totalrows"},forceFit:!1,gridstate:"visible",cellEdit:!1,cellsubmit:"remote",nv:0,loadui:"enable",toolbar:[!1,""],scroll:!1,multiboxonly:!1,deselectAfterSort:!0,
scrollrows:!1,autowidth:!1,scrollOffset:18,cellLayout:5,subGridWidth:20,multiselectWidth:20,gridview:!1,rownumWidth:25,rownumbers:!1,pagerpos:"center",recordpos:"right",footerrow:!1,userDataOnFooter:!1,hoverrows:!0,altclass:"ui-priority-secondary",viewsortcols:[!1,"vertical",!0],resizeclass:"",autoencode:!1,remapColumns:[],ajaxGridOptions:{},direction:"ltr",toppager:!1,headertitles:!1,scrollTimeout:40,data:[],_index:{},grouping:!1,groupingView:{groupField:[],groupOrder:[],groupText:[],groupColumnShow:[],
groupSummary:[],showSummaryOnHide:!1,sortitems:[],sortnames:[],summary:[],summaryval:[],plusicon:"ui-icon-circlesmall-plus",minusicon:"ui-icon-circlesmall-minus",displayField:[]},ignoreCase:!1,cmTemplate:{},idPrefix:""},b.jgrid.defaults,f||{}),a=this,c={headers:[],cols:[],footers:[],dragStart:function(c,d,f){this.resizing={idx:c,startX:d.clientX,sOL:f[0]};this.hDiv.style.cursor="col-resize";this.curGbox=b("#rs_m"+b.jgrid.jqID(e.id),"#gbox_"+b.jgrid.jqID(e.id));this.curGbox.css({display:"block",left:f[0],
top:f[1],height:f[2]});b(a).triggerHandler("jqGridResizeStart",[d,c]);b.isFunction(e.resizeStart)&&e.resizeStart.call(this,d,c);document.onselectstart=function(){return!1}},dragMove:function(a){if(this.resizing){var b=a.clientX-this.resizing.startX,a=this.headers[this.resizing.idx],c="ltr"===e.direction?a.width+b:a.width-b,d;33<c&&(this.curGbox.css({left:this.resizing.sOL+b}),!0===e.forceFit?(d=this.headers[this.resizing.idx+e.nv],b="ltr"===e.direction?d.width-b:d.width+b,33<b&&(a.newWidth=c,d.newWidth=
b)):(this.newWidth="ltr"===e.direction?e.tblwidth+b:e.tblwidth-b,a.newWidth=c))}},dragEnd:function(){this.hDiv.style.cursor="default";if(this.resizing){var c=this.resizing.idx,d=this.headers[c].newWidth||this.headers[c].width,d=parseInt(d,10);this.resizing=!1;b("#rs_m"+b.jgrid.jqID(e.id)).css("display","none");e.colModel[c].width=d;this.headers[c].width=d;this.headers[c].el.style.width=d+"px";this.cols[c].style.width=d+"px";0<this.footers.length&&(this.footers[c].style.width=d+"px");!0===e.forceFit?
(d=this.headers[c+e.nv].newWidth||this.headers[c+e.nv].width,this.headers[c+e.nv].width=d,this.headers[c+e.nv].el.style.width=d+"px",this.cols[c+e.nv].style.width=d+"px",0<this.footers.length&&(this.footers[c+e.nv].style.width=d+"px"),e.colModel[c+e.nv].width=d):(e.tblwidth=this.newWidth||e.tblwidth,b("table:first",this.bDiv).css("width",e.tblwidth+"px"),b("table:first",this.hDiv).css("width",e.tblwidth+"px"),this.hDiv.scrollLeft=this.bDiv.scrollLeft,e.footerrow&&(b("table:first",this.sDiv).css("width",
e.tblwidth+"px"),this.sDiv.scrollLeft=this.bDiv.scrollLeft));b(a).triggerHandler("jqGridResizeStop",[d,c]);b.isFunction(e.resizeStop)&&e.resizeStop.call(this,d,c)}this.curGbox=null;document.onselectstart=function(){return!0}},populateVisible:function(){c.timer&&clearTimeout(c.timer);c.timer=null;var a=b(c.bDiv).height();if(a){var d=b("table:first",c.bDiv),f,L;if(d[0].rows.length)try{L=(f=d[0].rows[1])?b(f).outerHeight()||c.prevRowHeight:c.prevRowHeight}catch(h){L=c.prevRowHeight}if(L){c.prevRowHeight=
L;var g=e.rowNum;f=c.scrollTop=c.bDiv.scrollTop;var j=Math.round(d.position().top)-f,k=j+d.height();L*=g;var y,F,q;if(k<a&&0>=j&&(void 0===e.lastpage||parseInt((k+f+L-1)/L,10)<=e.lastpage))F=parseInt((a-k+L-1)/L,10),0<=k||2>F||!0===e.scroll?(y=Math.round((k+f)/L)+1,j=-1):j=1;0<j&&(y=parseInt(f/L,10)+1,F=parseInt((f+a)/L,10)+2-y,q=!0);if(F&&(!e.lastpage||!(y>e.lastpage||1==e.lastpage||y===e.page&&y===e.lastpage)))c.hDiv.loading?c.timer=setTimeout(c.populateVisible,e.scrollTimeout):(e.page=y,q&&(c.selectionPreserver(d[0]),
c.emptyRows.call(d[0],!1,!1)),c.populate(F))}}},scrollGrid:function(a){if(e.scroll){var b=c.bDiv.scrollTop;void 0===c.scrollTop&&(c.scrollTop=0);b!=c.scrollTop&&(c.scrollTop=b,c.timer&&clearTimeout(c.timer),c.timer=setTimeout(c.populateVisible,e.scrollTimeout))}c.hDiv.scrollLeft=c.bDiv.scrollLeft;e.footerrow&&(c.sDiv.scrollLeft=c.bDiv.scrollLeft);a&&a.stopPropagation()},selectionPreserver:function(a){var c=a.p,d=c.selrow,e=c.selarrrow?b.makeArray(c.selarrrow):null,f=a.grid.bDiv.scrollLeft,h=function(){var g;
c.selrow=null;c.selarrrow=[];if(c.multiselect&&e&&0<e.length)for(g=0;g<e.length;g++)e[g]!=d&&b(a).jqGrid("setSelection",e[g],!1,null);d&&b(a).jqGrid("setSelection",d,!1,null);a.grid.bDiv.scrollLeft=f;b(a).unbind(".selectionPreserver",h)};b(a).bind("jqGridGridComplete.selectionPreserver",h)}};if("TABLE"!=this.tagName.toUpperCase())alert("Element is not a table");else if(void 0!==document.documentMode&&5>=document.documentMode)alert("Grid can not be used in this ('quirks') mode!");else{b(this).empty().attr("tabindex",
"0");this.p=e;this.p.useProp=!!b.fn.prop;var d,g;if(0===this.p.colNames.length)for(d=0;d<this.p.colModel.length;d++)this.p.colNames[d]=this.p.colModel[d].label||this.p.colModel[d].name;if(this.p.colNames.length!==this.p.colModel.length)alert(b.jgrid.errors.model);else{var j=b("<div class='ui-jqgrid-view'></div>"),k=b.jgrid.msie;a.p.direction=b.trim(a.p.direction.toLowerCase());-1==b.inArray(a.p.direction,["ltr","rtl"])&&(a.p.direction="ltr");g=a.p.direction;b(j).insertBefore(this);b(this).removeClass("scroll").appendTo(j);
var l=b("<div class='ui-jqgrid ui-widget ui-widget-content ui-corner-all'></div>");b(l).attr({id:"gbox_"+this.id,dir:g}).insertBefore(j);b(j).attr("id","gview_"+this.id).appendTo(l);b("<div class='ui-widget-overlay jqgrid-overlay' id='lui_"+this.id+"'></div>").insertBefore(j);b("<div class='loading ui-state-default ui-state-active' id='load_"+this.id+"'>"+this.p.loadtext+"</div>").insertBefore(j);b(this).attr({cellspacing:"0",cellpadding:"0",border:"0",role:"grid","aria-multiselectable":!!this.p.multiselect,
"aria-labelledby":"gbox_"+this.id});var n=function(a,b){a=parseInt(a,10);return isNaN(a)?b||0:a},s=function(d,e,f,h,g,j){var P=a.p.colModel[d],k=P.align,y='style="',F=P.classes,q=P.name,o=[];k&&(y=y+("text-align:"+k+";"));P.hidden===true&&(y=y+"display:none;");if(e===0)y=y+("width: "+c.headers[d].width+"px;");else if(P.cellattr&&b.isFunction(P.cellattr))if((d=P.cellattr.call(a,g,f,h,P,j))&&typeof d==="string"){d=d.replace(/style/i,"style").replace(/title/i,"title");if(d.indexOf("title")>-1)P.title=
false;d.indexOf("class")>-1&&(F=void 0);o=d.split("style");if(o.length===2){o[1]=b.trim(o[1].replace("=",""));if(o[1].indexOf("'")===0||o[1].indexOf('"')===0)o[1]=o[1].substring(1);y=y+o[1].replace(/'/gi,'"')}else y=y+'"'}if(!o.length){o[0]="";y=y+'"'}y=y+((F!==void 0?' class="'+F+'"':"")+(P.title&&f?' title="'+b.jgrid.stripHtml(f)+'"':""));y=y+(' aria-describedby="'+a.p.id+"_"+q+'"');return y+o[0]},m=function(c){return c==null||c===""?"&#160;":a.p.autoencode?b.jgrid.htmlEncode(c):""+c},v=function(c,
d,e,f,h){var g=a.p.colModel[e];if(g.formatter!==void 0){c=""+a.p.idPrefix!==""?b.jgrid.stripPref(a.p.idPrefix,c):c;c={rowId:c,colModel:g,gid:a.p.id,pos:e};d=b.isFunction(g.formatter)?g.formatter.call(a,d,c,f,h):b.fmatter?b.fn.fmatter.call(a,g.formatter,d,c,f,h):m(d)}else d=m(d);return d},E=function(a,b,c,d,e,f){b=v(a,b,c,e,"add");return'<td role="gridcell" '+s(c,d,b,e,a,f)+">"+b+"</td>"},T=function(b,c,d,e){e='<input role="checkbox" type="checkbox" id="jqg_'+a.p.id+"_"+b+'" class="cbox" name="jqg_'+
a.p.id+"_"+b+'"'+(e?'checked="checked"':"")+"/>";return'<td role="gridcell" '+s(c,d,"",null,b,true)+">"+e+"</td>"},K=function(a,b,c,d){c=(parseInt(c,10)-1)*parseInt(d,10)+1+b;return'<td role="gridcell" class="ui-state-default jqgrid-rownum" '+s(a,b,c,null,b,true)+">"+c+"</td>"},aa=function(b){var c,d=[],e=0,f;for(f=0;f<a.p.colModel.length;f++){c=a.p.colModel[f];if(c.name!=="cb"&&c.name!=="subgrid"&&c.name!=="rn"){d[e]=b=="local"?c.name:b=="xml"||b==="xmlstring"?c.xmlmap||c.name:c.jsonmap||c.name;
e++}}return d},U=function(c){var d=a.p.remapColumns;if(!d||!d.length)d=b.map(a.p.colModel,function(a,b){return b});c&&(d=b.map(d,function(a){return a<c?null:a-c}));return d},W=function(a,c){var d;if(this.p.deepempty)b(this.rows).slice(1).remove();else{d=this.rows.length>0?this.rows[0]:null;b(this.firstChild).empty().append(d)}if(a&&this.p.scroll){b(this.grid.bDiv.firstChild).css({height:"auto"});b(this.grid.bDiv.firstChild.firstChild).css({height:0,display:"none"});if(this.grid.bDiv.scrollTop!==0)this.grid.bDiv.scrollTop=
0}if(c===true&&this.p.treeGrid){this.p.data=[];this.p._index={}}},M=function(){var c=a.p.data.length,d,e,f;d=a.p.rownumbers===true?1:0;e=a.p.multiselect===true?1:0;f=a.p.subGrid===true?1:0;d=a.p.keyIndex===false||a.p.loadonce===true?a.p.localReader.id:a.p.colModel[a.p.keyIndex+e+f+d].name;for(e=0;e<c;e++){f=b.jgrid.getAccessor(a.p.data[e],d);f===void 0&&(f=""+(e+1));a.p._index[f]=e}},X=function(c,d,e,f,g,h){var i="-1",j="",k,d=d?"display:none;":"",e="ui-widget-content jqgrow ui-row-"+a.p.direction+
e+(h?" ui-state-highlight":""),f=b.isFunction(a.p.rowattr)?a.p.rowattr.call(a,f,g):{};if(!b.isEmptyObject(f)){if(f.hasOwnProperty("id")){c=f.id;delete f.id}if(f.hasOwnProperty("tabindex")){i=f.tabindex;delete f.tabindex}if(f.hasOwnProperty("style")){d=d+f.style;delete f.style}if(f.hasOwnProperty("class")){e=e+(" "+f["class"]);delete f["class"]}try{delete f.role}catch(F){}for(k in f)f.hasOwnProperty(k)&&(j=j+(" "+k+"="+f[k]))}return'<tr role="row" id="'+c+'" tabindex="'+i+'" class="'+e+'"'+(d===""?
"":' style="'+d+'"')+j+">"},H=function(c,d,e,f,g){var h=new Date,i=a.p.datatype!="local"&&a.p.loadonce||a.p.datatype=="xmlstring",j=a.p.xmlReader,k=a.p.datatype=="local"?"local":"xml";if(i){a.p.data=[];a.p._index={};a.p.localReader.id="_id_"}a.p.reccount=0;if(b.isXMLDoc(c)){if(a.p.treeANode===-1&&!a.p.scroll){W.call(a,false,true);e=1}else e=e>1?e:1;var F=b(a),q,o,l=0,u,C=a.p.multiselect===true?1:0,n=0,s,m=a.p.rownumbers===true?1:0,Q,p=[],x,B={},t,w,G=[],v=a.p.altRows===true?" "+a.p.altclass:"",A;
if(a.p.subGrid===true){n=1;s=b.jgrid.getMethod("addSubGridCell")}j.repeatitems||(p=aa(k));Q=a.p.keyIndex===false?b.isFunction(j.id)?j.id.call(a,c):j.id:a.p.keyIndex;if(p.length>0&&!isNaN(Q)){a.p.remapColumns&&a.p.remapColumns.length&&(Q=b.inArray(Q,a.p.remapColumns));Q=p[Q]}k=(""+Q).indexOf("[")===-1?p.length?function(a,c){return b(Q,a).text()||c}:function(a,c){return b(j.cell,a).eq(Q).text()||c}:function(a,b){return a.getAttribute(Q.replace(/[\[\]]/g,""))||b};a.p.userData={};a.p.page=b.jgrid.getXmlData(c,
j.page)||a.p.page||0;a.p.lastpage=b.jgrid.getXmlData(c,j.total);if(a.p.lastpage===void 0)a.p.lastpage=1;a.p.records=b.jgrid.getXmlData(c,j.records)||0;b.isFunction(j.userdata)?a.p.userData=j.userdata.call(a,c)||{}:b.jgrid.getXmlData(c,j.userdata,true).each(function(){a.p.userData[this.getAttribute("name")]=b(this).text()});c=b.jgrid.getXmlData(c,j.root,true);(c=b.jgrid.getXmlData(c,j.row,true))||(c=[]);var R=c.length,r=0,z=[],D=parseInt(a.p.rowNum,10),H=a.p.scroll?b.jgrid.randId():1;if(R>0&&a.p.page<=
0)a.p.page=1;if(c&&R){g&&(D=D*(g+1));var g=b.isFunction(a.p.afterInsertRow),J=false,I;if(a.p.grouping){J=a.p.groupingView.groupCollapse===true;I=b.jgrid.getMethod("groupingPrepare")}for(;r<R;){t=c[r];w=k(t,H+r);w=a.p.idPrefix+w;q=e===0?0:e+1;A=(q+r)%2==1?v:"";var M=G.length;G.push("");m&&G.push(K(0,r,a.p.page,a.p.rowNum));C&&G.push(T(w,m,r,false));n&&G.push(s.call(F,C+m,r+e));if(j.repeatitems){x||(x=U(C+n+m));var N=b.jgrid.getXmlData(t,j.cell,true);b.each(x,function(b){var c=N[this];if(!c)return false;
u=c.textContent||c.text;B[a.p.colModel[b+C+n+m].name]=u;G.push(E(w,u,b+C+n+m,r+e,t,B))})}else for(q=0;q<p.length;q++){u=b.jgrid.getXmlData(t,p[q]);B[a.p.colModel[q+C+n+m].name]=u;G.push(E(w,u,q+C+n+m,r+e,t,B))}G[M]=X(w,J,A,B,t,false);G.push("</tr>");if(a.p.grouping){z=I.call(F,G,z,B,r);G=[]}if(i||a.p.treeGrid===true){B._id_=w;a.p.data.push(B);a.p._index[w]=a.p.data.length-1}if(a.p.gridview===false){b("tbody:first",d).append(G.join(""));F.triggerHandler("jqGridAfterInsertRow",[w,B,t]);g&&a.p.afterInsertRow.call(a,
w,B,t);G=[]}B={};l++;r++;if(l==D)break}}if(a.p.gridview===true){o=a.p.treeANode>-1?a.p.treeANode:0;if(a.p.grouping){F.jqGrid("groupingRender",z,a.p.colModel.length);z=null}else a.p.treeGrid===true&&o>0?b(a.rows[o]).after(G.join("")):b("tbody:first",d).append(G.join(""))}if(a.p.subGrid===true)try{F.jqGrid("addSubGrid",C+m)}catch(S){}a.p.totaltime=new Date-h;if(l>0&&a.p.records===0)a.p.records=R;G=null;if(a.p.treeGrid===true)try{F.jqGrid("setTreeNode",o+1,l+o+1)}catch(V){}if(!a.p.treeGrid&&!a.p.scroll)a.grid.bDiv.scrollTop=
0;a.p.reccount=l;a.p.treeANode=-1;a.p.userDataOnFooter&&F.jqGrid("footerData","set",a.p.userData,true);if(i){a.p.records=R;a.p.lastpage=Math.ceil(R/D)}f||a.updatepager(false,true);if(i)for(;l<R;){t=c[l];w=k(t,l+H);w=a.p.idPrefix+w;if(j.repeatitems){x||(x=U(C+n+m));var O=b.jgrid.getXmlData(t,j.cell,true);b.each(x,function(b){var c=O[this];if(!c)return false;u=c.textContent||c.text;B[a.p.colModel[b+C+n+m].name]=u})}else for(q=0;q<p.length;q++){u=b.jgrid.getXmlData(t,p[q]);B[a.p.colModel[q+C+n+m].name]=
u}B._id_=w;a.p.data.push(B);a.p._index[w]=a.p.data.length-1;B={};l++}}},V=function(c,d,e,f,g){d=new Date;if(c){if(a.p.treeANode===-1&&!a.p.scroll){W.call(a,false,true);e=1}else e=e>1?e:1;var h,i,j=a.p.datatype!="local"&&a.p.loadonce||a.p.datatype=="jsonstring";if(j){a.p.data=[];a.p._index={};a.p.localReader.id="_id_"}a.p.reccount=0;if(a.p.datatype=="local"){h=a.p.localReader;i="local"}else{h=a.p.jsonReader;i="json"}var k=b(a),l=0,q,o,n=[],u,C=a.p.multiselect?1:0,m=0,s,p=a.p.rownumbers===true?1:0,
r,v,x={},B,t,w=[],G=a.p.altRows===true?" "+a.p.altclass:"",A;a.p.page=b.jgrid.getAccessor(c,h.page)||a.p.page||0;r=b.jgrid.getAccessor(c,h.total);if(a.p.subGrid===true){m=1;s=b.jgrid.getMethod("addSubGridCell")}a.p.lastpage=r===void 0?1:r;a.p.records=b.jgrid.getAccessor(c,h.records)||0;a.p.userData=b.jgrid.getAccessor(c,h.userdata)||{};h.repeatitems||(u=n=aa(i));i=a.p.keyIndex===false?b.isFunction(h.id)?h.id.call(a,c):h.id:a.p.keyIndex;if(n.length>0&&!isNaN(i)){a.p.remapColumns&&a.p.remapColumns.length&&
(i=b.inArray(i,a.p.remapColumns));i=n[i]}(v=b.jgrid.getAccessor(c,h.root))||(v=[]);r=v.length;c=0;if(r>0&&a.p.page<=0)a.p.page=1;var z=parseInt(a.p.rowNum,10),R=a.p.scroll?b.jgrid.randId():1,D=false,H;g&&(z=z*(g+1));a.p.datatype==="local"&&!a.p.deselectAfterSort&&(D=true);var J=b.isFunction(a.p.afterInsertRow),I=[],M=false,N;if(a.p.grouping){M=a.p.groupingView.groupCollapse===true;N=b.jgrid.getMethod("groupingPrepare")}for(;c<r;){g=v[c];t=b.jgrid.getAccessor(g,i);if(t===void 0){t=R+c;if(n.length===
0&&h.cell){q=b.jgrid.getAccessor(g,h.cell);t=q!==void 0?q[i]||t:t}}t=a.p.idPrefix+t;q=e===1?0:e;A=(q+c)%2==1?G:"";D&&(H=a.p.multiselect?b.inArray(t,a.p.selarrrow)!==-1:t===a.p.selrow);var O=w.length;w.push("");p&&w.push(K(0,c,a.p.page,a.p.rowNum));C&&w.push(T(t,p,c,H));m&&w.push(s.call(k,C+p,c+e));if(h.repeatitems){h.cell&&(g=b.jgrid.getAccessor(g,h.cell));u||(u=U(C+m+p))}for(o=0;o<u.length;o++){q=b.jgrid.getAccessor(g,u[o]);x[a.p.colModel[o+C+m+p].name]=q;w.push(E(t,q,o+C+m+p,c+e,g,x))}w[O]=X(t,
M,A,x,g,H);w.push("</tr>");if(a.p.grouping){I=N.call(k,w,I,x,c);w=[]}if(j||a.p.treeGrid===true){x._id_=t;a.p.data.push(x);a.p._index[t]=a.p.data.length-1}if(a.p.gridview===false){b("#"+b.jgrid.jqID(a.p.id)+" tbody:first").append(w.join(""));k.triggerHandler("jqGridAfterInsertRow",[t,x,g]);J&&a.p.afterInsertRow.call(a,t,x,g);w=[]}x={};l++;c++;if(l==z)break}if(a.p.gridview===true){B=a.p.treeANode>-1?a.p.treeANode:0;a.p.grouping?k.jqGrid("groupingRender",I,a.p.colModel.length):a.p.treeGrid===true&&B>
0?b(a.rows[B]).after(w.join("")):b("#"+b.jgrid.jqID(a.p.id)+" tbody:first").append(w.join(""))}if(a.p.subGrid===true)try{k.jqGrid("addSubGrid",C+p)}catch(S){}a.p.totaltime=new Date-d;if(l>0&&a.p.records===0)a.p.records=r;if(a.p.treeGrid===true)try{k.jqGrid("setTreeNode",B+1,l+B+1)}catch(V){}if(!a.p.treeGrid&&!a.p.scroll)a.grid.bDiv.scrollTop=0;a.p.reccount=l;a.p.treeANode=-1;a.p.userDataOnFooter&&k.jqGrid("footerData","set",a.p.userData,true);if(j){a.p.records=r;a.p.lastpage=Math.ceil(r/z)}f||a.updatepager(false,
true);if(j)for(;l<r&&v[l];){g=v[l];t=b.jgrid.getAccessor(g,i);if(t===void 0){t=R+l;n.length===0&&h.cell&&(t=b.jgrid.getAccessor(g,h.cell)[i]||t)}if(g){t=a.p.idPrefix+t;if(h.repeatitems){h.cell&&(g=b.jgrid.getAccessor(g,h.cell));u||(u=U(C+m+p))}for(o=0;o<u.length;o++){q=b.jgrid.getAccessor(g,u[o]);x[a.p.colModel[o+C+m+p].name]=q}x._id_=t;a.p.data.push(x);a.p._index[t]=a.p.data.length-1;x={}}l++}}},ja=function(){function c(a){var b=0,d,e,g,h,i;if(a.groups!=null){(e=a.groups.length&&a.groupOp.toString().toUpperCase()===
"OR")&&u.orBegin();for(d=0;d<a.groups.length;d++){b>0&&e&&u.or();try{c(a.groups[d])}catch(j){alert(j)}b++}e&&u.orEnd()}if(a.rules!=null)try{(g=a.rules.length&&a.groupOp.toString().toUpperCase()==="OR")&&u.orBegin();for(d=0;d<a.rules.length;d++){i=a.rules[d];h=a.groupOp.toString().toUpperCase();if(n[i.op]&&i.field){b>0&&h&&h==="OR"&&(u=u.or());u=n[i.op](u,h)(i.field,i.data,f[i.field])}b++}g&&u.orEnd()}catch(oa){alert(oa)}}var d,e=false,f={},g=[],h=[],i,j,k;if(b.isArray(a.p.data)){var l=a.p.grouping?
a.p.groupingView:false,q,o;b.each(a.p.colModel,function(){j=this.sorttype||"text";if(j=="date"||j=="datetime"){if(this.formatter&&typeof this.formatter==="string"&&this.formatter=="date"){i=this.formatoptions&&this.formatoptions.srcformat?this.formatoptions.srcformat:b.jgrid.formatter.date.srcformat;k=this.formatoptions&&this.formatoptions.newformat?this.formatoptions.newformat:b.jgrid.formatter.date.newformat}else i=k=this.datefmt||"Y-m-d";f[this.name]={stype:j,srcfmt:i,newfmt:k}}else f[this.name]=
{stype:j,srcfmt:"",newfmt:""};if(a.p.grouping){o=0;for(q=l.groupField.length;o<q;o++)if(this.name==l.groupField[o]){var c=this.name;if(this.index)c=this.index;g[o]=f[c];h[o]=c}}if(!e&&(this.index==a.p.sortname||this.name==a.p.sortname)){d=this.name;e=true}});if(a.p.treeGrid)b(a).jqGrid("SortTree",d,a.p.sortorder,f[d].stype,f[d].srcfmt);else{var n={eq:function(a){return a.equals},ne:function(a){return a.notEquals},lt:function(a){return a.less},le:function(a){return a.lessOrEquals},gt:function(a){return a.greater},
ge:function(a){return a.greaterOrEquals},cn:function(a){return a.contains},nc:function(a,b){return b==="OR"?a.orNot().contains:a.andNot().contains},bw:function(a){return a.startsWith},bn:function(a,b){return b==="OR"?a.orNot().startsWith:a.andNot().startsWith},en:function(a,b){return b==="OR"?a.orNot().endsWith:a.andNot().endsWith},ew:function(a){return a.endsWith},ni:function(a,b){return b==="OR"?a.orNot().equals:a.andNot().equals},"in":function(a){return a.equals},nu:function(a){return a.isNull},
nn:function(a,b){return b==="OR"?a.orNot().isNull:a.andNot().isNull}},u=b.jgrid.from(a.p.data);a.p.ignoreCase&&(u=u.ignoreCase());if(a.p.search===true){var m=a.p.postData.filters;if(m){typeof m==="string"&&(m=b.jgrid.parse(m));c(m)}else try{u=n[a.p.postData.searchOper](u)(a.p.postData.searchField,a.p.postData.searchString,f[a.p.postData.searchField])}catch(p){}}if(a.p.grouping)for(o=0;o<q;o++)u.orderBy(h[o],l.groupOrder[o],g[o].stype,g[o].srcfmt);d&&a.p.sortorder&&e&&(a.p.sortorder.toUpperCase()==
"DESC"?u.orderBy(a.p.sortname,"d",f[d].stype,f[d].srcfmt):u.orderBy(a.p.sortname,"a",f[d].stype,f[d].srcfmt));var m=u.select(),r=parseInt(a.p.rowNum,10),s=m.length,v=parseInt(a.p.page,10),E=Math.ceil(s/r),x={},m=m.slice((v-1)*r,v*r),f=u=null;x[a.p.localReader.total]=E;x[a.p.localReader.page]=v;x[a.p.localReader.records]=s;x[a.p.localReader.root]=m;x[a.p.localReader.userdata]=a.p.userData;m=null;return x}}},ba=function(){a.grid.hDiv.loading=true;if(!a.p.hiddengrid)switch(a.p.loadui){case "enable":b("#load_"+
b.jgrid.jqID(a.p.id)).show();break;case "block":b("#lui_"+b.jgrid.jqID(a.p.id)).show();b("#load_"+b.jgrid.jqID(a.p.id)).show()}},O=function(){a.grid.hDiv.loading=false;switch(a.p.loadui){case "enable":b("#load_"+b.jgrid.jqID(a.p.id)).hide();break;case "block":b("#lui_"+b.jgrid.jqID(a.p.id)).hide();b("#load_"+b.jgrid.jqID(a.p.id)).hide()}},I=function(c){if(!a.grid.hDiv.loading){var d=a.p.scroll&&c===false,e={},f,g=a.p.prmNames;if(a.p.page<=0)a.p.page=1;if(g.search!==null)e[g.search]=a.p.search;g.nd!==
null&&(e[g.nd]=(new Date).getTime());if(g.rows!==null)e[g.rows]=a.p.rowNum;if(g.page!==null)e[g.page]=a.p.page;if(g.sort!==null)e[g.sort]=a.p.sortname;if(g.order!==null)e[g.order]=a.p.sortorder;if(a.p.rowTotal!==null&&g.totalrows!==null)e[g.totalrows]=a.p.rowTotal;var h=b.isFunction(a.p.loadComplete),i=h?a.p.loadComplete:null,j=0,c=c||1;if(c>1)if(g.npage!==null){e[g.npage]=c;j=c-1;c=1}else i=function(b){a.p.page++;a.grid.hDiv.loading=false;h&&a.p.loadComplete.call(a,b);I(c-1)};else g.npage!==null&&
delete a.p.postData[g.npage];if(a.p.grouping){b(a).jqGrid("groupingSetup");var k=a.p.groupingView,l,q="";for(l=0;l<k.groupField.length;l++){var o=k.groupField[l];b.each(a.p.colModel,function(a,b){if(b.name==o&&b.index)o=b.index});q=q+(o+" "+k.groupOrder[l]+", ")}e[g.sort]=q+e[g.sort]}b.extend(a.p.postData,e);var n=!a.p.scroll?1:a.rows.length-1,e=b(a).triggerHandler("jqGridBeforeRequest");if(!(e===false||e==="stop"))if(b.isFunction(a.p.datatype))a.p.datatype.call(a,a.p.postData,"load_"+a.p.id);else{if(b.isFunction(a.p.beforeRequest)){e=
a.p.beforeRequest.call(a);e===void 0&&(e=true);if(e===false)return}f=a.p.datatype.toLowerCase();switch(f){case "json":case "jsonp":case "xml":case "script":b.ajax(b.extend({url:a.p.url,type:a.p.mtype,dataType:f,data:b.isFunction(a.p.serializeGridData)?a.p.serializeGridData.call(a,a.p.postData):a.p.postData,success:function(e,g,h){if(b.isFunction(a.p.beforeProcessing)&&a.p.beforeProcessing.call(a,e,g,h)===false)O();else{f==="xml"?H(e,a.grid.bDiv,n,c>1,j):V(e,a.grid.bDiv,n,c>1,j);b(a).triggerHandler("jqGridLoadComplete",
[e]);i&&i.call(a,e);b(a).triggerHandler("jqGridAfterLoadComplete",[e]);d&&a.grid.populateVisible();if(a.p.loadonce||a.p.treeGrid)a.p.datatype="local";c===1&&O()}},error:function(e,d,f){b.isFunction(a.p.loadError)&&a.p.loadError.call(a,e,d,f);c===1&&O()},beforeSend:function(c,e){var d=true;b.isFunction(a.p.loadBeforeSend)&&(d=a.p.loadBeforeSend.call(a,c,e));d===void 0&&(d=true);if(d===false)return false;ba()}},b.jgrid.ajaxOptions,a.p.ajaxGridOptions));break;case "xmlstring":ba();e=b.jgrid.stringToDoc(a.p.datastr);
H(e,a.grid.bDiv);b(a).triggerHandler("jqGridLoadComplete",[e]);h&&a.p.loadComplete.call(a,e);b(a).triggerHandler("jqGridAfterLoadComplete",[e]);a.p.datatype="local";a.p.datastr=null;O();break;case "jsonstring":ba();e=typeof a.p.datastr==="string"?b.jgrid.parse(a.p.datastr):a.p.datastr;V(e,a.grid.bDiv);b(a).triggerHandler("jqGridLoadComplete",[e]);h&&a.p.loadComplete.call(a,e);b(a).triggerHandler("jqGridAfterLoadComplete",[e]);a.p.datatype="local";a.p.datastr=null;O();break;case "local":case "clientside":ba();
a.p.datatype="local";e=ja();V(e,a.grid.bDiv,n,c>1,j);b(a).triggerHandler("jqGridLoadComplete",[e]);i&&i.call(a,e);b(a).triggerHandler("jqGridAfterLoadComplete",[e]);d&&a.grid.populateVisible();O()}}}},ca=function(c){b("#cb_"+b.jgrid.jqID(a.p.id),a.grid.hDiv)[a.p.useProp?"prop":"attr"]("checked",c);if(a.p.frozenColumns&&a.p.id+"_frozen")b("#cb_"+b.jgrid.jqID(a.p.id),a.grid.fhDiv)[a.p.useProp?"prop":"attr"]("checked",c)},ka=function(c,d){var e="",f="<table cellspacing='0' cellpadding='0' border='0' style='table-layout:auto;' class='ui-pg-table'><tbody><tr>",
h="",i,j,k,l,m=function(c){var d;b.isFunction(a.p.onPaging)&&(d=a.p.onPaging.call(a,c));a.p.selrow=null;if(a.p.multiselect){a.p.selarrrow=[];ca(false)}a.p.savedRow=[];return d=="stop"?false:true},c=c.substr(1),d=d+("_"+c);i="pg_"+c;j=c+"_left";k=c+"_center";l=c+"_right";b("#"+b.jgrid.jqID(c)).append("<div id='"+i+"' class='ui-pager-control' role='group'><table cellspacing='0' cellpadding='0' border='0' class='ui-pg-table' style='width:100%;table-layout:fixed;height:100%;' role='row'><tbody><tr><td id='"+
j+"' align='left'></td><td id='"+k+"' align='center' style='white-space:pre;'></td><td id='"+l+"' align='right'></td></tr></tbody></table></div>").attr("dir","ltr");if(a.p.rowList.length>0){h="<td dir='"+g+"'>";h=h+"<select class='ui-pg-selbox' role='listbox'>";for(j=0;j<a.p.rowList.length;j++)h=h+('<option role="option" value="'+a.p.rowList[j]+'"'+(a.p.rowNum==a.p.rowList[j]?' selected="selected"':"")+">"+a.p.rowList[j]+"</option>");h=h+"</select></td>"}g=="rtl"&&(f=f+h);a.p.pginput===true&&(e="<td dir='"+
g+"'>"+b.jgrid.format(a.p.pgtext||"","<input class='ui-pg-input' type='text' size='2' maxlength='7' value='0' role='textbox'/>","<span id='sp_1_"+b.jgrid.jqID(c)+"'></span>")+"</td>");if(a.p.pgbuttons===true){j=["first"+d,"prev"+d,"next"+d,"last"+d];g=="rtl"&&j.reverse();f=f+("<td id='"+j[0]+"' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-first'></span></td>");f=f+("<td id='"+j[1]+"' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-prev'></span></td>");
f=f+(e!==""?"<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='ui-separator'></span></td>"+e+"<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='ui-separator'></span></td>":"")+("<td id='"+j[2]+"' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-next'></span></td>");f=f+("<td id='"+j[3]+"' class='ui-pg-button ui-corner-all'><span class='ui-icon ui-icon-seek-end'></span></td>")}else e!==""&&(f=f+e);g=="ltr"&&(f=f+h);f=f+"</tr></tbody></table>";
a.p.viewrecords===true&&b("td#"+c+"_"+a.p.recordpos,"#"+i).append("<div dir='"+g+"' style='text-align:"+a.p.recordpos+"' class='ui-paging-info'></div>");b("td#"+c+"_"+a.p.pagerpos,"#"+i).append(f);h=b(".ui-jqgrid").css("font-size")||"11px";b(document.body).append("<div id='testpg' class='ui-jqgrid ui-widget ui-widget-content' style='font-size:"+h+";visibility:hidden;' ></div>");f=b(f).clone().appendTo("#testpg").width();b("#testpg").remove();if(f>0){e!==""&&(f=f+50);b("td#"+c+"_"+a.p.pagerpos,"#"+
i).width(f)}a.p._nvtd=[];a.p._nvtd[0]=f?Math.floor((a.p.width-f)/2):Math.floor(a.p.width/3);a.p._nvtd[1]=0;f=null;b(".ui-pg-selbox","#"+i).bind("change",function(){if(!m("records"))return false;a.p.page=Math.round(a.p.rowNum*(a.p.page-1)/this.value-0.5)+1;a.p.rowNum=this.value;a.p.pager&&b(".ui-pg-selbox",a.p.pager).val(this.value);a.p.toppager&&b(".ui-pg-selbox",a.p.toppager).val(this.value);I();return false});if(a.p.pgbuttons===true){b(".ui-pg-button","#"+i).hover(function(){if(b(this).hasClass("ui-state-disabled"))this.style.cursor=
"default";else{b(this).addClass("ui-state-hover");this.style.cursor="pointer"}},function(){if(!b(this).hasClass("ui-state-disabled")){b(this).removeClass("ui-state-hover");this.style.cursor="default"}});b("#first"+b.jgrid.jqID(d)+", #prev"+b.jgrid.jqID(d)+", #next"+b.jgrid.jqID(d)+", #last"+b.jgrid.jqID(d)).click(function(){var b=n(a.p.page,1),c=n(a.p.lastpage,1),e=false,f=true,g=true,h=true,i=true;if(c===0||c===1)i=h=g=f=false;else if(c>1&&b>=1)if(b===1)g=f=false;else{if(b===c)i=h=false}else if(c>
1&&b===0){i=h=false;b=c-1}if(!m(this.id))return false;if(this.id==="first"+d&&f){a.p.page=1;e=true}if(this.id==="prev"+d&&g){a.p.page=b-1;e=true}if(this.id==="next"+d&&h){a.p.page=b+1;e=true}if(this.id==="last"+d&&i){a.p.page=c;e=true}e&&I();return false})}a.p.pginput===true&&b("input.ui-pg-input","#"+i).keypress(function(c){if((c.charCode||c.keyCode||0)==13){if(!m("user"))return false;a.p.page=b(this).val()>0?b(this).val():a.p.page;I();return false}return this})},la=function(c,d,e,f){if(a.p.colModel[d].sortable&&
!(a.p.savedRow.length>0)){if(!e){if(a.p.lastsort==d)if(a.p.sortorder=="asc")a.p.sortorder="desc";else{if(a.p.sortorder=="desc")a.p.sortorder="asc"}else a.p.sortorder=a.p.colModel[d].firstsortorder||"asc";a.p.page=1}if(f){if(a.p.lastsort==d&&a.p.sortorder==f&&!e)return;a.p.sortorder=f}e=a.grid.headers[a.p.lastsort].el;f=a.grid.headers[d].el;b("span.ui-grid-ico-sort",e).addClass("ui-state-disabled");b(e).attr("aria-selected","false");b("span.ui-icon-"+a.p.sortorder,f).removeClass("ui-state-disabled");
b(f).attr("aria-selected","true");if(!a.p.viewsortcols[0]&&a.p.lastsort!=d){b("span.s-ico",e).hide();b("span.s-ico",f).show()}c=c.substring(5+a.p.id.length+1);a.p.sortname=a.p.colModel[d].index||c;e=a.p.sortorder;if(b(a).triggerHandler("jqGridSortCol",[c,d,e])==="stop")a.p.lastsort=d;else if(b.isFunction(a.p.onSortCol)&&a.p.onSortCol.call(a,c,d,e)=="stop")a.p.lastsort=d;else{if(a.p.datatype=="local")a.p.deselectAfterSort&&b(a).jqGrid("resetSelection");else{a.p.selrow=null;a.p.multiselect&&ca(false);
a.p.selarrrow=[];a.p.savedRow=[]}if(a.p.scroll){e=a.grid.bDiv.scrollLeft;W.call(a,true,false);a.grid.hDiv.scrollLeft=e}a.p.subGrid&&a.p.datatype=="local"&&b("td.sgexpanded","#"+b.jgrid.jqID(a.p.id)).each(function(){b(this).trigger("click")});I();a.p.lastsort=d;if(a.p.sortname!=c&&d)a.p.lastsort=d}}},pa=function(c){var d,e=[0],f=b.jgrid.cell_width?0:a.p.cellLayout;for(d=0;d<=c;d++)a.p.colModel[d].hidden===false&&(e[0]=e[0]+(a.p.colModel[d].width+f));a.p.direction=="rtl"&&(e[0]=a.p.width-e[0]);e[0]=
e[0]-a.grid.bDiv.scrollLeft;e.push(b(a.grid.hDiv).position().top);e.push(b(a.grid.bDiv).offset().top-b(a.grid.hDiv).offset().top+b(a.grid.bDiv).height());return e},ma=function(c){var d,e=a.grid.headers,f=b.jgrid.getCellIndex(c);for(d=0;d<e.length;d++)if(c===e[d].el){f=d;break}return f};this.p.id=this.id;-1==b.inArray(a.p.multikey,["shiftKey","altKey","ctrlKey"])&&(a.p.multikey=!1);a.p.keyIndex=!1;for(d=0;d<a.p.colModel.length;d++)a.p.colModel[d]=b.extend(!0,{},a.p.cmTemplate,a.p.colModel[d].template||
{},a.p.colModel[d]),!1===a.p.keyIndex&&!0===a.p.colModel[d].key&&(a.p.keyIndex=d);a.p.sortorder=a.p.sortorder.toLowerCase();b.jgrid.cell_width=b.jgrid.cellWidth();!0===a.p.grouping&&(a.p.scroll=!1,a.p.rownumbers=!1,a.p.treeGrid=!1,a.p.gridview=!0);if(!0===this.p.treeGrid){try{b(this).jqGrid("setTreeGrid")}catch(ra){}"local"!=a.p.datatype&&(a.p.localReader={id:"_id_"})}if(this.p.subGrid)try{b(a).jqGrid("setSubGrid")}catch(sa){}this.p.multiselect&&(this.p.colNames.unshift("<input role='checkbox' id='cb_"+
this.p.id+"' class='cbox' type='checkbox'/>"),this.p.colModel.unshift({name:"cb",width:b.jgrid.cell_width?a.p.multiselectWidth+a.p.cellLayout:a.p.multiselectWidth,sortable:!1,resizable:!1,hidedlg:!0,search:!1,align:"center",fixed:!0}));this.p.rownumbers&&(this.p.colNames.unshift(""),this.p.colModel.unshift({name:"rn",width:a.p.rownumWidth,sortable:!1,resizable:!1,hidedlg:!0,search:!1,align:"center",fixed:!0}));a.p.xmlReader=b.extend(!0,{root:"rows",row:"row",page:"rows>page",total:"rows>total",records:"rows>records",
repeatitems:!0,cell:"cell",id:"[id]",userdata:"userdata",subgrid:{root:"rows",row:"row",repeatitems:!0,cell:"cell"}},a.p.xmlReader);a.p.jsonReader=b.extend(!0,{root:"rows",page:"page",total:"total",records:"records",repeatitems:!0,cell:"cell",id:"id",userdata:"userdata",subgrid:{root:"rows",repeatitems:!0,cell:"cell"}},a.p.jsonReader);a.p.localReader=b.extend(!0,{root:"rows",page:"page",total:"total",records:"records",repeatitems:!1,cell:"cell",id:"id",userdata:"userdata",subgrid:{root:"rows",repeatitems:!0,
cell:"cell"}},a.p.localReader);a.p.scroll&&(a.p.pgbuttons=!1,a.p.pginput=!1,a.p.rowList=[]);a.p.data.length&&M();var z="<thead><tr class='ui-jqgrid-labels' role='rowheader'>",na,N,da,ea,fa,A,p,Y;N=Y="";if(!0===a.p.shrinkToFit&&!0===a.p.forceFit)for(d=a.p.colModel.length-1;0<=d;d--)if(!a.p.colModel[d].hidden){a.p.colModel[d].resizable=!1;break}"horizontal"==a.p.viewsortcols[1]&&(Y=" ui-i-asc",N=" ui-i-desc");na=k?"class='ui-th-div-ie'":"";Y="<span class='s-ico' style='display:none'><span sort='asc' class='ui-grid-ico-sort ui-icon-asc"+
Y+" ui-state-disabled ui-icon ui-icon-triangle-1-n ui-sort-"+g+"'></span>"+("<span sort='desc' class='ui-grid-ico-sort ui-icon-desc"+N+" ui-state-disabled ui-icon ui-icon-triangle-1-s ui-sort-"+g+"'></span></span>");for(d=0;d<this.p.colNames.length;d++)N=a.p.headertitles?' title="'+b.jgrid.stripHtml(a.p.colNames[d])+'"':"",z+="<th id='"+a.p.id+"_"+a.p.colModel[d].name+"' role='columnheader' class='ui-state-default ui-th-column ui-th-"+g+"'"+N+">",N=a.p.colModel[d].index||a.p.colModel[d].name,z+="<div id='jqgh_"+
a.p.id+"_"+a.p.colModel[d].name+"' "+na+">"+a.p.colNames[d],a.p.colModel[d].width=a.p.colModel[d].width?parseInt(a.p.colModel[d].width,10):150,"boolean"!==typeof a.p.colModel[d].title&&(a.p.colModel[d].title=!0),N==a.p.sortname&&(a.p.lastsort=d),z+=Y+"</div></th>";Y=null;b(this).append(z+"</tr></thead>");b("thead tr:first th",this).hover(function(){b(this).addClass("ui-state-hover")},function(){b(this).removeClass("ui-state-hover")});if(this.p.multiselect){var ga=[],Z;b("#cb_"+b.jgrid.jqID(a.p.id),
this).bind("click",function(){a.p.selarrrow=[];var c=a.p.frozenColumns===true?a.p.id+"_frozen":"";if(this.checked){b(a.rows).each(function(d){if(d>0&&!b(this).hasClass("ui-subgrid")&&!b(this).hasClass("jqgroup")&&!b(this).hasClass("ui-state-disabled")){b("#jqg_"+b.jgrid.jqID(a.p.id)+"_"+b.jgrid.jqID(this.id))[a.p.useProp?"prop":"attr"]("checked",true);b(this).addClass("ui-state-highlight").attr("aria-selected","true");a.p.selarrrow.push(this.id);a.p.selrow=this.id;if(c){b("#jqg_"+b.jgrid.jqID(a.p.id)+
"_"+b.jgrid.jqID(this.id),a.grid.fbDiv)[a.p.useProp?"prop":"attr"]("checked",true);b("#"+b.jgrid.jqID(this.id),a.grid.fbDiv).addClass("ui-state-highlight")}}});Z=true;ga=[]}else{b(a.rows).each(function(d){if(d>0&&!b(this).hasClass("ui-subgrid")&&!b(this).hasClass("ui-state-disabled")){b("#jqg_"+b.jgrid.jqID(a.p.id)+"_"+b.jgrid.jqID(this.id))[a.p.useProp?"prop":"attr"]("checked",false);b(this).removeClass("ui-state-highlight").attr("aria-selected","false");ga.push(this.id);if(c){b("#jqg_"+b.jgrid.jqID(a.p.id)+
"_"+b.jgrid.jqID(this.id),a.grid.fbDiv)[a.p.useProp?"prop":"attr"]("checked",false);b("#"+b.jgrid.jqID(this.id),a.grid.fbDiv).removeClass("ui-state-highlight")}}});a.p.selrow=null;Z=false}b(a).triggerHandler("jqGridSelectAll",[Z?a.p.selarrrow:ga,Z]);b.isFunction(a.p.onSelectAll)&&a.p.onSelectAll.call(a,Z?a.p.selarrrow:ga,Z)})}!0===a.p.autowidth&&(z=b(l).innerWidth(),a.p.width=0<z?z:"nw");(function(){var d=0,e=b.jgrid.cell_width?0:n(a.p.cellLayout,0),f=0,g,h=n(a.p.scrollOffset,0),j,k=false,l,m=0,p=
0,q;b.each(a.p.colModel,function(){if(this.hidden===void 0)this.hidden=false;if(a.p.grouping&&a.p.autowidth){var c=b.inArray(this.name,a.p.groupingView.groupField);if(c!==-1)this.hidden=!a.p.groupingView.groupColumnShow[c]}this.widthOrg=j=n(this.width,0);if(this.hidden===false){d=d+(j+e);this.fixed?m=m+(j+e):f++;p++}});if(isNaN(a.p.width))a.p.width=d+(a.p.shrinkToFit===false&&!isNaN(a.p.height)?h:0);c.width=a.p.width;a.p.tblwidth=d;if(a.p.shrinkToFit===false&&a.p.forceFit===true)a.p.forceFit=false;
if(a.p.shrinkToFit===true&&f>0){l=c.width-e*f-m;if(!isNaN(a.p.height)){l=l-h;k=true}d=0;b.each(a.p.colModel,function(b){if(this.hidden===false&&!this.fixed){this.width=j=Math.round(l*this.width/(a.p.tblwidth-e*f-m));d=d+j;g=b}});q=0;k?c.width-m-(d+e*f)!==h&&(q=c.width-m-(d+e*f)-h):!k&&Math.abs(c.width-m-(d+e*f))!==1&&(q=c.width-m-(d+e*f));a.p.colModel[g].width=a.p.colModel[g].width+q;a.p.tblwidth=d+q+e*f+m;if(a.p.tblwidth>a.p.width){a.p.colModel[g].width=a.p.colModel[g].width-(a.p.tblwidth-parseInt(a.p.width,
10));a.p.tblwidth=a.p.width}}})();b(l).css("width",c.width+"px").append("<div class='ui-jqgrid-resize-mark' id='rs_m"+a.p.id+"'>&#160;</div>");b(j).css("width",c.width+"px");var z=b("thead:first",a).get(0),S="";a.p.footerrow&&(S+="<table role='grid' style='width:"+a.p.tblwidth+"px' class='ui-jqgrid-ftable' cellspacing='0' cellpadding='0' border='0'><tbody><tr role='row' class='ui-widget-content footrow footrow-"+g+"'>");var j=b("tr:first",z),$="<tr class='jqgfirstrow' role='row' style='height:auto'>";
a.p.disableClick=!1;b("th",j).each(function(d){da=a.p.colModel[d].width;if(a.p.colModel[d].resizable===void 0)a.p.colModel[d].resizable=true;if(a.p.colModel[d].resizable){ea=document.createElement("span");b(ea).html("&#160;").addClass("ui-jqgrid-resize ui-jqgrid-resize-"+g).css("cursor","col-resize");b(this).addClass(a.p.resizeclass)}else ea="";b(this).css("width",da+"px").prepend(ea);var e="";if(a.p.colModel[d].hidden){b(this).css("display","none");e="display:none;"}$=$+("<td role='gridcell' style='height:0px;width:"+
da+"px;"+e+"'></td>");c.headers[d]={width:da,el:this};fa=a.p.colModel[d].sortable;if(typeof fa!=="boolean")fa=a.p.colModel[d].sortable=true;e=a.p.colModel[d].name;e=="cb"||e=="subgrid"||e=="rn"||a.p.viewsortcols[2]&&b(">div",this).addClass("ui-jqgrid-sortable");if(fa)if(a.p.viewsortcols[0]){b("div span.s-ico",this).show();d==a.p.lastsort&&b("div span.ui-icon-"+a.p.sortorder,this).removeClass("ui-state-disabled")}else if(d==a.p.lastsort){b("div span.s-ico",this).show();b("div span.ui-icon-"+a.p.sortorder,
this).removeClass("ui-state-disabled")}a.p.footerrow&&(S=S+("<td role='gridcell' "+s(d,0,"",null,"",false)+">&#160;</td>"))}).mousedown(function(d){if(b(d.target).closest("th>span.ui-jqgrid-resize").length==1){var e=ma(this);if(a.p.forceFit===true){var f=a.p,g=e,h;for(h=e+1;h<a.p.colModel.length;h++)if(a.p.colModel[h].hidden!==true){g=h;break}f.nv=g-e}c.dragStart(e,d,pa(e));return false}}).click(function(c){if(a.p.disableClick)return a.p.disableClick=false;var d="th>div.ui-jqgrid-sortable",e,f;a.p.viewsortcols[2]||
(d="th>div>span>span.ui-grid-ico-sort");c=b(c.target).closest(d);if(c.length==1){d=ma(this);if(!a.p.viewsortcols[2]){e=true;f=c.attr("sort")}la(b("div",this)[0].id,d,e,f);return false}});if(a.p.sortable&&b.fn.sortable)try{b(a).jqGrid("sortableColumns",j)}catch(ta){}a.p.footerrow&&(S+="</tr></tbody></table>");$+="</tr>";this.appendChild(document.createElement("tbody"));b(this).addClass("ui-jqgrid-btable").append($);var $=null,j=b("<table class='ui-jqgrid-htable' style='width:"+a.p.tblwidth+"px' role='grid' aria-labelledby='gbox_"+
this.id+"' cellspacing='0' cellpadding='0' border='0'></table>").append(z),D=a.p.caption&&!0===a.p.hiddengrid?!0:!1;d=b("<div class='ui-jqgrid-hbox"+("rtl"==g?"-rtl":"")+"'></div>");z=null;c.hDiv=document.createElement("div");b(c.hDiv).css({width:c.width+"px"}).addClass("ui-state-default ui-jqgrid-hdiv").append(d);b(d).append(j);j=null;D&&b(c.hDiv).hide();a.p.pager&&("string"===typeof a.p.pager?"#"!=a.p.pager.substr(0,1)&&(a.p.pager="#"+a.p.pager):a.p.pager="#"+b(a.p.pager).attr("id"),b(a.p.pager).css({width:c.width+
"px"}).addClass("ui-state-default ui-jqgrid-pager ui-corner-bottom").appendTo(l),D&&b(a.p.pager).hide(),ka(a.p.pager,""));!1===a.p.cellEdit&&!0===a.p.hoverrows&&b(a).bind("mouseover",function(a){p=b(a.target).closest("tr.jqgrow");b(p).attr("class")!=="ui-subgrid"&&b(p).addClass("ui-state-hover")}).bind("mouseout",function(a){p=b(a.target).closest("tr.jqgrow");b(p).removeClass("ui-state-hover")});var r,J,ha;b(a).before(c.hDiv).click(function(c){A=c.target;p=b(A,a.rows).closest("tr.jqgrow");if(b(p).length===
0||p[0].className.indexOf("ui-state-disabled")>-1||(b(A,a).closest("table.ui-jqgrid-btable").attr("id")||"").replace("_frozen","")!==a.id)return this;var d=b(A).hasClass("cbox"),e=b(a).triggerHandler("jqGridBeforeSelectRow",[p[0].id,c]);(e=e===false||e==="stop"?false:true)&&b.isFunction(a.p.beforeSelectRow)&&(e=a.p.beforeSelectRow.call(a,p[0].id,c));if(!(A.tagName=="A"||(A.tagName=="INPUT"||A.tagName=="TEXTAREA"||A.tagName=="OPTION"||A.tagName=="SELECT")&&!d)&&e===true){r=p[0].id;J=b.jgrid.getCellIndex(A);
ha=b(A).closest("td,th").html();b(a).triggerHandler("jqGridCellSelect",[r,J,ha,c]);b.isFunction(a.p.onCellSelect)&&a.p.onCellSelect.call(a,r,J,ha,c);if(a.p.cellEdit===true)if(a.p.multiselect&&d)b(a).jqGrid("setSelection",r,true,c);else{r=p[0].rowIndex;try{b(a).jqGrid("editCell",r,J,true)}catch(f){}}else if(a.p.multikey)if(c[a.p.multikey])b(a).jqGrid("setSelection",r,true,c);else{if(a.p.multiselect&&d){d=b("#jqg_"+b.jgrid.jqID(a.p.id)+"_"+r).is(":checked");b("#jqg_"+b.jgrid.jqID(a.p.id)+"_"+r)[a.p.useProp?
"prop":"attr"]("checked",d)}}else{if(a.p.multiselect&&a.p.multiboxonly&&!d){var g=a.p.frozenColumns?a.p.id+"_frozen":"";b(a.p.selarrrow).each(function(c,d){var e=a.rows.namedItem(d);b(e).removeClass("ui-state-highlight");b("#jqg_"+b.jgrid.jqID(a.p.id)+"_"+b.jgrid.jqID(d))[a.p.useProp?"prop":"attr"]("checked",false);if(g){b("#"+b.jgrid.jqID(d),"#"+b.jgrid.jqID(g)).removeClass("ui-state-highlight");b("#jqg_"+b.jgrid.jqID(a.p.id)+"_"+b.jgrid.jqID(d),"#"+b.jgrid.jqID(g))[a.p.useProp?"prop":"attr"]("checked",
false)}});a.p.selarrrow=[]}b(a).jqGrid("setSelection",r,true,c)}}}).bind("reloadGrid",function(c,d){if(a.p.treeGrid===true)a.p.datatype=a.p.treedatatype;d&&d.current&&a.grid.selectionPreserver(a);if(a.p.datatype=="local"){b(a).jqGrid("resetSelection");a.p.data.length&&M()}else if(!a.p.treeGrid){a.p.selrow=null;if(a.p.multiselect){a.p.selarrrow=[];ca(false)}a.p.savedRow=[]}a.p.scroll&&W.call(a,true,false);if(d&&d.page){var e=d.page;if(e>a.p.lastpage)e=a.p.lastpage;e<1&&(e=1);a.p.page=e;a.grid.bDiv.scrollTop=
a.grid.prevRowHeight?(e-1)*a.grid.prevRowHeight*a.p.rowNum:0}if(a.grid.prevRowHeight&&a.p.scroll){delete a.p.lastpage;a.grid.populateVisible()}else a.grid.populate();a.p._inlinenav===true&&b(a).jqGrid("showAddEditButtons");return false}).dblclick(function(c){A=c.target;p=b(A,a.rows).closest("tr.jqgrow");if(b(p).length!==0){r=p[0].rowIndex;J=b.jgrid.getCellIndex(A);b(a).triggerHandler("jqGridDblClickRow",[b(p).attr("id"),r,J,c]);b.isFunction(this.p.ondblClickRow)&&a.p.ondblClickRow.call(a,b(p).attr("id"),
r,J,c)}}).bind("contextmenu",function(c){A=c.target;p=b(A,a.rows).closest("tr.jqgrow");if(b(p).length!==0){a.p.multiselect||b(a).jqGrid("setSelection",p[0].id,true,c);r=p[0].rowIndex;J=b.jgrid.getCellIndex(A);b(a).triggerHandler("jqGridRightClickRow",[b(p).attr("id"),r,J,c]);b.isFunction(this.p.onRightClickRow)&&a.p.onRightClickRow.call(a,b(p).attr("id"),r,J,c)}});c.bDiv=document.createElement("div");k&&"auto"===(""+a.p.height).toLowerCase()&&(a.p.height="100%");b(c.bDiv).append(b('<div style="position:relative;'+
(k&&8>b.jgrid.msiever()?"height:0.01%;":"")+'"></div>').append("<div></div>").append(this)).addClass("ui-jqgrid-bdiv").css({height:a.p.height+(isNaN(a.p.height)?"":"px"),width:c.width+"px"}).scroll(c.scrollGrid);b("table:first",c.bDiv).css({width:a.p.tblwidth+"px"});b.support.tbody||2==b("tbody",this).length&&b("tbody:gt(0)",this).remove();a.p.multikey&&(b.jgrid.msie?b(c.bDiv).bind("selectstart",function(){return false}):b(c.bDiv).bind("mousedown",function(){return false}));D&&b(c.bDiv).hide();c.cDiv=
document.createElement("div");var ia=!0===a.p.hidegrid?b("<a role='link' href='javascript:void(0)'/>").addClass("ui-jqgrid-titlebar-close HeaderButton").hover(function(){ia.addClass("ui-state-hover")},function(){ia.removeClass("ui-state-hover")}).append("<span class='ui-icon ui-icon-circle-triangle-n'></span>").css("rtl"==g?"left":"right","0px"):"";b(c.cDiv).append(ia).append("<span class='ui-jqgrid-title"+("rtl"==g?"-rtl":"")+"'>"+a.p.caption+"</span>").addClass("ui-jqgrid-titlebar ui-widget-header ui-corner-top ui-helper-clearfix");
b(c.cDiv).insertBefore(c.hDiv);a.p.toolbar[0]&&(c.uDiv=document.createElement("div"),"top"==a.p.toolbar[1]?b(c.uDiv).insertBefore(c.hDiv):"bottom"==a.p.toolbar[1]&&b(c.uDiv).insertAfter(c.hDiv),"both"==a.p.toolbar[1]?(c.ubDiv=document.createElement("div"),b(c.uDiv).addClass("ui-userdata ui-state-default").attr("id","t_"+this.id).insertBefore(c.hDiv),b(c.ubDiv).addClass("ui-userdata ui-state-default").attr("id","tb_"+this.id).insertAfter(c.hDiv),D&&b(c.ubDiv).hide()):b(c.uDiv).width(c.width).addClass("ui-userdata ui-state-default").attr("id",
"t_"+this.id),D&&b(c.uDiv).hide());a.p.toppager&&(a.p.toppager=b.jgrid.jqID(a.p.id)+"_toppager",c.topDiv=b("<div id='"+a.p.toppager+"'></div>")[0],a.p.toppager="#"+a.p.toppager,b(c.topDiv).addClass("ui-state-default ui-jqgrid-toppager").width(c.width).insertBefore(c.hDiv),ka(a.p.toppager,"_t"));a.p.footerrow&&(c.sDiv=b("<div class='ui-jqgrid-sdiv'></div>")[0],d=b("<div class='ui-jqgrid-hbox"+("rtl"==g?"-rtl":"")+"'></div>"),b(c.sDiv).append(d).width(c.width).insertAfter(c.hDiv),b(d).append(S),c.footers=
b(".ui-jqgrid-ftable",c.sDiv)[0].rows[0].cells,a.p.rownumbers&&(c.footers[0].className="ui-state-default jqgrid-rownum"),D&&b(c.sDiv).hide());d=null;if(a.p.caption){var qa=a.p.datatype;!0===a.p.hidegrid&&(b(".ui-jqgrid-titlebar-close",c.cDiv).click(function(d){var e=b.isFunction(a.p.onHeaderClick),f=".ui-jqgrid-bdiv, .ui-jqgrid-hdiv, .ui-jqgrid-pager, .ui-jqgrid-sdiv",g,h=this;if(a.p.toolbar[0]===true){a.p.toolbar[1]=="both"&&(f=f+(", #"+b(c.ubDiv).attr("id")));f=f+(", #"+b(c.uDiv).attr("id"))}g=
b(f,"#gview_"+b.jgrid.jqID(a.p.id)).length;a.p.gridstate=="visible"?b(f,"#gbox_"+b.jgrid.jqID(a.p.id)).slideUp("fast",function(){g--;if(g===0){b("span",h).removeClass("ui-icon-circle-triangle-n").addClass("ui-icon-circle-triangle-s");a.p.gridstate="hidden";b("#gbox_"+b.jgrid.jqID(a.p.id)).hasClass("ui-resizable")&&b(".ui-resizable-handle","#gbox_"+b.jgrid.jqID(a.p.id)).hide();b(a).triggerHandler("jqGridHeaderClick",[a.p.gridstate,d]);e&&(D||a.p.onHeaderClick.call(a,a.p.gridstate,d))}}):a.p.gridstate==
"hidden"&&b(f,"#gbox_"+b.jgrid.jqID(a.p.id)).slideDown("fast",function(){g--;if(g===0){b("span",h).removeClass("ui-icon-circle-triangle-s").addClass("ui-icon-circle-triangle-n");if(D){a.p.datatype=qa;I();D=false}a.p.gridstate="visible";b("#gbox_"+b.jgrid.jqID(a.p.id)).hasClass("ui-resizable")&&b(".ui-resizable-handle","#gbox_"+b.jgrid.jqID(a.p.id)).show();b(a).triggerHandler("jqGridHeaderClick",[a.p.gridstate,d]);e&&(D||a.p.onHeaderClick.call(a,a.p.gridstate,d))}});return false}),D&&(a.p.datatype=
"local",b(".ui-jqgrid-titlebar-close",c.cDiv).trigger("click")))}else b(c.cDiv).hide();b(c.hDiv).after(c.bDiv).mousemove(function(a){if(c.resizing){c.dragMove(a);return false}});b(".ui-jqgrid-labels",c.hDiv).bind("selectstart",function(){return false});b(document).mouseup(function(){if(c.resizing){c.dragEnd();return false}return true});a.formatCol=s;a.sortData=la;a.updatepager=function(c,d){var e,f,g,h,i,j,k,l="",m=a.p.pager?"_"+b.jgrid.jqID(a.p.pager.substr(1)):"",o=a.p.toppager?"_"+a.p.toppager.substr(1):
"";g=parseInt(a.p.page,10)-1;g<0&&(g=0);g=g*parseInt(a.p.rowNum,10);i=g+a.p.reccount;if(a.p.scroll){e=b("tbody:first > tr:gt(0)",a.grid.bDiv);g=i-e.length;a.p.reccount=e.length;if(f=e.outerHeight()||a.grid.prevRowHeight){e=g*f;f=parseInt(a.p.records,10)*f;b(">div:first",a.grid.bDiv).css({height:f}).children("div:first").css({height:e,display:e?"":"none"})}a.grid.bDiv.scrollLeft=a.grid.hDiv.scrollLeft}l=a.p.pager||"";if(l=l+(a.p.toppager?l?","+a.p.toppager:a.p.toppager:"")){k=b.jgrid.formatter.integer||
{};e=n(a.p.page);f=n(a.p.lastpage);b(".selbox",l)[this.p.useProp?"prop":"attr"]("disabled",false);if(a.p.pginput===true){b(".ui-pg-input",l).val(a.p.page);h=a.p.toppager?"#sp_1"+m+",#sp_1"+o:"#sp_1"+m;b(h).html(b.fmatter?b.fmatter.util.NumberFormat(a.p.lastpage,k):a.p.lastpage)}if(a.p.viewrecords)if(a.p.reccount===0)b(".ui-paging-info",l).html(a.p.emptyrecords);else{h=g+1;j=a.p.records;if(b.fmatter){h=b.fmatter.util.NumberFormat(h,k);i=b.fmatter.util.NumberFormat(i,k);j=b.fmatter.util.NumberFormat(j,
k)}b(".ui-paging-info",l).html(b.jgrid.format(a.p.recordtext,h,i,j))}if(a.p.pgbuttons===true){e<=0&&(e=f=0);if(e==1||e===0){b("#first"+m+", #prev"+m).addClass("ui-state-disabled").removeClass("ui-state-hover");a.p.toppager&&b("#first_t"+o+", #prev_t"+o).addClass("ui-state-disabled").removeClass("ui-state-hover")}else{b("#first"+m+", #prev"+m).removeClass("ui-state-disabled");a.p.toppager&&b("#first_t"+o+", #prev_t"+o).removeClass("ui-state-disabled")}if(e==f||e===0){b("#next"+m+", #last"+m).addClass("ui-state-disabled").removeClass("ui-state-hover");
a.p.toppager&&b("#next_t"+o+", #last_t"+o).addClass("ui-state-disabled").removeClass("ui-state-hover")}else{b("#next"+m+", #last"+m).removeClass("ui-state-disabled");a.p.toppager&&b("#next_t"+o+", #last_t"+o).removeClass("ui-state-disabled")}}}c===true&&a.p.rownumbers===true&&b("td.jqgrid-rownum",a.rows).each(function(a){b(this).html(g+1+a)});d&&a.p.jqgdnd&&b(a).jqGrid("gridDnD","updateDnD");b(a).triggerHandler("jqGridGridComplete");b.isFunction(a.p.gridComplete)&&a.p.gridComplete.call(a);b(a).triggerHandler("jqGridAfterGridComplete")};
a.refreshIndex=M;a.setHeadCheckBox=ca;a.constructTr=X;a.formatter=function(a,b,c,d,e){return v(a,b,c,d,e)};b.extend(c,{populate:I,emptyRows:W});this.grid=c;a.addXmlData=function(b){H(b,a.grid.bDiv)};a.addJSONData=function(b){V(b,a.grid.bDiv)};this.grid.cols=this.rows[0].cells;b(a).triggerHandler("jqGridInitGrid");b.isFunction(a.p.onInitGrid)&&a.p.onInitGrid.call(a);I();a.p.hiddengrid=!1}}}})};b.jgrid.extend({getGridParam:function(b){var d=this[0];return!d||!d.grid?void 0:!b?d.p:void 0!==d.p[b]?d.p[b]:
null},setGridParam:function(f){return this.each(function(){this.grid&&"object"===typeof f&&b.extend(!0,this.p,f)})},getDataIDs:function(){var f=[],d=0,c,e=0;this.each(function(){if((c=this.rows.length)&&0<c)for(;d<c;)b(this.rows[d]).hasClass("jqgrow")&&(f[e]=this.rows[d].id,e++),d++});return f},setSelection:function(f,d,c){return this.each(function(){var e,a,i,h,g,j;if(void 0!==f&&(d=!1===d?!1:!0,(a=this.rows.namedItem(""+f))&&a.className&&!(-1<a.className.indexOf("ui-state-disabled"))))(!0===this.p.scrollrows&&
(i=this.rows.namedItem(f).rowIndex,0<=i&&(e=b(this.grid.bDiv)[0].clientHeight,h=b(this.grid.bDiv)[0].scrollTop,g=b(this.rows[i]).position().top,i=this.rows[i].clientHeight,g+i>=e+h?b(this.grid.bDiv)[0].scrollTop=g-(e+h)+i+h:g<e+h&&g<h&&(b(this.grid.bDiv)[0].scrollTop=g))),!0===this.p.frozenColumns&&(j=this.p.id+"_frozen"),this.p.multiselect)?(this.setHeadCheckBox(!1),this.p.selrow=a.id,h=b.inArray(this.p.selrow,this.p.selarrrow),-1===h?("ui-subgrid"!==a.className&&b(a).addClass("ui-state-highlight").attr("aria-selected",
"true"),e=!0,this.p.selarrrow.push(this.p.selrow)):("ui-subgrid"!==a.className&&b(a).removeClass("ui-state-highlight").attr("aria-selected","false"),e=!1,this.p.selarrrow.splice(h,1),g=this.p.selarrrow[0],this.p.selrow=void 0===g?null:g),b("#jqg_"+b.jgrid.jqID(this.p.id)+"_"+b.jgrid.jqID(a.id))[this.p.useProp?"prop":"attr"]("checked",e),j&&(-1===h?b("#"+b.jgrid.jqID(f),"#"+b.jgrid.jqID(j)).addClass("ui-state-highlight"):b("#"+b.jgrid.jqID(f),"#"+b.jgrid.jqID(j)).removeClass("ui-state-highlight"),
b("#jqg_"+b.jgrid.jqID(this.p.id)+"_"+b.jgrid.jqID(f),"#"+b.jgrid.jqID(j))[this.p.useProp?"prop":"attr"]("checked",e)),b(this).triggerHandler("jqGridSelectRow",[a.id,e,c]),this.p.onSelectRow&&d&&this.p.onSelectRow.call(this,a.id,e,c)):"ui-subgrid"!==a.className&&(this.p.selrow!=a.id?(b(this.rows.namedItem(this.p.selrow)).removeClass("ui-state-highlight").attr({"aria-selected":"false",tabindex:"-1"}),b(a).addClass("ui-state-highlight").attr({"aria-selected":"true",tabindex:"0"}),j&&(b("#"+b.jgrid.jqID(this.p.selrow),
"#"+b.jgrid.jqID(j)).removeClass("ui-state-highlight"),b("#"+b.jgrid.jqID(f),"#"+b.jgrid.jqID(j)).addClass("ui-state-highlight")),e=!0):e=!1,this.p.selrow=a.id,b(this).triggerHandler("jqGridSelectRow",[a.id,e,c]),this.p.onSelectRow&&d&&this.p.onSelectRow.call(this,a.id,e,c))})},resetSelection:function(f){return this.each(function(){var d=this,c,e,a;!0===d.p.frozenColumns&&(a=d.p.id+"_frozen");if(void 0!==f){e=f===d.p.selrow?d.p.selrow:f;b("#"+b.jgrid.jqID(d.p.id)+" tbody:first tr#"+b.jgrid.jqID(e)).removeClass("ui-state-highlight").attr("aria-selected",
"false");a&&b("#"+b.jgrid.jqID(e),"#"+b.jgrid.jqID(a)).removeClass("ui-state-highlight");if(d.p.multiselect){b("#jqg_"+b.jgrid.jqID(d.p.id)+"_"+b.jgrid.jqID(e),"#"+b.jgrid.jqID(d.p.id))[d.p.useProp?"prop":"attr"]("checked",!1);if(a)b("#jqg_"+b.jgrid.jqID(d.p.id)+"_"+b.jgrid.jqID(e),"#"+b.jgrid.jqID(a))[d.p.useProp?"prop":"attr"]("checked",!1);d.setHeadCheckBox(!1)}e=null}else d.p.multiselect?(b(d.p.selarrrow).each(function(e,f){c=d.rows.namedItem(f);b(c).removeClass("ui-state-highlight").attr("aria-selected",
"false");b("#jqg_"+b.jgrid.jqID(d.p.id)+"_"+b.jgrid.jqID(f))[d.p.useProp?"prop":"attr"]("checked",!1);a&&(b("#"+b.jgrid.jqID(f),"#"+b.jgrid.jqID(a)).removeClass("ui-state-highlight"),b("#jqg_"+b.jgrid.jqID(d.p.id)+"_"+b.jgrid.jqID(f),"#"+b.jgrid.jqID(a))[d.p.useProp?"prop":"attr"]("checked",!1))}),d.setHeadCheckBox(!1),d.p.selarrrow=[]):d.p.selrow&&(b("#"+b.jgrid.jqID(d.p.id)+" tbody:first tr#"+b.jgrid.jqID(d.p.selrow)).removeClass("ui-state-highlight").attr("aria-selected","false"),a&&b("#"+b.jgrid.jqID(d.p.selrow),
"#"+b.jgrid.jqID(a)).removeClass("ui-state-highlight"),d.p.selrow=null);!0===d.p.cellEdit&&0<=parseInt(d.p.iCol,10)&&0<=parseInt(d.p.iRow,10)&&(b("td:eq("+d.p.iCol+")",d.rows[d.p.iRow]).removeClass("edit-cell ui-state-highlight"),b(d.rows[d.p.iRow]).removeClass("selected-row ui-state-hover"));d.p.savedRow=[]})},getRowData:function(f){var d={},c,e=!1,a,i=0;this.each(function(){var h=this,g,j;if(void 0===f)e=!0,c=[],a=h.rows.length;else{j=h.rows.namedItem(f);if(!j)return d;a=2}for(;i<a;)e&&(j=h.rows[i]),
b(j).hasClass("jqgrow")&&(b('td[role="gridcell"]',j).each(function(a){g=h.p.colModel[a].name;if("cb"!==g&&"subgrid"!==g&&"rn"!==g)if(!0===h.p.treeGrid&&g==h.p.ExpandColumn)d[g]=b.jgrid.htmlDecode(b("span:first",this).html());else try{d[g]=b.unformat.call(h,this,{rowId:j.id,colModel:h.p.colModel[a]},a)}catch(c){d[g]=b.jgrid.htmlDecode(b(this).html())}}),e&&(c.push(d),d={})),i++});return c||d},delRowData:function(f){var d=!1,c,e;this.each(function(){c=this.rows.namedItem(f);if(!c)return!1;b(c).remove();
this.p.records--;this.p.reccount--;this.updatepager(!0,!1);d=!0;this.p.multiselect&&(e=b.inArray(f,this.p.selarrrow),-1!=e&&this.p.selarrrow.splice(e,1));this.p.selrow=this.p.multiselect&&0<this.p.selarrrow.length?this.p.selarrrow[this.p.selarrrow.length-1]:null;if("local"==this.p.datatype){var a=this.p._index[b.jgrid.stripPref(this.p.idPrefix,f)];void 0!==a&&(this.p.data.splice(a,1),this.refreshIndex())}if(!0===this.p.altRows&&d){var i=this.p.altclass;b(this.rows).each(function(a){a%2==1?b(this).addClass(i):
b(this).removeClass(i)})}});return d},setRowData:function(f,d,c){var e,a=!0,i;this.each(function(){if(!this.grid)return!1;var h=this,g,j,k=typeof c,l={};j=h.rows.namedItem(f);if(!j)return!1;if(d)try{if(b(this.p.colModel).each(function(a){e=this.name;void 0!==d[e]&&(l[e]=this.formatter&&"string"===typeof this.formatter&&"date"==this.formatter?b.unformat.date.call(h,d[e],this):d[e],g=h.formatter(f,d[e],a,d,"edit"),i=this.title?{title:b.jgrid.stripHtml(g)}:{},!0===h.p.treeGrid&&e==h.p.ExpandColumn?b("td[role='gridcell']:eq("+
a+") > span:first",j).html(g).attr(i):b("td[role='gridcell']:eq("+a+")",j).html(g).attr(i))}),"local"==h.p.datatype){var n=b.jgrid.stripPref(h.p.idPrefix,f),s=h.p._index[n],m;if(h.p.treeGrid)for(m in h.p.treeReader)h.p.treeReader.hasOwnProperty(m)&&delete l[h.p.treeReader[m]];void 0!==s&&(h.p.data[s]=b.extend(!0,h.p.data[s],l));l=null}}catch(v){a=!1}a&&("string"===k?b(j).addClass(c):"object"===k&&b(j).css(c),b(h).triggerHandler("jqGridAfterGridComplete"))});return a},addRowData:function(f,d,c,e){c||
(c="last");var a=!1,i,h,g,j,k,l,n,s,m="",v,E,T,K,aa,U;d&&(b.isArray(d)?(v=!0,c="last",E=f):(d=[d],v=!1),this.each(function(){var W=d.length;k=this.p.rownumbers===true?1:0;g=this.p.multiselect===true?1:0;j=this.p.subGrid===true?1:0;if(!v)if(f!==void 0)f=""+f;else{f=b.jgrid.randId();if(this.p.keyIndex!==false){E=this.p.colModel[this.p.keyIndex+g+j+k].name;d[0][E]!==void 0&&(f=d[0][E])}}T=this.p.altclass;for(var M=0,X="",H={},V=b.isFunction(this.p.afterInsertRow)?true:false;M<W;){K=d[M];h=[];if(v){try{f=
K[E];f===void 0&&(f=b.jgrid.randId())}catch(ja){f=b.jgrid.randId()}X=this.p.altRows===true?(this.rows.length-1)%2===0?T:"":""}U=f;f=this.p.idPrefix+f;if(k){m=this.formatCol(0,1,"",null,f,true);h[h.length]='<td role="gridcell" class="ui-state-default jqgrid-rownum" '+m+">0</td>"}if(g){s='<input role="checkbox" type="checkbox" id="jqg_'+this.p.id+"_"+f+'" class="cbox"/>';m=this.formatCol(k,1,"",null,f,true);h[h.length]='<td role="gridcell" '+m+">"+s+"</td>"}j&&(h[h.length]=b(this).jqGrid("addSubGridCell",
g+k,1));for(n=g+j+k;n<this.p.colModel.length;n++){aa=this.p.colModel[n];i=aa.name;H[i]=K[i];s=this.formatter(f,b.jgrid.getAccessor(K,i),n,K);m=this.formatCol(n,1,s,K,f,H);h[h.length]='<td role="gridcell" '+m+">"+s+"</td>"}h.unshift(this.constructTr(f,false,X,H,K,false));h[h.length]="</tr>";if(this.rows.length===0)b("table:first",this.grid.bDiv).append(h.join(""));else switch(c){case "last":b(this.rows[this.rows.length-1]).after(h.join(""));l=this.rows.length-1;break;case "first":b(this.rows[0]).after(h.join(""));
l=1;break;case "after":(l=this.rows.namedItem(e))&&(b(this.rows[l.rowIndex+1]).hasClass("ui-subgrid")?b(this.rows[l.rowIndex+1]).after(h):b(l).after(h.join("")));l++;break;case "before":if(l=this.rows.namedItem(e)){b(l).before(h.join(""));l=l.rowIndex}l--}this.p.subGrid===true&&b(this).jqGrid("addSubGrid",g+k,l);this.p.records++;this.p.reccount++;b(this).triggerHandler("jqGridAfterInsertRow",[f,K,K]);V&&this.p.afterInsertRow.call(this,f,K,K);M++;if(this.p.datatype=="local"){H[this.p.localReader.id]=
U;this.p._index[U]=this.p.data.length;this.p.data.push(H);H={}}}this.p.altRows===true&&!v&&(c=="last"?(this.rows.length-1)%2==1&&b(this.rows[this.rows.length-1]).addClass(T):b(this.rows).each(function(a){a%2==1?b(this).addClass(T):b(this).removeClass(T)}));this.updatepager(true,true);a=true}));return a},footerData:function(f,d,c){function e(a){for(var b in a)if(a.hasOwnProperty(b))return!1;return!0}var a,i=!1,h={},g;void 0===f&&(f="get");"boolean"!==typeof c&&(c=!0);f=f.toLowerCase();this.each(function(){var j=
this,k;if(!j.grid||!j.p.footerrow||"set"==f&&e(d))return!1;i=!0;b(this.p.colModel).each(function(e){a=this.name;"set"==f?void 0!==d[a]&&(k=c?j.formatter("",d[a],e,d,"edit"):d[a],g=this.title?{title:b.jgrid.stripHtml(k)}:{},b("tr.footrow td:eq("+e+")",j.grid.sDiv).html(k).attr(g),i=!0):"get"==f&&(h[a]=b("tr.footrow td:eq("+e+")",j.grid.sDiv).html())})});return"get"==f?h:i},showHideCol:function(f,d){return this.each(function(){var c=this,e=!1,a=b.jgrid.cell_width?0:c.p.cellLayout,i;if(c.grid){"string"===
typeof f&&(f=[f]);d="none"!=d?"":"none";var h=""===d?!0:!1,g=c.p.groupHeader&&("object"===typeof c.p.groupHeader||b.isFunction(c.p.groupHeader));g&&b(c).jqGrid("destroyGroupHeader",!1);b(this.p.colModel).each(function(g){if(-1!==b.inArray(this.name,f)&&this.hidden===h){if(!0===c.p.frozenColumns&&!0===this.frozen)return!0;b("tr",c.grid.hDiv).each(function(){b(this.cells[g]).css("display",d)});b(c.rows).each(function(){b(this).hasClass("jqgroup")||b(this.cells[g]).css("display",d)});c.p.footerrow&&
b("tr.footrow td:eq("+g+")",c.grid.sDiv).css("display",d);i=parseInt(this.width,10);c.p.tblwidth="none"===d?c.p.tblwidth-(i+a):c.p.tblwidth+(i+a);this.hidden=!h;e=!0;b(c).triggerHandler("jqGridShowHideCol",[h,this.name,g])}});!0===e&&(!0===c.p.shrinkToFit&&!isNaN(c.p.height)&&(c.p.tblwidth+=parseInt(c.p.scrollOffset,10)),b(c).jqGrid("setGridWidth",!0===c.p.shrinkToFit?c.p.tblwidth:c.p.width));g&&b(c).jqGrid("setGroupHeaders",c.p.groupHeader)}})},hideCol:function(f){return this.each(function(){b(this).jqGrid("showHideCol",
f,"none")})},showCol:function(f){return this.each(function(){b(this).jqGrid("showHideCol",f,"")})},remapColumns:function(f,d,c){function e(a){var c;c=a.length?b.makeArray(a):b.extend({},a);b.each(f,function(b){a[b]=c[this]})}function a(a,c){b(">tr"+(c||""),a).each(function(){var a=this,c=b.makeArray(a.cells);b.each(f,function(){var b=c[this];b&&a.appendChild(b)})})}var i=this.get(0);e(i.p.colModel);e(i.p.colNames);e(i.grid.headers);a(b("thead:first",i.grid.hDiv),c&&":not(.ui-jqgrid-labels)");d&&a(b("#"+
b.jgrid.jqID(i.p.id)+" tbody:first"),".jqgfirstrow, tr.jqgrow, tr.jqfoot");i.p.footerrow&&a(b("tbody:first",i.grid.sDiv));i.p.remapColumns&&(i.p.remapColumns.length?e(i.p.remapColumns):i.p.remapColumns=b.makeArray(f));i.p.lastsort=b.inArray(i.p.lastsort,f);i.p.treeGrid&&(i.p.expColInd=b.inArray(i.p.expColInd,f));b(i).triggerHandler("jqGridRemapColumns",[f,d,c])},setGridWidth:function(f,d){return this.each(function(){if(this.grid){var c=this,e,a=0,i=b.jgrid.cell_width?0:c.p.cellLayout,h,g=0,j=!1,k=
c.p.scrollOffset,l,n=0,s=0,m;"boolean"!==typeof d&&(d=c.p.shrinkToFit);if(!isNaN(f)){f=parseInt(f,10);c.grid.width=c.p.width=f;b("#gbox_"+b.jgrid.jqID(c.p.id)).css("width",f+"px");b("#gview_"+b.jgrid.jqID(c.p.id)).css("width",f+"px");b(c.grid.bDiv).css("width",f+"px");b(c.grid.hDiv).css("width",f+"px");c.p.pager&&b(c.p.pager).css("width",f+"px");c.p.toppager&&b(c.p.toppager).css("width",f+"px");!0===c.p.toolbar[0]&&(b(c.grid.uDiv).css("width",f+"px"),"both"==c.p.toolbar[1]&&b(c.grid.ubDiv).css("width",
f+"px"));c.p.footerrow&&b(c.grid.sDiv).css("width",f+"px");!1===d&&!0===c.p.forceFit&&(c.p.forceFit=!1);if(!0===d){b.each(c.p.colModel,function(){if(this.hidden===false){e=this.widthOrg;a=a+(e+i);this.fixed?n=n+(e+i):g++;s++}});if(0===g)return;c.p.tblwidth=a;l=f-i*g-n;if(!isNaN(c.p.height)&&(b(c.grid.bDiv)[0].clientHeight<b(c.grid.bDiv)[0].scrollHeight||1===c.rows.length))j=!0,l-=k;var a=0,v=0<c.grid.cols.length;b.each(c.p.colModel,function(b){if(this.hidden===false&&!this.fixed){e=this.widthOrg;
e=Math.round(l*e/(c.p.tblwidth-i*g-n));if(!(e<0)){this.width=e;a=a+e;c.grid.headers[b].width=e;c.grid.headers[b].el.style.width=e+"px";if(c.p.footerrow)c.grid.footers[b].style.width=e+"px";if(v)c.grid.cols[b].style.width=e+"px";h=b}}});if(!h)return;m=0;j?f-n-(a+i*g)!==k&&(m=f-n-(a+i*g)-k):1!==Math.abs(f-n-(a+i*g))&&(m=f-n-(a+i*g));c.p.colModel[h].width+=m;c.p.tblwidth=a+m+i*g+n;c.p.tblwidth>f?(j=c.p.tblwidth-parseInt(f,10),c.p.tblwidth=f,e=c.p.colModel[h].width-=j):e=c.p.colModel[h].width;c.grid.headers[h].width=
e;c.grid.headers[h].el.style.width=e+"px";v&&(c.grid.cols[h].style.width=e+"px");c.p.footerrow&&(c.grid.footers[h].style.width=e+"px")}c.p.tblwidth&&(b("table:first",c.grid.bDiv).css("width",c.p.tblwidth+"px"),b("table:first",c.grid.hDiv).css("width",c.p.tblwidth+"px"),c.grid.hDiv.scrollLeft=c.grid.bDiv.scrollLeft,c.p.footerrow&&b("table:first",c.grid.sDiv).css("width",c.p.tblwidth+"px"))}}})},setGridHeight:function(f){return this.each(function(){if(this.grid){var d=b(this.grid.bDiv);d.css({height:f+
(isNaN(f)?"":"px")});!0===this.p.frozenColumns&&b("#"+b.jgrid.jqID(this.p.id)+"_frozen").parent().height(d.height()-16);this.p.height=f;this.p.scroll&&this.grid.populateVisible()}})},setCaption:function(f){return this.each(function(){this.p.caption=f;b("span.ui-jqgrid-title, span.ui-jqgrid-title-rtl",this.grid.cDiv).html(f);b(this.grid.cDiv).show()})},setLabel:function(f,d,c,e){return this.each(function(){var a=-1;if(this.grid&&void 0!==f&&(b(this.p.colModel).each(function(b){if(this.name==f)return a=
b,!1}),0<=a)){var i=b("tr.ui-jqgrid-labels th:eq("+a+")",this.grid.hDiv);if(d){var h=b(".s-ico",i);b("[id^=jqgh_]",i).empty().html(d).append(h);this.p.colNames[a]=d}c&&("string"===typeof c?b(i).addClass(c):b(i).css(c));"object"===typeof e&&b(i).attr(e)}})},setCell:function(f,d,c,e,a,i){return this.each(function(){var h=-1,g,j;if(this.grid&&(isNaN(d)?b(this.p.colModel).each(function(a){if(this.name==d)return h=a,!1}):h=parseInt(d,10),0<=h&&(g=this.rows.namedItem(f)))){var k=b("td:eq("+h+")",g);if(""!==
c||!0===i)g=this.formatter(f,c,h,g,"edit"),j=this.p.colModel[h].title?{title:b.jgrid.stripHtml(g)}:{},this.p.treeGrid&&0<b(".tree-wrap",b(k)).length?b("span",b(k)).html(g).attr(j):b(k).html(g).attr(j),"local"==this.p.datatype&&(g=this.p.colModel[h],c=g.formatter&&"string"===typeof g.formatter&&"date"==g.formatter?b.unformat.date.call(this,c,g):c,j=this.p._index[f],void 0!==j&&(this.p.data[j][g.name]=c));"string"===typeof e?b(k).addClass(e):e&&b(k).css(e);"object"===typeof a&&b(k).attr(a)}})},getCell:function(f,
d){var c=!1;this.each(function(){var e=-1;if(this.grid&&(isNaN(d)?b(this.p.colModel).each(function(a){if(this.name===d)return e=a,!1}):e=parseInt(d,10),0<=e)){var a=this.rows.namedItem(f);if(a)try{c=b.unformat.call(this,b("td:eq("+e+")",a),{rowId:a.id,colModel:this.p.colModel[e]},e)}catch(i){c=b.jgrid.htmlDecode(b("td:eq("+e+")",a).html())}}});return c},getCol:function(f,d,c){var e=[],a,i=0,h,g,j,d="boolean"!==typeof d?!1:d;void 0===c&&(c=!1);this.each(function(){var k=-1;if(this.grid&&(isNaN(f)?
b(this.p.colModel).each(function(a){if(this.name===f)return k=a,!1}):k=parseInt(f,10),0<=k)){var l=this.rows.length,n=0;if(l&&0<l){for(;n<l;){if(b(this.rows[n]).hasClass("jqgrow")){try{a=b.unformat.call(this,b(this.rows[n].cells[k]),{rowId:this.rows[n].id,colModel:this.p.colModel[k]},k)}catch(s){a=b.jgrid.htmlDecode(this.rows[n].cells[k].innerHTML)}c?(j=parseFloat(a),i+=j,void 0===g&&(g=h=j),h=Math.min(h,j),g=Math.max(g,j)):d?e.push({id:this.rows[n].id,value:a}):e.push(a)}n++}if(c)switch(c.toLowerCase()){case "sum":e=
i;break;case "avg":e=i/l;break;case "count":e=l;break;case "min":e=h;break;case "max":e=g}}}});return e},clearGridData:function(f){return this.each(function(){if(this.grid){"boolean"!==typeof f&&(f=!1);if(this.p.deepempty)b("#"+b.jgrid.jqID(this.p.id)+" tbody:first tr:gt(0)").remove();else{var d=b("#"+b.jgrid.jqID(this.p.id)+" tbody:first tr:first")[0];b("#"+b.jgrid.jqID(this.p.id)+" tbody:first").empty().append(d)}this.p.footerrow&&f&&b(".ui-jqgrid-ftable td",this.grid.sDiv).html("&#160;");this.p.selrow=
null;this.p.selarrrow=[];this.p.savedRow=[];this.p.records=0;this.p.page=1;this.p.lastpage=0;this.p.reccount=0;this.p.data=[];this.p._index={};this.updatepager(!0,!1)}})},getInd:function(b,d){var c=!1,e;this.each(function(){(e=this.rows.namedItem(b))&&(c=!0===d?e:e.rowIndex)});return c},bindKeys:function(f){var d=b.extend({onEnter:null,onSpace:null,onLeftKey:null,onRightKey:null,scrollingRows:!0},f||{});return this.each(function(){var c=this;b("body").is("[role]")||b("body").attr("role","application");
c.p.scrollrows=d.scrollingRows;b(c).keydown(function(e){var a=b(c).find("tr[tabindex=0]")[0],f,h,g,j=c.p.treeReader.expanded_field;if(a)if(g=c.p._index[a.id],37===e.keyCode||38===e.keyCode||39===e.keyCode||40===e.keyCode){if(38===e.keyCode){h=a.previousSibling;f="";if(h)if(b(h).is(":hidden"))for(;h;){if(h=h.previousSibling,!b(h).is(":hidden")&&b(h).hasClass("jqgrow")){f=h.id;break}}else f=h.id;b(c).jqGrid("setSelection",f,!0,e);e.preventDefault()}if(40===e.keyCode){h=a.nextSibling;f="";if(h)if(b(h).is(":hidden"))for(;h;){if(h=
h.nextSibling,!b(h).is(":hidden")&&b(h).hasClass("jqgrow")){f=h.id;break}}else f=h.id;b(c).jqGrid("setSelection",f,!0,e);e.preventDefault()}37===e.keyCode&&(c.p.treeGrid&&c.p.data[g][j]&&b(a).find("div.treeclick").trigger("click"),b(c).triggerHandler("jqGridKeyLeft",[c.p.selrow]),b.isFunction(d.onLeftKey)&&d.onLeftKey.call(c,c.p.selrow));39===e.keyCode&&(c.p.treeGrid&&!c.p.data[g][j]&&b(a).find("div.treeclick").trigger("click"),b(c).triggerHandler("jqGridKeyRight",[c.p.selrow]),b.isFunction(d.onRightKey)&&
d.onRightKey.call(c,c.p.selrow))}else 13===e.keyCode?(b(c).triggerHandler("jqGridKeyEnter",[c.p.selrow]),b.isFunction(d.onEnter)&&d.onEnter.call(c,c.p.selrow)):32===e.keyCode&&(b(c).triggerHandler("jqGridKeySpace",[c.p.selrow]),b.isFunction(d.onSpace)&&d.onSpace.call(c,c.p.selrow))})})},unbindKeys:function(){return this.each(function(){b(this).unbind("keydown")})},getLocalRow:function(b){var d=!1,c;this.each(function(){void 0!==b&&(c=this.p._index[b],0<=c&&(d=this.p.data[c]))});return d}})})(jQuery);
(function(a){a.fmatter={};a.extend(a.fmatter,{isBoolean:function(a){return"boolean"===typeof a},isObject:function(c){return c&&("object"===typeof c||a.isFunction(c))||!1},isString:function(a){return"string"===typeof a},isNumber:function(a){return"number"===typeof a&&isFinite(a)},isNull:function(a){return null===a},isUndefined:function(a){return void 0===a},isValue:function(a){return this.isObject(a)||this.isString(a)||this.isNumber(a)||this.isBoolean(a)},isEmpty:function(c){if(!this.isString(c)&&
this.isValue(c))return!1;if(!this.isValue(c))return!0;c=a.trim(c).replace(/\&nbsp\;/ig,"").replace(/\&#160\;/ig,"");return""===c}});a.fn.fmatter=function(c,b,d,e,f){var h=b,d=a.extend({},a.jgrid.formatter,d);try{h=a.fn.fmatter[c].call(this,b,d,e,f)}catch(g){}return h};a.fmatter.util={NumberFormat:function(c,b){a.fmatter.isNumber(c)||(c*=1);if(a.fmatter.isNumber(c)){var d=0>c,e=""+c,f=b.decimalSeparator||".",h;if(a.fmatter.isNumber(b.decimalPlaces)){var g=b.decimalPlaces,e=Math.pow(10,g),e=""+Math.round(c*
e)/e;h=e.lastIndexOf(".");if(0<g){0>h?(e+=f,h=e.length-1):"."!==f&&(e=e.replace(".",f));for(;e.length-1-h<g;)e+="0"}}if(b.thousandsSeparator){g=b.thousandsSeparator;h=e.lastIndexOf(f);h=-1<h?h:e.length;var f=e.substring(h),i=-1,j;for(j=h;0<j;j--){i++;if(0===i%3&&j!==h&&(!d||1<j))f=g+f;f=e.charAt(j-1)+f}e=f}e=b.prefix?b.prefix+e:e;return e=b.suffix?e+b.suffix:e}return c},DateFormat:function(c,b,d,e){var f=/^\/Date\((([-+])?[0-9]+)(([-+])([0-9]{2})([0-9]{2}))?\)\/$/,h="string"===typeof b?b.match(f):
null,f=function(a,b){a=""+a;for(b=parseInt(b,10)||2;a.length<b;)a="0"+a;return a},g={m:1,d:1,y:1970,h:0,i:0,s:0,u:0},i=0,j,k=["i18n"];k.i18n={dayNames:e.dayNames,monthNames:e.monthNames};e.masks.hasOwnProperty(c)&&(c=e.masks[c]);if(!isNaN(b-0)&&"u"==(""+c).toLowerCase())i=new Date(1E3*parseFloat(b));else if(b.constructor===Date)i=b;else if(null!==h)i=new Date(parseInt(h[1],10)),h[3]&&(c=60*Number(h[5])+Number(h[6]),c*="-"==h[4]?1:-1,c-=i.getTimezoneOffset(),i.setTime(Number(Number(i)+6E4*c)));else{b=
(""+b).split(/[\\\/:_;.,\t\T\s-]/);c=c.split(/[\\\/:_;.,\t\T\s-]/);h=0;for(j=c.length;h<j;h++)"M"==c[h]&&(i=a.inArray(b[h],k.i18n.monthNames),-1!==i&&12>i&&(b[h]=i+1)),"F"==c[h]&&(i=a.inArray(b[h],k.i18n.monthNames),-1!==i&&11<i&&(b[h]=i+1-12)),b[h]&&(g[c[h].toLowerCase()]=parseInt(b[h],10));g.f&&(g.m=g.f);if(0===g.m&&0===g.y&&0===g.d)return"&#160;";g.m=parseInt(g.m,10)-1;i=g.y;70<=i&&99>=i?g.y=1900+g.y:0<=i&&69>=i&&(g.y=2E3+g.y);i=new Date(g.y,g.m,g.d,g.h,g.i,g.s,g.u)}e.masks.hasOwnProperty(d)?d=
e.masks[d]:d||(d="Y-m-d");c=i.getHours();b=i.getMinutes();g=i.getDate();h=i.getMonth()+1;j=i.getTimezoneOffset();var l=i.getSeconds(),r=i.getMilliseconds(),n=i.getDay(),m=i.getFullYear(),o=(n+6)%7+1,p=(new Date(m,h-1,g)-new Date(m,0,1))/864E5,q={d:f(g),D:k.i18n.dayNames[n],j:g,l:k.i18n.dayNames[n+7],N:o,S:e.S(g),w:n,z:p,W:5>o?Math.floor((p+o-1)/7)+1:Math.floor((p+o-1)/7)||(4>((new Date(m-1,0,1)).getDay()+6)%7?53:52),F:k.i18n.monthNames[h-1+12],m:f(h),M:k.i18n.monthNames[h-1],n:h,t:"?",L:"?",o:"?",
Y:m,y:(""+m).substring(2),a:12>c?e.AmPm[0]:e.AmPm[1],A:12>c?e.AmPm[2]:e.AmPm[3],B:"?",g:c%12||12,G:c,h:f(c%12||12),H:f(c),i:f(b),s:f(l),u:r,e:"?",I:"?",O:(0<j?"-":"+")+f(100*Math.floor(Math.abs(j)/60)+Math.abs(j)%60,4),P:"?",T:((""+i).match(/\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g)||[""]).pop().replace(/[^-+\dA-Z]/g,""),Z:"?",c:"?",r:"?",U:Math.floor(i/1E3)};return d.replace(/\\.|[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g,
function(a){return q.hasOwnProperty(a)?q[a]:a.substring(1)})}};a.fn.fmatter.defaultFormat=function(c,b){return a.fmatter.isValue(c)&&""!==c?c:b.defaultValue||"&#160;"};a.fn.fmatter.email=function(c,b){return!a.fmatter.isEmpty(c)?'<a href="mailto:'+c+'">'+c+"</a>":a.fn.fmatter.defaultFormat(c,b)};a.fn.fmatter.checkbox=function(c,b){var d=a.extend({},b.checkbox),e;void 0!==b.colModel&&!a.fmatter.isUndefined(b.colModel.formatoptions)&&(d=a.extend({},d,b.colModel.formatoptions));e=!0===d.disabled?'disabled="disabled"':
"";if(a.fmatter.isEmpty(c)||a.fmatter.isUndefined(c))c=a.fn.fmatter.defaultFormat(c,d);c=(""+c).toLowerCase();return'<input type="checkbox" '+(0>c.search(/(false|0|no|n|off)/i)?" checked='checked' ":"")+' value="'+c+'" offval="no" '+e+"/>"};a.fn.fmatter.link=function(c,b){var d={target:b.target},e="";void 0!==b.colModel&&!a.fmatter.isUndefined(b.colModel.formatoptions)&&(d=a.extend({},d,b.colModel.formatoptions));d.target&&(e="target="+d.target);return!a.fmatter.isEmpty(c)?"<a "+e+' href="'+c+'">'+
c+"</a>":a.fn.fmatter.defaultFormat(c,b)};a.fn.fmatter.showlink=function(c,b){var d={baseLinkUrl:b.baseLinkUrl,showAction:b.showAction,addParam:b.addParam||"",target:b.target,idName:b.idName},e="";void 0!==b.colModel&&!a.fmatter.isUndefined(b.colModel.formatoptions)&&(d=a.extend({},d,b.colModel.formatoptions));d.target&&(e="target="+d.target);d=d.baseLinkUrl+d.showAction+"?"+d.idName+"="+b.rowId+d.addParam;return a.fmatter.isString(c)||a.fmatter.isNumber(c)?"<a "+e+' href="'+d+'">'+c+"</a>":a.fn.fmatter.defaultFormat(c,
b)};a.fn.fmatter.integer=function(c,b){var d=a.extend({},b.integer);void 0!==b.colModel&&!a.fmatter.isUndefined(b.colModel.formatoptions)&&(d=a.extend({},d,b.colModel.formatoptions));return a.fmatter.isEmpty(c)?d.defaultValue:a.fmatter.util.NumberFormat(c,d)};a.fn.fmatter.number=function(c,b){var d=a.extend({},b.number);void 0!==b.colModel&&!a.fmatter.isUndefined(b.colModel.formatoptions)&&(d=a.extend({},d,b.colModel.formatoptions));return a.fmatter.isEmpty(c)?d.defaultValue:a.fmatter.util.NumberFormat(c,
d)};a.fn.fmatter.currency=function(c,b){var d=a.extend({},b.currency);void 0!==b.colModel&&!a.fmatter.isUndefined(b.colModel.formatoptions)&&(d=a.extend({},d,b.colModel.formatoptions));return a.fmatter.isEmpty(c)?d.defaultValue:a.fmatter.util.NumberFormat(c,d)};a.fn.fmatter.date=function(c,b,d,e){d=a.extend({},b.date);void 0!==b.colModel&&!a.fmatter.isUndefined(b.colModel.formatoptions)&&(d=a.extend({},d,b.colModel.formatoptions));return!d.reformatAfterEdit&&"edit"==e?a.fn.fmatter.defaultFormat(c,
b):!a.fmatter.isEmpty(c)?a.fmatter.util.DateFormat(d.srcformat,c,d.newformat,d):a.fn.fmatter.defaultFormat(c,b)};a.fn.fmatter.select=function(c,b){var c=""+c,d=!1,e=[],f,h;a.fmatter.isUndefined(b.colModel.formatoptions)?a.fmatter.isUndefined(b.colModel.editoptions)||(d=b.colModel.editoptions.value,f=void 0===b.colModel.editoptions.separator?":":b.colModel.editoptions.separator,h=void 0===b.colModel.editoptions.delimiter?";":b.colModel.editoptions.delimiter):(d=b.colModel.formatoptions.value,f=void 0===
b.colModel.formatoptions.separator?":":b.colModel.formatoptions.separator,h=void 0===b.colModel.formatoptions.delimiter?";":b.colModel.formatoptions.delimiter);if(d){var g=!0===b.colModel.editoptions.multiple?!0:!1,i=[];g&&(i=c.split(","),i=a.map(i,function(b){return a.trim(b)}));if(a.fmatter.isString(d)){var j=d.split(h),k=0,l;for(l=0;l<j.length;l++)if(h=j[l].split(f),2<h.length&&(h[1]=a.map(h,function(a,b){if(b>0)return a}).join(f)),g)-1<a.inArray(h[0],i)&&(e[k]=h[1],k++);else if(a.trim(h[0])==
a.trim(c)){e[0]=h[1];break}}else a.fmatter.isObject(d)&&(g?e=a.map(i,function(a){return d[a]}):e[0]=d[c]||"")}c=e.join(", ");return""===c?a.fn.fmatter.defaultFormat(c,b):c};a.fn.fmatter.rowactions=function(c){var b=a(this).closest("tr.jqgrow"),d=a(this).parent(),e=b.attr("id"),f=a(this).closest("table.ui-jqgrid-btable"),h=f[0],g=h.p,i=g.colModel[a.jgrid.getCellIndex(this)],j={keys:!1,onEdit:null,onSuccess:null,afterSave:null,onError:null,afterRestore:null,extraparam:{},url:null,restoreAfterError:!0,
mtype:"POST",delOptions:{},editOptions:{}},k=function(b){a.isFunction(j.afterRestore)&&j.afterRestore.call(h,b);d.find("div.ui-inline-edit,div.ui-inline-del").show();d.find("div.ui-inline-save,div.ui-inline-cancel").hide()};a.fmatter.isUndefined(i.formatoptions)||(j=a.extend(j,i.formatoptions));a.fmatter.isUndefined(g.editOptions)||(j.editOptions=g.editOptions);a.fmatter.isUndefined(g.delOptions)||(j.delOptions=g.delOptions);b.hasClass("jqgrid-new-row")&&(j.extraparam[g.prmNames.oper]=g.prmNames.addoper);
b={keys:j.keys,oneditfunc:j.onEdit,successfunc:j.onSuccess,url:j.url,extraparam:j.extraparam,aftersavefunc:function(b,c){a.isFunction(j.afterSave)&&j.afterSave.call(h,b,c);d.find("div.ui-inline-edit,div.ui-inline-del").show();d.find("div.ui-inline-save,div.ui-inline-cancel").hide()},errorfunc:j.onError,afterrestorefunc:k,restoreAfterError:j.restoreAfterError,mtype:j.mtype};switch(c){case "edit":f.jqGrid("editRow",e,b);d.find("div.ui-inline-edit,div.ui-inline-del").hide();d.find("div.ui-inline-save,div.ui-inline-cancel").show();
f.triggerHandler("jqGridAfterGridComplete");break;case "save":f.jqGrid("saveRow",e,b)&&(d.find("div.ui-inline-edit,div.ui-inline-del").show(),d.find("div.ui-inline-save,div.ui-inline-cancel").hide(),f.triggerHandler("jqGridAfterGridComplete"));break;case "cancel":f.jqGrid("restoreRow",e,k);d.find("div.ui-inline-edit,div.ui-inline-del").show();d.find("div.ui-inline-save,div.ui-inline-cancel").hide();f.triggerHandler("jqGridAfterGridComplete");break;case "del":f.jqGrid("delGridRow",e,j.delOptions);
break;case "formedit":f.jqGrid("setSelection",e),f.jqGrid("editGridRow",e,j.editOptions)}};a.fn.fmatter.actions=function(c,b){var d={keys:!1,editbutton:!0,delbutton:!0,editformbutton:!1},e=b.rowId,f="";a.fmatter.isUndefined(b.colModel.formatoptions)||(d=a.extend(d,b.colModel.formatoptions));if(void 0===e||a.fmatter.isEmpty(e))return"";d.editformbutton?f+="<div title='"+a.jgrid.nav.edittitle+"' style='float:left;cursor:pointer;' class='ui-pg-div ui-inline-edit' onclick=jQuery.fn.fmatter.rowactions.call(this,'formedit'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); ><span class='ui-icon ui-icon-pencil'></span></div>":
d.editbutton&&(f+="<div title='"+a.jgrid.nav.edittitle+"' style='float:left;cursor:pointer;' class='ui-pg-div ui-inline-edit' onclick=jQuery.fn.fmatter.rowactions.call(this,'edit'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover') ><span class='ui-icon ui-icon-pencil'></span></div>");d.delbutton&&(f+="<div title='"+a.jgrid.nav.deltitle+"' style='float:left;margin-left:5px;' class='ui-pg-div ui-inline-del' onclick=jQuery.fn.fmatter.rowactions.call(this,'del'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); ><span class='ui-icon ui-icon-trash'></span></div>");
f+="<div title='"+a.jgrid.edit.bSubmit+"' style='float:left;display:none' class='ui-pg-div ui-inline-save' onclick=jQuery.fn.fmatter.rowactions.call(this,'save'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); ><span class='ui-icon ui-icon-disk'></span></div>";f+="<div title='"+a.jgrid.edit.bCancel+"' style='float:left;display:none;margin-left:5px;' class='ui-pg-div ui-inline-cancel' onclick=jQuery.fn.fmatter.rowactions.call(this,'cancel'); onmouseover=jQuery(this).addClass('ui-state-hover'); onmouseout=jQuery(this).removeClass('ui-state-hover'); ><span class='ui-icon ui-icon-cancel'></span></div>";
return"<div style='margin-left:8px;'>"+f+"</div>"};a.unformat=function(c,b,d,e){var f,h=b.colModel.formatter,g=b.colModel.formatoptions||{},i=/([\.\*\_\'\(\)\{\}\+\?\\])/g,j=b.colModel.unformat||a.fn.fmatter[h]&&a.fn.fmatter[h].unformat;if(void 0!==j&&a.isFunction(j))f=j.call(this,a(c).text(),b,c);else if(!a.fmatter.isUndefined(h)&&a.fmatter.isString(h))switch(f=a.jgrid.formatter||{},h){case "integer":g=a.extend({},f.integer,g);b=g.thousandsSeparator.replace(i,"\\$1");f=a(c).text().replace(RegExp(b,
"g"),"");break;case "number":g=a.extend({},f.number,g);b=g.thousandsSeparator.replace(i,"\\$1");f=a(c).text().replace(RegExp(b,"g"),"").replace(g.decimalSeparator,".");break;case "currency":g=a.extend({},f.currency,g);b=g.thousandsSeparator.replace(i,"\\$1");b=RegExp(b,"g");f=a(c).text();g.prefix&&g.prefix.length&&(f=f.substr(g.prefix.length));g.suffix&&g.suffix.length&&(f=f.substr(0,f.length-g.suffix.length));f=f.replace(b,"").replace(g.decimalSeparator,".");break;case "checkbox":g=b.colModel.editoptions?
b.colModel.editoptions.value.split(":"):["Yes","No"];f=a("input",c).is(":checked")?g[0]:g[1];break;case "select":f=a.unformat.select(c,b,d,e);break;case "actions":return"";default:f=a(c).text()}return void 0!==f?f:!0===e?a(c).text():a.jgrid.htmlDecode(a(c).html())};a.unformat.select=function(c,b,d,e){d=[];c=a(c).text();if(!0===e)return c;var e=a.extend({},!a.fmatter.isUndefined(b.colModel.formatoptions)?b.colModel.formatoptions:b.colModel.editoptions),b=void 0===e.separator?":":e.separator,f=void 0===
e.delimiter?";":e.delimiter;if(e.value){var h=e.value,e=!0===e.multiple?!0:!1,g=[];e&&(g=c.split(","),g=a.map(g,function(b){return a.trim(b)}));if(a.fmatter.isString(h)){var i=h.split(f),j=0,k;for(k=0;k<i.length;k++)if(f=i[k].split(b),2<f.length&&(f[1]=a.map(f,function(a,b){if(b>0)return a}).join(b)),e)-1<a.inArray(f[1],g)&&(d[j]=f[0],j++);else if(a.trim(f[1])==a.trim(c)){d[0]=f[0];break}}else if(a.fmatter.isObject(h)||a.isArray(h))e||(g[0]=c),d=a.map(g,function(b){var c;a.each(h,function(a,d){if(d==
b){c=a;return false}});if(c!==void 0)return c});return d.join(", ")}return c||""};a.unformat.date=function(c,b){var d=a.jgrid.formatter.date||{};a.fmatter.isUndefined(b.formatoptions)||(d=a.extend({},d,b.formatoptions));return!a.fmatter.isEmpty(c)?a.fmatter.util.DateFormat(d.newformat,c,d.srcformat,d):a.fn.fmatter.defaultFormat(c,b)}})(jQuery);
(function(a){a.jgrid.extend({getColProp:function(a){var c={},d=this[0];if(!d.grid)return!1;var d=d.p.colModel,g;for(g=0;g<d.length;g++)if(d[g].name==a){c=d[g];break}return c},setColProp:function(b,c){return this.each(function(){if(this.grid&&c){var d=this.p.colModel,g;for(g=0;g<d.length;g++)if(d[g].name==b){a.extend(!0,this.p.colModel[g],c);break}}})},sortGrid:function(a,c,d){return this.each(function(){var g=-1,f;if(this.grid){a||(a=this.p.sortname);for(f=0;f<this.p.colModel.length;f++)if(this.p.colModel[f].index==
a||this.p.colModel[f].name==a){g=f;break}-1!=g&&(f=this.p.colModel[g].sortable,"boolean"!==typeof f&&(f=!0),"boolean"!==typeof c&&(c=!1),f&&this.sortData("jqgh_"+this.p.id+"_"+a,g,c,d))}})},clearBeforeUnload:function(){return this.each(function(){var b=this.grid;b.emptyRows.call(this,!0,!0);a(b.hDiv).unbind("mousemove");a(this).unbind();b.dragEnd=null;b.dragMove=null;b.dragStart=null;b.emptyRows=null;b.populate=null;b.populateVisible=null;b.scrollGrid=null;b.selectionPreserver=null;b.bDiv=null;b.cDiv=
null;b.hDiv=null;b.cols=null;var c,d=b.headers.length;for(c=0;c<d;c++)b.headers[c].el=null;this.addJSONData=this.addXmlData=this.formatter=this.constructTr=this.setHeadCheckBox=this.refreshIndex=this.updatepager=this.sortData=this.formatCol=null})},GridDestroy:function(){return this.each(function(){if(this.grid){this.p.pager&&a(this.p.pager).remove();try{a(this).jqGrid("clearBeforeUnload"),a("#gbox_"+a.jgrid.jqID(this.id)).remove()}catch(b){}}})},GridUnload:function(){return this.each(function(){if(this.grid){var b=
a(this).attr("id"),c=a(this).attr("class");this.p.pager&&a(this.p.pager).empty().removeClass("ui-state-default ui-jqgrid-pager corner-bottom");var d=document.createElement("table");a(d).attr({id:b});d.className=c;b=a.jgrid.jqID(this.id);a(d).removeClass("ui-jqgrid-btable");1===a(this.p.pager).parents("#gbox_"+b).length?(a(d).insertBefore("#gbox_"+b).show(),a(this.p.pager).insertBefore("#gbox_"+b)):a(d).insertBefore("#gbox_"+b).show();a(this).jqGrid("clearBeforeUnload");a("#gbox_"+b).remove()}})},
setGridState:function(b){return this.each(function(){this.grid&&("hidden"==b?(a(".ui-jqgrid-bdiv, .ui-jqgrid-hdiv","#gview_"+a.jgrid.jqID(this.p.id)).slideUp("fast"),this.p.pager&&a(this.p.pager).slideUp("fast"),this.p.toppager&&a(this.p.toppager).slideUp("fast"),!0===this.p.toolbar[0]&&("both"==this.p.toolbar[1]&&a(this.grid.ubDiv).slideUp("fast"),a(this.grid.uDiv).slideUp("fast")),this.p.footerrow&&a(".ui-jqgrid-sdiv","#gbox_"+a.jgrid.jqID(this.p.id)).slideUp("fast"),a(".ui-jqgrid-titlebar-close span",
this.grid.cDiv).removeClass("ui-icon-circle-triangle-n").addClass("ui-icon-circle-triangle-s"),this.p.gridstate="hidden"):"visible"==b&&(a(".ui-jqgrid-hdiv, .ui-jqgrid-bdiv","#gview_"+a.jgrid.jqID(this.p.id)).slideDown("fast"),this.p.pager&&a(this.p.pager).slideDown("fast"),this.p.toppager&&a(this.p.toppager).slideDown("fast"),!0===this.p.toolbar[0]&&("both"==this.p.toolbar[1]&&a(this.grid.ubDiv).slideDown("fast"),a(this.grid.uDiv).slideDown("fast")),this.p.footerrow&&a(".ui-jqgrid-sdiv","#gbox_"+
a.jgrid.jqID(this.p.id)).slideDown("fast"),a(".ui-jqgrid-titlebar-close span",this.grid.cDiv).removeClass("ui-icon-circle-triangle-s").addClass("ui-icon-circle-triangle-n"),this.p.gridstate="visible"))})},filterToolbar:function(b){b=a.extend({autosearch:!0,searchOnEnter:!0,beforeSearch:null,afterSearch:null,beforeClear:null,afterClear:null,searchurl:"",stringResult:!1,groupOp:"AND",defaultSearch:"bw"},b||{});return this.each(function(){var c=this;if(!this.ftoolbar){var d=function(){var e={},d=0,f,
h,l={},k;a.each(c.p.colModel,function(){h=this.index||this.name;k=this.searchoptions&&this.searchoptions.sopt?this.searchoptions.sopt[0]:"select"==this.stype?"eq":b.defaultSearch;if(f=a("#gs_"+a.jgrid.jqID(this.name),!0===this.frozen&&!0===c.p.frozenColumns?c.grid.fhDiv:c.grid.hDiv).val())e[h]=f,l[h]=k,d++;else try{delete c.p.postData[h]}catch(i){}});var g=0<d?!0:!1;if(!0===b.stringResult||"local"==c.p.datatype){var i='{"groupOp":"'+b.groupOp+'","rules":[',n=0;a.each(e,function(a,b){0<n&&(i+=",");
i+='{"field":"'+a+'",';i+='"op":"'+l[a]+'",';i+='"data":"'+(b+"").replace(/\\/g,"\\\\").replace(/\"/g,'\\"')+'"}';n++});i+="]}";a.extend(c.p.postData,{filters:i});a.each(["searchField","searchString","searchOper"],function(a,b){c.p.postData.hasOwnProperty(b)&&delete c.p.postData[b]})}else a.extend(c.p.postData,e);var o;c.p.searchurl&&(o=c.p.url,a(c).jqGrid("setGridParam",{url:c.p.searchurl}));var q="stop"===a(c).triggerHandler("jqGridToolbarBeforeSearch")?!0:!1;!q&&a.isFunction(b.beforeSearch)&&(q=
b.beforeSearch.call(c));q||a(c).jqGrid("setGridParam",{search:g}).trigger("reloadGrid",[{page:1}]);o&&a(c).jqGrid("setGridParam",{url:o});a(c).triggerHandler("jqGridToolbarAfterSearch");a.isFunction(b.afterSearch)&&b.afterSearch.call(c)},g=a("<tr class='ui-search-toolbar' role='rowheader'></tr>"),f;a.each(c.p.colModel,function(){var e=this,j,m,h,l;m=a("<th role='columnheader' class='ui-state-default ui-th-column ui-th-"+c.p.direction+"'></th>");j=a("<div style='position:relative;height:100%;padding-right:0.3em;'></div>");
!0===this.hidden&&a(m).css("display","none");this.search=!1===this.search?!1:!0;void 0===this.stype&&(this.stype="text");h=a.extend({},this.searchoptions||{});if(this.search)switch(this.stype){case "select":if(l=this.surl||h.dataUrl)a.ajax(a.extend({url:l,dataType:"html",success:function(f){if(h.buildSelect!==void 0)(f=h.buildSelect(f))&&a(j).append(f);else a(j).append(f);h.defaultValue!==void 0&&a("select",j).val(h.defaultValue);a("select",j).attr({name:e.index||e.name,id:"gs_"+e.name});h.attr&&
a("select",j).attr(h.attr);a("select",j).css({width:"100%"});a.jgrid.bindEv(a("select",j)[0],h,c);b.autosearch===true&&a("select",j).change(function(){d();return false});f=null}},a.jgrid.ajaxOptions,c.p.ajaxSelectOptions||{}));else{var k,p,i;e.searchoptions?(k=void 0===e.searchoptions.value?"":e.searchoptions.value,p=void 0===e.searchoptions.separator?":":e.searchoptions.separator,i=void 0===e.searchoptions.delimiter?";":e.searchoptions.delimiter):e.editoptions&&(k=void 0===e.editoptions.value?"":
e.editoptions.value,p=void 0===e.editoptions.separator?":":e.editoptions.separator,i=void 0===e.editoptions.delimiter?";":e.editoptions.delimiter);if(k){l=document.createElement("select");l.style.width="100%";a(l).attr({name:e.index||e.name,id:"gs_"+e.name});var n,o;if("string"===typeof k){k=k.split(i);for(o=0;o<k.length;o++)n=k[o].split(p),i=document.createElement("option"),i.value=n[0],i.innerHTML=n[1],l.appendChild(i)}else if("object"===typeof k)for(n in k)k.hasOwnProperty(n)&&(i=document.createElement("option"),
i.value=n,i.innerHTML=k[n],l.appendChild(i));void 0!==h.defaultValue&&a(l).val(h.defaultValue);h.attr&&a(l).attr(h.attr);a.jgrid.bindEv(l,h,c);a(j).append(l);!0===b.autosearch&&a(l).change(function(){d();return false})}}break;case "text":p=void 0!==h.defaultValue?h.defaultValue:"",a(j).append("<input type='text' style='width:95%;padding:0px;' name='"+(e.index||e.name)+"' id='gs_"+e.name+"' value='"+p+"'/>"),h.attr&&a("input",j).attr(h.attr),a.jgrid.bindEv(a("input",j)[0],h,c),!0===b.autosearch&&(b.searchOnEnter?
a("input",j).keypress(function(a){if((a.charCode||a.keyCode||0)==13){d();return false}return this}):a("input",j).keydown(function(a){switch(a.which){case 13:return false;case 9:case 16:case 37:case 38:case 39:case 40:case 27:break;default:f&&clearTimeout(f);f=setTimeout(function(){d()},500)}}))}a(m).append(j);a(g).append(m)});a("table thead",c.grid.hDiv).append(g);this.ftoolbar=!0;this.triggerToolbar=d;this.clearToolbar=function(e){var d={},f=0,h,e="boolean"!==typeof e?!0:e;a.each(c.p.colModel,function(){var b;
this.searchoptions&&void 0!==this.searchoptions.defaultValue&&(b=this.searchoptions.defaultValue);h=this.index||this.name;switch(this.stype){case "select":a("#gs_"+a.jgrid.jqID(this.name)+" option",!0===this.frozen&&!0===c.p.frozenColumns?c.grid.fhDiv:c.grid.hDiv).each(function(c){if(c===0)this.selected=true;if(a(this).val()==b){this.selected=true;return false}});if(void 0!==b)d[h]=b,f++;else try{delete c.p.postData[h]}catch(e){}break;case "text":if(a("#gs_"+a.jgrid.jqID(this.name),!0===this.frozen&&
!0===c.p.frozenColumns?c.grid.fhDiv:c.grid.hDiv).val(b),void 0!==b)d[h]=b,f++;else try{delete c.p.postData[h]}catch(k){}}});var g=0<f?!0:!1;if(!0===b.stringResult||"local"==c.p.datatype){var k='{"groupOp":"'+b.groupOp+'","rules":[',p=0;a.each(d,function(a,b){0<p&&(k+=",");k+='{"field":"'+a+'",';k+='"op":"eq",';k+='"data":"'+(b+"").replace(/\\/g,"\\\\").replace(/\"/g,'\\"')+'"}';p++});k+="]}";a.extend(c.p.postData,{filters:k});a.each(["searchField","searchString","searchOper"],function(a,b){c.p.postData.hasOwnProperty(b)&&
delete c.p.postData[b]})}else a.extend(c.p.postData,d);var i;c.p.searchurl&&(i=c.p.url,a(c).jqGrid("setGridParam",{url:c.p.searchurl}));var n="stop"===a(c).triggerHandler("jqGridToolbarBeforeClear")?!0:!1;!n&&a.isFunction(b.beforeClear)&&(n=b.beforeClear.call(c));n||e&&a(c).jqGrid("setGridParam",{search:g}).trigger("reloadGrid",[{page:1}]);i&&a(c).jqGrid("setGridParam",{url:i});a(c).triggerHandler("jqGridToolbarAfterClear");a.isFunction(b.afterClear)&&b.afterClear()};this.toggleToolbar=function(){var b=
a("tr.ui-search-toolbar",c.grid.hDiv),d=!0===c.p.frozenColumns?a("tr.ui-search-toolbar",c.grid.fhDiv):!1;"none"==b.css("display")?(b.show(),d&&d.show()):(b.hide(),d&&d.hide())}}})},destroyFilterToolbar:function(){return this.each(function(){this.ftoolbar&&(this.toggleToolbar=this.clearToolbar=this.triggerToolbar=null,this.ftoolbar=!1,a(this.grid.hDiv).find("table thead tr.ui-search-toolbar").remove())})},destroyGroupHeader:function(b){void 0===b&&(b=!0);return this.each(function(){var c,d,g,f,e,j;
d=this.grid;var m=a("table.ui-jqgrid-htable thead",d.hDiv),h=this.p.colModel;if(d){a(this).unbind(".setGroupHeaders");c=a("<tr>",{role:"rowheader"}).addClass("ui-jqgrid-labels");f=d.headers;d=0;for(g=f.length;d<g;d++){e=h[d].hidden?"none":"";e=a(f[d].el).width(f[d].width).css("display",e);try{e.removeAttr("rowSpan")}catch(l){e.attr("rowSpan",1)}c.append(e);j=e.children("span.ui-jqgrid-resize");0<j.length&&(j[0].style.height="");e.children("div")[0].style.top=""}a(m).children("tr.ui-jqgrid-labels").remove();
a(m).prepend(c);!0===b&&a(this).jqGrid("setGridParam",{groupHeader:null})}})},setGroupHeaders:function(b){b=a.extend({useColSpanStyle:!1,groupHeaders:[]},b||{});return this.each(function(){this.p.groupHeader=b;var c,d,g=0,f,e,j,m,h,l=this.p.colModel,k=l.length,p=this.grid.headers,i=a("table.ui-jqgrid-htable",this.grid.hDiv),n=i.children("thead").children("tr.ui-jqgrid-labels:last").addClass("jqg-second-row-header");f=i.children("thead");var o=i.find(".jqg-first-row-header");void 0===o[0]?o=a("<tr>",
{role:"row","aria-hidden":"true"}).addClass("jqg-first-row-header").css("height","auto"):o.empty();var q,r=function(a,b){var c=b.length,d;for(d=0;d<c;d++)if(b[d].startColumnName===a)return d;return-1};a(this).prepend(f);f=a("<tr>",{role:"rowheader"}).addClass("ui-jqgrid-labels jqg-third-row-header");for(c=0;c<k;c++)if(j=p[c].el,m=a(j),d=l[c],e={height:"0px",width:p[c].width+"px",display:d.hidden?"none":""},a("<th>",{role:"gridcell"}).css(e).addClass("ui-first-th-"+this.p.direction).appendTo(o),j.style.width=
"",e=r(d.name,b.groupHeaders),0<=e){e=b.groupHeaders[e];g=e.numberOfColumns;h=e.titleText;for(e=d=0;e<g&&c+e<k;e++)l[c+e].hidden||d++;e=a("<th>").attr({role:"columnheader"}).addClass("ui-state-default ui-th-column-header ui-th-"+this.p.direction).css({height:"22px","border-top":"0px none"}).html(h);0<d&&e.attr("colspan",""+d);this.p.headertitles&&e.attr("title",e.text());0===d&&e.hide();m.before(e);f.append(j);g-=1}else 0===g?b.useColSpanStyle?m.attr("rowspan","2"):(a("<th>",{role:"columnheader"}).addClass("ui-state-default ui-th-column-header ui-th-"+
this.p.direction).css({display:d.hidden?"none":"","border-top":"0px none"}).insertBefore(m),f.append(j)):(f.append(j),g--);l=a(this).children("thead");l.prepend(o);f.insertAfter(n);i.append(l);b.useColSpanStyle&&(i.find("span.ui-jqgrid-resize").each(function(){var b=a(this).parent();b.is(":visible")&&(this.style.cssText="height: "+b.height()+"px !important; cursor: col-resize;")}),i.find("div.ui-jqgrid-sortable").each(function(){var b=a(this),c=b.parent();c.is(":visible")&&c.is(":has(span.ui-jqgrid-resize)")&&
b.css("top",(c.height()-b.outerHeight())/2+"px")}));q=l.find("tr.jqg-first-row-header");a(this).bind("jqGridResizeStop.setGroupHeaders",function(a,b,c){q.find("th").eq(c).width(b)})})},setFrozenColumns:function(){return this.each(function(){if(this.grid){var b=this,c=b.p.colModel,d=0,g=c.length,f=-1,e=!1;if(!(!0===b.p.subGrid||!0===b.p.treeGrid||!0===b.p.cellEdit||b.p.sortable||b.p.scroll||b.p.grouping)){b.p.rownumbers&&d++;for(b.p.multiselect&&d++;d<g;){if(!0===c[d].frozen)e=!0,f=d;else break;d++}if(0<=
f&&e){c=b.p.caption?a(b.grid.cDiv).outerHeight():0;d=a(".ui-jqgrid-htable","#gview_"+a.jgrid.jqID(b.p.id)).height();b.p.toppager&&(c+=a(b.grid.topDiv).outerHeight());!0===b.p.toolbar[0]&&"bottom"!=b.p.toolbar[1]&&(c+=a(b.grid.uDiv).outerHeight());b.grid.fhDiv=a('<div style="position:absolute;left:0px;top:'+c+"px;height:"+d+'px;" class="frozen-div ui-state-default ui-jqgrid-hdiv"></div>');b.grid.fbDiv=a('<div style="position:absolute;left:0px;top:'+(parseInt(c,10)+parseInt(d,10)+1)+'px;overflow-y:hidden" class="frozen-bdiv ui-jqgrid-bdiv"></div>');
a("#gview_"+a.jgrid.jqID(b.p.id)).append(b.grid.fhDiv);c=a(".ui-jqgrid-htable","#gview_"+a.jgrid.jqID(b.p.id)).clone(!0);if(b.p.groupHeader){a("tr.jqg-first-row-header, tr.jqg-third-row-header",c).each(function(){a("th:gt("+f+")",this).remove()});var j=-1,m=-1;a("tr.jqg-second-row-header th",c).each(function(){var b=parseInt(a(this).attr("colspan"),10);b&&(j+=b,m++);if(j===f)return!1});j!==f&&(m=f);a("tr.jqg-second-row-header",c).each(function(){a("th:gt("+m+")",this).remove()})}else a("tr",c).each(function(){a("th:gt("+
f+")",this).remove()});a(c).width(1);a(b.grid.fhDiv).append(c).mousemove(function(a){if(b.grid.resizing)return b.grid.dragMove(a),!1});a(b).bind("jqGridResizeStop.setFrozenColumns",function(c,d,e){c=a(".ui-jqgrid-htable",b.grid.fhDiv);a("th:eq("+e+")",c).width(d);c=a(".ui-jqgrid-btable",b.grid.fbDiv);a("tr:first td:eq("+e+")",c).width(d)});a(b).bind("jqGridOnSortCol.setFrozenColumns",function(c,d){var e=a("tr.ui-jqgrid-labels:last th:eq("+b.p.lastsort+")",b.grid.fhDiv),f=a("tr.ui-jqgrid-labels:last th:eq("+
d+")",b.grid.fhDiv);a("span.ui-grid-ico-sort",e).addClass("ui-state-disabled");a(e).attr("aria-selected","false");a("span.ui-icon-"+b.p.sortorder,f).removeClass("ui-state-disabled");a(f).attr("aria-selected","true");!b.p.viewsortcols[0]&&b.p.lastsort!=d&&(a("span.s-ico",e).hide(),a("span.s-ico",f).show())});a("#gview_"+a.jgrid.jqID(b.p.id)).append(b.grid.fbDiv);a(b.grid.bDiv).scroll(function(){a(b.grid.fbDiv).scrollTop(a(this).scrollTop())});!0===b.p.hoverrows&&a("#"+a.jgrid.jqID(b.p.id)).unbind("mouseover").unbind("mouseout");
a(b).bind("jqGridAfterGridComplete.setFrozenColumns",function(){a("#"+a.jgrid.jqID(b.p.id)+"_frozen").remove();a(b.grid.fbDiv).height(a(b.grid.bDiv).height()-16);var c=a("#"+a.jgrid.jqID(b.p.id)).clone(!0);a("tr",c).each(function(){a("td:gt("+f+")",this).remove()});a(c).width(1).attr("id",b.p.id+"_frozen");a(b.grid.fbDiv).append(c);!0===b.p.hoverrows&&(a("tr.jqgrow",c).hover(function(){a(this).addClass("ui-state-hover");a("#"+a.jgrid.jqID(this.id),"#"+a.jgrid.jqID(b.p.id)).addClass("ui-state-hover")},
function(){a(this).removeClass("ui-state-hover");a("#"+a.jgrid.jqID(this.id),"#"+a.jgrid.jqID(b.p.id)).removeClass("ui-state-hover")}),a("tr.jqgrow","#"+a.jgrid.jqID(b.p.id)).hover(function(){a(this).addClass("ui-state-hover");a("#"+a.jgrid.jqID(this.id),"#"+a.jgrid.jqID(b.p.id)+"_frozen").addClass("ui-state-hover")},function(){a(this).removeClass("ui-state-hover");a("#"+a.jgrid.jqID(this.id),"#"+a.jgrid.jqID(b.p.id)+"_frozen").removeClass("ui-state-hover")}));c=null});b.p.frozenColumns=!0}}}})},
destroyFrozenColumns:function(){return this.each(function(){if(this.grid&&!0===this.p.frozenColumns){a(this.grid.fhDiv).remove();a(this.grid.fbDiv).remove();this.grid.fhDiv=null;this.grid.fbDiv=null;a(this).unbind(".setFrozenColumns");if(!0===this.p.hoverrows){var b;a("#"+a.jgrid.jqID(this.p.id)).bind("mouseover",function(c){b=a(c.target).closest("tr.jqgrow");"ui-subgrid"!==a(b).attr("class")&&a(b).addClass("ui-state-hover")}).bind("mouseout",function(c){b=a(c.target).closest("tr.jqgrow");a(b).removeClass("ui-state-hover")})}this.p.frozenColumns=
!1}})}})})(jQuery);
(function(a){a.extend(a.jgrid,{showModal:function(a){a.w.show()},closeModal:function(a){a.w.hide().attr("aria-hidden","true");a.o&&a.o.remove()},hideModal:function(d,b){b=a.extend({jqm:!0,gb:""},b||{});if(b.onClose){var c=b.gb&&"string"===typeof b.gb&&"#gbox_"===b.gb.substr(0,6)?b.onClose.call(a("#"+b.gb.substr(6))[0],d):b.onClose(d);if("boolean"===typeof c&&!c)return}if(a.fn.jqm&&!0===b.jqm)a(d).attr("aria-hidden","true").jqmHide();else{if(""!==b.gb)try{a(".jqgrid-overlay:first",b.gb).hide()}catch(e){}a(d).hide().attr("aria-hidden",
"true")}},findPos:function(a){var b=0,c=0;if(a.offsetParent){do b+=a.offsetLeft,c+=a.offsetTop;while(a=a.offsetParent)}return[b,c]},createModal:function(d,b,c,e,g,h,f){var c=a.extend(!0,{},a.jgrid.jqModal||{},c),i=document.createElement("div"),j,n=this,f=a.extend({},f||{});j="rtl"==a(c.gbox).attr("dir")?!0:!1;i.className="ui-widget ui-widget-content ui-corner-all ui-jqdialog";i.id=d.themodal;var k=document.createElement("div");k.className="ui-jqdialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix";
k.id=d.modalhead;a(k).append("<span class='ui-jqdialog-title'>"+c.caption+"</span>");var l=a("<a href='javascript:void(0)' class='ui-jqdialog-titlebar-close ui-corner-all'></a>").hover(function(){l.addClass("ui-state-hover")},function(){l.removeClass("ui-state-hover")}).append("<span class='ui-icon ui-icon-closethick'></span>");a(k).append(l);j?(i.dir="rtl",a(".ui-jqdialog-title",k).css("float","right"),a(".ui-jqdialog-titlebar-close",k).css("left","0.3em")):(i.dir="ltr",a(".ui-jqdialog-title",k).css("float",
"left"),a(".ui-jqdialog-titlebar-close",k).css("right","0.3em"));var m=document.createElement("div");a(m).addClass("ui-jqdialog-content ui-widget-content").attr("id",d.modalcontent);a(m).append(b);i.appendChild(m);a(i).prepend(k);!0===h?a("body").append(i):"string"===typeof h?a(h).append(i):a(i).insertBefore(e);a(i).css(f);void 0===c.jqModal&&(c.jqModal=!0);b={};if(a.fn.jqm&&!0===c.jqModal)0===c.left&&0===c.top&&c.overlay&&(f=[],f=a.jgrid.findPos(g),c.left=f[0]+4,c.top=f[1]+4),b.top=c.top+"px",b.left=
c.left;else if(0!==c.left||0!==c.top)b.left=c.left,b.top=c.top+"px";a("a.ui-jqdialog-titlebar-close",k).click(function(){var b=a("#"+a.jgrid.jqID(d.themodal)).data("onClose")||c.onClose,e=a("#"+a.jgrid.jqID(d.themodal)).data("gbox")||c.gbox;n.hideModal("#"+a.jgrid.jqID(d.themodal),{gb:e,jqm:c.jqModal,onClose:b});return false});if(0===c.width||!c.width)c.width=300;if(0===c.height||!c.height)c.height=200;c.zIndex||(e=a(e).parents("*[role=dialog]").filter(":first").css("z-index"),c.zIndex=e?parseInt(e,
10)+2:950);e=0;j&&b.left&&!h&&(e=a(c.gbox).width()-(!isNaN(c.width)?parseInt(c.width,10):0)-8,b.left=parseInt(b.left,10)+parseInt(e,10));b.left&&(b.left+="px");a(i).css(a.extend({width:isNaN(c.width)?"auto":c.width+"px",height:isNaN(c.height)?"auto":c.height+"px",zIndex:c.zIndex,overflow:"hidden"},b)).attr({tabIndex:"-1",role:"dialog","aria-labelledby":d.modalhead,"aria-hidden":"true"});void 0===c.drag&&(c.drag=!0);void 0===c.resize&&(c.resize=!0);if(c.drag)if(a(k).css("cursor","move"),a.fn.jqDrag)a(i).jqDrag(k);
else try{a(i).draggable({handle:a("#"+a.jgrid.jqID(k.id))})}catch(o){}if(c.resize)if(a.fn.jqResize)a(i).append("<div class='jqResize ui-resizable-handle ui-resizable-se ui-icon ui-icon-gripsmall-diagonal-se'></div>"),a("#"+a.jgrid.jqID(d.themodal)).jqResize(".jqResize",d.scrollelm?"#"+a.jgrid.jqID(d.scrollelm):!1);else try{a(i).resizable({handles:"se, sw",alsoResize:d.scrollelm?"#"+a.jgrid.jqID(d.scrollelm):!1})}catch(p){}!0===c.closeOnEscape&&a(i).keydown(function(b){if(b.which==27){b=a("#"+a.jgrid.jqID(d.themodal)).data("onClose")||
c.onClose;n.hideModal("#"+a.jgrid.jqID(d.themodal),{gb:c.gbox,jqm:c.jqModal,onClose:b})}})},viewModal:function(d,b){b=a.extend({toTop:!0,overlay:10,modal:!1,overlayClass:"ui-widget-overlay",onShow:a.jgrid.showModal,onHide:a.jgrid.closeModal,gbox:"",jqm:!0,jqM:!0},b||{});if(a.fn.jqm&&!0===b.jqm)b.jqM?a(d).attr("aria-hidden","false").jqm(b).jqmShow():a(d).attr("aria-hidden","false").jqmShow();else{""!==b.gbox&&(a(".jqgrid-overlay:first",b.gbox).show(),a(d).data("gbox",b.gbox));a(d).show().attr("aria-hidden",
"false");try{a(":input:visible",d)[0].focus()}catch(c){}}},info_dialog:function(d,b,c,e){var g={width:290,height:"auto",dataheight:"auto",drag:!0,resize:!1,left:250,top:170,zIndex:1E3,jqModal:!0,modal:!1,closeOnEscape:!0,align:"center",buttonalign:"center",buttons:[]};a.extend(!0,g,a.jgrid.jqModal||{},{caption:"<b>"+d+"</b>"},e||{});var h=g.jqModal,f=this;a.fn.jqm&&!h&&(h=!1);d="";if(0<g.buttons.length)for(e=0;e<g.buttons.length;e++)void 0===g.buttons[e].id&&(g.buttons[e].id="info_button_"+e),d+=
"<a href='javascript:void(0)' id='"+g.buttons[e].id+"' class='fm-button ui-state-default ui-corner-all'>"+g.buttons[e].text+"</a>";e=isNaN(g.dataheight)?g.dataheight:g.dataheight+"px";b="<div id='info_id'>"+("<div id='infocnt' style='margin:0px;padding-bottom:1em;width:100%;overflow:auto;position:relative;height:"+e+";"+("text-align:"+g.align+";")+"'>"+b+"</div>");b+=c?"<div class='ui-widget-content ui-helper-clearfix' style='text-align:"+g.buttonalign+";padding-bottom:0.8em;padding-top:0.5em;background-image: none;border-width: 1px 0 0 0;'><a href='javascript:void(0)' id='closedialog' class='fm-button ui-state-default ui-corner-all'>"+
c+"</a>"+d+"</div>":""!==d?"<div class='ui-widget-content ui-helper-clearfix' style='text-align:"+g.buttonalign+";padding-bottom:0.8em;padding-top:0.5em;background-image: none;border-width: 1px 0 0 0;'>"+d+"</div>":"";b+="</div>";try{"false"==a("#info_dialog").attr("aria-hidden")&&a.jgrid.hideModal("#info_dialog",{jqm:h}),a("#info_dialog").remove()}catch(i){}a.jgrid.createModal({themodal:"info_dialog",modalhead:"info_head",modalcontent:"info_content",scrollelm:"infocnt"},b,g,"","",!0);d&&a.each(g.buttons,
function(d){a("#"+a.jgrid.jqID(this.id),"#info_id").bind("click",function(){g.buttons[d].onClick.call(a("#info_dialog"));return!1})});a("#closedialog","#info_id").click(function(){f.hideModal("#info_dialog",{jqm:h});return!1});a(".fm-button","#info_dialog").hover(function(){a(this).addClass("ui-state-hover")},function(){a(this).removeClass("ui-state-hover")});a.isFunction(g.beforeOpen)&&g.beforeOpen();a.jgrid.viewModal("#info_dialog",{onHide:function(a){a.w.hide().remove();a.o&&a.o.remove()},modal:g.modal,
jqm:h});a.isFunction(g.afterOpen)&&g.afterOpen();try{a("#info_dialog").focus()}catch(j){}},bindEv:function(d,b,c){a.isFunction(b.dataInit)&&b.dataInit.call(c,d);b.dataEvents&&a.each(b.dataEvents,function(){void 0!==this.data?a(d).bind(this.type,this.data,this.fn):a(d).bind(this.type,this.fn)})},createEl:function(d,b,c,e,g){function h(d,b,c){var e="dataInit,dataEvents,dataUrl,buildSelect,sopt,searchhidden,defaultValue,attr,custom_element,custom_value".split(",");void 0!==c&&a.isArray(c)&&a.merge(e,
c);a.each(b,function(b,c){-1===a.inArray(b,e)&&a(d).attr(b,c)});b.hasOwnProperty("id")||a(d).attr("id",a.jgrid.randId())}var f="",i=this;switch(d){case "textarea":f=document.createElement("textarea");e?b.cols||a(f).css({width:"98%"}):b.cols||(b.cols=20);b.rows||(b.rows=2);if("&nbsp;"==c||"&#160;"==c||1==c.length&&160==c.charCodeAt(0))c="";f.value=c;h(f,b);a(f).attr({role:"textbox",multiline:"true"});break;case "checkbox":f=document.createElement("input");f.type="checkbox";b.value?(d=b.value.split(":"),
c===d[0]&&(f.checked=!0,f.defaultChecked=!0),f.value=d[0],a(f).attr("offval",d[1])):(d=c.toLowerCase(),0>d.search(/(false|0|no|off|undefined)/i)&&""!==d?(f.checked=!0,f.defaultChecked=!0,f.value=c):f.value="on",a(f).attr("offval","off"));h(f,b,["value"]);a(f).attr("role","checkbox");break;case "select":f=document.createElement("select");f.setAttribute("role","select");e=[];!0===b.multiple?(d=!0,f.multiple="multiple",a(f).attr("aria-multiselectable","true")):d=!1;if(void 0!==b.dataUrl)d=b.name?(""+
b.id).substring(0,(""+b.id).length-(""+b.name).length-1):""+b.id,e=b.postData||g.postData,i.p&&i.p.idPrefix?d=a.jgrid.stripPref(i.p.idPrefix,d):e=void 0,a.ajax(a.extend({url:b.dataUrl,type:"GET",dataType:"html",data:a.isFunction(e)?e.call(i,d,c,""+b.name):e,context:{elem:f,options:b,vl:c},success:function(b){var d=[],c=this.elem,e=this.vl,f=a.extend({},this.options),g=f.multiple===true;a.isFunction(f.buildSelect)&&(b=f.buildSelect.call(i,b));if(b=a(b).html()){a(c).append(b);h(c,f);if(f.size===void 0)f.size=
g?3:1;if(g){d=e.split(",");d=a.map(d,function(d){return a.trim(d)})}else d[0]=a.trim(e);setTimeout(function(){a("option",c).each(function(b){if(b===0&&c.multiple)this.selected=false;a(this).attr("role","option");if(a.inArray(a.trim(a(this).text()),d)>-1||a.inArray(a.trim(a(this).val()),d)>-1)this.selected="selected"})},0)}}},g||{}));else if(b.value){var j;void 0===b.size&&(b.size=d?3:1);d&&(e=c.split(","),e=a.map(e,function(d){return a.trim(d)}));"function"===typeof b.value&&(b.value=b.value());var n,
k,l=void 0===b.separator?":":b.separator,g=void 0===b.delimiter?";":b.delimiter;if("string"===typeof b.value){n=b.value.split(g);for(j=0;j<n.length;j++){k=n[j].split(l);2<k.length&&(k[1]=a.map(k,function(a,d){if(d>0)return a}).join(l));g=document.createElement("option");g.setAttribute("role","option");g.value=k[0];g.innerHTML=k[1];f.appendChild(g);if(!d&&(a.trim(k[0])==a.trim(c)||a.trim(k[1])==a.trim(c)))g.selected="selected";if(d&&(-1<a.inArray(a.trim(k[1]),e)||-1<a.inArray(a.trim(k[0]),e)))g.selected=
"selected"}}else if("object"===typeof b.value)for(j in l=b.value,l)if(l.hasOwnProperty(j)){g=document.createElement("option");g.setAttribute("role","option");g.value=j;g.innerHTML=l[j];f.appendChild(g);if(!d&&(a.trim(j)==a.trim(c)||a.trim(l[j])==a.trim(c)))g.selected="selected";if(d&&(-1<a.inArray(a.trim(l[j]),e)||-1<a.inArray(a.trim(j),e)))g.selected="selected"}h(f,b,["value"])}break;case "text":case "password":case "button":j="button"==d?"button":"textbox";f=document.createElement("input");f.type=
d;f.value=c;h(f,b);"button"!=d&&(e?b.size||a(f).css({width:"98%"}):b.size||(b.size=20));a(f).attr("role",j);break;case "image":case "file":f=document.createElement("input");f.type=d;h(f,b);break;case "custom":f=document.createElement("span");try{if(a.isFunction(b.custom_element))if(l=b.custom_element.call(i,c,b))l=a(l).addClass("customelement").attr({id:b.id,name:b.name}),a(f).empty().append(l);else throw"e2";else throw"e1";}catch(m){"e1"==m&&a.jgrid.info_dialog(a.jgrid.errors.errcap,"function 'custom_element' "+
a.jgrid.edit.msg.nodefined,a.jgrid.edit.bClose),"e2"==m?a.jgrid.info_dialog(a.jgrid.errors.errcap,"function 'custom_element' "+a.jgrid.edit.msg.novalue,a.jgrid.edit.bClose):a.jgrid.info_dialog(a.jgrid.errors.errcap,"string"===typeof m?m:m.message,a.jgrid.edit.bClose)}}return f},checkDate:function(a,b){var c={},e,a=a.toLowerCase();e=-1!=a.indexOf("/")?"/":-1!=a.indexOf("-")?"-":-1!=a.indexOf(".")?".":"/";a=a.split(e);b=b.split(e);if(3!=b.length)return!1;e=-1;var g,h=-1,f=-1,i;for(i=0;i<a.length;i++)g=
isNaN(b[i])?0:parseInt(b[i],10),c[a[i]]=g,g=a[i],-1!=g.indexOf("y")&&(e=i),-1!=g.indexOf("m")&&(f=i),-1!=g.indexOf("d")&&(h=i);g="y"==a[e]||"yyyy"==a[e]?4:"yy"==a[e]?2:-1;i=function(a){var b;for(b=1;b<=a;b++){this[b]=31;if(4==b||6==b||9==b||11==b)this[b]=30;2==b&&(this[b]=29)}return this}(12);var j;if(-1===e)return!1;j=c[a[e]].toString();2==g&&1==j.length&&(g=1);if(j.length!=g||0===c[a[e]]&&"00"!=b[e]||-1===f)return!1;j=c[a[f]].toString();if(1>j.length||1>c[a[f]]||12<c[a[f]]||-1===h)return!1;j=c[a[h]].toString();
return 1>j.length||1>c[a[h]]||31<c[a[h]]||2==c[a[f]]&&c[a[h]]>(0===c[a[e]]%4&&(0!==c[a[e]]%100||0===c[a[e]]%400)?29:28)||c[a[h]]>i[c[a[f]]]?!1:!0},isEmpty:function(a){return a.match(/^\s+$/)||""===a?!0:!1},checkTime:function(d){var b=/^(\d{1,2}):(\d{2})([ap]m)?$/;if(!a.jgrid.isEmpty(d))if(d=d.match(b)){if(d[3]){if(1>d[1]||12<d[1])return!1}else if(23<d[1])return!1;if(59<d[2])return!1}else return!1;return!0},checkValues:function(d,b,c,e,g){var h,f;if(void 0===e)if("string"===typeof b){e=0;for(g=c.p.colModel.length;e<
g;e++)if(c.p.colModel[e].name==b){h=c.p.colModel[e].editrules;b=e;try{f=c.p.colModel[e].formoptions.label}catch(i){}break}}else 0<=b&&(h=c.p.colModel[b].editrules);else h=e,f=void 0===g?"_":g;if(h){f||(f=c.p.colNames[b]);if(!0===h.required&&a.jgrid.isEmpty(d))return[!1,f+": "+a.jgrid.edit.msg.required,""];e=!1===h.required?!1:!0;if(!0===h.number&&!(!1===e&&a.jgrid.isEmpty(d))&&isNaN(d))return[!1,f+": "+a.jgrid.edit.msg.number,""];if(void 0!==h.minValue&&!isNaN(h.minValue)&&parseFloat(d)<parseFloat(h.minValue))return[!1,
f+": "+a.jgrid.edit.msg.minValue+" "+h.minValue,""];if(void 0!==h.maxValue&&!isNaN(h.maxValue)&&parseFloat(d)>parseFloat(h.maxValue))return[!1,f+": "+a.jgrid.edit.msg.maxValue+" "+h.maxValue,""];if(!0===h.email&&!(!1===e&&a.jgrid.isEmpty(d))&&(g=/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i,
!g.test(d)))return[!1,f+": "+a.jgrid.edit.msg.email,""];if(!0===h.integer&&!(!1===e&&a.jgrid.isEmpty(d))&&(isNaN(d)||0!==d%1||-1!=d.indexOf(".")))return[!1,f+": "+a.jgrid.edit.msg.integer,""];if(!0===h.date&&!(!1===e&&a.jgrid.isEmpty(d))&&(b=c.p.colModel[b].formatoptions&&c.p.colModel[b].formatoptions.newformat?c.p.colModel[b].formatoptions.newformat:c.p.colModel[b].datefmt||"Y-m-d",!a.jgrid.checkDate(b,d)))return[!1,f+": "+a.jgrid.edit.msg.date+" - "+b,""];if(!0===h.time&&!(!1===e&&a.jgrid.isEmpty(d))&&
!a.jgrid.checkTime(d))return[!1,f+": "+a.jgrid.edit.msg.date+" - hh:mm (am/pm)",""];if(!0===h.url&&!(!1===e&&a.jgrid.isEmpty(d))&&(g=/^(((https?)|(ftp)):\/\/([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)/i,!g.test(d)))return[!1,f+": "+a.jgrid.edit.msg.url,""];if(!0===h.custom&&!(!1===e&&a.jgrid.isEmpty(d)))return a.isFunction(h.custom_func)?(d=h.custom_func.call(c,d,f),a.isArray(d)?d:[!1,a.jgrid.edit.msg.customarray,""]):[!1,a.jgrid.edit.msg.customfcheck,
""]}return[!0,"",""]}})})(jQuery);
(function(a){var b={};a.jgrid.extend({searchGrid:function(b){b=a.extend(!0,{recreateFilter:!1,drag:!0,sField:"searchField",sValue:"searchString",sOper:"searchOper",sFilter:"filters",loadDefaults:!0,beforeShowSearch:null,afterShowSearch:null,onInitializeSearch:null,afterRedraw:null,afterChange:null,closeAfterSearch:!1,closeAfterReset:!1,closeOnEscape:!1,searchOnEnter:!1,multipleSearch:!1,multipleGroup:!1,top:0,left:0,jqModal:!0,modal:!1,resize:!0,width:450,height:"auto",dataheight:"auto",showQuery:!1,
errorcheck:!0,sopt:null,stringResult:void 0,onClose:null,onSearch:null,onReset:null,toTop:!0,overlay:30,columns:[],tmplNames:null,tmplFilters:null,tmplLabel:" Template: ",showOnLoad:!1,layer:null},a.jgrid.search,b||{});return this.each(function(){function c(d){s=a(e).triggerHandler("jqGridFilterBeforeShow",[d]);void 0===s&&(s=!0);s&&a.isFunction(b.beforeShowSearch)&&(s=b.beforeShowSearch.call(e,d));s&&(a.jgrid.viewModal("#"+a.jgrid.jqID(t.themodal),{gbox:"#gbox_"+a.jgrid.jqID(h),jqm:b.jqModal,modal:b.modal,
overlay:b.overlay,toTop:b.toTop}),a(e).triggerHandler("jqGridFilterAfterShow",[d]),a.isFunction(b.afterShowSearch)&&b.afterShowSearch.call(e,d))}var e=this;if(e.grid){var h="fbox_"+e.p.id,s=!0,t={themodal:"searchmod"+h,modalhead:"searchhd"+h,modalcontent:"searchcnt"+h,scrollelm:h},r=e.p.postData[b.sFilter];"string"===typeof r&&(r=a.jgrid.parse(r));!0===b.recreateFilter&&a("#"+a.jgrid.jqID(t.themodal)).remove();if(void 0!==a("#"+a.jgrid.jqID(t.themodal))[0])c(a("#fbox_"+a.jgrid.jqID(+e.p.id)));else{var p=
a("<div><div id='"+h+"' class='searchFilter' style='overflow:auto'></div></div>").insertBefore("#gview_"+a.jgrid.jqID(e.p.id)),f="left",i="";"rtl"==e.p.direction&&(f="right",i=" style='text-align:left'",p.attr("dir","rtl"));var m=a.extend([],e.p.colModel),w="<a href='javascript:void(0)' id='"+h+"_search' class='fm-button ui-state-default ui-corner-all fm-button-icon-right ui-reset'><span class='ui-icon ui-icon-search'></span>"+b.Find+"</a>",d="<a href='javascript:void(0)' id='"+h+"_reset' class='fm-button ui-state-default ui-corner-all fm-button-icon-left ui-search'><span class='ui-icon ui-icon-arrowreturnthick-1-w'></span>"+
b.Reset+"</a>",n="",g="",o,l=!1,q=-1;b.showQuery&&(n="<a href='javascript:void(0)' id='"+h+"_query' class='fm-button ui-state-default ui-corner-all fm-button-icon-left'><span class='ui-icon ui-icon-comment'></span>Query</a>");b.columns.length?m=b.columns:a.each(m,function(a,b){if(!b.label)b.label=e.p.colNames[a];if(!l){var d=b.search===void 0?true:b.search,c=b.hidden===true;if(b.searchoptions&&b.searchoptions.searchhidden===true&&d||d&&!c){l=true;o=b.index||b.name;q=a}}});if(!r&&o||!1===b.multipleSearch){var x=
"eq";0<=q&&m[q].searchoptions&&m[q].searchoptions.sopt?x=m[q].searchoptions.sopt[0]:b.sopt&&b.sopt.length&&(x=b.sopt[0]);r={groupOp:"AND",rules:[{field:o,op:x,data:""}]}}l=!1;b.tmplNames&&b.tmplNames.length&&(l=!0,g=b.tmplLabel,g+="<select class='ui-template'>",g+="<option value='default'>Default</option>",a.each(b.tmplNames,function(a,b){g=g+("<option value='"+a+"'>"+b+"</option>")}),g+="</select>");f="<table class='EditTable' style='border:0px none;margin-top:5px' id='"+h+"_2'><tbody><tr><td colspan='2'><hr class='ui-widget-content' style='margin:1px'/></td></tr><tr><td class='EditButton' style='text-align:"+
f+"'>"+d+g+"</td><td class='EditButton' "+i+">"+n+w+"</td></tr></tbody></table>";h=a.jgrid.jqID(h);a("#"+h).jqFilter({columns:m,filter:b.loadDefaults?r:null,showQuery:b.showQuery,errorcheck:b.errorcheck,sopt:b.sopt,groupButton:b.multipleGroup,ruleButtons:b.multipleSearch,afterRedraw:b.afterRedraw,_gridsopt:a.jgrid.search.odata,ajaxSelectOptions:e.p.ajaxSelectOptions,groupOps:b.groupOps,onChange:function(){this.p.showQuery&&a(".query",this).html(this.toUserFriendlyString());a.isFunction(b.afterChange)&&
b.afterChange.call(e,a("#"+h),b)},direction:e.p.direction});p.append(f);l&&b.tmplFilters&&b.tmplFilters.length&&a(".ui-template",p).bind("change",function(){var d=a(this).val();d=="default"?a("#"+h).jqFilter("addFilter",r):a("#"+h).jqFilter("addFilter",b.tmplFilters[parseInt(d,10)]);return false});!0===b.multipleGroup&&(b.multipleSearch=!0);a(e).triggerHandler("jqGridFilterInitialize",[a("#"+h)]);a.isFunction(b.onInitializeSearch)&&b.onInitializeSearch.call(e,a("#"+h));b.gbox="#gbox_"+h;b.layer?a.jgrid.createModal(t,
p,b,"#gview_"+a.jgrid.jqID(e.p.id),a("#gbox_"+a.jgrid.jqID(e.p.id))[0],"#"+a.jgrid.jqID(b.layer),{position:"relative"}):a.jgrid.createModal(t,p,b,"#gview_"+a.jgrid.jqID(e.p.id),a("#gbox_"+a.jgrid.jqID(e.p.id))[0]);(b.searchOnEnter||b.closeOnEscape)&&a("#"+a.jgrid.jqID(t.themodal)).keydown(function(d){var c=a(d.target);if(b.searchOnEnter&&d.which===13&&!c.hasClass("add-group")&&!c.hasClass("add-rule")&&!c.hasClass("delete-group")&&!c.hasClass("delete-rule")&&(!c.hasClass("fm-button")||!c.is("[id$=_query]"))){a("#"+
h+"_search").focus().click();return false}if(b.closeOnEscape&&d.which===27){a("#"+a.jgrid.jqID(t.modalhead)).find(".ui-jqdialog-titlebar-close").focus().click();return false}});n&&a("#"+h+"_query").bind("click",function(){a(".queryresult",p).toggle();return false});void 0===b.stringResult&&(b.stringResult=b.multipleSearch);a("#"+h+"_search").bind("click",function(){var d=a("#"+h),c={},g,k=d.jqFilter("filterData");if(b.errorcheck){d[0].hideError();b.showQuery||d.jqFilter("toSQLString");if(d[0].p.error){d[0].showError();
return false}}if(b.stringResult){try{g=xmlJsonClass.toJson(k,"","",false)}catch(i){try{g=JSON.stringify(k)}catch(f){}}if(typeof g==="string"){c[b.sFilter]=g;a.each([b.sField,b.sValue,b.sOper],function(){c[this]=""})}}else if(b.multipleSearch){c[b.sFilter]=k;a.each([b.sField,b.sValue,b.sOper],function(){c[this]=""})}else{c[b.sField]=k.rules[0].field;c[b.sValue]=k.rules[0].data;c[b.sOper]=k.rules[0].op;c[b.sFilter]=""}e.p.search=true;a.extend(e.p.postData,c);a(e).triggerHandler("jqGridFilterSearch");
a.isFunction(b.onSearch)&&b.onSearch.call(e);a(e).trigger("reloadGrid",[{page:1}]);b.closeAfterSearch&&a.jgrid.hideModal("#"+a.jgrid.jqID(t.themodal),{gb:"#gbox_"+a.jgrid.jqID(e.p.id),jqm:b.jqModal,onClose:b.onClose});return false});a("#"+h+"_reset").bind("click",function(){var d={},c=a("#"+h);e.p.search=false;b.multipleSearch===false?d[b.sField]=d[b.sValue]=d[b.sOper]="":d[b.sFilter]="";c[0].resetFilter();l&&a(".ui-template",p).val("default");a.extend(e.p.postData,d);a(e).triggerHandler("jqGridFilterReset");
a.isFunction(b.onReset)&&b.onReset.call(e);a(e).trigger("reloadGrid",[{page:1}]);return false});c(a("#"+h));a(".fm-button:not(.ui-state-disabled)",p).hover(function(){a(this).addClass("ui-state-hover")},function(){a(this).removeClass("ui-state-hover")})}}})},editGridRow:function(u,c){c=a.extend(!0,{top:0,left:0,width:300,datawidth:"auto",height:"auto",dataheight:"auto",modal:!1,overlay:30,drag:!0,resize:!0,url:null,mtype:"POST",clearAfterAdd:!0,closeAfterEdit:!1,reloadAfterSubmit:!0,onInitializeForm:null,
beforeInitData:null,beforeShowForm:null,afterShowForm:null,beforeSubmit:null,afterSubmit:null,onclickSubmit:null,afterComplete:null,onclickPgButtons:null,afterclickPgButtons:null,editData:{},recreateForm:!1,jqModal:!0,closeOnEscape:!1,addedrow:"first",topinfo:"",bottominfo:"",saveicon:[],closeicon:[],savekey:[!1,13],navkeys:[!1,38,40],checkOnSubmit:!1,checkOnUpdate:!1,_savedData:{},processing:!1,onClose:null,ajaxEditOptions:{},serializeEditData:null,viewPagerButtons:!0},a.jgrid.edit,c||{});b[a(this)[0].p.id]=
c;return this.each(function(){function e(){a(l+" > tbody > tr > td > .FormElement").each(function(){var b=a(".customelement",this);if(b.length){var c=a(b[0]).attr("name");a.each(d.p.colModel,function(){if(this.name===c&&this.editoptions&&a.isFunction(this.editoptions.custom_value)){try{if(j[c]=this.editoptions.custom_value.call(d,a("#"+a.jgrid.jqID(c),l),"get"),void 0===j[c])throw"e1";}catch(b){"e1"===b?a.jgrid.info_dialog(a.jgrid.errors.errcap,"function 'custom_value' "+a.jgrid.edit.msg.novalue,
a.jgrid.edit.bClose):a.jgrid.info_dialog(a.jgrid.errors.errcap,b.message,a.jgrid.edit.bClose)}return!0}})}else{switch(a(this).get(0).type){case "checkbox":a(this).is(":checked")?j[this.name]=a(this).val():(b=a(this).attr("offval"),j[this.name]=b);break;case "select-one":j[this.name]=a("option:selected",this).val();B[this.name]=a("option:selected",this).text();break;case "select-multiple":j[this.name]=a(this).val();j[this.name]=j[this.name]?j[this.name].join(","):"";var e=[];a("option:selected",this).each(function(d,
b){e[d]=a(b).text()});B[this.name]=e.join(",");break;case "password":case "text":case "textarea":case "button":j[this.name]=a(this).val()}d.p.autoencode&&(j[this.name]=a.jgrid.htmlEncode(j[this.name]))}});return!0}function h(c,e,k,j){var i,f,l,q=0,h,p,o,m=[],y=!1,u="",n;for(n=1;n<=j;n++)u+="<td class='CaptionTD'>&#160;</td><td class='DataTD'>&#160;</td>";"_empty"!=c&&(y=a(e).jqGrid("getInd",c));a(e.p.colModel).each(function(n){i=this.name;p=(f=this.editrules&&!0===this.editrules.edithidden?!1:!0===
this.hidden?!0:!1)?"style='display:none'":"";if("cb"!==i&&"subgrid"!==i&&!0===this.editable&&"rn"!==i){if(!1===y)h="";else if(i==e.p.ExpandColumn&&!0===e.p.treeGrid)h=a("td[role='gridcell']:eq("+n+")",e.rows[y]).text();else{try{h=a.unformat.call(e,a("td[role='gridcell']:eq("+n+")",e.rows[y]),{rowId:c,colModel:this},n)}catch(s){h=this.edittype&&"textarea"==this.edittype?a("td[role='gridcell']:eq("+n+")",e.rows[y]).text():a("td[role='gridcell']:eq("+n+")",e.rows[y]).html()}if(!h||"&nbsp;"==h||"&#160;"==
h||1==h.length&&160==h.charCodeAt(0))h=""}var r=a.extend({},this.editoptions||{},{id:i,name:i}),v=a.extend({},{elmprefix:"",elmsuffix:"",rowabove:!1,rowcontent:""},this.formoptions||{}),t=parseInt(v.rowpos,10)||q+1,x=parseInt(2*(parseInt(v.colpos,10)||1),10);"_empty"==c&&r.defaultValue&&(h=a.isFunction(r.defaultValue)?r.defaultValue.call(d):r.defaultValue);this.edittype||(this.edittype="text");d.p.autoencode&&(h=a.jgrid.htmlDecode(h));o=a.jgrid.createEl.call(d,this.edittype,r,h,!1,a.extend({},a.jgrid.ajaxOptions,
e.p.ajaxSelectOptions||{}));""===h&&"checkbox"==this.edittype&&(h=a(o).attr("offval"));""===h&&"select"==this.edittype&&(h=a("option:eq(0)",o).text());if(b[d.p.id].checkOnSubmit||b[d.p.id].checkOnUpdate)b[d.p.id]._savedData[i]=h;a(o).addClass("FormElement");-1<a.inArray(this.edittype,["text","textarea","password","select"])&&a(o).addClass("ui-widget-content ui-corner-all");l=a(k).find("tr[rowpos="+t+"]");if(v.rowabove){var z=a("<tr><td class='contentinfo' colspan='"+2*j+"'>"+v.rowcontent+"</td></tr>");
a(k).append(z);z[0].rp=t}0===l.length&&(l=a("<tr "+p+" rowpos='"+t+"'></tr>").addClass("FormData").attr("id","tr_"+i),a(l).append(u),a(k).append(l),l[0].rp=t);a("td:eq("+(x-2)+")",l[0]).html(void 0===v.label?e.p.colNames[n]:v.label);a("td:eq("+(x-1)+")",l[0]).append(v.elmprefix).append(o).append(v.elmsuffix);a.isFunction(r.custom_value)&&"_empty"!==c&&r.custom_value.call(d,a("#"+i,"#"+g),"set",h);a.jgrid.bindEv(o,r,d);m[q]=n;q++}});if(0<q&&(n=a("<tr class='FormData' style='display:none'><td class='CaptionTD'></td><td colspan='"+
(2*j-1)+"' class='DataTD'><input class='FormElement' id='id_g' type='text' name='"+e.p.id+"_id' value='"+c+"'/></td></tr>"),n[0].rp=q+999,a(k).append(n),b[d.p.id].checkOnSubmit||b[d.p.id].checkOnUpdate))b[d.p.id]._savedData[e.p.id+"_id"]=c;return m}function s(c,e,g){var k,i=0,j,f,h,q,p;if(b[d.p.id].checkOnSubmit||b[d.p.id].checkOnUpdate)b[d.p.id]._savedData={},b[d.p.id]._savedData[e.p.id+"_id"]=c;var n=e.p.colModel;if("_empty"==c)a(n).each(function(){k=this.name;h=a.extend({},this.editoptions||{});
if((f=a("#"+a.jgrid.jqID(k),"#"+g))&&f.length&&null!==f[0])if(q="",h.defaultValue?(q=a.isFunction(h.defaultValue)?h.defaultValue.call(d):h.defaultValue,"checkbox"==f[0].type?(p=q.toLowerCase(),0>p.search(/(false|0|no|off|undefined)/i)&&""!==p?(f[0].checked=!0,f[0].defaultChecked=!0,f[0].value=q):(f[0].checked=!1,f[0].defaultChecked=!1)):f.val(q)):"checkbox"==f[0].type?(f[0].checked=!1,f[0].defaultChecked=!1,q=a(f).attr("offval")):f[0].type&&"select"==f[0].type.substr(0,6)?f[0].selectedIndex=0:f.val(q),
!0===b[d.p.id].checkOnSubmit||b[d.p.id].checkOnUpdate)b[d.p.id]._savedData[k]=q}),a("#id_g","#"+g).val(c);else{var o=a(e).jqGrid("getInd",c,!0);o&&(a('td[role="gridcell"]',o).each(function(f){k=n[f].name;if("cb"!==k&&"subgrid"!==k&&"rn"!==k&&!0===n[f].editable){if(k==e.p.ExpandColumn&&!0===e.p.treeGrid)j=a(this).text();else try{j=a.unformat.call(e,a(this),{rowId:c,colModel:n[f]},f)}catch(h){j="textarea"==n[f].edittype?a(this).text():a(this).html()}d.p.autoencode&&(j=a.jgrid.htmlDecode(j));if(!0===
b[d.p.id].checkOnSubmit||b[d.p.id].checkOnUpdate)b[d.p.id]._savedData[k]=j;k=a.jgrid.jqID(k);switch(n[f].edittype){case "password":case "text":case "button":case "image":case "textarea":if("&nbsp;"==j||"&#160;"==j||1==j.length&&160==j.charCodeAt(0))j="";a("#"+k,"#"+g).val(j);break;case "select":var l=j.split(","),l=a.map(l,function(c){return a.trim(c)});a("#"+k+" option","#"+g).each(function(){this.selected=!n[f].editoptions.multiple&&(a.trim(j)==a.trim(a(this).text())||l[0]==a.trim(a(this).text())||
l[0]==a.trim(a(this).val()))?!0:n[f].editoptions.multiple?-1<a.inArray(a.trim(a(this).text()),l)||-1<a.inArray(a.trim(a(this).val()),l)?!0:!1:!1});break;case "checkbox":j=""+j;n[f].editoptions&&n[f].editoptions.value?n[f].editoptions.value.split(":")[0]==j?(a("#"+k,"#"+g)[d.p.useProp?"prop":"attr"]("checked",!0),a("#"+k,"#"+g)[d.p.useProp?"prop":"attr"]("defaultChecked",!0)):(a("#"+k,"#"+g)[d.p.useProp?"prop":"attr"]("checked",!1),a("#"+k,"#"+g)[d.p.useProp?"prop":"attr"]("defaultChecked",!1)):(j=
j.toLowerCase(),0>j.search(/(false|0|no|off|undefined)/i)&&""!==j?(a("#"+k,"#"+g)[d.p.useProp?"prop":"attr"]("checked",!0),a("#"+k,"#"+g)[d.p.useProp?"prop":"attr"]("defaultChecked",!0)):(a("#"+k,"#"+g)[d.p.useProp?"prop":"attr"]("checked",!1),a("#"+k,"#"+g)[d.p.useProp?"prop":"attr"]("defaultChecked",!1)));break;case "custom":try{if(n[f].editoptions&&a.isFunction(n[f].editoptions.custom_value))n[f].editoptions.custom_value.call(d,a("#"+k,"#"+g),"set",j);else throw"e1";}catch(q){"e1"==q?a.jgrid.info_dialog(a.jgrid.errors.errcap,
"function 'custom_value' "+a.jgrid.edit.msg.nodefined,a.jgrid.edit.bClose):a.jgrid.info_dialog(a.jgrid.errors.errcap,q.message,a.jgrid.edit.bClose)}}i++}}),0<i&&a("#id_g",l).val(c))}}function t(){a.each(d.p.colModel,function(a,c){c.editoptions&&!0===c.editoptions.NullIfEmpty&&j.hasOwnProperty(c.name)&&""===j[c.name]&&(j[c.name]="null")})}function r(){var e,k=[!0,"",""],f={},i=d.p.prmNames,h,p,o,y,m,u=a(d).triggerHandler("jqGridAddEditBeforeCheckValues",[a("#"+g),z]);u&&"object"===typeof u&&(j=u);
a.isFunction(b[d.p.id].beforeCheckValues)&&(u=b[d.p.id].beforeCheckValues.call(d,j,a("#"+g),"_empty"==j[d.p.id+"_id"]?i.addoper:i.editoper))&&"object"===typeof u&&(j=u);for(o in j)if(j.hasOwnProperty(o)&&(k=a.jgrid.checkValues.call(d,j[o],o,d),!1===k[0]))break;t();k[0]&&(f=a(d).triggerHandler("jqGridAddEditClickSubmit",[b[d.p.id],j,z]),void 0===f&&a.isFunction(b[d.p.id].onclickSubmit)&&(f=b[d.p.id].onclickSubmit.call(d,b[d.p.id],j)||{}),k=a(d).triggerHandler("jqGridAddEditBeforeSubmit",[j,a("#"+g),
z]),void 0===k&&(k=[!0,"",""]),k[0]&&a.isFunction(b[d.p.id].beforeSubmit)&&(k=b[d.p.id].beforeSubmit.call(d,j,a("#"+g))));if(k[0]&&!b[d.p.id].processing){b[d.p.id].processing=!0;a("#sData",l+"_2").addClass("ui-state-active");p=i.oper;h=i.id;j[p]="_empty"==a.trim(j[d.p.id+"_id"])?i.addoper:i.editoper;j[p]!=i.addoper?j[h]=j[d.p.id+"_id"]:void 0===j[h]&&(j[h]=j[d.p.id+"_id"]);delete j[d.p.id+"_id"];j=a.extend(j,b[d.p.id].editData,f);if(!0===d.p.treeGrid)for(m in j[p]==i.addoper&&(y=a(d).jqGrid("getGridParam",
"selrow"),j["adjacency"==d.p.treeGridModel?d.p.treeReader.parent_id_field:"parent_id"]=y),d.p.treeReader)d.p.treeReader.hasOwnProperty(m)&&(f=d.p.treeReader[m],j.hasOwnProperty(f)&&!(j[p]==i.addoper&&"parent_id_field"===m)&&delete j[f]);j[h]=a.jgrid.stripPref(d.p.idPrefix,j[h]);m=a.extend({url:b[d.p.id].url||a(d).jqGrid("getGridParam","editurl"),type:b[d.p.id].mtype,data:a.isFunction(b[d.p.id].serializeEditData)?b[d.p.id].serializeEditData.call(d,j):j,complete:function(f,o){var m;j[h]=d.p.idPrefix+
j[h];if(o!="success"){k[0]=false;k[1]=a(d).triggerHandler("jqGridAddEditErrorTextFormat",[f,z]);k[1]=a.isFunction(b[d.p.id].errorTextFormat)?b[d.p.id].errorTextFormat.call(d,f):o+" Status: '"+f.statusText+"'. Error code: "+f.status}else{k=a(d).triggerHandler("jqGridAddEditAfterSubmit",[f,j,z]);k===void 0&&(k=[true,"",""]);k[0]&&a.isFunction(b[d.p.id].afterSubmit)&&(k=b[d.p.id].afterSubmit.call(d,f,j))}if(k[0]===false){a("#FormError>td",l).html(k[1]);a("#FormError",l).show()}else{a.each(d.p.colModel,
function(){if(B[this.name]&&this.formatter&&this.formatter=="select")try{delete B[this.name]}catch(a){}});j=a.extend(j,B);d.p.autoencode&&a.each(j,function(c,d){j[c]=a.jgrid.htmlDecode(d)});if(j[p]==i.addoper){k[2]||(k[2]=a.jgrid.randId());j[h]=k[2];if(b[d.p.id].closeAfterAdd){if(b[d.p.id].reloadAfterSubmit)a(d).trigger("reloadGrid");else if(d.p.treeGrid===true)a(d).jqGrid("addChildNode",k[2],y,j);else{a(d).jqGrid("addRowData",k[2],j,c.addedrow);a(d).jqGrid("setSelection",k[2])}a.jgrid.hideModal("#"+
a.jgrid.jqID(q.themodal),{gb:"#gbox_"+a.jgrid.jqID(n),jqm:c.jqModal,onClose:b[d.p.id].onClose})}else if(b[d.p.id].clearAfterAdd){b[d.p.id].reloadAfterSubmit?a(d).trigger("reloadGrid"):d.p.treeGrid===true?a(d).jqGrid("addChildNode",k[2],y,j):a(d).jqGrid("addRowData",k[2],j,c.addedrow);s("_empty",d,g)}else b[d.p.id].reloadAfterSubmit?a(d).trigger("reloadGrid"):d.p.treeGrid===true?a(d).jqGrid("addChildNode",k[2],y,j):a(d).jqGrid("addRowData",k[2],j,c.addedrow)}else{if(b[d.p.id].reloadAfterSubmit){a(d).trigger("reloadGrid");
b[d.p.id].closeAfterEdit||setTimeout(function(){a(d).jqGrid("setSelection",j[h])},1E3)}else d.p.treeGrid===true?a(d).jqGrid("setTreeRow",j[h],j):a(d).jqGrid("setRowData",j[h],j);b[d.p.id].closeAfterEdit&&a.jgrid.hideModal("#"+a.jgrid.jqID(q.themodal),{gb:"#gbox_"+a.jgrid.jqID(n),jqm:c.jqModal,onClose:b[d.p.id].onClose})}if(a.isFunction(b[d.p.id].afterComplete)){e=f;setTimeout(function(){a(d).triggerHandler("jqGridAddEditAfterComplete",[e,j,a("#"+g),z]);b[d.p.id].afterComplete.call(d,e,j,a("#"+g));
e=null},500)}if(b[d.p.id].checkOnSubmit||b[d.p.id].checkOnUpdate){a("#"+g).data("disabled",false);if(b[d.p.id]._savedData[d.p.id+"_id"]!="_empty")for(m in b[d.p.id]._savedData)b[d.p.id]._savedData.hasOwnProperty(m)&&j[m]&&(b[d.p.id]._savedData[m]=j[m])}}b[d.p.id].processing=false;a("#sData",l+"_2").removeClass("ui-state-active");try{a(":input:visible","#"+g)[0].focus()}catch(u){}}},a.jgrid.ajaxOptions,b[d.p.id].ajaxEditOptions);!m.url&&!b[d.p.id].useDataProxy&&(a.isFunction(d.p.dataProxy)?b[d.p.id].useDataProxy=
!0:(k[0]=!1,k[1]+=" "+a.jgrid.errors.nourl));k[0]&&(b[d.p.id].useDataProxy?(f=d.p.dataProxy.call(d,m,"set_"+d.p.id),void 0===f&&(f=[!0,""]),!1===f[0]?(k[0]=!1,k[1]=f[1]||"Error deleting the selected row!"):(m.data.oper==i.addoper&&b[d.p.id].closeAfterAdd&&a.jgrid.hideModal("#"+a.jgrid.jqID(q.themodal),{gb:"#gbox_"+a.jgrid.jqID(n),jqm:c.jqModal,onClose:b[d.p.id].onClose}),m.data.oper==i.editoper&&b[d.p.id].closeAfterEdit&&a.jgrid.hideModal("#"+a.jgrid.jqID(q.themodal),{gb:"#gbox_"+a.jgrid.jqID(n),
jqm:c.jqModal,onClose:b[d.p.id].onClose}))):a.ajax(m))}!1===k[0]&&(a("#FormError>td",l).html(k[1]),a("#FormError",l).show())}function p(a,c){var d=!1,b;for(b in a)if(a.hasOwnProperty(b)&&a[b]!=c[b]){d=!0;break}return d}function f(){var c=!0;a("#FormError",l).hide();if(b[d.p.id].checkOnUpdate&&(j={},B={},e(),F=a.extend({},j,B),M=p(F,b[d.p.id]._savedData)))a("#"+g).data("disabled",!0),a(".confirm","#"+q.themodal).show(),c=!1;return c}function i(){var c;if("_empty"!==u&&void 0!==d.p.savedRow&&0<d.p.savedRow.length&&
a.isFunction(a.fn.jqGrid.restoreRow))for(c=0;c<d.p.savedRow.length;c++)if(d.p.savedRow[c].id==u){a(d).jqGrid("restoreRow",u);break}}function m(c,d){var b=d[1].length-1;0===c?a("#pData",l+"_2").addClass("ui-state-disabled"):void 0!==d[1][c-1]&&a("#"+a.jgrid.jqID(d[1][c-1])).hasClass("ui-state-disabled")?a("#pData",l+"_2").addClass("ui-state-disabled"):a("#pData",l+"_2").removeClass("ui-state-disabled");c==b?a("#nData",l+"_2").addClass("ui-state-disabled"):void 0!==d[1][c+1]&&a("#"+a.jgrid.jqID(d[1][c+
1])).hasClass("ui-state-disabled")?a("#nData",l+"_2").addClass("ui-state-disabled"):a("#nData",l+"_2").removeClass("ui-state-disabled")}function w(){var c=a(d).jqGrid("getDataIDs"),b=a("#id_g",l).val();return[a.inArray(b,c),c]}var d=this;if(d.grid&&u){var n=d.p.id,g="FrmGrid_"+n,o="TblGrid_"+n,l="#"+a.jgrid.jqID(o),q={themodal:"editmod"+n,modalhead:"edithd"+n,modalcontent:"editcnt"+n,scrollelm:g},x=a.isFunction(b[d.p.id].beforeShowForm)?b[d.p.id].beforeShowForm:!1,A=a.isFunction(b[d.p.id].afterShowForm)?
b[d.p.id].afterShowForm:!1,v=a.isFunction(b[d.p.id].beforeInitData)?b[d.p.id].beforeInitData:!1,C=a.isFunction(b[d.p.id].onInitializeForm)?b[d.p.id].onInitializeForm:!1,k=!0,y=1,H=0,j,B,F,M,z,g=a.jgrid.jqID(g);"new"===u?(u="_empty",z="add",c.caption=b[d.p.id].addCaption):(c.caption=b[d.p.id].editCaption,z="edit");!0===c.recreateForm&&void 0!==a("#"+a.jgrid.jqID(q.themodal))[0]&&a("#"+a.jgrid.jqID(q.themodal)).remove();var I=!0;c.checkOnUpdate&&c.jqModal&&!c.modal&&(I=!1);if(void 0!==a("#"+a.jgrid.jqID(q.themodal))[0]){k=
a(d).triggerHandler("jqGridAddEditBeforeInitData",[a("#"+a.jgrid.jqID(g)),z]);void 0===k&&(k=!0);k&&v&&(k=v.call(d,a("#"+g)));if(!1===k)return;i();a(".ui-jqdialog-title","#"+a.jgrid.jqID(q.modalhead)).html(c.caption);a("#FormError",l).hide();b[d.p.id].topinfo?(a(".topinfo",l).html(b[d.p.id].topinfo),a(".tinfo",l).show()):a(".tinfo",l).hide();b[d.p.id].bottominfo?(a(".bottominfo",l+"_2").html(b[d.p.id].bottominfo),a(".binfo",l+"_2").show()):a(".binfo",l+"_2").hide();s(u,d,g);"_empty"==u||!b[d.p.id].viewPagerButtons?
a("#pData, #nData",l+"_2").hide():a("#pData, #nData",l+"_2").show();!0===b[d.p.id].processing&&(b[d.p.id].processing=!1,a("#sData",l+"_2").removeClass("ui-state-active"));!0===a("#"+g).data("disabled")&&(a(".confirm","#"+a.jgrid.jqID(q.themodal)).hide(),a("#"+g).data("disabled",!1));a(d).triggerHandler("jqGridAddEditBeforeShowForm",[a("#"+g),z]);x&&x.call(d,a("#"+g));a("#"+a.jgrid.jqID(q.themodal)).data("onClose",b[d.p.id].onClose);a.jgrid.viewModal("#"+a.jgrid.jqID(q.themodal),{gbox:"#gbox_"+a.jgrid.jqID(n),
jqm:c.jqModal,jqM:!1,overlay:c.overlay,modal:c.modal});I||a(".jqmOverlay").click(function(){if(!f())return false;a.jgrid.hideModal("#"+a.jgrid.jqID(q.themodal),{gb:"#gbox_"+a.jgrid.jqID(n),jqm:c.jqModal,onClose:b[d.p.id].onClose});return false});a(d).triggerHandler("jqGridAddEditAfterShowForm",[a("#"+g),z]);A&&A.call(d,a("#"+g))}else{var G=isNaN(c.dataheight)?c.dataheight:c.dataheight+"px",k=isNaN(c.datawidth)?c.datawidth:c.datawidth+"px",G=a("<form name='FormPost' id='"+g+"' class='FormGrid' onSubmit='return false;' style='width:"+
k+";overflow:auto;position:relative;height:"+G+";'></form>").data("disabled",!1),D=a("<table id='"+o+"' class='EditTable' cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>"),k=a(d).triggerHandler("jqGridAddEditBeforeInitData",[a("#"+g),z]);void 0===k&&(k=!0);k&&v&&(k=v.call(d,a("#"+g)));if(!1===k)return;i();a(d.p.colModel).each(function(){var a=this.formoptions;y=Math.max(y,a?a.colpos||0:0);H=Math.max(H,a?a.rowpos||0:0)});a(G).append(D);v=a("<tr id='FormError' style='display:none'><td class='ui-state-error' colspan='"+
2*y+"'></td></tr>");v[0].rp=0;a(D).append(v);v=a("<tr style='display:none' class='tinfo'><td class='topinfo' colspan='"+2*y+"'>"+b[d.p.id].topinfo+"</td></tr>");v[0].rp=0;a(D).append(v);var k=(v="rtl"==d.p.direction?!0:!1)?"nData":"pData",E=v?"pData":"nData";h(u,d,D,y);var k="<a href='javascript:void(0)' id='"+k+"' class='fm-button ui-state-default ui-corner-left'><span class='ui-icon ui-icon-triangle-1-w'></span></a>",E="<a href='javascript:void(0)' id='"+E+"' class='fm-button ui-state-default ui-corner-right'><span class='ui-icon ui-icon-triangle-1-e'></span></a>",
J="<a href='javascript:void(0)' id='sData' class='fm-button ui-state-default ui-corner-all'>"+c.bSubmit+"</a>",K="<a href='javascript:void(0)' id='cData' class='fm-button ui-state-default ui-corner-all'>"+c.bCancel+"</a>",o="<table border='0' cellspacing='0' cellpadding='0' class='EditTable' id='"+o+"_2'><tbody><tr><td colspan='2'><hr class='ui-widget-content' style='margin:1px'/></td></tr><tr id='Act_Buttons'><td class='navButton'>"+(v?E+k:k+E)+"</td><td class='EditButton'>"+J+K+"</td></tr>"+("<tr style='display:none' class='binfo'><td class='bottominfo' colspan='2'>"+
b[d.p.id].bottominfo+"</td></tr>"),o=o+"</tbody></table>";if(0<H){var L=[];a.each(a(D)[0].rows,function(a,c){L[a]=c});L.sort(function(a,c){return a.rp>c.rp?1:a.rp<c.rp?-1:0});a.each(L,function(c,d){a("tbody",D).append(d)})}c.gbox="#gbox_"+a.jgrid.jqID(n);var N=!1;!0===c.closeOnEscape&&(c.closeOnEscape=!1,N=!0);o=a("<div></div>").append(G).append(o);a.jgrid.createModal(q,o,c,"#gview_"+a.jgrid.jqID(d.p.id),a("#gbox_"+a.jgrid.jqID(d.p.id))[0]);v&&(a("#pData, #nData",l+"_2").css("float","right"),a(".EditButton",
l+"_2").css("text-align","left"));b[d.p.id].topinfo&&a(".tinfo",l).show();b[d.p.id].bottominfo&&a(".binfo",l+"_2").show();o=o=null;a("#"+a.jgrid.jqID(q.themodal)).keydown(function(e){var k=e.target;if(a("#"+g).data("disabled")===true)return false;if(b[d.p.id].savekey[0]===true&&e.which==b[d.p.id].savekey[1]&&k.tagName!="TEXTAREA"){a("#sData",l+"_2").trigger("click");return false}if(e.which===27){if(!f())return false;N&&a.jgrid.hideModal("#"+a.jgrid.jqID(q.themodal),{gb:c.gbox,jqm:c.jqModal,onClose:b[d.p.id].onClose});
return false}if(b[d.p.id].navkeys[0]===true){if(a("#id_g",l).val()=="_empty")return true;if(e.which==b[d.p.id].navkeys[1]){a("#pData",l+"_2").trigger("click");return false}if(e.which==b[d.p.id].navkeys[2]){a("#nData",l+"_2").trigger("click");return false}}});c.checkOnUpdate&&(a("a.ui-jqdialog-titlebar-close span","#"+a.jgrid.jqID(q.themodal)).removeClass("jqmClose"),a("a.ui-jqdialog-titlebar-close","#"+a.jgrid.jqID(q.themodal)).unbind("click").click(function(){if(!f())return false;a.jgrid.hideModal("#"+
a.jgrid.jqID(q.themodal),{gb:"#gbox_"+a.jgrid.jqID(n),jqm:c.jqModal,onClose:b[d.p.id].onClose});return false}));c.saveicon=a.extend([!0,"left","ui-icon-disk"],c.saveicon);c.closeicon=a.extend([!0,"left","ui-icon-close"],c.closeicon);!0===c.saveicon[0]&&a("#sData",l+"_2").addClass("right"==c.saveicon[1]?"fm-button-icon-right":"fm-button-icon-left").append("<span class='ui-icon "+c.saveicon[2]+"'></span>");!0===c.closeicon[0]&&a("#cData",l+"_2").addClass("right"==c.closeicon[1]?"fm-button-icon-right":
"fm-button-icon-left").append("<span class='ui-icon "+c.closeicon[2]+"'></span>");if(b[d.p.id].checkOnSubmit||b[d.p.id].checkOnUpdate)J="<a href='javascript:void(0)' id='sNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>"+c.bYes+"</a>",E="<a href='javascript:void(0)' id='nNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>"+c.bNo+"</a>",K="<a href='javascript:void(0)' id='cNew' class='fm-button ui-state-default ui-corner-all' style='z-index:1002'>"+
c.bExit+"</a>",o=c.zIndex||999,o++,a("<div class='ui-widget-overlay jqgrid-overlay confirm' style='z-index:"+o+";display:none;'>&#160;</div><div class='confirm ui-widget-content ui-jqconfirm' style='z-index:"+(o+1)+"'>"+c.saveData+"<br/><br/>"+J+E+K+"</div>").insertAfter("#"+g),a("#sNew","#"+a.jgrid.jqID(q.themodal)).click(function(){r();a("#"+g).data("disabled",false);a(".confirm","#"+a.jgrid.jqID(q.themodal)).hide();return false}),a("#nNew","#"+a.jgrid.jqID(q.themodal)).click(function(){a(".confirm",
"#"+a.jgrid.jqID(q.themodal)).hide();a("#"+g).data("disabled",false);setTimeout(function(){a(":input","#"+g)[0].focus()},0);return false}),a("#cNew","#"+a.jgrid.jqID(q.themodal)).click(function(){a(".confirm","#"+a.jgrid.jqID(q.themodal)).hide();a("#"+g).data("disabled",false);a.jgrid.hideModal("#"+a.jgrid.jqID(q.themodal),{gb:"#gbox_"+a.jgrid.jqID(n),jqm:c.jqModal,onClose:b[d.p.id].onClose});return false});a(d).triggerHandler("jqGridAddEditInitializeForm",[a("#"+g),z]);C&&C.call(d,a("#"+g));"_empty"==
u||!b[d.p.id].viewPagerButtons?a("#pData,#nData",l+"_2").hide():a("#pData,#nData",l+"_2").show();a(d).triggerHandler("jqGridAddEditBeforeShowForm",[a("#"+g),z]);x&&x.call(d,a("#"+g));a("#"+a.jgrid.jqID(q.themodal)).data("onClose",b[d.p.id].onClose);a.jgrid.viewModal("#"+a.jgrid.jqID(q.themodal),{gbox:"#gbox_"+a.jgrid.jqID(n),jqm:c.jqModal,overlay:c.overlay,modal:c.modal});I||a(".jqmOverlay").click(function(){if(!f())return false;a.jgrid.hideModal("#"+a.jgrid.jqID(q.themodal),{gb:"#gbox_"+a.jgrid.jqID(n),
jqm:c.jqModal,onClose:b[d.p.id].onClose});return false});a(d).triggerHandler("jqGridAddEditAfterShowForm",[a("#"+g),z]);A&&A.call(d,a("#"+g));a(".fm-button","#"+a.jgrid.jqID(q.themodal)).hover(function(){a(this).addClass("ui-state-hover")},function(){a(this).removeClass("ui-state-hover")});a("#sData",l+"_2").click(function(){j={};B={};a("#FormError",l).hide();e();if(j[d.p.id+"_id"]=="_empty")r();else if(c.checkOnSubmit===true){F=a.extend({},j,B);if(M=p(F,b[d.p.id]._savedData)){a("#"+g).data("disabled",
true);a(".confirm","#"+a.jgrid.jqID(q.themodal)).show()}else r()}else r();return false});a("#cData",l+"_2").click(function(){if(!f())return false;a.jgrid.hideModal("#"+a.jgrid.jqID(q.themodal),{gb:"#gbox_"+a.jgrid.jqID(n),jqm:c.jqModal,onClose:b[d.p.id].onClose});return false});a("#nData",l+"_2").click(function(){if(!f())return false;a("#FormError",l).hide();var b=w();b[0]=parseInt(b[0],10);if(b[0]!=-1&&b[1][b[0]+1]){a(d).triggerHandler("jqGridAddEditClickPgButtons",["next",a("#"+g),b[1][b[0]]]);
var e;if(a.isFunction(c.onclickPgButtons)){e=c.onclickPgButtons.call(d,"next",a("#"+g),b[1][b[0]]);if(e!==void 0&&e===false)return false}if(a("#"+a.jgrid.jqID(b[1][b[0]+1])).hasClass("ui-state-disabled"))return false;s(b[1][b[0]+1],d,g);a(d).jqGrid("setSelection",b[1][b[0]+1]);a(d).triggerHandler("jqGridAddEditAfterClickPgButtons",["next",a("#"+g),b[1][b[0]]]);a.isFunction(c.afterclickPgButtons)&&c.afterclickPgButtons.call(d,"next",a("#"+g),b[1][b[0]+1]);m(b[0]+1,b)}return false});a("#pData",l+"_2").click(function(){if(!f())return false;
a("#FormError",l).hide();var b=w();if(b[0]!=-1&&b[1][b[0]-1]){a(d).triggerHandler("jqGridAddEditClickPgButtons",["prev",a("#"+g),b[1][b[0]]]);var e;if(a.isFunction(c.onclickPgButtons)){e=c.onclickPgButtons.call(d,"prev",a("#"+g),b[1][b[0]]);if(e!==void 0&&e===false)return false}if(a("#"+a.jgrid.jqID(b[1][b[0]-1])).hasClass("ui-state-disabled"))return false;s(b[1][b[0]-1],d,g);a(d).jqGrid("setSelection",b[1][b[0]-1]);a(d).triggerHandler("jqGridAddEditAfterClickPgButtons",["prev",a("#"+g),b[1][b[0]]]);
a.isFunction(c.afterclickPgButtons)&&c.afterclickPgButtons.call(d,"prev",a("#"+g),b[1][b[0]-1]);m(b[0]-1,b)}return false})}x=w();m(x[0],x)}})},viewGridRow:function(u,c){c=a.extend(!0,{top:0,left:0,width:0,datawidth:"auto",height:"auto",dataheight:"auto",modal:!1,overlay:30,drag:!0,resize:!0,jqModal:!0,closeOnEscape:!1,labelswidth:"30%",closeicon:[],navkeys:[!1,38,40],onClose:null,beforeShowForm:null,beforeInitData:null,viewPagerButtons:!0},a.jgrid.view,c||{});b[a(this)[0].p.id]=c;return this.each(function(){function e(){(!0===
b[p.p.id].closeOnEscape||!0===b[p.p.id].navkeys[0])&&setTimeout(function(){a(".ui-jqdialog-titlebar-close","#"+a.jgrid.jqID(n.modalhead)).focus()},0)}function h(b,d,e,f){var g,i,h,l=0,q,n,p=[],o=!1,m,u="<td class='CaptionTD form-view-label ui-widget-content' width='"+c.labelswidth+"'>&#160;</td><td class='DataTD form-view-data ui-helper-reset ui-widget-content'>&#160;</td>",r="",v=["integer","number","currency"],s=0,t=0,x,w,A;for(m=1;m<=f;m++)r+=1==m?u:"<td class='CaptionTD form-view-label ui-widget-content'>&#160;</td><td class='DataTD form-view-data ui-widget-content'>&#160;</td>";
a(d.p.colModel).each(function(){i=this.editrules&&!0===this.editrules.edithidden?!1:!0===this.hidden?!0:!1;!i&&"right"===this.align&&(this.formatter&&-1!==a.inArray(this.formatter,v)?s=Math.max(s,parseInt(this.width,10)):t=Math.max(t,parseInt(this.width,10)))});x=0!==s?s:0!==t?t:0;o=a(d).jqGrid("getInd",b);a(d.p.colModel).each(function(b){g=this.name;w=!1;n=(i=this.editrules&&!0===this.editrules.edithidden?!1:!0===this.hidden?!0:!1)?"style='display:none'":"";A="boolean"!==typeof this.viewable?!0:
this.viewable;if("cb"!==g&&"subgrid"!==g&&"rn"!==g&&A){q=!1===o?"":g==d.p.ExpandColumn&&!0===d.p.treeGrid?a("td:eq("+b+")",d.rows[o]).text():a("td:eq("+b+")",d.rows[o]).html();w="right"===this.align&&0!==x?!0:!1;var c=a.extend({},{rowabove:!1,rowcontent:""},this.formoptions||{}),k=parseInt(c.rowpos,10)||l+1,m=parseInt(2*(parseInt(c.colpos,10)||1),10);if(c.rowabove){var u=a("<tr><td class='contentinfo' colspan='"+2*f+"'>"+c.rowcontent+"</td></tr>");a(e).append(u);u[0].rp=k}h=a(e).find("tr[rowpos="+
k+"]");0===h.length&&(h=a("<tr "+n+" rowpos='"+k+"'></tr>").addClass("FormData").attr("id","trv_"+g),a(h).append(r),a(e).append(h),h[0].rp=k);a("td:eq("+(m-2)+")",h[0]).html("<b>"+(void 0===c.label?d.p.colNames[b]:c.label)+"</b>");a("td:eq("+(m-1)+")",h[0]).append("<span>"+q+"</span>").attr("id","v_"+g);w&&a("td:eq("+(m-1)+") span",h[0]).css({"text-align":"right",width:x+"px"});p[l]=b;l++}});0<l&&(b=a("<tr class='FormData' style='display:none'><td class='CaptionTD'></td><td colspan='"+(2*f-1)+"' class='DataTD'><input class='FormElement' id='id_g' type='text' name='id' value='"+
b+"'/></td></tr>"),b[0].rp=l+99,a(e).append(b));return p}function s(b,c){var d,e,f=0,g,i;if(i=a(c).jqGrid("getInd",b,!0))a("td",i).each(function(b){d=c.p.colModel[b].name;e=c.p.colModel[b].editrules&&!0===c.p.colModel[b].editrules.edithidden?!1:!0===c.p.colModel[b].hidden?!0:!1;"cb"!==d&&"subgrid"!==d&&"rn"!==d&&(g=d==c.p.ExpandColumn&&!0===c.p.treeGrid?a(this).text():a(this).html(),a.extend({},c.p.colModel[b].editoptions||{}),d=a.jgrid.jqID("v_"+d),a("#"+d+" span","#"+m).html(g),e&&a("#"+d,"#"+m).parents("tr:first").hide(),
f++)}),0<f&&a("#id_g","#"+m).val(b)}function t(b,c){var d=c[1].length-1;0===b?a("#pData","#"+m+"_2").addClass("ui-state-disabled"):void 0!==c[1][b-1]&&a("#"+a.jgrid.jqID(c[1][b-1])).hasClass("ui-state-disabled")?a("#pData",m+"_2").addClass("ui-state-disabled"):a("#pData","#"+m+"_2").removeClass("ui-state-disabled");b==d?a("#nData","#"+m+"_2").addClass("ui-state-disabled"):void 0!==c[1][b+1]&&a("#"+a.jgrid.jqID(c[1][b+1])).hasClass("ui-state-disabled")?a("#nData",m+"_2").addClass("ui-state-disabled"):
a("#nData","#"+m+"_2").removeClass("ui-state-disabled")}function r(){var b=a(p).jqGrid("getDataIDs"),c=a("#id_g","#"+m).val();return[a.inArray(c,b),b]}var p=this;if(p.grid&&u){var f=p.p.id,i="ViewGrid_"+a.jgrid.jqID(f),m="ViewTbl_"+a.jgrid.jqID(f),w="ViewGrid_"+f,d="ViewTbl_"+f,n={themodal:"viewmod"+f,modalhead:"viewhd"+f,modalcontent:"viewcnt"+f,scrollelm:i},g=a.isFunction(b[p.p.id].beforeInitData)?b[p.p.id].beforeInitData:!1,o=!0,l=1,q=0;if(void 0!==a("#"+a.jgrid.jqID(n.themodal))[0]){g&&(o=g.call(p,
a("#"+i)),void 0===o&&(o=!0));if(!1===o)return;a(".ui-jqdialog-title","#"+a.jgrid.jqID(n.modalhead)).html(c.caption);a("#FormError","#"+m).hide();s(u,p);a.isFunction(b[p.p.id].beforeShowForm)&&b[p.p.id].beforeShowForm.call(p,a("#"+i));a.jgrid.viewModal("#"+a.jgrid.jqID(n.themodal),{gbox:"#gbox_"+a.jgrid.jqID(f),jqm:c.jqModal,jqM:!1,overlay:c.overlay,modal:c.modal});e()}else{var x=isNaN(c.dataheight)?c.dataheight:c.dataheight+"px",A=isNaN(c.datawidth)?c.datawidth:c.datawidth+"px",w=a("<form name='FormPost' id='"+
w+"' class='FormGrid' style='width:"+A+";overflow:auto;position:relative;height:"+x+";'></form>"),v=a("<table id='"+d+"' class='EditTable' cellspacing='1' cellpadding='2' border='0' style='table-layout:fixed'><tbody></tbody></table>");g&&(o=g.call(p,a("#"+i)),void 0===o&&(o=!0));if(!1===o)return;a(p.p.colModel).each(function(){var a=this.formoptions;l=Math.max(l,a?a.colpos||0:0);q=Math.max(q,a?a.rowpos||0:0)});a(w).append(v);h(u,p,v,l);d="rtl"==p.p.direction?!0:!1;g="<a href='javascript:void(0)' id='"+
(d?"nData":"pData")+"' class='fm-button ui-state-default ui-corner-left'><span class='ui-icon ui-icon-triangle-1-w'></span></a>";o="<a href='javascript:void(0)' id='"+(d?"pData":"nData")+"' class='fm-button ui-state-default ui-corner-right'><span class='ui-icon ui-icon-triangle-1-e'></span></a>";x="<a href='javascript:void(0)' id='cData' class='fm-button ui-state-default ui-corner-all'>"+c.bClose+"</a>";if(0<q){var C=[];a.each(a(v)[0].rows,function(a,b){C[a]=b});C.sort(function(a,b){return a.rp>b.rp?
1:a.rp<b.rp?-1:0});a.each(C,function(b,c){a("tbody",v).append(c)})}c.gbox="#gbox_"+a.jgrid.jqID(f);w=a("<div></div>").append(w).append("<table border='0' class='EditTable' id='"+m+"_2'><tbody><tr id='Act_Buttons'><td class='navButton' width='"+c.labelswidth+"'>"+(d?o+g:g+o)+"</td><td class='EditButton'>"+x+"</td></tr></tbody></table>");a.jgrid.createModal(n,w,c,"#gview_"+a.jgrid.jqID(p.p.id),a("#gview_"+a.jgrid.jqID(p.p.id))[0]);d&&(a("#pData, #nData","#"+m+"_2").css("float","right"),a(".EditButton",
"#"+m+"_2").css("text-align","left"));c.viewPagerButtons||a("#pData, #nData","#"+m+"_2").hide();w=null;a("#"+n.themodal).keydown(function(d){if(d.which===27){b[p.p.id].closeOnEscape&&a.jgrid.hideModal("#"+a.jgrid.jqID(n.themodal),{gb:c.gbox,jqm:c.jqModal,onClose:c.onClose});return false}if(c.navkeys[0]===true){if(d.which===c.navkeys[1]){a("#pData","#"+m+"_2").trigger("click");return false}if(d.which===c.navkeys[2]){a("#nData","#"+m+"_2").trigger("click");return false}}});c.closeicon=a.extend([!0,
"left","ui-icon-close"],c.closeicon);!0===c.closeicon[0]&&a("#cData","#"+m+"_2").addClass("right"==c.closeicon[1]?"fm-button-icon-right":"fm-button-icon-left").append("<span class='ui-icon "+c.closeicon[2]+"'></span>");a.isFunction(c.beforeShowForm)&&c.beforeShowForm.call(p,a("#"+i));a.jgrid.viewModal("#"+a.jgrid.jqID(n.themodal),{gbox:"#gbox_"+a.jgrid.jqID(f),jqm:c.jqModal,overlay:c.overlay,modal:c.modal});a(".fm-button:not(.ui-state-disabled)","#"+m+"_2").hover(function(){a(this).addClass("ui-state-hover")},
function(){a(this).removeClass("ui-state-hover")});e();a("#cData","#"+m+"_2").click(function(){a.jgrid.hideModal("#"+a.jgrid.jqID(n.themodal),{gb:"#gbox_"+a.jgrid.jqID(f),jqm:c.jqModal,onClose:c.onClose});return false});a("#nData","#"+m+"_2").click(function(){a("#FormError","#"+m).hide();var b=r();b[0]=parseInt(b[0],10);if(b[0]!=-1&&b[1][b[0]+1]){a.isFunction(c.onclickPgButtons)&&c.onclickPgButtons.call(p,"next",a("#"+i),b[1][b[0]]);s(b[1][b[0]+1],p);a(p).jqGrid("setSelection",b[1][b[0]+1]);a.isFunction(c.afterclickPgButtons)&&
c.afterclickPgButtons.call(p,"next",a("#"+i),b[1][b[0]+1]);t(b[0]+1,b)}e();return false});a("#pData","#"+m+"_2").click(function(){a("#FormError","#"+m).hide();var b=r();if(b[0]!=-1&&b[1][b[0]-1]){a.isFunction(c.onclickPgButtons)&&c.onclickPgButtons.call(p,"prev",a("#"+i),b[1][b[0]]);s(b[1][b[0]-1],p);a(p).jqGrid("setSelection",b[1][b[0]-1]);a.isFunction(c.afterclickPgButtons)&&c.afterclickPgButtons.call(p,"prev",a("#"+i),b[1][b[0]-1]);t(b[0]-1,b)}e();return false})}w=r();t(w[0],w)}})},delGridRow:function(u,
c){c=a.extend(!0,{top:0,left:0,width:240,height:"auto",dataheight:"auto",modal:!1,overlay:30,drag:!0,resize:!0,url:"",mtype:"POST",reloadAfterSubmit:!0,beforeShowForm:null,beforeInitData:null,afterShowForm:null,beforeSubmit:null,onclickSubmit:null,afterSubmit:null,jqModal:!0,closeOnEscape:!1,delData:{},delicon:[],cancelicon:[],onClose:null,ajaxDelOptions:{},processing:!1,serializeDelData:null,useDataProxy:!1},a.jgrid.del,c||{});b[a(this)[0].p.id]=c;return this.each(function(){var e=this;if(e.grid&&
u){var h=a.isFunction(b[e.p.id].beforeShowForm),s=a.isFunction(b[e.p.id].afterShowForm),t=a.isFunction(b[e.p.id].beforeInitData)?b[e.p.id].beforeInitData:!1,r=e.p.id,p={},f=!0,i="DelTbl_"+a.jgrid.jqID(r),m,w,d,n,g="DelTbl_"+r,o={themodal:"delmod"+r,modalhead:"delhd"+r,modalcontent:"delcnt"+r,scrollelm:i};a.isArray(u)&&(u=u.join());if(void 0!==a("#"+a.jgrid.jqID(o.themodal))[0]){t&&(f=t.call(e,a("#"+i)),void 0===f&&(f=!0));if(!1===f)return;a("#DelData>td","#"+i).text(u);a("#DelError","#"+i).hide();
!0===b[e.p.id].processing&&(b[e.p.id].processing=!1,a("#dData","#"+i).removeClass("ui-state-active"));h&&b[e.p.id].beforeShowForm.call(e,a("#"+i));a.jgrid.viewModal("#"+a.jgrid.jqID(o.themodal),{gbox:"#gbox_"+a.jgrid.jqID(r),jqm:b[e.p.id].jqModal,jqM:!1,overlay:b[e.p.id].overlay,modal:b[e.p.id].modal})}else{var l=isNaN(b[e.p.id].dataheight)?b[e.p.id].dataheight:b[e.p.id].dataheight+"px",q=isNaN(c.datawidth)?c.datawidth:c.datawidth+"px",g="<div id='"+g+"' class='formdata' style='width:"+q+";overflow:auto;position:relative;height:"+
l+";'><table class='DelTable'><tbody><tr id='DelError' style='display:none'><td class='ui-state-error'></td></tr>"+("<tr id='DelData' style='display:none'><td >"+u+"</td></tr>"),g=g+('<tr><td class="delmsg" style="white-space:pre;">'+b[e.p.id].msg+"</td></tr><tr><td >&#160;</td></tr>"),g=g+"</tbody></table></div>"+("<table cellspacing='0' cellpadding='0' border='0' class='EditTable' id='"+i+"_2'><tbody><tr><td><hr class='ui-widget-content' style='margin:1px'/></td></tr><tr><td class='DelButton EditButton'>"+
("<a href='javascript:void(0)' id='dData' class='fm-button ui-state-default ui-corner-all'>"+c.bSubmit+"</a>")+"&#160;"+("<a href='javascript:void(0)' id='eData' class='fm-button ui-state-default ui-corner-all'>"+c.bCancel+"</a>")+"</td></tr></tbody></table>");c.gbox="#gbox_"+a.jgrid.jqID(r);a.jgrid.createModal(o,g,c,"#gview_"+a.jgrid.jqID(e.p.id),a("#gview_"+a.jgrid.jqID(e.p.id))[0]);t&&(f=t.call(e,a("#"+i)),void 0===f&&(f=!0));if(!1===f)return;a(".fm-button","#"+i+"_2").hover(function(){a(this).addClass("ui-state-hover")},
function(){a(this).removeClass("ui-state-hover")});c.delicon=a.extend([!0,"left","ui-icon-scissors"],b[e.p.id].delicon);c.cancelicon=a.extend([!0,"left","ui-icon-cancel"],b[e.p.id].cancelicon);!0===c.delicon[0]&&a("#dData","#"+i+"_2").addClass("right"==c.delicon[1]?"fm-button-icon-right":"fm-button-icon-left").append("<span class='ui-icon "+c.delicon[2]+"'></span>");!0===c.cancelicon[0]&&a("#eData","#"+i+"_2").addClass("right"==c.cancelicon[1]?"fm-button-icon-right":"fm-button-icon-left").append("<span class='ui-icon "+
c.cancelicon[2]+"'></span>");a("#dData","#"+i+"_2").click(function(){var f=[true,""],g,h=a("#DelData>td","#"+i).text();p={};a.isFunction(b[e.p.id].onclickSubmit)&&(p=b[e.p.id].onclickSubmit.call(e,b[e.p.id],h)||{});a.isFunction(b[e.p.id].beforeSubmit)&&(f=b[e.p.id].beforeSubmit.call(e,h));if(f[0]&&!b[e.p.id].processing){b[e.p.id].processing=true;d=e.p.prmNames;m=a.extend({},b[e.p.id].delData,p);n=d.oper;m[n]=d.deloper;w=d.id;h=(""+h).split(",");if(!h.length)return false;for(g in h)h.hasOwnProperty(g)&&
(h[g]=a.jgrid.stripPref(e.p.idPrefix,h[g]));m[w]=h.join();a(this).addClass("ui-state-active");g=a.extend({url:b[e.p.id].url||a(e).jqGrid("getGridParam","editurl"),type:b[e.p.id].mtype,data:a.isFunction(b[e.p.id].serializeDelData)?b[e.p.id].serializeDelData.call(e,m):m,complete:function(d,g){var l;if(g!="success"){f[0]=false;f[1]=a.isFunction(b[e.p.id].errorTextFormat)?b[e.p.id].errorTextFormat.call(e,d):g+" Status: '"+d.statusText+"'. Error code: "+d.status}else a.isFunction(b[e.p.id].afterSubmit)&&
(f=b[e.p.id].afterSubmit.call(e,d,m));if(f[0]===false){a("#DelError>td","#"+i).html(f[1]);a("#DelError","#"+i).show()}else{if(b[e.p.id].reloadAfterSubmit&&e.p.datatype!="local")a(e).trigger("reloadGrid");else{if(e.p.treeGrid===true)try{a(e).jqGrid("delTreeNode",e.p.idPrefix+h[0])}catch(q){}else for(l=0;l<h.length;l++)a(e).jqGrid("delRowData",e.p.idPrefix+h[l]);e.p.selrow=null;e.p.selarrrow=[]}a.isFunction(b[e.p.id].afterComplete)&&setTimeout(function(){b[e.p.id].afterComplete.call(e,d,h)},500)}b[e.p.id].processing=
false;a("#dData","#"+i+"_2").removeClass("ui-state-active");f[0]&&a.jgrid.hideModal("#"+a.jgrid.jqID(o.themodal),{gb:"#gbox_"+a.jgrid.jqID(r),jqm:c.jqModal,onClose:b[e.p.id].onClose})}},a.jgrid.ajaxOptions,b[e.p.id].ajaxDelOptions);if(!g.url&&!b[e.p.id].useDataProxy)if(a.isFunction(e.p.dataProxy))b[e.p.id].useDataProxy=true;else{f[0]=false;f[1]=f[1]+(" "+a.jgrid.errors.nourl)}if(f[0])if(b[e.p.id].useDataProxy){g=e.p.dataProxy.call(e,g,"del_"+e.p.id);g===void 0&&(g=[true,""]);if(g[0]===false){f[0]=
false;f[1]=g[1]||"Error deleting the selected row!"}else a.jgrid.hideModal("#"+a.jgrid.jqID(o.themodal),{gb:"#gbox_"+a.jgrid.jqID(r),jqm:c.jqModal,onClose:b[e.p.id].onClose})}else a.ajax(g)}if(f[0]===false){a("#DelError>td","#"+i).html(f[1]);a("#DelError","#"+i).show()}return false});a("#eData","#"+i+"_2").click(function(){a.jgrid.hideModal("#"+a.jgrid.jqID(o.themodal),{gb:"#gbox_"+a.jgrid.jqID(r),jqm:b[e.p.id].jqModal,onClose:b[e.p.id].onClose});return false});h&&b[e.p.id].beforeShowForm.call(e,
a("#"+i));a.jgrid.viewModal("#"+a.jgrid.jqID(o.themodal),{gbox:"#gbox_"+a.jgrid.jqID(r),jqm:b[e.p.id].jqModal,overlay:b[e.p.id].overlay,modal:b[e.p.id].modal})}s&&b[e.p.id].afterShowForm.call(e,a("#"+i));!0===b[e.p.id].closeOnEscape&&setTimeout(function(){a(".ui-jqdialog-titlebar-close","#"+a.jgrid.jqID(o.modalhead)).focus()},0)}})},navGrid:function(b,c,e,h,s,t,r){c=a.extend({edit:!0,editicon:"ui-icon-pencil",add:!0,addicon:"ui-icon-plus",del:!0,delicon:"ui-icon-trash",search:!0,searchicon:"ui-icon-search",
refresh:!0,refreshicon:"ui-icon-refresh",refreshstate:"firstpage",view:!1,viewicon:"ui-icon-document",position:"left",closeOnEscape:!0,beforeRefresh:null,afterRefresh:null,cloneToTop:!1,alertwidth:200,alertheight:"auto",alerttop:null,alertleft:null,alertzIndex:null},a.jgrid.nav,c||{});return this.each(function(){if(!this.nav){var p={themodal:"alertmod_"+this.p.id,modalhead:"alerthd_"+this.p.id,modalcontent:"alertcnt_"+this.p.id},f=this,i;if(f.grid&&"string"===typeof b){void 0===a("#"+p.themodal)[0]&&
(!c.alerttop&&!c.alertleft&&(void 0!==window.innerWidth?(c.alertleft=window.innerWidth,c.alerttop=window.innerHeight):void 0!==document.documentElement&&void 0!==document.documentElement.clientWidth&&0!==document.documentElement.clientWidth?(c.alertleft=document.documentElement.clientWidth,c.alerttop=document.documentElement.clientHeight):(c.alertleft=1024,c.alerttop=768),c.alertleft=c.alertleft/2-parseInt(c.alertwidth,10)/2,c.alerttop=c.alerttop/2-25),a.jgrid.createModal(p,"<div>"+c.alerttext+"</div><span tabindex='0'><span tabindex='-1' id='jqg_alrt'></span></span>",
{gbox:"#gbox_"+a.jgrid.jqID(f.p.id),jqModal:!0,drag:!0,resize:!0,caption:c.alertcap,top:c.alerttop,left:c.alertleft,width:c.alertwidth,height:c.alertheight,closeOnEscape:c.closeOnEscape,zIndex:c.alertzIndex},"#gview_"+a.jgrid.jqID(f.p.id),a("#gbox_"+a.jgrid.jqID(f.p.id))[0],!0));var m=1,w,d=function(){a(this).hasClass("ui-state-disabled")||a(this).addClass("ui-state-hover")},n=function(){a(this).removeClass("ui-state-hover")};c.cloneToTop&&f.p.toppager&&(m=2);for(w=0;w<m;w++){var g=a("<table cellspacing='0' cellpadding='0' border='0' class='ui-pg-table navtable' style='float:left;table-layout:auto;'><tbody><tr></tr></tbody></table>"),
o,l;0===w?(o=b,l=f.p.id,o==f.p.toppager&&(l+="_top",m=1)):(o=f.p.toppager,l=f.p.id+"_top");"rtl"==f.p.direction&&a(g).attr("dir","rtl").css("float","right");c.add&&(h=h||{},i=a("<td class='ui-pg-button ui-corner-all'></td>"),a(i).append("<div class='ui-pg-div'><span class='ui-icon "+c.addicon+"'></span>"+c.addtext+"</div>"),a("tr",g).append(i),a(i,g).attr({title:c.addtitle||"",id:h.id||"add_"+l}).click(function(){a(this).hasClass("ui-state-disabled")||(a.isFunction(c.addfunc)?c.addfunc.call(f):a(f).jqGrid("editGridRow",
"new",h));return false}).hover(d,n),i=null);c.edit&&(i=a("<td class='ui-pg-button ui-corner-all'></td>"),e=e||{},a(i).append("<div class='ui-pg-div'><span class='ui-icon "+c.editicon+"'></span>"+c.edittext+"</div>"),a("tr",g).append(i),a(i,g).attr({title:c.edittitle||"",id:e.id||"edit_"+l}).click(function(){if(!a(this).hasClass("ui-state-disabled")){var b=f.p.selrow;if(b)a.isFunction(c.editfunc)?c.editfunc.call(f,b):a(f).jqGrid("editGridRow",b,e);else{a.jgrid.viewModal("#"+p.themodal,{gbox:"#gbox_"+
a.jgrid.jqID(f.p.id),jqm:true});a("#jqg_alrt").focus()}}return false}).hover(d,n),i=null);c.view&&(i=a("<td class='ui-pg-button ui-corner-all'></td>"),r=r||{},a(i).append("<div class='ui-pg-div'><span class='ui-icon "+c.viewicon+"'></span>"+c.viewtext+"</div>"),a("tr",g).append(i),a(i,g).attr({title:c.viewtitle||"",id:r.id||"view_"+l}).click(function(){if(!a(this).hasClass("ui-state-disabled")){var b=f.p.selrow;if(b)a.isFunction(c.viewfunc)?c.viewfunc.call(f,b):a(f).jqGrid("viewGridRow",b,r);else{a.jgrid.viewModal("#"+
p.themodal,{gbox:"#gbox_"+a.jgrid.jqID(f.p.id),jqm:true});a("#jqg_alrt").focus()}}return false}).hover(d,n),i=null);c.del&&(i=a("<td class='ui-pg-button ui-corner-all'></td>"),s=s||{},a(i).append("<div class='ui-pg-div'><span class='ui-icon "+c.delicon+"'></span>"+c.deltext+"</div>"),a("tr",g).append(i),a(i,g).attr({title:c.deltitle||"",id:s.id||"del_"+l}).click(function(){if(!a(this).hasClass("ui-state-disabled")){var b;if(f.p.multiselect){b=f.p.selarrrow;b.length===0&&(b=null)}else b=f.p.selrow;
if(b)a.isFunction(c.delfunc)?c.delfunc.call(f,b):a(f).jqGrid("delGridRow",b,s);else{a.jgrid.viewModal("#"+p.themodal,{gbox:"#gbox_"+a.jgrid.jqID(f.p.id),jqm:true});a("#jqg_alrt").focus()}}return false}).hover(d,n),i=null);(c.add||c.edit||c.del||c.view)&&a("tr",g).append("<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='ui-separator'></span></td>");c.search&&(i=a("<td class='ui-pg-button ui-corner-all'></td>"),t=t||{},a(i).append("<div class='ui-pg-div'><span class='ui-icon "+
c.searchicon+"'></span>"+c.searchtext+"</div>"),a("tr",g).append(i),a(i,g).attr({title:c.searchtitle||"",id:t.id||"search_"+l}).click(function(){a(this).hasClass("ui-state-disabled")||(a.isFunction(c.searchfunc)?c.searchfunc.call(f,t):a(f).jqGrid("searchGrid",t));return false}).hover(d,n),t.showOnLoad&&!0===t.showOnLoad&&a(i,g).click(),i=null);c.refresh&&(i=a("<td class='ui-pg-button ui-corner-all'></td>"),a(i).append("<div class='ui-pg-div'><span class='ui-icon "+c.refreshicon+"'></span>"+c.refreshtext+
"</div>"),a("tr",g).append(i),a(i,g).attr({title:c.refreshtitle||"",id:"refresh_"+l}).click(function(){if(!a(this).hasClass("ui-state-disabled")){a.isFunction(c.beforeRefresh)&&c.beforeRefresh.call(f);f.p.search=false;try{var b=f.p.id;f.p.postData.filters="";a("#fbox_"+a.jgrid.jqID(b)).jqFilter("resetFilter");a.isFunction(f.clearToolbar)&&f.clearToolbar.call(f,false)}catch(d){}switch(c.refreshstate){case "firstpage":a(f).trigger("reloadGrid",[{page:1}]);break;case "current":a(f).trigger("reloadGrid",
[{current:true}])}a.isFunction(c.afterRefresh)&&c.afterRefresh.call(f)}return false}).hover(d,n),i=null);i=a(".ui-jqgrid").css("font-size")||"11px";a("body").append("<div id='testpg2' class='ui-jqgrid ui-widget ui-widget-content' style='font-size:"+i+";visibility:hidden;' ></div>");i=a(g).clone().appendTo("#testpg2").width();a("#testpg2").remove();a(o+"_"+c.position,o).append(g);f.p._nvtd&&(i>f.p._nvtd[0]&&(a(o+"_"+c.position,o).width(i),f.p._nvtd[0]=i),f.p._nvtd[1]=i);g=i=i=null;this.nav=!0}}}})},
navButtonAdd:function(b,c){c=a.extend({caption:"newButton",title:"",buttonicon:"ui-icon-newwin",onClickButton:null,position:"last",cursor:"pointer"},c||{});return this.each(function(){if(this.grid){"string"===typeof b&&0!==b.indexOf("#")&&(b="#"+a.jgrid.jqID(b));var e=a(".navtable",b)[0],h=this;if(e&&!(c.id&&void 0!==a("#"+a.jgrid.jqID(c.id),e)[0])){var s=a("<td></td>");"NONE"==c.buttonicon.toString().toUpperCase()?a(s).addClass("ui-pg-button ui-corner-all").append("<div class='ui-pg-div'>"+c.caption+
"</div>"):a(s).addClass("ui-pg-button ui-corner-all").append("<div class='ui-pg-div'><span class='ui-icon "+c.buttonicon+"'></span>"+c.caption+"</div>");c.id&&a(s).attr("id",c.id);"first"==c.position?0===e.rows[0].cells.length?a("tr",e).append(s):a("tr td:eq(0)",e).before(s):a("tr",e).append(s);a(s,e).attr("title",c.title||"").click(function(b){a(this).hasClass("ui-state-disabled")||a.isFunction(c.onClickButton)&&c.onClickButton.call(h,b);return!1}).hover(function(){a(this).hasClass("ui-state-disabled")||
a(this).addClass("ui-state-hover")},function(){a(this).removeClass("ui-state-hover")})}}})},navSeparatorAdd:function(b,c){c=a.extend({sepclass:"ui-separator",sepcontent:"",position:"last"},c||{});return this.each(function(){if(this.grid){"string"===typeof b&&0!==b.indexOf("#")&&(b="#"+a.jgrid.jqID(b));var e=a(".navtable",b)[0];if(e){var h="<td class='ui-pg-button ui-state-disabled' style='width:4px;'><span class='"+c.sepclass+"'></span>"+c.sepcontent+"</td>";"first"===c.position?0===e.rows[0].cells.length?
a("tr",e).append(h):a("tr td:eq(0)",e).before(h):a("tr",e).append(h)}}})},GridToForm:function(b,c){return this.each(function(){var e=this,h;if(e.grid){var s=a(e).jqGrid("getRowData",b);if(s)for(h in s)s.hasOwnProperty(h)&&(a("[name="+a.jgrid.jqID(h)+"]",c).is("input:radio")||a("[name="+a.jgrid.jqID(h)+"]",c).is("input:checkbox")?a("[name="+a.jgrid.jqID(h)+"]",c).each(function(){if(a(this).val()==s[h])a(this)[e.p.useProp?"prop":"attr"]("checked",!0);else a(this)[e.p.useProp?"prop":"attr"]("checked",
!1)}):a("[name="+a.jgrid.jqID(h)+"]",c).val(s[h]))}})},FormToGrid:function(b,c,e,h){return this.each(function(){if(this.grid){e||(e="set");h||(h="first");var s=a(c).serializeArray(),t={};a.each(s,function(a,b){t[b.name]=b.value});"add"==e?a(this).jqGrid("addRowData",b,t,h):"set"==e&&a(this).jqGrid("setRowData",b,t)}})}})})(jQuery);
(function(a){a.fn.jqFilter=function(d){if("string"===typeof d){var n=a.fn.jqFilter[d];if(!n)throw"jqFilter - No such method: "+d;var u=a.makeArray(arguments).slice(1);return n.apply(this,u)}var p=a.extend(!0,{filter:null,columns:[],onChange:null,afterRedraw:null,checkValues:null,error:!1,errmsg:"",errorcheck:!0,showQuery:!0,sopt:null,ops:[{name:"eq",description:"equal",operator:"="},{name:"ne",description:"not equal",operator:"<>"},{name:"lt",description:"less",operator:"<"},{name:"le",description:"less or equal",
operator:"<="},{name:"gt",description:"greater",operator:">"},{name:"ge",description:"greater or equal",operator:">="},{name:"bw",description:"begins with",operator:"LIKE"},{name:"bn",description:"does not begin with",operator:"NOT LIKE"},{name:"in",description:"in",operator:"IN"},{name:"ni",description:"not in",operator:"NOT IN"},{name:"ew",description:"ends with",operator:"LIKE"},{name:"en",description:"does not end with",operator:"NOT LIKE"},{name:"cn",description:"contains",operator:"LIKE"},{name:"nc",
description:"does not contain",operator:"NOT LIKE"},{name:"nu",description:"is null",operator:"IS NULL"},{name:"nn",description:"is not null",operator:"IS NOT NULL"}],numopts:"eq,ne,lt,le,gt,ge,nu,nn,in,ni".split(","),stropts:"eq,ne,bw,bn,ew,en,cn,nc,nu,nn,in,ni".split(","),strarr:["text","string","blob"],_gridsopt:[],groupOps:[{op:"AND",text:"AND"},{op:"OR",text:"OR"}],groupButton:!0,ruleButtons:!0,direction:"ltr"},a.jgrid.filter,d||{});return this.each(function(){if(!this.filter){this.p=p;if(null===
this.p.filter||void 0===this.p.filter)this.p.filter={groupOp:this.p.groupOps[0].op,rules:[],groups:[]};var d,n=this.p.columns.length,f,t=/msie/i.test(navigator.userAgent)&&!window.opera;if(this.p._gridsopt.length)for(d=0;d<this.p._gridsopt.length;d++)this.p.ops[d].description=this.p._gridsopt[d];this.p.initFilter=a.extend(!0,{},this.p.filter);if(n){for(d=0;d<n;d++)if(f=this.p.columns[d],f.stype?f.inputtype=f.stype:f.inputtype||(f.inputtype="text"),f.sorttype?f.searchtype=f.sorttype:f.searchtype||
(f.searchtype="string"),void 0===f.hidden&&(f.hidden=!1),f.label||(f.label=f.name),f.index&&(f.name=f.index),f.hasOwnProperty("searchoptions")||(f.searchoptions={}),!f.hasOwnProperty("searchrules"))f.searchrules={};this.p.showQuery&&a(this).append("<table class='queryresult ui-widget ui-widget-content' style='display:block;max-width:440px;border:0px none;' dir='"+this.p.direction+"'><tbody><tr><td class='query'></td></tr></tbody></table>");var r=function(g,k){var b=[!0,""];if(a.isFunction(k.searchrules))b=
k.searchrules(g,k);else if(a.jgrid&&a.jgrid.checkValues)try{b=a.jgrid.checkValues(g,-1,null,k.searchrules,k.label)}catch(c){}b&&b.length&&!1===b[0]&&(p.error=!b[0],p.errmsg=b[1])};this.onchange=function(){this.p.error=!1;this.p.errmsg="";return a.isFunction(this.p.onChange)?this.p.onChange.call(this,this.p):!1};this.reDraw=function(){a("table.group:first",this).remove();var g=this.createTableForGroup(p.filter,null);a(this).append(g);a.isFunction(this.p.afterRedraw)&&this.p.afterRedraw.call(this,this.p)};
this.createTableForGroup=function(g,k){var b=this,c,e=a("<table class='group ui-widget ui-widget-content' style='border:0px none;'><tbody></tbody></table>"),d="left";"rtl"==this.p.direction&&(d="right",e.attr("dir","rtl"));null===k&&e.append("<tr class='error' style='display:none;'><th colspan='5' class='ui-state-error' align='"+d+"'></th></tr>");var h=a("<tr></tr>");e.append(h);d=a("<th colspan='5' align='"+d+"'></th>");h.append(d);if(!0===this.p.ruleButtons){var i=a("<select class='opsel'></select>");
d.append(i);var h="",f;for(c=0;c<p.groupOps.length;c++)f=g.groupOp===b.p.groupOps[c].op?" selected='selected'":"",h+="<option value='"+b.p.groupOps[c].op+"'"+f+">"+b.p.groupOps[c].text+"</option>";i.append(h).bind("change",function(){g.groupOp=a(i).val();b.onchange()})}h="<span></span>";this.p.groupButton&&(h=a("<input type='button' value='+ {}' title='Add subgroup' class='add-group'/>"),h.bind("click",function(){if(g.groups===void 0)g.groups=[];g.groups.push({groupOp:p.groupOps[0].op,rules:[],groups:[]});
b.reDraw();b.onchange();return false}));d.append(h);if(!0===this.p.ruleButtons){var h=a("<input type='button' value='+' title='Add rule' class='add-rule ui-add'/>"),l;h.bind("click",function(){if(g.rules===void 0)g.rules=[];for(c=0;c<b.p.columns.length;c++){var e=b.p.columns[c].search===void 0?true:b.p.columns[c].search,d=b.p.columns[c].hidden===true;if(b.p.columns[c].searchoptions.searchhidden===true&&e||e&&!d){l=b.p.columns[c];break}}e=l.searchoptions.sopt?l.searchoptions.sopt:b.p.sopt?b.p.sopt:
a.inArray(l.searchtype,b.p.strarr)!==-1?b.p.stropts:b.p.numopts;g.rules.push({field:l.name,op:e[0],data:""});b.reDraw();return false});d.append(h)}null!==k&&(h=a("<input type='button' value='-' title='Delete group' class='delete-group'/>"),d.append(h),h.bind("click",function(){for(c=0;c<k.groups.length;c++)if(k.groups[c]===g){k.groups.splice(c,1);break}b.reDraw();b.onchange();return false}));if(void 0!==g.groups)for(c=0;c<g.groups.length;c++)d=a("<tr></tr>"),e.append(d),h=a("<td class='first'></td>"),
d.append(h),h=a("<td colspan='4'></td>"),h.append(this.createTableForGroup(g.groups[c],g)),d.append(h);void 0===g.groupOp&&(g.groupOp=b.p.groupOps[0].op);if(void 0!==g.rules)for(c=0;c<g.rules.length;c++)e.append(this.createTableRowForRule(g.rules[c],g));return e};this.createTableRowForRule=function(g,d){var b=this,c=a("<tr></tr>"),e,f,h,i,j="",l;c.append("<td class='first'></td>");var m=a("<td class='columns'></td>");c.append(m);var n=a("<select></select>"),o,q=[];m.append(n);n.bind("change",function(){g.field=
a(n).val();h=a(this).parents("tr:first");for(e=0;e<b.p.columns.length;e++)if(b.p.columns[e].name===g.field){i=b.p.columns[e];break}if(i){i.searchoptions.id=a.jgrid.randId();t&&"text"===i.inputtype&&!i.searchoptions.size&&(i.searchoptions.size=10);var c=a.jgrid.createEl(i.inputtype,i.searchoptions,"",!0,b.p.ajaxSelectOptions,!0);a(c).addClass("input-elm");f=i.searchoptions.sopt?i.searchoptions.sopt:b.p.sopt?b.p.sopt:-1!==a.inArray(i.searchtype,b.p.strarr)?b.p.stropts:b.p.numopts;var d="",k=0;q=[];
a.each(b.p.ops,function(){q.push(this.name)});for(e=0;e<f.length;e++)o=a.inArray(f[e],q),-1!==o&&(0===k&&(g.op=b.p.ops[o].name),d+="<option value='"+b.p.ops[o].name+"'>"+b.p.ops[o].description+"</option>",k++);a(".selectopts",h).empty().append(d);a(".selectopts",h)[0].selectedIndex=0;a.jgrid.msie&&9>a.jgrid.msiever()&&(d=parseInt(a("select.selectopts",h)[0].offsetWidth,10)+1,a(".selectopts",h).width(d),a(".selectopts",h).css("width","auto"));a(".data",h).empty().append(c);a.jgrid.bindEv(c,i.searchoptions,
b);a(".input-elm",h).bind("change",function(c){var e=a(this).hasClass("ui-autocomplete-input")?200:0;setTimeout(function(){var e=c.target;g.data=e.nodeName.toUpperCase()==="SPAN"&&i.searchoptions&&a.isFunction(i.searchoptions.custom_value)?i.searchoptions.custom_value(a(e).children(".customelement:first"),"get"):e.value;b.onchange()},e)});setTimeout(function(){g.data=a(c).val();b.onchange()},0)}});for(e=m=0;e<b.p.columns.length;e++){l=void 0===b.p.columns[e].search?!0:b.p.columns[e].search;var r=
!0===b.p.columns[e].hidden;if(!0===b.p.columns[e].searchoptions.searchhidden&&l||l&&!r)l="",g.field===b.p.columns[e].name&&(l=" selected='selected'",m=e),j+="<option value='"+b.p.columns[e].name+"'"+l+">"+b.p.columns[e].label+"</option>"}n.append(j);j=a("<td class='operators'></td>");c.append(j);i=p.columns[m];i.searchoptions.id=a.jgrid.randId();t&&"text"===i.inputtype&&!i.searchoptions.size&&(i.searchoptions.size=10);m=a.jgrid.createEl(i.inputtype,i.searchoptions,g.data,!0,b.p.ajaxSelectOptions,
!0);if("nu"==g.op||"nn"==g.op)a(m).attr("readonly","true"),a(m).attr("disabled","true");var s=a("<select class='selectopts'></select>");j.append(s);s.bind("change",function(){g.op=a(s).val();h=a(this).parents("tr:first");var c=a(".input-elm",h)[0];if(g.op==="nu"||g.op==="nn"){g.data="";c.value="";c.setAttribute("readonly","true");c.setAttribute("disabled","true")}else{c.removeAttribute("readonly");c.removeAttribute("disabled")}b.onchange()});f=i.searchoptions.sopt?i.searchoptions.sopt:b.p.sopt?b.p.sopt:
-1!==a.inArray(i.searchtype,b.p.strarr)?b.p.stropts:b.p.numopts;j="";a.each(b.p.ops,function(){q.push(this.name)});for(e=0;e<f.length;e++)o=a.inArray(f[e],q),-1!==o&&(l=g.op===b.p.ops[o].name?" selected='selected'":"",j+="<option value='"+b.p.ops[o].name+"'"+l+">"+b.p.ops[o].description+"</option>");s.append(j);j=a("<td class='data'></td>");c.append(j);j.append(m);a.jgrid.bindEv(m,i.searchoptions,b);a(m).addClass("input-elm").bind("change",function(){g.data=i.inputtype==="custom"?i.searchoptions.custom_value(a(this).children(".customelement:first"),
"get"):a(this).val();b.onchange()});j=a("<td></td>");c.append(j);!0===this.p.ruleButtons&&(m=a("<input type='button' value='-' title='Delete rule' class='delete-rule ui-del'/>"),j.append(m),m.bind("click",function(){for(e=0;e<d.rules.length;e++)if(d.rules[e]===g){d.rules.splice(e,1);break}b.reDraw();b.onchange();return false}));return c};this.getStringForGroup=function(a){var d="(",b;if(void 0!==a.groups)for(b=0;b<a.groups.length;b++){1<d.length&&(d+=" "+a.groupOp+" ");try{d+=this.getStringForGroup(a.groups[b])}catch(c){alert(c)}}if(void 0!==
a.rules)try{for(b=0;b<a.rules.length;b++)1<d.length&&(d+=" "+a.groupOp+" "),d+=this.getStringForRule(a.rules[b])}catch(e){alert(e)}d+=")";return"()"===d?"":d};this.getStringForRule=function(d){var f="",b="",c,e;for(c=0;c<this.p.ops.length;c++)if(this.p.ops[c].name===d.op){f=this.p.ops[c].operator;b=this.p.ops[c].name;break}for(c=0;c<this.p.columns.length;c++)if(this.p.columns[c].name===d.field){e=this.p.columns[c];break}if(null==e)return"";c=d.data;if("bw"===b||"bn"===b)c+="%";if("ew"===b||"en"===
b)c="%"+c;if("cn"===b||"nc"===b)c="%"+c+"%";if("in"===b||"ni"===b)c=" ("+c+")";p.errorcheck&&r(d.data,e);return-1!==a.inArray(e.searchtype,["int","integer","float","number","currency"])||"nn"===b||"nu"===b?d.field+" "+f+" "+c:d.field+" "+f+' "'+c+'"'};this.resetFilter=function(){this.p.filter=a.extend(!0,{},this.p.initFilter);this.reDraw();this.onchange()};this.hideError=function(){a("th.ui-state-error",this).html("");a("tr.error",this).hide()};this.showError=function(){a("th.ui-state-error",this).html(this.p.errmsg);
a("tr.error",this).show()};this.toUserFriendlyString=function(){return this.getStringForGroup(p.filter)};this.toString=function(){function a(b){var c="(",e;if(void 0!==b.groups)for(e=0;e<b.groups.length;e++)1<c.length&&(c="OR"===b.groupOp?c+" || ":c+" && "),c+=a(b.groups[e]);if(void 0!==b.rules)for(e=0;e<b.rules.length;e++){1<c.length&&(c="OR"===b.groupOp?c+" || ":c+" && ");var f=b.rules[e];if(d.p.errorcheck){for(var h=void 0,i=void 0,h=0;h<d.p.columns.length;h++)if(d.p.columns[h].name===f.field){i=
d.p.columns[h];break}i&&r(f.data,i)}c+=f.op+"(item."+f.field+",'"+f.data+"')"}c+=")";return"()"===c?"":c}var d=this;return a(this.p.filter)};this.reDraw();if(this.p.showQuery)this.onchange();this.filter=!0}}})};a.extend(a.fn.jqFilter,{toSQLString:function(){var a="";this.each(function(){a=this.toUserFriendlyString()});return a},filterData:function(){var a;this.each(function(){a=this.p.filter});return a},getParameter:function(a){return void 0!==a&&this.p.hasOwnProperty(a)?this.p[a]:this.p},resetFilter:function(){return this.each(function(){this.resetFilter()})},
addFilter:function(d){"string"===typeof d&&(d=a.jgrid.parse(d));this.each(function(){this.p.filter=d;this.reDraw();this.onchange()})}})})(jQuery);
(function(a){a.jgrid.inlineEdit=a.jgrid.inlineEdit||{};a.jgrid.extend({editRow:function(b,c,e,o,l,g,n,i,f){var j={},d=a.makeArray(arguments).slice(1);if("object"===a.type(d[0]))j=d[0];else if(void 0!==c&&(j.keys=c),a.isFunction(e)&&(j.oneditfunc=e),a.isFunction(o)&&(j.successfunc=o),void 0!==l&&(j.url=l),void 0!==g&&(j.extraparam=g),a.isFunction(n)&&(j.aftersavefunc=n),a.isFunction(i)&&(j.errorfunc=i),a.isFunction(f))j.afterrestorefunc=f;j=a.extend(!0,{keys:!1,oneditfunc:null,successfunc:null,url:null,
extraparam:{},aftersavefunc:null,errorfunc:null,afterrestorefunc:null,restoreAfterError:!0,mtype:"POST"},a.jgrid.inlineEdit,j);return this.each(function(){var d=this,c,f,e=0,i=null,l={},g,k;if(d.grid&&(g=a(d).jqGrid("getInd",b,!0),!1!==g&&"0"==(a(g).attr("editable")||"0")&&!a(g).hasClass("not-editable-row")))k=d.p.colModel,a('td[role="gridcell"]',g).each(function(g){c=k[g].name;var j=!0===d.p.treeGrid&&c==d.p.ExpandColumn;if(j)f=a("span:first",this).html();else try{f=a.unformat.call(d,this,{rowId:b,
colModel:k[g]},g)}catch(o){f=k[g].edittype&&"textarea"==k[g].edittype?a(this).text():a(this).html()}if("cb"!=c&&"subgrid"!=c&&"rn"!=c&&(d.p.autoencode&&(f=a.jgrid.htmlDecode(f)),l[c]=f,!0===k[g].editable)){null===i&&(i=g);j?a("span:first",this).html(""):a(this).html("");var x=a.extend({},k[g].editoptions||{},{id:b+"_"+c,name:c});k[g].edittype||(k[g].edittype="text");if("&nbsp;"==f||"&#160;"==f||1==f.length&&160==f.charCodeAt(0))f="";var v=a.jgrid.createEl.call(d,k[g].edittype,x,f,!0,a.extend({},a.jgrid.ajaxOptions,
d.p.ajaxSelectOptions||{}));a(v).addClass("editable");j?a("span:first",this).append(v):a(this).append(v);a.jgrid.bindEv(v,x,d);"select"==k[g].edittype&&void 0!==k[g].editoptions&&!0===k[g].editoptions.multiple&&void 0===k[g].editoptions.dataUrl&&a.jgrid.msie&&a(v).width(a(v).width());e++}}),0<e&&(l.id=b,d.p.savedRow.push(l),a(g).attr("editable","1"),a("td:eq("+i+") input",g).focus(),!0===j.keys&&a(g).bind("keydown",function(f){if(27===f.keyCode){a(d).jqGrid("restoreRow",b,j.afterrestorefunc);if(d.p._inlinenav)try{a(d).jqGrid("showAddEditButtons")}catch(c){}return!1}if(13===
f.keyCode){if("TEXTAREA"==f.target.tagName)return!0;if(a(d).jqGrid("saveRow",b,j)&&d.p._inlinenav)try{a(d).jqGrid("showAddEditButtons")}catch(g){}return!1}}),a(d).triggerHandler("jqGridInlineEditRow",[b,j]),a.isFunction(j.oneditfunc)&&j.oneditfunc.call(d,b))})},saveRow:function(b,c,e,o,l,g,n){var i=a.makeArray(arguments).slice(1),f={};if("object"===a.type(i[0]))f=i[0];else if(a.isFunction(c)&&(f.successfunc=c),void 0!==e&&(f.url=e),void 0!==o&&(f.extraparam=o),a.isFunction(l)&&(f.aftersavefunc=l),
a.isFunction(g)&&(f.errorfunc=g),a.isFunction(n))f.afterrestorefunc=n;var f=a.extend(!0,{successfunc:null,url:null,extraparam:{},aftersavefunc:null,errorfunc:null,afterrestorefunc:null,restoreAfterError:!0,mtype:"POST"},a.jgrid.inlineEdit,f),j=!1,d=this[0],m,h={},w={},r={},t,s,q;if(!d.grid)return j;q=a(d).jqGrid("getInd",b,!0);if(!1===q)return j;i=a(q).attr("editable");f.url=f.url||d.p.editurl;if("1"===i){var k;a('td[role="gridcell"]',q).each(function(b){k=d.p.colModel[b];m=k.name;if("cb"!=m&&"subgrid"!=
m&&!0===k.editable&&"rn"!=m&&!a(this).hasClass("not-editable-cell")){switch(k.edittype){case "checkbox":var c=["Yes","No"];k.editoptions&&(c=k.editoptions.value.split(":"));h[m]=a("input",this).is(":checked")?c[0]:c[1];break;case "text":case "password":case "textarea":case "button":h[m]=a("input, textarea",this).val();break;case "select":if(k.editoptions.multiple){var c=a("select",this),g=[];h[m]=a(c).val();h[m]=h[m]?h[m].join(","):"";a("select option:selected",this).each(function(d,b){g[d]=a(b).text()});
w[m]=g.join(",")}else h[m]=a("select option:selected",this).val(),w[m]=a("select option:selected",this).text();k.formatter&&"select"==k.formatter&&(w={});break;case "custom":try{if(k.editoptions&&a.isFunction(k.editoptions.custom_value)){if(h[m]=k.editoptions.custom_value.call(d,a(".customelement",this),"get"),void 0===h[m])throw"e2";}else throw"e1";}catch(e){"e1"==e&&a.jgrid.info_dialog(a.jgrid.errors.errcap,"function 'custom_value' "+a.jgrid.edit.msg.nodefined,a.jgrid.edit.bClose),"e2"==e?a.jgrid.info_dialog(a.jgrid.errors.errcap,
"function 'custom_value' "+a.jgrid.edit.msg.novalue,a.jgrid.edit.bClose):a.jgrid.info_dialog(a.jgrid.errors.errcap,e.message,a.jgrid.edit.bClose)}}s=a.jgrid.checkValues(h[m],b,d);if(!1===s[0])return s[1]=h[m]+" "+s[1],!1;d.p.autoencode&&(h[m]=a.jgrid.htmlEncode(h[m]));"clientArray"!==f.url&&k.editoptions&&!0===k.editoptions.NullIfEmpty&&""===h[m]&&(r[m]="null")}});if(!1===s[0]){try{var u=a.jgrid.findPos(a("#"+a.jgrid.jqID(b),d.grid.bDiv)[0]);a.jgrid.info_dialog(a.jgrid.errors.errcap,s[1],a.jgrid.edit.bClose,
{left:u[0],top:u[1]})}catch(y){alert(s[1])}return j}var p=d.p.prmNames,u=b,i=!1===d.p.keyIndex?p.id:d.p.colModel[d.p.keyIndex+(!0===d.p.rownumbers?1:0)+(!0===d.p.multiselect?1:0)+(!0===d.p.subGrid?1:0)].name;if(h){h[p.oper]=p.editoper;if(void 0===h[i])h[i]=b;else if(q.id!==d.p.idPrefix+h[i]&&(p=a.jgrid.stripPref(d.p.idPrefix,b),void 0!==d.p._index[p]&&(d.p._index[h[i]]=d.p._index[p],delete d.p._index[p]),b=d.p.idPrefix+h[i],a(q).attr("id",b),d.p.selrow===u&&(d.p.selrow=b),a.isArray(d.p.selarrrow)&&
(p=a.inArray(u,d.p.selarrrow),0<=p&&(d.p.selarrrow[p]=b)),d.p.multiselect))p="jqg_"+d.p.id+"_"+b,a("input.cbox",q).attr("id",p).attr("name",p);void 0===d.p.inlineData&&(d.p.inlineData={});h=a.extend({},h,d.p.inlineData,f.extraparam)}if("clientArray"==f.url){h=a.extend({},h,w);d.p.autoencode&&a.each(h,function(d,b){h[d]=a.jgrid.htmlDecode(b)});p=a(d).jqGrid("setRowData",b,h);a(q).attr("editable","0");for(i=0;i<d.p.savedRow.length;i++)if(d.p.savedRow[i].id==u){t=i;break}0<=t&&d.p.savedRow.splice(t,
1);a(d).triggerHandler("jqGridInlineAfterSaveRow",[b,p,h,f]);a.isFunction(f.aftersavefunc)&&f.aftersavefunc.call(d,b,p,f);j=!0;a(q).unbind("keydown")}else a("#lui_"+a.jgrid.jqID(d.p.id)).show(),r=a.extend({},h,r),r[i]=a.jgrid.stripPref(d.p.idPrefix,r[i]),a.ajax(a.extend({url:f.url,data:a.isFunction(d.p.serializeRowData)?d.p.serializeRowData.call(d,r):r,type:f.mtype,async:!1,complete:function(c,g){a("#lui_"+a.jgrid.jqID(d.p.id)).hide();if("success"===g){var e=!0,i;i=a(d).triggerHandler("jqGridInlineSuccessSaveRow",
[c,b,f]);a.isArray(i)||(i=[!0,h]);i[0]&&a.isFunction(f.successfunc)&&(i=f.successfunc.call(d,c));a.isArray(i)?(e=i[0],h=i[1]||h):e=i;if(!0===e){d.p.autoencode&&a.each(h,function(d,b){h[d]=a.jgrid.htmlDecode(b)});h=a.extend({},h,w);a(d).jqGrid("setRowData",b,h);a(q).attr("editable","0");for(e=0;e<d.p.savedRow.length;e++)if(d.p.savedRow[e].id==b){t=e;break}0<=t&&d.p.savedRow.splice(t,1);a(d).triggerHandler("jqGridInlineAfterSaveRow",[b,c,h,f]);a.isFunction(f.aftersavefunc)&&f.aftersavefunc.call(d,b,
c);j=!0;a(q).unbind("keydown")}else a(d).triggerHandler("jqGridInlineErrorSaveRow",[b,c,g,null,f]),a.isFunction(f.errorfunc)&&f.errorfunc.call(d,b,c,g,null),!0===f.restoreAfterError&&a(d).jqGrid("restoreRow",b,f.afterrestorefunc)}},error:function(c,e,g){a("#lui_"+a.jgrid.jqID(d.p.id)).hide();a(d).triggerHandler("jqGridInlineErrorSaveRow",[b,c,e,g,f]);if(a.isFunction(f.errorfunc))f.errorfunc.call(d,b,c,e,g);else{c=c.responseText||c.statusText;try{a.jgrid.info_dialog(a.jgrid.errors.errcap,'<div class="ui-state-error">'+
c+"</div>",a.jgrid.edit.bClose,{buttonalign:"right"})}catch(i){alert(c)}}!0===f.restoreAfterError&&a(d).jqGrid("restoreRow",b,f.afterrestorefunc)}},a.jgrid.ajaxOptions,d.p.ajaxRowOptions||{}))}return j},restoreRow:function(b,c){var e=a.makeArray(arguments).slice(1),o={};"object"===a.type(e[0])?o=e[0]:a.isFunction(c)&&(o.afterrestorefunc=c);o=a.extend(!0,a.jgrid.inlineEdit,o);return this.each(function(){var c=this,e,n,i={},f;if(c.grid){n=a(c).jqGrid("getInd",b,true);if(n!==false){for(f=0;f<c.p.savedRow.length;f++)if(c.p.savedRow[f].id==
b){e=f;break}if(e>=0){if(a.isFunction(a.fn.datepicker))try{a("input.hasDatepicker","#"+a.jgrid.jqID(n.id)).datepicker("hide")}catch(j){}a.each(c.p.colModel,function(){this.editable===true&&c.p.savedRow[e].hasOwnProperty(this.name)&&(i[this.name]=c.p.savedRow[e][this.name])});a(c).jqGrid("setRowData",b,i);a(n).attr("editable","0").unbind("keydown");c.p.savedRow.splice(e,1);a("#"+a.jgrid.jqID(b),"#"+a.jgrid.jqID(c.p.id)).hasClass("jqgrid-new-row")&&setTimeout(function(){a(c).jqGrid("delRowData",b)},
0)}a(c).triggerHandler("jqGridInlineAfterRestoreRow",[b]);a.isFunction(o.afterrestorefunc)&&o.afterrestorefunc.call(c,b)}}})},addRow:function(b){b=a.extend(!0,{rowID:null,initdata:{},position:"first",useDefValues:!0,useFormatter:!1,addRowParams:{extraparam:{}}},b||{});return this.each(function(){if(this.grid){var c=this;b.rowID=a.isFunction(b.rowID)?b.rowID.call(c,b):null!=b.rowID?b.rowID:a.jgrid.randId();!0===b.useDefValues&&a(c.p.colModel).each(function(){if(this.editoptions&&this.editoptions.defaultValue){var e=
this.editoptions.defaultValue,e=a.isFunction(e)?e.call(c):e;b.initdata[this.name]=e}});a(c).jqGrid("addRowData",b.rowID,b.initdata,b.position);b.rowID=c.p.idPrefix+b.rowID;a("#"+a.jgrid.jqID(b.rowID),"#"+a.jgrid.jqID(c.p.id)).addClass("jqgrid-new-row");if(b.useFormatter)a("#"+a.jgrid.jqID(b.rowID)+" .ui-inline-edit","#"+a.jgrid.jqID(c.p.id)).click();else{var e=c.p.prmNames;b.addRowParams.extraparam[e.oper]=e.addoper;a(c).jqGrid("editRow",b.rowID,b.addRowParams);a(c).jqGrid("setSelection",b.rowID)}}})},
inlineNav:function(b,c){c=a.extend({edit:!0,editicon:"ui-icon-pencil",add:!0,addicon:"ui-icon-plus",save:!0,saveicon:"ui-icon-disk",cancel:!0,cancelicon:"ui-icon-cancel",addParams:{},editParams:{},restoreAfterSelect:!0},a.jgrid.nav,c||{});return this.each(function(){if(this.grid){var e=this,o,l=a.jgrid.jqID(e.p.id);e.p._inlinenav=!0;if(!0===c.addParams.useFormatter){var g=e.p.colModel,n;for(n=0;n<g.length;n++)if(g[n].formatter&&"actions"===g[n].formatter){g[n].formatoptions&&(g=a.extend({keys:!1,
onEdit:null,onSuccess:null,afterSave:null,onError:null,afterRestore:null,extraparam:{},url:null},g[n].formatoptions),c.addParams.addRowParams={keys:g.keys,oneditfunc:g.onEdit,successfunc:g.onSuccess,url:g.url,extraparam:g.extraparam,aftersavefunc:g.afterSavef,errorfunc:g.onError,afterrestorefunc:g.afterRestore});break}}c.add&&a(e).jqGrid("navButtonAdd",b,{caption:c.addtext,title:c.addtitle,buttonicon:c.addicon,id:e.p.id+"_iladd",onClickButton:function(){a(e).jqGrid("addRow",c.addParams);c.addParams.useFormatter||
(a("#"+l+"_ilsave").removeClass("ui-state-disabled"),a("#"+l+"_ilcancel").removeClass("ui-state-disabled"),a("#"+l+"_iladd").addClass("ui-state-disabled"),a("#"+l+"_iledit").addClass("ui-state-disabled"))}});c.edit&&a(e).jqGrid("navButtonAdd",b,{caption:c.edittext,title:c.edittitle,buttonicon:c.editicon,id:e.p.id+"_iledit",onClickButton:function(){var b=a(e).jqGrid("getGridParam","selrow");b?(a(e).jqGrid("editRow",b,c.editParams),a("#"+l+"_ilsave").removeClass("ui-state-disabled"),a("#"+l+"_ilcancel").removeClass("ui-state-disabled"),
a("#"+l+"_iladd").addClass("ui-state-disabled"),a("#"+l+"_iledit").addClass("ui-state-disabled")):(a.jgrid.viewModal("#alertmod",{gbox:"#gbox_"+l,jqm:!0}),a("#jqg_alrt").focus())}});c.save&&(a(e).jqGrid("navButtonAdd",b,{caption:c.savetext||"",title:c.savetitle||"Save row",buttonicon:c.saveicon,id:e.p.id+"_ilsave",onClickButton:function(){var b=e.p.savedRow[0].id;if(b){var f=e.p.prmNames,g=f.oper;c.editParams.extraparam||(c.editParams.extraparam={});c.editParams.extraparam[g]=a("#"+a.jgrid.jqID(b),
"#"+l).hasClass("jqgrid-new-row")?f.addoper:f.editoper;a(e).jqGrid("saveRow",b,c.editParams)&&a(e).jqGrid("showAddEditButtons")}else a.jgrid.viewModal("#alertmod",{gbox:"#gbox_"+l,jqm:!0}),a("#jqg_alrt").focus()}}),a("#"+l+"_ilsave").addClass("ui-state-disabled"));c.cancel&&(a(e).jqGrid("navButtonAdd",b,{caption:c.canceltext||"",title:c.canceltitle||"Cancel row editing",buttonicon:c.cancelicon,id:e.p.id+"_ilcancel",onClickButton:function(){var b=e.p.savedRow[0].id;if(b){a(e).jqGrid("restoreRow",b,
c.editParams);a(e).jqGrid("showAddEditButtons")}else{a.jgrid.viewModal("#alertmod",{gbox:"#gbox_"+l,jqm:true});a("#jqg_alrt").focus()}}}),a("#"+l+"_ilcancel").addClass("ui-state-disabled"));!0===c.restoreAfterSelect&&(o=a.isFunction(e.p.beforeSelectRow)?e.p.beforeSelectRow:!1,e.p.beforeSelectRow=function(b,f){var g=true;if(e.p.savedRow.length>0&&e.p._inlinenav===true&&b!==e.p.selrow&&e.p.selrow!==null){e.p.selrow==c.addParams.rowID?a(e).jqGrid("delRowData",e.p.selrow):a(e).jqGrid("restoreRow",e.p.selrow,
c.editParams);a(e).jqGrid("showAddEditButtons")}o&&(g=o.call(e,b,f));return g})}})},showAddEditButtons:function(){return this.each(function(){if(this.grid){var b=a.jgrid.jqID(this.p.id);a("#"+b+"_ilsave").addClass("ui-state-disabled");a("#"+b+"_ilcancel").addClass("ui-state-disabled");a("#"+b+"_iladd").removeClass("ui-state-disabled");a("#"+b+"_iledit").removeClass("ui-state-disabled")}})}})})(jQuery);
(function(b){b.jgrid.extend({editCell:function(d,f,a){return this.each(function(){var c=this,g,e,h,i;if(c.grid&&!0===c.p.cellEdit){f=parseInt(f,10);c.p.selrow=c.rows[d].id;c.p.knv||b(c).jqGrid("GridNav");if(0<c.p.savedRow.length){if(!0===a&&d==c.p.iRow&&f==c.p.iCol)return;b(c).jqGrid("saveCell",c.p.savedRow[0].id,c.p.savedRow[0].ic)}else window.setTimeout(function(){b("#"+b.jgrid.jqID(c.p.knv)).attr("tabindex","-1").focus()},0);i=c.p.colModel[f];g=i.name;if(!("subgrid"==g||"cb"==g||"rn"==g)){h=b("td:eq("+
f+")",c.rows[d]);if(!0===i.editable&&!0===a&&!h.hasClass("not-editable-cell")){0<=parseInt(c.p.iCol,10)&&0<=parseInt(c.p.iRow,10)&&(b("td:eq("+c.p.iCol+")",c.rows[c.p.iRow]).removeClass("edit-cell ui-state-highlight"),b(c.rows[c.p.iRow]).removeClass("selected-row ui-state-hover"));b(h).addClass("edit-cell ui-state-highlight");b(c.rows[d]).addClass("selected-row ui-state-hover");try{e=b.unformat.call(c,h,{rowId:c.rows[d].id,colModel:i},f)}catch(k){e=i.edittype&&"textarea"==i.edittype?b(h).text():b(h).html()}c.p.autoencode&&
(e=b.jgrid.htmlDecode(e));i.edittype||(i.edittype="text");c.p.savedRow.push({id:d,ic:f,name:g,v:e});if("&nbsp;"===e||"&#160;"===e||1===e.length&&160===e.charCodeAt(0))e="";if(b.isFunction(c.p.formatCell)){var j=c.p.formatCell.call(c,c.rows[d].id,g,e,d,f);void 0!==j&&(e=j)}var j=b.extend({},i.editoptions||{},{id:d+"_"+g,name:g}),n=b.jgrid.createEl.call(c,i.edittype,j,e,!0,b.extend({},b.jgrid.ajaxOptions,c.p.ajaxSelectOptions||{}));b(c).triggerHandler("jqGridBeforeEditCell",[c.rows[d].id,g,e,d,f]);
b.isFunction(c.p.beforeEditCell)&&c.p.beforeEditCell.call(c,c.rows[d].id,g,e,d,f);b(h).html("").append(n).attr("tabindex","0");b.jgrid.bindEv(n,j,c);window.setTimeout(function(){b(n).focus()},0);b("input, select, textarea",h).bind("keydown",function(a){a.keyCode===27&&(b("input.hasDatepicker",h).length>0?b(".ui-datepicker").is(":hidden")?b(c).jqGrid("restoreCell",d,f):b("input.hasDatepicker",h).datepicker("hide"):b(c).jqGrid("restoreCell",d,f));if(a.keyCode===13){b(c).jqGrid("saveCell",d,f);return false}if(a.keyCode===
9){if(c.grid.hDiv.loading)return false;a.shiftKey?b(c).jqGrid("prevCell",d,f):b(c).jqGrid("nextCell",d,f)}a.stopPropagation()});b(c).triggerHandler("jqGridAfterEditCell",[c.rows[d].id,g,e,d,f]);b.isFunction(c.p.afterEditCell)&&c.p.afterEditCell.call(c,c.rows[d].id,g,e,d,f)}else 0<=parseInt(c.p.iCol,10)&&0<=parseInt(c.p.iRow,10)&&(b("td:eq("+c.p.iCol+")",c.rows[c.p.iRow]).removeClass("edit-cell ui-state-highlight"),b(c.rows[c.p.iRow]).removeClass("selected-row ui-state-hover")),h.addClass("edit-cell ui-state-highlight"),
b(c.rows[d]).addClass("selected-row ui-state-hover"),e=h.html().replace(/\&#160\;/ig,""),b(c).triggerHandler("jqGridSelectCell",[c.rows[d].id,g,e,d,f]),b.isFunction(c.p.onSelectCell)&&c.p.onSelectCell.call(c,c.rows[d].id,g,e,d,f);c.p.iCol=f;c.p.iRow=d}}})},saveCell:function(d,f){return this.each(function(){var a=this,c;if(a.grid&&!0===a.p.cellEdit){c=1<=a.p.savedRow.length?0:null;if(null!==c){var g=b("td:eq("+f+")",a.rows[d]),e,h,i=a.p.colModel[f],k=i.name,j=b.jgrid.jqID(k);switch(i.edittype){case "select":if(i.editoptions.multiple){var j=
b("#"+d+"_"+j,a.rows[d]),n=[];(e=b(j).val())?e.join(","):e="";b("option:selected",j).each(function(a,c){n[a]=b(c).text()});h=n.join(",")}else e=b("#"+d+"_"+j+" option:selected",a.rows[d]).val(),h=b("#"+d+"_"+j+" option:selected",a.rows[d]).text();i.formatter&&(h=e);break;case "checkbox":var l=["Yes","No"];i.editoptions&&(l=i.editoptions.value.split(":"));h=e=b("#"+d+"_"+j,a.rows[d]).is(":checked")?l[0]:l[1];break;case "password":case "text":case "textarea":case "button":h=e=b("#"+d+"_"+j,a.rows[d]).val();
break;case "custom":try{if(i.editoptions&&b.isFunction(i.editoptions.custom_value)){e=i.editoptions.custom_value.call(a,b(".customelement",g),"get");if(void 0===e)throw"e2";h=e}else throw"e1";}catch(o){"e1"==o&&b.jgrid.info_dialog(b.jgrid.errors.errcap,"function 'custom_value' "+b.jgrid.edit.msg.nodefined,b.jgrid.edit.bClose),"e2"==o?b.jgrid.info_dialog(b.jgrid.errors.errcap,"function 'custom_value' "+b.jgrid.edit.msg.novalue,b.jgrid.edit.bClose):b.jgrid.info_dialog(b.jgrid.errors.errcap,o.message,
b.jgrid.edit.bClose)}}if(h!==a.p.savedRow[c].v){if(c=b(a).triggerHandler("jqGridBeforeSaveCell",[a.rows[d].id,k,e,d,f]))h=e=c;if(b.isFunction(a.p.beforeSaveCell)&&(c=a.p.beforeSaveCell.call(a,a.rows[d].id,k,e,d,f)))h=e=c;var p=b.jgrid.checkValues(e,f,a);if(!0===p[0]){c=b(a).triggerHandler("jqGridBeforeSubmitCell",[a.rows[d].id,k,e,d,f])||{};b.isFunction(a.p.beforeSubmitCell)&&((c=a.p.beforeSubmitCell.call(a,a.rows[d].id,k,e,d,f))||(c={}));0<b("input.hasDatepicker",g).length&&b("input.hasDatepicker",
g).datepicker("hide");if("remote"==a.p.cellsubmit)if(a.p.cellurl){var m={};a.p.autoencode&&(e=b.jgrid.htmlEncode(e));m[k]=e;l=a.p.prmNames;i=l.id;j=l.oper;m[i]=b.jgrid.stripPref(a.p.idPrefix,a.rows[d].id);m[j]=l.editoper;m=b.extend(c,m);b("#lui_"+b.jgrid.jqID(a.p.id)).show();a.grid.hDiv.loading=!0;b.ajax(b.extend({url:a.p.cellurl,data:b.isFunction(a.p.serializeCellData)?a.p.serializeCellData.call(a,m):m,type:"POST",complete:function(c,i){b("#lui_"+a.p.id).hide();a.grid.hDiv.loading=false;if(i=="success"){var j=
b(a).triggerHandler("jqGridAfterSubmitCell",[a,c,m.id,k,e,d,f])||[true,""];j[0]===true&&b.isFunction(a.p.afterSubmitCell)&&(j=a.p.afterSubmitCell.call(a,c,m.id,k,e,d,f));if(j[0]===true){b(g).empty();b(a).jqGrid("setCell",a.rows[d].id,f,h,false,false,true);b(g).addClass("dirty-cell");b(a.rows[d]).addClass("edited");b(a).triggerHandler("jqGridAfterSaveCell",[a.rows[d].id,k,e,d,f]);b.isFunction(a.p.afterSaveCell)&&a.p.afterSaveCell.call(a,a.rows[d].id,k,e,d,f);a.p.savedRow.splice(0,1)}else{b.jgrid.info_dialog(b.jgrid.errors.errcap,
j[1],b.jgrid.edit.bClose);b(a).jqGrid("restoreCell",d,f)}}},error:function(c,e,h){b("#lui_"+b.jgrid.jqID(a.p.id)).hide();a.grid.hDiv.loading=false;b(a).triggerHandler("jqGridErrorCell",[c,e,h]);b.isFunction(a.p.errorCell)?a.p.errorCell.call(a,c,e,h):b.jgrid.info_dialog(b.jgrid.errors.errcap,c.status+" : "+c.statusText+"<br/>"+e,b.jgrid.edit.bClose);b(a).jqGrid("restoreCell",d,f)}},b.jgrid.ajaxOptions,a.p.ajaxCellOptions||{}))}else try{b.jgrid.info_dialog(b.jgrid.errors.errcap,b.jgrid.errors.nourl,
b.jgrid.edit.bClose),b(a).jqGrid("restoreCell",d,f)}catch(q){}"clientArray"==a.p.cellsubmit&&(b(g).empty(),b(a).jqGrid("setCell",a.rows[d].id,f,h,!1,!1,!0),b(g).addClass("dirty-cell"),b(a.rows[d]).addClass("edited"),b(a).triggerHandler("jqGridAfterSaveCell",[a.rows[d].id,k,e,d,f]),b.isFunction(a.p.afterSaveCell)&&a.p.afterSaveCell.call(a,a.rows[d].id,k,e,d,f),a.p.savedRow.splice(0,1))}else try{window.setTimeout(function(){b.jgrid.info_dialog(b.jgrid.errors.errcap,e+" "+p[1],b.jgrid.edit.bClose)},
100),b(a).jqGrid("restoreCell",d,f)}catch(r){}}else b(a).jqGrid("restoreCell",d,f)}window.setTimeout(function(){b("#"+b.jgrid.jqID(a.p.knv)).attr("tabindex","-1").focus()},0)}})},restoreCell:function(d,f){return this.each(function(){var a=this,c;if(a.grid&&!0===a.p.cellEdit){c=1<=a.p.savedRow.length?0:null;if(null!==c){var g=b("td:eq("+f+")",a.rows[d]);if(b.isFunction(b.fn.datepicker))try{b("input.hasDatepicker",g).datepicker("hide")}catch(e){}b(g).empty().attr("tabindex","-1");b(a).jqGrid("setCell",
a.rows[d].id,f,a.p.savedRow[c].v,!1,!1,!0);b(a).triggerHandler("jqGridAfterRestoreCell",[a.rows[d].id,a.p.savedRow[c].v,d,f]);b.isFunction(a.p.afterRestoreCell)&&a.p.afterRestoreCell.call(a,a.rows[d].id,a.p.savedRow[c].v,d,f);a.p.savedRow.splice(0,1)}window.setTimeout(function(){b("#"+a.p.knv).attr("tabindex","-1").focus()},0)}})},nextCell:function(d,f){return this.each(function(){var a=!1,c;if(this.grid&&!0===this.p.cellEdit){for(c=f+1;c<this.p.colModel.length;c++)if(!0===this.p.colModel[c].editable){a=
c;break}!1!==a?b(this).jqGrid("editCell",d,a,!0):0<this.p.savedRow.length&&b(this).jqGrid("saveCell",d,f)}})},prevCell:function(d,f){return this.each(function(){var a=!1,c;if(this.grid&&!0===this.p.cellEdit){for(c=f-1;0<=c;c--)if(!0===this.p.colModel[c].editable){a=c;break}!1!==a?b(this).jqGrid("editCell",d,a,!0):0<this.p.savedRow.length&&b(this).jqGrid("saveCell",d,f)}})},GridNav:function(){return this.each(function(){function d(c,d,e){if("v"==e.substr(0,1)){var f=b(a.grid.bDiv)[0].clientHeight,
g=b(a.grid.bDiv)[0].scrollTop,l=a.rows[c].offsetTop+a.rows[c].clientHeight,o=a.rows[c].offsetTop;"vd"==e&&l>=f&&(b(a.grid.bDiv)[0].scrollTop=b(a.grid.bDiv)[0].scrollTop+a.rows[c].clientHeight);"vu"==e&&o<g&&(b(a.grid.bDiv)[0].scrollTop=b(a.grid.bDiv)[0].scrollTop-a.rows[c].clientHeight)}"h"==e&&(e=b(a.grid.bDiv)[0].clientWidth,f=b(a.grid.bDiv)[0].scrollLeft,g=a.rows[c].cells[d].offsetLeft,a.rows[c].cells[d].offsetLeft+a.rows[c].cells[d].clientWidth>=e+parseInt(f,10)?b(a.grid.bDiv)[0].scrollLeft=b(a.grid.bDiv)[0].scrollLeft+
a.rows[c].cells[d].clientWidth:g<f&&(b(a.grid.bDiv)[0].scrollLeft=b(a.grid.bDiv)[0].scrollLeft-a.rows[c].cells[d].clientWidth))}function f(b,c){var d,e;if("lft"==c){d=b+1;for(e=b;0<=e;e--)if(!0!==a.p.colModel[e].hidden){d=e;break}}if("rgt"==c){d=b-1;for(e=b;e<a.p.colModel.length;e++)if(!0!==a.p.colModel[e].hidden){d=e;break}}return d}var a=this;if(a.grid&&!0===a.p.cellEdit){a.p.knv=a.p.id+"_kn";var c=b("<div style='position:fixed;top:-1000000px;width:1px;height:1px;' tabindex='0'><div tabindex='-1' style='width:1px;height:1px;' id='"+
a.p.knv+"'></div></div>"),g,e;b(c).insertBefore(a.grid.cDiv);b("#"+a.p.knv).focus().keydown(function(c){e=c.keyCode;"rtl"==a.p.direction&&(37===e?e=39:39===e&&(e=37));switch(e){case 38:0<a.p.iRow-1&&(d(a.p.iRow-1,a.p.iCol,"vu"),b(a).jqGrid("editCell",a.p.iRow-1,a.p.iCol,!1));break;case 40:a.p.iRow+1<=a.rows.length-1&&(d(a.p.iRow+1,a.p.iCol,"vd"),b(a).jqGrid("editCell",a.p.iRow+1,a.p.iCol,!1));break;case 37:0<=a.p.iCol-1&&(g=f(a.p.iCol-1,"lft"),d(a.p.iRow,g,"h"),b(a).jqGrid("editCell",a.p.iRow,g,!1));
break;case 39:a.p.iCol+1<=a.p.colModel.length-1&&(g=f(a.p.iCol+1,"rgt"),d(a.p.iRow,g,"h"),b(a).jqGrid("editCell",a.p.iRow,g,!1));break;case 13:0<=parseInt(a.p.iCol,10)&&0<=parseInt(a.p.iRow,10)&&b(a).jqGrid("editCell",a.p.iRow,a.p.iCol,!0);break;default:return!0}return!1})}})},getChangedCells:function(d){var f=[];d||(d="all");this.each(function(){var a=this,c;a.grid&&!0===a.p.cellEdit&&b(a.rows).each(function(g){var e={};b(this).hasClass("edited")&&(b("td",this).each(function(f){c=a.p.colModel[f].name;
if("cb"!==c&&"subgrid"!==c)if("dirty"==d){if(b(this).hasClass("dirty-cell"))try{e[c]=b.unformat.call(a,this,{rowId:a.rows[g].id,colModel:a.p.colModel[f]},f)}catch(i){e[c]=b.jgrid.htmlDecode(b(this).html())}}else try{e[c]=b.unformat.call(a,this,{rowId:a.rows[g].id,colModel:a.p.colModel[f]},f)}catch(k){e[c]=b.jgrid.htmlDecode(b(this).html())}}),e.id=this.id,f.push(e))})});return f}})})(jQuery);
(function(c){c.fn.jqm=function(a){var h={overlay:50,closeoverlay:!0,overlayClass:"jqmOverlay",closeClass:"jqmClose",trigger:".jqModal",ajax:d,ajaxText:"",target:d,modal:d,toTop:d,onShow:d,onHide:d,onLoad:d};return this.each(function(){if(this._jqm)return i[this._jqm].c=c.extend({},i[this._jqm].c,a);k++;this._jqm=k;i[k]={c:c.extend(h,c.jqm.params,a),a:d,w:c(this).addClass("jqmID"+k),s:k};h.trigger&&c(this).jqmAddTrigger(h.trigger)})};c.fn.jqmAddClose=function(a){return o(this,a,"jqmHide")};c.fn.jqmAddTrigger=
function(a){return o(this,a,"jqmShow")};c.fn.jqmShow=function(a){return this.each(function(){c.jqm.open(this._jqm,a)})};c.fn.jqmHide=function(a){return this.each(function(){c.jqm.close(this._jqm,a)})};c.jqm={hash:{},open:function(a,h){var b=i[a],e=b.c,l="."+e.closeClass,f=parseInt(b.w.css("z-index")),f=0<f?f:3E3,g=c("<div></div>").css({height:"100%",width:"100%",position:"fixed",left:0,top:0,"z-index":f-1,opacity:e.overlay/100});if(b.a)return d;b.t=h;b.a=!0;b.w.css("z-index",f);e.modal?(j[0]||setTimeout(function(){p("bind")},
1),j.push(a)):0<e.overlay?e.closeoverlay&&b.w.jqmAddClose(g):g=d;b.o=g?g.addClass(e.overlayClass).prependTo("body"):d;e.ajax?(f=e.target||b.w,g=e.ajax,f="string"==typeof f?c(f,b.w):c(f),g="@"==g.substr(0,1)?c(h).attr(g.substring(1)):g,f.html(e.ajaxText).load(g,function(){e.onLoad&&e.onLoad.call(this,b);l&&b.w.jqmAddClose(c(l,b.w));m(b)})):l&&b.w.jqmAddClose(c(l,b.w));e.toTop&&b.o&&b.w.before('<span id="jqmP'+b.w[0]._jqm+'"></span>').insertAfter(b.o);e.onShow?e.onShow(b):b.w.show();m(b);return d},
close:function(a){a=i[a];if(!a.a)return d;a.a=d;j[0]&&(j.pop(),j[0]||p("unbind"));a.c.toTop&&a.o&&c("#jqmP"+a.w[0]._jqm).after(a.w).remove();if(a.c.onHide)a.c.onHide(a);else a.w.hide(),a.o&&a.o.remove();return d},params:{}};var k=0,i=c.jqm.hash,j=[],d=!1,m=function(a){try{c(":input:visible",a.w)[0].focus()}catch(d){}},p=function(a){c(document)[a]("keypress",n)[a]("keydown",n)[a]("mousedown",n)},n=function(a){var d=i[j[j.length-1]];(a=!c(a.target).parents(".jqmID"+d.s)[0])&&m(d);return!a},o=function(a,
h,b){return a.each(function(){var a=this._jqm;c(h).each(function(){this[b]||(this[b]=[],c(this).click(function(){for(var a in{jqmShow:1,jqmHide:1})for(var b in this[a])if(i[this[a][b]])i[this[a][b]].w[a](this);return d}));this[b].push(a)})})}})(jQuery);
(function(b){b.fn.jqDrag=function(a){return h(this,a,"d")};b.fn.jqResize=function(a,b){return h(this,a,"r",b)};b.jqDnR={dnr:{},e:0,drag:function(a){"d"==d.k?e.css({left:d.X+a.pageX-d.pX,top:d.Y+a.pageY-d.pY}):(e.css({width:Math.max(a.pageX-d.pX+d.W,0),height:Math.max(a.pageY-d.pY+d.H,0)}),f&&g.css({width:Math.max(a.pageX-f.pX+f.W,0),height:Math.max(a.pageY-f.pY+f.H,0)}));return!1},stop:function(){b(document).unbind("mousemove",c.drag).unbind("mouseup",c.stop)}};var c=b.jqDnR,d=c.dnr,e=c.e,g,f,h=function(a,
c,h,l){return a.each(function(){c=c?b(c,a):a;c.bind("mousedown",{e:a,k:h},function(a){var c=a.data,i={};e=c.e;g=l?b(l):!1;if("relative"!=e.css("position"))try{e.position(i)}catch(h){}d={X:i.left||j("left")||0,Y:i.top||j("top")||0,W:j("width")||e[0].scrollWidth||0,H:j("height")||e[0].scrollHeight||0,pX:a.pageX,pY:a.pageY,k:c.k};f=g&&"d"!=c.k?{X:i.left||k("left")||0,Y:i.top||k("top")||0,W:g[0].offsetWidth||k("width")||0,H:g[0].offsetHeight||k("height")||0,pX:a.pageX,pY:a.pageY,k:c.k}:!1;if(b("input.hasDatepicker",
e[0])[0])try{b("input.hasDatepicker",e[0]).datepicker("hide")}catch(m){}b(document).mousemove(b.jqDnR.drag).mouseup(b.jqDnR.stop);return!1})})},j=function(a){return parseInt(e.css(a),10)||!1},k=function(a){return parseInt(g.css(a),10)||!1}})(jQuery);
(function(b){b.jgrid.extend({setSubGrid:function(){return this.each(function(){var e,c;this.p.subGridOptions=b.extend({plusicon:"ui-icon-plus",minusicon:"ui-icon-minus",openicon:"ui-icon-carat-1-sw",expandOnLoad:!1,delayOnLoad:50,selectOnExpand:!1,reloadOnExpand:!0},this.p.subGridOptions||{});this.p.colNames.unshift("");this.p.colModel.unshift({name:"subgrid",width:b.jgrid.cell_width?this.p.subGridWidth+this.p.cellLayout:this.p.subGridWidth,sortable:!1,resizable:!1,hidedlg:!0,search:!1,fixed:!0});
e=this.p.subGridModel;if(e[0]){e[0].align=b.extend([],e[0].align||[]);for(c=0;c<e[0].name.length;c++)e[0].align[c]=e[0].align[c]||"left"}})},addSubGridCell:function(b,c){var a="",m,l;this.each(function(){a=this.formatCol(b,c);l=this.p.id;m=this.p.subGridOptions.plusicon});return'<td role="gridcell" aria-describedby="'+l+'_subgrid" class="ui-sgcollapsed sgcollapsed" '+a+"><a href='javascript:void(0);'><span class='ui-icon "+m+"'></span></a></td>"},addSubGrid:function(e,c){return this.each(function(){var a=
this;if(a.grid){var m=function(c,e,h){e=b("<td align='"+a.p.subGridModel[0].align[h]+"'></td>").html(e);b(c).append(e)},l=function(c,e){var h,f,n,d=b("<table cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>"),i=b("<tr></tr>");for(f=0;f<a.p.subGridModel[0].name.length;f++)h=b("<th class='ui-state-default ui-th-subgrid ui-th-column ui-th-"+a.p.direction+"'></th>"),b(h).html(a.p.subGridModel[0].name[f]),b(h).width(a.p.subGridModel[0].width[f]),b(i).append(h);b(d).append(i);c&&(n=a.p.xmlReader.subgrid,
b(n.root+" "+n.row,c).each(function(){i=b("<tr class='ui-widget-content ui-subtblcell'></tr>");if(!0===n.repeatitems)b(n.cell,this).each(function(a){m(i,b(this).text()||"&#160;",a)});else{var c=a.p.subGridModel[0].mapping||a.p.subGridModel[0].name;if(c)for(f=0;f<c.length;f++)m(i,b(c[f],this).text()||"&#160;",f)}b(d).append(i)}));h=b("table:first",a.grid.bDiv).attr("id")+"_";b("#"+b.jgrid.jqID(h+e)).append(d);a.grid.hDiv.loading=!1;b("#load_"+b.jgrid.jqID(a.p.id)).hide();return!1},p=function(c,e){var h,
f,d,g,i,k=b("<table cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>"),j=b("<tr></tr>");for(f=0;f<a.p.subGridModel[0].name.length;f++)h=b("<th class='ui-state-default ui-th-subgrid ui-th-column ui-th-"+a.p.direction+"'></th>"),b(h).html(a.p.subGridModel[0].name[f]),b(h).width(a.p.subGridModel[0].width[f]),b(j).append(h);b(k).append(j);if(c&&(g=a.p.jsonReader.subgrid,h=b.jgrid.getAccessor(c,g.root),void 0!==h))for(f=0;f<h.length;f++){d=h[f];j=b("<tr class='ui-widget-content ui-subtblcell'></tr>");
if(!0===g.repeatitems){g.cell&&(d=d[g.cell]);for(i=0;i<d.length;i++)m(j,d[i]||"&#160;",i)}else{var l=a.p.subGridModel[0].mapping||a.p.subGridModel[0].name;if(l.length)for(i=0;i<l.length;i++)m(j,d[l[i]]||"&#160;",i)}b(k).append(j)}f=b("table:first",a.grid.bDiv).attr("id")+"_";b("#"+b.jgrid.jqID(f+e)).append(k);a.grid.hDiv.loading=!1;b("#load_"+b.jgrid.jqID(a.p.id)).hide();return!1},t=function(c){var e,d,f,g;e=b(c).attr("id");d={nd_:(new Date).getTime()};d[a.p.prmNames.subgridid]=e;if(!a.p.subGridModel[0])return!1;
if(a.p.subGridModel[0].params)for(g=0;g<a.p.subGridModel[0].params.length;g++)for(f=0;f<a.p.colModel.length;f++)a.p.colModel[f].name===a.p.subGridModel[0].params[g]&&(d[a.p.colModel[f].name]=b("td:eq("+f+")",c).text().replace(/\&#160\;/ig,""));if(!a.grid.hDiv.loading)switch(a.grid.hDiv.loading=!0,b("#load_"+b.jgrid.jqID(a.p.id)).show(),a.p.subgridtype||(a.p.subgridtype=a.p.datatype),b.isFunction(a.p.subgridtype)?a.p.subgridtype.call(a,d):a.p.subgridtype=a.p.subgridtype.toLowerCase(),a.p.subgridtype){case "xml":case "json":b.ajax(b.extend({type:a.p.mtype,
url:a.p.subGridUrl,dataType:a.p.subgridtype,data:b.isFunction(a.p.serializeSubGridData)?a.p.serializeSubGridData.call(a,d):d,complete:function(c){a.p.subgridtype==="xml"?l(c.responseXML,e):p(b.jgrid.parse(c.responseText),e)}},b.jgrid.ajaxOptions,a.p.ajaxSubgridOptions||{}))}return!1},d,k,q,r=0,g,j;b.each(a.p.colModel,function(){(!0===this.hidden||"rn"===this.name||"cb"===this.name)&&r++});var s=a.rows.length,o=1;void 0!==c&&0<c&&(o=c,s=c+1);for(;o<s;)b(a.rows[o]).hasClass("jqgrow")&&b(a.rows[o].cells[e]).bind("click",
function(){var c=b(this).parent("tr")[0];j=c.nextSibling;if(b(this).hasClass("sgcollapsed")){k=a.p.id;d=c.id;if(a.p.subGridOptions.reloadOnExpand===true||a.p.subGridOptions.reloadOnExpand===false&&!b(j).hasClass("ui-subgrid")){q=e>=1?"<td colspan='"+e+"'>&#160;</td>":"";g=b(a).triggerHandler("jqGridSubGridBeforeExpand",[k+"_"+d,d]);(g=g===false||g==="stop"?false:true)&&b.isFunction(a.p.subGridBeforeExpand)&&(g=a.p.subGridBeforeExpand.call(a,k+"_"+d,d));if(g===false)return false;b(c).after("<tr role='row' class='ui-subgrid'>"+
q+"<td class='ui-widget-content subgrid-cell'><span class='ui-icon "+a.p.subGridOptions.openicon+"'></span></td><td colspan='"+parseInt(a.p.colNames.length-1-r,10)+"' class='ui-widget-content subgrid-data'><div id="+k+"_"+d+" class='tablediv'></div></td></tr>");b(a).triggerHandler("jqGridSubGridRowExpanded",[k+"_"+d,d]);b.isFunction(a.p.subGridRowExpanded)?a.p.subGridRowExpanded.call(a,k+"_"+d,d):t(c)}else b(j).show();b(this).html("<a href='javascript:void(0);'><span class='ui-icon "+a.p.subGridOptions.minusicon+
"'></span></a>").removeClass("sgcollapsed").addClass("sgexpanded");a.p.subGridOptions.selectOnExpand&&b(a).jqGrid("setSelection",d)}else if(b(this).hasClass("sgexpanded")){g=b(a).triggerHandler("jqGridSubGridRowColapsed",[k+"_"+d,d]);if((g=g===false||g==="stop"?false:true)&&b.isFunction(a.p.subGridRowColapsed)){d=c.id;g=a.p.subGridRowColapsed.call(a,k+"_"+d,d)}if(g===false)return false;a.p.subGridOptions.reloadOnExpand===true?b(j).remove(".ui-subgrid"):b(j).hasClass("ui-subgrid")&&b(j).hide();b(this).html("<a href='javascript:void(0);'><span class='ui-icon "+
a.p.subGridOptions.plusicon+"'></span></a>").removeClass("sgexpanded").addClass("sgcollapsed")}return false}),o++;!0===a.p.subGridOptions.expandOnLoad&&b(a.rows).filter(".jqgrow").each(function(a,c){b(c.cells[0]).click()});a.subGridXml=function(a,b){l(a,b)};a.subGridJson=function(a,b){p(a,b)}}})},expandSubGridRow:function(e){return this.each(function(){if((this.grid||e)&&!0===this.p.subGrid){var c=b(this).jqGrid("getInd",e,!0);c&&(c=b("td.sgcollapsed",c)[0])&&b(c).trigger("click")}})},collapseSubGridRow:function(e){return this.each(function(){if((this.grid||
e)&&!0===this.p.subGrid){var c=b(this).jqGrid("getInd",e,!0);c&&(c=b("td.sgexpanded",c)[0])&&b(c).trigger("click")}})},toggleSubGridRow:function(e){return this.each(function(){if((this.grid||e)&&!0===this.p.subGrid){var c=b(this).jqGrid("getInd",e,!0);if(c){var a=b("td.sgcollapsed",c)[0];a?b(a).trigger("click"):(a=b("td.sgexpanded",c)[0])&&b(a).trigger("click")}}})}})})(jQuery);
(function(c){c.extend(c.jgrid,{template:function(d){var h=c.makeArray(arguments).slice(1),e,a=h.length;null==d&&(d="");return d.replace(/\{([\w\-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g,function(d,g){if(!isNaN(parseInt(g,10)))return h[parseInt(g,10)];for(e=0;e<a;e++)if(c.isArray(h[e]))for(var b=h[e],j=b.length;j--;)if(g===b[j].nm)return b[j].v})}});c.jgrid.extend({groupingSetup:function(){return this.each(function(){var d,h,e=this.p.colModel,a=this.p.groupingView;if(null!==a&&("object"===typeof a||
c.isFunction(a)))if(a.groupField.length){void 0===a.visibiltyOnNextGrouping&&(a.visibiltyOnNextGrouping=[]);a.lastvalues=[];a.groups=[];a.counters=[];for(d=0;d<a.groupField.length;d++)a.groupOrder[d]||(a.groupOrder[d]="asc"),a.groupText[d]||(a.groupText[d]="{0}"),"boolean"!==typeof a.groupColumnShow[d]&&(a.groupColumnShow[d]=!0),"boolean"!==typeof a.groupSummary[d]&&(a.groupSummary[d]=!1),!0===a.groupColumnShow[d]?(a.visibiltyOnNextGrouping[d]=!0,c(this).jqGrid("showCol",a.groupField[d])):(a.visibiltyOnNextGrouping[d]=
c("#"+c.jgrid.jqID(this.p.id+"_"+a.groupField[d])).is(":visible"),c(this).jqGrid("hideCol",a.groupField[d]));a.summary=[];d=0;for(h=e.length;d<h;d++)e[d].summaryType&&a.summary.push({nm:e[d].name,st:e[d].summaryType,v:"",sr:e[d].summaryRound,srt:e[d].summaryRoundType||"round"})}else this.p.grouping=!1;else this.p.grouping=!1})},groupingPrepare:function(d,h,e,a){this.each(function(){var f=this.p.groupingView,g=this,b,j=f.groupField.length,k,i,l,r=0;for(b=0;b<j;b++)k=f.groupField[b],l=f.displayField[b],
i=e[k],l=null==l?null:e[l],null==l&&(l=i),void 0!==i&&(0===a?(f.groups.push({idx:b,dataIndex:k,value:i,displayValue:l,startRow:a,cnt:1,summary:[]}),f.lastvalues[b]=i,f.counters[b]={cnt:1,pos:f.groups.length-1,summary:c.extend(!0,[],f.summary)}):"object"!==typeof i&&f.lastvalues[b]!==i?(f.groups.push({idx:b,dataIndex:k,value:i,displayValue:l,startRow:a,cnt:1,summary:[]}),f.lastvalues[b]=i,r=1,f.counters[b]={cnt:1,pos:f.groups.length-1,summary:c.extend(!0,[],f.summary)}):1===r?(f.groups.push({idx:b,
dataIndex:k,value:i,displayValue:l,startRow:a,cnt:1,summary:[]}),f.lastvalues[b]=i,f.counters[b]={cnt:1,pos:f.groups.length-1,summary:c.extend(!0,[],f.summary)}):(f.counters[b].cnt+=1,f.groups[f.counters[b].pos].cnt=f.counters[b].cnt),c.each(f.counters[b].summary,function(){this.v=c.isFunction(this.st)?this.st.call(g,this.v,this.nm,e):c(g).jqGrid("groupingCalculations.handler",this.st,this.v,this.nm,this.sr,this.srt,e)}),f.groups[f.counters[b].pos].summary=f.counters[b].summary);h.push(d)});return h},
groupingToggle:function(d){this.each(function(){var h=this.p.groupingView,e=d.split("_"),a=parseInt(e[e.length-2],10);e.splice(e.length-2,2);var e=e.join("_"),f=h.minusicon,g=h.plusicon,b=c("#"+c.jgrid.jqID(d)),b=b.length?b[0].nextSibling:null,j=c("#"+c.jgrid.jqID(d)+" span.tree-wrap-"+this.p.direction),k=!1;if(j.hasClass(f)){if(h.showSummaryOnHide){if(b)for(;b&&!(c(b).hasClass("jqfoot")&&parseInt(c(b).attr("jqfootlevel"),10)<=a);)c(b).hide(),b=b.nextSibling}else if(b)for(;b&&!c(b).hasClass(e+"_"+
(""+a))&&!c(b).hasClass(e+"_"+(""+(a-1)));)c(b).hide(),b=b.nextSibling;j.removeClass(f).addClass(g);k=!0}else{if(b)for(;b&&!c(b).hasClass(e+"_"+(""+a))&&!c(b).hasClass(e+"_"+(""+(a-1)));)c(b).show(),(h=c(b).find("span.tree-wrap-"+this.p.direction))&&c(h).hasClass(g)&&c(h).removeClass(g).addClass(f),b=b.nextSibling;j.removeClass(g).addClass(f)}c(this).triggerHandler("jqGridGroupingClickGroup",[d,k]);c.isFunction(this.p.onClickGroup)&&this.p.onClickGroup.call(this,d,k)});return!1},groupingRender:function(d,
h){return this.each(function(){function e(a,d,b){var c=!1;if(0===d)c=b[a];else{var e=b[a].idx;if(0===e)c=b[a];else for(;0<=a;a--)if(b[a].idx===e-d){c=b[a];break}}return c}var a=this,f=a.p.groupingView,g="",b="",j,k,i=f.groupCollapse?f.plusicon:f.minusicon,l,r=[],w=f.groupField.length,i=i+(" tree-wrap-"+a.p.direction);c.each(a.p.colModel,function(a,d){var b;for(b=0;b<w;b++)if(f.groupField[b]===d.name){r[b]=a;break}});var t=0,x=c.makeArray(f.groupSummary);x.reverse();c.each(f.groups,function(s,m){t++;
k=a.p.id+"ghead_"+m.idx;j=k+"_"+s;b="<span style='cursor:pointer;' class='ui-icon "+i+"' onclick=\"jQuery('#"+c.jgrid.jqID(a.p.id)+"').jqGrid('groupingToggle','"+j+"');return false;\"></span>";try{l=a.formatter(j,m.displayValue,r[m.idx],m.value)}catch(C){l=m.displayValue}g+='<tr id="'+j+'" role="row" class= "ui-widget-content jqgroup ui-row-'+a.p.direction+" "+k+'"><td style="padding-left:'+12*m.idx+'px;" colspan="'+h+'">'+b+c.jgrid.template(f.groupText[m.idx],l,m.cnt,m.summary)+"</td></tr>";if(w-
1===m.idx){var o=f.groups[s+1],p,n,B=void 0!==o?f.groups[s+1].startRow:d.length;for(n=m.startRow;n<B;n++)g+=d[n].join("");var q;if(void 0!==o){for(q=0;q<f.groupField.length&&o.dataIndex!==f.groupField[q];q++);t=f.groupField.length-q}for(o=0;o<t;o++)if(x[o]){n="";f.groupCollapse&&!f.showSummaryOnHide&&(n=' style="display:none;"');g+="<tr"+n+' jqfootlevel="'+(m.idx-o)+'" role="row" class="ui-widget-content jqfoot ui-row-'+a.p.direction+'">';n=e(s,o,f.groups);var u=a.p.colModel,v,y=n.cnt;for(p=0;p<h;p++){var z=
"<td "+a.formatCol(p,1,"")+">&#160;</td>",A="{0}";c.each(n.summary,function(){if(this.nm===u[p].name){u[p].summaryTpl&&(A=u[p].summaryTpl);"string"===typeof this.st&&"avg"===this.st.toLowerCase()&&this.v&&0<y&&(this.v/=y);try{v=a.formatter("",this.v,p,this)}catch(b){v=this.v}z="<td "+a.formatCol(p,1,"")+">"+c.jgrid.format(A,v)+"</td>";return!1}});g+=z}g+="</tr>"}t=q}});c("#"+c.jgrid.jqID(a.p.id)+" tbody:first").append(g);g=null})},groupingGroupBy:function(d,h){return this.each(function(){"string"===
typeof d&&(d=[d]);var e=this.p.groupingView;this.p.grouping=!0;void 0===e.visibiltyOnNextGrouping&&(e.visibiltyOnNextGrouping=[]);var a;for(a=0;a<e.groupField.length;a++)!e.groupColumnShow[a]&&e.visibiltyOnNextGrouping[a]&&c(this).jqGrid("showCol",e.groupField[a]);for(a=0;a<d.length;a++)e.visibiltyOnNextGrouping[a]=c("#"+c.jgrid.jqID(this.p.id)+"_"+c.jgrid.jqID(d[a])).is(":visible");this.p.groupingView=c.extend(this.p.groupingView,h||{});e.groupField=d;c(this).trigger("reloadGrid")})},groupingRemove:function(d){return this.each(function(){void 0===
d&&(d=!0);this.p.grouping=!1;if(!0===d){var h=this.p.groupingView,e;for(e=0;e<h.groupField.length;e++)!h.groupColumnShow[e]&&h.visibiltyOnNextGrouping[e]&&c(this).jqGrid("showCol",h.groupField);c("tr.jqgroup, tr.jqfoot","#"+c.jgrid.jqID(this.p.id)+" tbody:first").remove();c("tr.jqgrow:hidden","#"+c.jgrid.jqID(this.p.id)+" tbody:first").show()}else c(this).trigger("reloadGrid")})},groupingCalculations:{handler:function(d,c,e,a,f,g){var b={sum:function(){return parseFloat(c||0)+parseFloat(g[e]||0)},
min:function(){return""===c?parseFloat(g[e]||0):Math.min(parseFloat(c),parseFloat(g[e]||0))},max:function(){return""===c?parseFloat(g[e]||0):Math.max(parseFloat(c),parseFloat(g[e]||0))},count:function(){""===c&&(c=0);return g.hasOwnProperty(e)?c+1:0},avg:function(){return b.sum()}};if(!b[d])throw"jqGrid Grouping No such method: "+d;d=b[d]();null!=a&&("fixed"==f?d=d.toFixed(a):(a=Math.pow(10,a),d=Math.round(d*a)/a));return d}}})})(jQuery);
(function(d){d.jgrid.extend({setTreeNode:function(a,c){return this.each(function(){var b=this;if(b.grid&&b.p.treeGrid)for(var h=b.p.expColInd,e=b.p.treeReader.expanded_field,i=b.p.treeReader.leaf_field,g=b.p.treeReader.level_field,f=b.p.treeReader.icon_field,l=b.p.treeReader.loaded,k,m,n,j;a<c;)j=b.p.data[b.p._index[b.rows[a].id]],"nested"==b.p.treeGridModel&&!j[i]&&(k=parseInt(j[b.p.treeReader.left_field],10),m=parseInt(j[b.p.treeReader.right_field],10),j[i]=m===k+1?"true":"false",b.rows[a].cells[b.p._treeleafpos].innerHTML=
j[i]),k=parseInt(j[g],10),0===b.p.tree_root_level?(n=k+1,m=k):(n=k,m=k-1),n="<div class='tree-wrap tree-wrap-"+b.p.direction+"' style='width:"+18*n+"px;'>",n+="<div style='"+("rtl"==b.p.direction?"right:":"left:")+18*m+"px;' class='ui-icon ",void 0!==j[l]&&(j[l]="true"==j[l]||!0===j[l]?!0:!1),"true"==j[i]||!0===j[i]?(n+=(void 0!==j[f]&&""!==j[f]?j[f]:b.p.treeIcons.leaf)+" tree-leaf treeclick",j[i]=!0,m="leaf"):(j[i]=!1,m=""),j[e]=("true"==j[e]||!0===j[e]?!0:!1)&&(j[l]||void 0===j[l]),n=!1===j[e]?
n+(!0===j[i]?"'":b.p.treeIcons.plus+" tree-plus treeclick'"):n+(!0===j[i]?"'":b.p.treeIcons.minus+" tree-minus treeclick'"),n+="></div></div>",d(b.rows[a].cells[h]).wrapInner("<span class='cell-wrapper"+m+"'></span>").prepend(n),k!==parseInt(b.p.tree_root_level,10)&&((j=(j=d(b).jqGrid("getNodeParent",j))&&j.hasOwnProperty(e)?j[e]:!0)||d(b.rows[a]).css("display","none")),d(b.rows[a].cells[h]).find("div.treeclick").bind("click",function(a){a=d(a.target||a.srcElement,b.rows).closest("tr.jqgrow")[0].id;
a=b.p._index[a];if(!b.p.data[a][i])if(b.p.data[a][e]){d(b).jqGrid("collapseRow",b.p.data[a]);d(b).jqGrid("collapseNode",b.p.data[a])}else{d(b).jqGrid("expandRow",b.p.data[a]);d(b).jqGrid("expandNode",b.p.data[a])}return false}),!0===b.p.ExpandColClick&&d(b.rows[a].cells[h]).find("span.cell-wrapper").css("cursor","pointer").bind("click",function(a){var a=d(a.target||a.srcElement,b.rows).closest("tr.jqgrow")[0].id,c=b.p._index[a];if(!b.p.data[c][i])if(b.p.data[c][e]){d(b).jqGrid("collapseRow",b.p.data[c]);
d(b).jqGrid("collapseNode",b.p.data[c])}else{d(b).jqGrid("expandRow",b.p.data[c]);d(b).jqGrid("expandNode",b.p.data[c])}d(b).jqGrid("setSelection",a);return false}),a++})},setTreeGrid:function(){return this.each(function(){var a=this,c=0,b=!1,h,e,i,g=[];if(a.p.treeGrid){a.p.treedatatype||d.extend(a.p,{treedatatype:a.p.datatype});a.p.subGrid=!1;a.p.altRows=!1;a.p.pgbuttons=!1;a.p.pginput=!1;a.p.gridview=!0;null===a.p.rowTotal&&(a.p.rowNum=1E4);a.p.multiselect=!1;a.p.rowList=[];a.p.expColInd=0;a.p.treeIcons=
d.extend({plus:"ui-icon-triangle-1-"+("rtl"==a.p.direction?"w":"e"),minus:"ui-icon-triangle-1-s",leaf:"ui-icon-radio-off"},a.p.treeIcons||{});"nested"==a.p.treeGridModel?a.p.treeReader=d.extend({level_field:"level",left_field:"lft",right_field:"rgt",leaf_field:"isLeaf",expanded_field:"expanded",loaded:"loaded",icon_field:"icon"},a.p.treeReader):"adjacency"==a.p.treeGridModel&&(a.p.treeReader=d.extend({level_field:"level",parent_id_field:"parent",leaf_field:"isLeaf",expanded_field:"expanded",loaded:"loaded",
icon_field:"icon"},a.p.treeReader));for(e in a.p.colModel)if(a.p.colModel.hasOwnProperty(e))for(i in h=a.p.colModel[e].name,h==a.p.ExpandColumn&&!b&&(b=!0,a.p.expColInd=c),c++,a.p.treeReader)a.p.treeReader.hasOwnProperty(i)&&a.p.treeReader[i]==h&&g.push(h);d.each(a.p.treeReader,function(b,e){if(e&&d.inArray(e,g)===-1){if(b==="leaf_field")a.p._treeleafpos=c;c++;a.p.colNames.push(e);a.p.colModel.push({name:e,width:1,hidden:true,sortable:false,resizable:false,hidedlg:true,editable:true,search:false})}})}})},
expandRow:function(a){this.each(function(){var c=this;if(c.grid&&c.p.treeGrid){var b=d(c).jqGrid("getNodeChildren",a),h=c.p.treeReader.expanded_field,e=c.rows;d(b).each(function(){var a=d.jgrid.getAccessor(this,c.p.localReader.id);d(e.namedItem(a)).css("display","");this[h]&&d(c).jqGrid("expandRow",this)})}})},collapseRow:function(a){this.each(function(){var c=this;if(c.grid&&c.p.treeGrid){var b=d(c).jqGrid("getNodeChildren",a),h=c.p.treeReader.expanded_field,e=c.rows;d(b).each(function(){var a=d.jgrid.getAccessor(this,
c.p.localReader.id);d(e.namedItem(a)).css("display","none");this[h]&&d(c).jqGrid("collapseRow",this)})}})},getRootNodes:function(){var a=[];this.each(function(){var c=this;if(c.grid&&c.p.treeGrid)switch(c.p.treeGridModel){case "nested":var b=c.p.treeReader.level_field;d(c.p.data).each(function(){parseInt(this[b],10)===parseInt(c.p.tree_root_level,10)&&a.push(this)});break;case "adjacency":var h=c.p.treeReader.parent_id_field;d(c.p.data).each(function(){(null===this[h]||"null"==(""+this[h]).toLowerCase())&&
a.push(this)})}});return a},getNodeDepth:function(a){var c=null;this.each(function(){if(this.grid&&this.p.treeGrid)switch(this.p.treeGridModel){case "nested":c=parseInt(a[this.p.treeReader.level_field],10)-parseInt(this.p.tree_root_level,10);break;case "adjacency":c=d(this).jqGrid("getNodeAncestors",a).length}});return c},getNodeParent:function(a){var c=null;this.each(function(){if(this.grid&&this.p.treeGrid)switch(this.p.treeGridModel){case "nested":var b=this.p.treeReader.left_field,h=this.p.treeReader.right_field,
e=this.p.treeReader.level_field,i=parseInt(a[b],10),g=parseInt(a[h],10),f=parseInt(a[e],10);d(this.p.data).each(function(){if(parseInt(this[e],10)===f-1&&parseInt(this[b],10)<i&&parseInt(this[h],10)>g)return c=this,!1});break;case "adjacency":var l=this.p.treeReader.parent_id_field,k=this.p.localReader.id;d(this.p.data).each(function(){if(this[k]==a[l])return c=this,!1})}});return c},getNodeChildren:function(a){var c=[];this.each(function(){if(this.grid&&this.p.treeGrid)switch(this.p.treeGridModel){case "nested":var b=
this.p.treeReader.left_field,h=this.p.treeReader.right_field,e=this.p.treeReader.level_field,i=parseInt(a[b],10),g=parseInt(a[h],10),f=parseInt(a[e],10);d(this.p.data).each(function(){parseInt(this[e],10)===f+1&&parseInt(this[b],10)>i&&parseInt(this[h],10)<g&&c.push(this)});break;case "adjacency":var l=this.p.treeReader.parent_id_field,k=this.p.localReader.id;d(this.p.data).each(function(){this[l]==a[k]&&c.push(this)})}});return c},getFullTreeNode:function(a){var c=[];this.each(function(){var b;if(this.grid&&
this.p.treeGrid)switch(this.p.treeGridModel){case "nested":var h=this.p.treeReader.left_field,e=this.p.treeReader.right_field,i=this.p.treeReader.level_field,g=parseInt(a[h],10),f=parseInt(a[e],10),l=parseInt(a[i],10);d(this.p.data).each(function(){parseInt(this[i],10)>=l&&parseInt(this[h],10)>=g&&parseInt(this[h],10)<=f&&c.push(this)});break;case "adjacency":if(a){c.push(a);var k=this.p.treeReader.parent_id_field,m=this.p.localReader.id;d(this.p.data).each(function(a){b=c.length;for(a=0;a<b;a++)if(c[a][m]==
this[k]){c.push(this);break}})}}});return c},getNodeAncestors:function(a){var c=[];this.each(function(){if(this.grid&&this.p.treeGrid)for(var b=d(this).jqGrid("getNodeParent",a);b;)c.push(b),b=d(this).jqGrid("getNodeParent",b)});return c},isVisibleNode:function(a){var c=!0;this.each(function(){if(this.grid&&this.p.treeGrid){var b=d(this).jqGrid("getNodeAncestors",a),h=this.p.treeReader.expanded_field;d(b).each(function(){c=c&&this[h];if(!c)return!1})}});return c},isNodeLoaded:function(a){var c;this.each(function(){if(this.grid&&
this.p.treeGrid){var b=this.p.treeReader.leaf_field;c=void 0!==a?void 0!==a.loaded?a.loaded:a[b]||0<d(this).jqGrid("getNodeChildren",a).length?!0:!1:!1}});return c},expandNode:function(a){return this.each(function(){if(this.grid&&this.p.treeGrid){var c=this.p.treeReader.expanded_field,b=this.p.treeReader.parent_id_field,h=this.p.treeReader.loaded,e=this.p.treeReader.level_field,i=this.p.treeReader.left_field,g=this.p.treeReader.right_field;if(!a[c]){var f=d.jgrid.getAccessor(a,this.p.localReader.id),
l=d("#"+d.jgrid.jqID(f),this.grid.bDiv)[0],k=this.p._index[f];d(this).jqGrid("isNodeLoaded",this.p.data[k])?(a[c]=!0,d("div.treeclick",l).removeClass(this.p.treeIcons.plus+" tree-plus").addClass(this.p.treeIcons.minus+" tree-minus")):this.grid.hDiv.loading||(a[c]=!0,d("div.treeclick",l).removeClass(this.p.treeIcons.plus+" tree-plus").addClass(this.p.treeIcons.minus+" tree-minus"),this.p.treeANode=l.rowIndex,this.p.datatype=this.p.treedatatype,"nested"==this.p.treeGridModel?d(this).jqGrid("setGridParam",
{postData:{nodeid:f,n_left:a[i],n_right:a[g],n_level:a[e]}}):d(this).jqGrid("setGridParam",{postData:{nodeid:f,parentid:a[b],n_level:a[e]}}),d(this).trigger("reloadGrid"),a[h]=!0,"nested"==this.p.treeGridModel?d(this).jqGrid("setGridParam",{postData:{nodeid:"",n_left:"",n_right:"",n_level:""}}):d(this).jqGrid("setGridParam",{postData:{nodeid:"",parentid:"",n_level:""}}))}}})},collapseNode:function(a){return this.each(function(){if(this.grid&&this.p.treeGrid){var c=this.p.treeReader.expanded_field;
a[c]&&(a[c]=!1,c=d.jgrid.getAccessor(a,this.p.localReader.id),c=d("#"+d.jgrid.jqID(c),this.grid.bDiv)[0],d("div.treeclick",c).removeClass(this.p.treeIcons.minus+" tree-minus").addClass(this.p.treeIcons.plus+" tree-plus"))}})},SortTree:function(a,c,b,h){return this.each(function(){if(this.grid&&this.p.treeGrid){var e,i,g,f=[],l=this,k;e=d(this).jqGrid("getRootNodes");e=d.jgrid.from(e);e.orderBy(a,c,b,h);k=e.select();e=0;for(i=k.length;e<i;e++)g=k[e],f.push(g),d(this).jqGrid("collectChildrenSortTree",
f,g,a,c,b,h);d.each(f,function(a){var b=d.jgrid.getAccessor(this,l.p.localReader.id);d("#"+d.jgrid.jqID(l.p.id)+" tbody tr:eq("+a+")").after(d("tr#"+d.jgrid.jqID(b),l.grid.bDiv))});f=k=e=null}})},collectChildrenSortTree:function(a,c,b,h,e,i){return this.each(function(){if(this.grid&&this.p.treeGrid){var g,f,l,k;g=d(this).jqGrid("getNodeChildren",c);g=d.jgrid.from(g);g.orderBy(b,h,e,i);k=g.select();g=0;for(f=k.length;g<f;g++)l=k[g],a.push(l),d(this).jqGrid("collectChildrenSortTree",a,l,b,h,e,i)}})},
setTreeRow:function(a,c){var b=!1;this.each(function(){this.grid&&this.p.treeGrid&&(b=d(this).jqGrid("setRowData",a,c))});return b},delTreeNode:function(a){return this.each(function(){var c=this.p.localReader.id,b,h=this.p.treeReader.left_field,e=this.p.treeReader.right_field,i,g,f;if(this.grid&&this.p.treeGrid&&(b=this.p._index[a],void 0!==b)){i=parseInt(this.p.data[b][e],10);g=i-parseInt(this.p.data[b][h],10)+1;var l=d(this).jqGrid("getFullTreeNode",this.p.data[b]);if(0<l.length)for(b=0;b<l.length;b++)d(this).jqGrid("delRowData",
l[b][c]);if("nested"===this.p.treeGridModel){c=d.jgrid.from(this.p.data).greater(h,i,{stype:"integer"}).select();if(c.length)for(f in c)c.hasOwnProperty(f)&&(c[f][h]=parseInt(c[f][h],10)-g);c=d.jgrid.from(this.p.data).greater(e,i,{stype:"integer"}).select();if(c.length)for(f in c)c.hasOwnProperty(f)&&(c[f][e]=parseInt(c[f][e],10)-g)}}})},addChildNode:function(a,c,b,h){var e=this[0];if(b){var i=e.p.treeReader.expanded_field,g=e.p.treeReader.leaf_field,f=e.p.treeReader.level_field,l=e.p.treeReader.parent_id_field,
k=e.p.treeReader.left_field,m=e.p.treeReader.right_field,n=e.p.treeReader.loaded,j,r,q,t,p;j=0;var s=c,u;void 0===h&&(h=!1);if(void 0===a||null===a){p=e.p.data.length-1;if(0<=p)for(;0<=p;)j=Math.max(j,parseInt(e.p.data[p][e.p.localReader.id],10)),p--;a=j+1}var v=d(e).jqGrid("getInd",c);u=!1;if(void 0===c||null===c||""===c)s=c=null,j="last",t=e.p.tree_root_level,p=e.p.data.length+1;else if(j="after",r=e.p._index[c],q=e.p.data[r],c=q[e.p.localReader.id],t=parseInt(q[f],10)+1,p=d(e).jqGrid("getFullTreeNode",
q),p.length?(s=p=p[p.length-1][e.p.localReader.id],p=d(e).jqGrid("getInd",s)+1):p=d(e).jqGrid("getInd",c)+1,q[g])u=!0,q[i]=!0,d(e.rows[v]).find("span.cell-wrapperleaf").removeClass("cell-wrapperleaf").addClass("cell-wrapper").end().find("div.tree-leaf").removeClass(e.p.treeIcons.leaf+" tree-leaf").addClass(e.p.treeIcons.minus+" tree-minus"),e.p.data[r][g]=!1,q[n]=!0;r=p+1;void 0===b[i]&&(b[i]=!1);void 0===b[n]&&(b[n]=!1);b[f]=t;void 0===b[g]&&(b[g]=!0);"adjacency"===e.p.treeGridModel&&(b[l]=c);if("nested"===
e.p.treeGridModel){var o;if(null!==c){g=parseInt(q[m],10);f=d.jgrid.from(e.p.data);f=f.greaterOrEquals(m,g,{stype:"integer"});f=f.select();if(f.length)for(o in f)f.hasOwnProperty(o)&&(f[o][k]=f[o][k]>g?parseInt(f[o][k],10)+2:f[o][k],f[o][m]=f[o][m]>=g?parseInt(f[o][m],10)+2:f[o][m]);b[k]=g;b[m]=g+1}else{g=parseInt(d(e).jqGrid("getCol",m,!1,"max"),10);f=d.jgrid.from(e.p.data).greater(k,g,{stype:"integer"}).select();if(f.length)for(o in f)f.hasOwnProperty(o)&&(f[o][k]=parseInt(f[o][k],10)+2);f=d.jgrid.from(e.p.data).greater(m,
g,{stype:"integer"}).select();if(f.length)for(o in f)f.hasOwnProperty(o)&&(f[o][m]=parseInt(f[o][m],10)+2);b[k]=g+1;b[m]=g+2}}if(null===c||d(e).jqGrid("isNodeLoaded",q)||u)d(e).jqGrid("addRowData",a,b,j,s),d(e).jqGrid("setTreeNode",p,r);q&&!q[i]&&h&&d(e.rows[v]).find("div.treeclick").click()}}})})(jQuery);
(function(c){c.jgrid.extend({jqGridImport:function(a){a=c.extend({imptype:"xml",impstring:"",impurl:"",mtype:"GET",impData:{},xmlGrid:{config:"roots>grid",data:"roots>rows"},jsonGrid:{config:"grid",data:"data"},ajaxOptions:{}},a||{});return this.each(function(){var d=this,f=function(a,b){var e=c(b.xmlGrid.config,a)[0],h=c(b.xmlGrid.data,a)[0],f,g;if(xmlJsonClass.xml2json&&c.jgrid.parse){e=xmlJsonClass.xml2json(e," ");e=c.jgrid.parse(e);for(g in e)e.hasOwnProperty(g)&&(f=e[g]);h?(h=e.grid.datatype,
e.grid.datatype="xmlstring",e.grid.datastr=a,c(d).jqGrid(f).jqGrid("setGridParam",{datatype:h})):c(d).jqGrid(f)}else alert("xml2json or parse are not present")},b=function(a,b){if(a&&"string"==typeof a){var e=!1;c.jgrid.useJSON&&(c.jgrid.useJSON=!1,e=!0);var f=c.jgrid.parse(a);e&&(c.jgrid.useJSON=!0);e=f[b.jsonGrid.config];if(f=f[b.jsonGrid.data]){var g=e.datatype;e.datatype="jsonstring";e.datastr=f;c(d).jqGrid(e).jqGrid("setGridParam",{datatype:g})}else c(d).jqGrid(e)}};switch(a.imptype){case "xml":c.ajax(c.extend({url:a.impurl,
type:a.mtype,data:a.impData,dataType:"xml",complete:function(b,g){"success"==g&&(f(b.responseXML,a),c(d).triggerHandler("jqGridImportComplete",[b,a]),c.isFunction(a.importComplete)&&a.importComplete(b))}},a.ajaxOptions));break;case "xmlstring":if(a.impstring&&"string"==typeof a.impstring){var g=c.jgrid.stringToDoc(a.impstring);g&&(f(g,a),c(d).triggerHandler("jqGridImportComplete",[g,a]),c.isFunction(a.importComplete)&&a.importComplete(g),a.impstring=null);g=null}break;case "json":c.ajax(c.extend({url:a.impurl,
type:a.mtype,data:a.impData,dataType:"json",complete:function(f){try{b(f.responseText,a),c(d).triggerHandler("jqGridImportComplete",[f,a]),c.isFunction(a.importComplete)&&a.importComplete(f)}catch(g){}}},a.ajaxOptions));break;case "jsonstring":a.impstring&&"string"==typeof a.impstring&&(b(a.impstring,a),c(d).triggerHandler("jqGridImportComplete",[a.impstring,a]),c.isFunction(a.importComplete)&&a.importComplete(a.impstring),a.impstring=null)}})},jqGridExport:function(a){var a=c.extend({exptype:"xmlstring",
root:"grid",ident:"\t"},a||{}),d=null;this.each(function(){if(this.grid){var f,b=c.extend(!0,{},c(this).jqGrid("getGridParam"));b.rownumbers&&(b.colNames.splice(0,1),b.colModel.splice(0,1));b.multiselect&&(b.colNames.splice(0,1),b.colModel.splice(0,1));b.subGrid&&(b.colNames.splice(0,1),b.colModel.splice(0,1));b.knv=null;if(b.treeGrid)for(f in b.treeReader)b.treeReader.hasOwnProperty(f)&&(b.colNames.splice(b.colNames.length-1),b.colModel.splice(b.colModel.length-1));switch(a.exptype){case "xmlstring":d=
"<"+a.root+">"+xmlJsonClass.json2xml(b,a.ident)+"</"+a.root+">";break;case "jsonstring":d="{"+xmlJsonClass.toJson(b,a.root,a.ident,!1)+"}",void 0!==b.postData.filters&&(d=d.replace(/filters":"/,'filters":'),d=d.replace(/}]}"/,"}]}"))}}});return d},excelExport:function(a){a=c.extend({exptype:"remote",url:null,oper:"oper",tag:"excel",exportOptions:{}},a||{});return this.each(function(){if(this.grid){var d;"remote"==a.exptype&&(d=c.extend({},this.p.postData),d[a.oper]=a.tag,d=jQuery.param(d),d=-1!=a.url.indexOf("?")?
a.url+"&"+d:a.url+"?"+d,window.location=d)}})}})})(jQuery);
var xmlJsonClass={xml2json:function(a,b){if(9===a.nodeType)a=a.documentElement;var g=this.toJson(this.toObj(this.removeWhite(a)),a.nodeName,"\t");return"{\n"+b+(b?g.replace(/\t/g,b):g.replace(/\t|\n/g,""))+"\n}"},json2xml:function(a,b){var g=function(a,b,e){var d="",f,i;if(a instanceof Array)if(0===a.length)d+=e+"<"+b+">__EMPTY_ARRAY_</"+b+">\n";else for(f=0,i=a.length;f<i;f+=1)var l=e+g(a[f],b,e+"\t")+"\n",d=d+l;else if("object"===typeof a){f=!1;d+=e+"<"+b;for(i in a)a.hasOwnProperty(i)&&("@"===
i.charAt(0)?d+=" "+i.substr(1)+'="'+a[i].toString()+'"':f=!0);d+=f?">":"/>";if(f){for(i in a)a.hasOwnProperty(i)&&("#text"===i?d+=a[i]:"#cdata"===i?d+="<![CDATA["+a[i]+"]]\>":"@"!==i.charAt(0)&&(d+=g(a[i],i,e+"\t")));d+=("\n"===d.charAt(d.length-1)?e:"")+"</"+b+">"}}else"function"===typeof a?d+=e+"<"+b+"><![CDATA["+a+"]]\></"+b+">":(void 0===a&&(a=""),d='""'===a.toString()||0===a.toString().length?d+(e+"<"+b+">__EMPTY_STRING_</"+b+">"):d+(e+"<"+b+">"+a.toString()+"</"+b+">"));return d},f="",e;for(e in a)a.hasOwnProperty(e)&&
(f+=g(a[e],e,""));return b?f.replace(/\t/g,b):f.replace(/\t|\n/g,"")},toObj:function(a){var b={},g=/function/i;if(1===a.nodeType){if(a.attributes.length){var f;for(f=0;f<a.attributes.length;f+=1)b["@"+a.attributes[f].nodeName]=(a.attributes[f].nodeValue||"").toString()}if(a.firstChild){var e=f=0,h=!1,c;for(c=a.firstChild;c;c=c.nextSibling)1===c.nodeType?h=!0:3===c.nodeType&&c.nodeValue.match(/[^ \f\n\r\t\v]/)?f+=1:4===c.nodeType&&(e+=1);if(h)if(2>f&&2>e){this.removeWhite(a);for(c=a.firstChild;c;c=
c.nextSibling)3===c.nodeType?b["#text"]=this.escape(c.nodeValue):4===c.nodeType?g.test(c.nodeValue)?b[c.nodeName]=[b[c.nodeName],c.nodeValue]:b["#cdata"]=this.escape(c.nodeValue):b[c.nodeName]?b[c.nodeName]instanceof Array?b[c.nodeName][b[c.nodeName].length]=this.toObj(c):b[c.nodeName]=[b[c.nodeName],this.toObj(c)]:b[c.nodeName]=this.toObj(c)}else a.attributes.length?b["#text"]=this.escape(this.innerXml(a)):b=this.escape(this.innerXml(a));else if(f)a.attributes.length?b["#text"]=this.escape(this.innerXml(a)):
(b=this.escape(this.innerXml(a)),"__EMPTY_ARRAY_"===b?b="[]":"__EMPTY_STRING_"===b&&(b=""));else if(e)if(1<e)b=this.escape(this.innerXml(a));else for(c=a.firstChild;c;c=c.nextSibling)if(g.test(a.firstChild.nodeValue)){b=a.firstChild.nodeValue;break}else b["#cdata"]=this.escape(c.nodeValue)}!a.attributes.length&&!a.firstChild&&(b=null)}else 9===a.nodeType?b=this.toObj(a.documentElement):alert("unhandled node type: "+a.nodeType);return b},toJson:function(a,b,g,f){void 0===f&&(f=!0);var e=b?'"'+b+'"':
"",h="\t",c="\n";f||(c=h="");if("[]"===a)e+=b?":[]":"[]";else if(a instanceof Array){var j,d,k=[];for(d=0,j=a.length;d<j;d+=1)k[d]=this.toJson(a[d],"",g+h,f);e+=(b?":[":"[")+(1<k.length?c+g+h+k.join(","+c+g+h)+c+g:k.join(""))+"]"}else if(null===a)e+=(b&&":")+"null";else if("object"===typeof a){j=[];for(d in a)a.hasOwnProperty(d)&&(j[j.length]=this.toJson(a[d],d,g+h,f));e+=(b?":{":"{")+(1<j.length?c+g+h+j.join(","+c+g+h)+c+g:j.join(""))+"}"}else e="string"===typeof a?e+((b&&":")+'"'+a.replace(/\\/g,
"\\\\").replace(/\"/g,'\\"')+'"'):e+((b&&":")+a.toString());return e},innerXml:function(a){var b="";if("innerHTML"in a)b=a.innerHTML;else for(var g=function(a){var b="",h;if(1===a.nodeType){b+="<"+a.nodeName;for(h=0;h<a.attributes.length;h+=1)b+=" "+a.attributes[h].nodeName+'="'+(a.attributes[h].nodeValue||"").toString()+'"';if(a.firstChild){b+=">";for(h=a.firstChild;h;h=h.nextSibling)b+=g(h);b+="</"+a.nodeName+">"}else b+="/>"}else 3===a.nodeType?b+=a.nodeValue:4===a.nodeType&&(b+="<![CDATA["+a.nodeValue+
"]]\>");return b},a=a.firstChild;a;a=a.nextSibling)b+=g(a);return b},escape:function(a){return a.replace(/[\\]/g,"\\\\").replace(/[\"]/g,'\\"').replace(/[\n]/g,"\\n").replace(/[\r]/g,"\\r")},removeWhite:function(a){a.normalize();var b;for(b=a.firstChild;b;)if(3===b.nodeType)if(b.nodeValue.match(/[^ \f\n\r\t\v]/))b=b.nextSibling;else{var g=b.nextSibling;a.removeChild(b);b=g}else 1===b.nodeType&&this.removeWhite(b),b=b.nextSibling;return a}};
function tableToGrid(j,k){jQuery(j).each(function(){if(!this.grid){jQuery(this).width("99%");var b=jQuery(this).width(),c=jQuery("tr td:first-child input[type=checkbox]:first",jQuery(this)),a=jQuery("tr td:first-child input[type=radio]:first",jQuery(this)),c=0<c.length,a=!c&&0<a.length,i=c||a,d=[],e=[];jQuery("th",jQuery(this)).each(function(){0===d.length&&i?(d.push({name:"__selection__",index:"__selection__",width:0,hidden:!0}),e.push("__selection__")):(d.push({name:jQuery(this).attr("id")||jQuery.trim(jQuery.jgrid.stripHtml(jQuery(this).html())).split(" ").join("_"),
index:jQuery(this).attr("id")||jQuery.trim(jQuery.jgrid.stripHtml(jQuery(this).html())).split(" ").join("_"),width:jQuery(this).width()||150}),e.push(jQuery(this).html()))});var f=[],g=[],h=[];jQuery("tbody > tr",jQuery(this)).each(function(){var b={},a=0;jQuery("td",jQuery(this)).each(function(){if(0===a&&i){var c=jQuery("input",jQuery(this)),e=c.attr("value");g.push(e||f.length);c.is(":checked")&&h.push(e);b[d[a].name]=c.attr("value")}else b[d[a].name]=jQuery(this).html();a++});0<a&&f.push(b)});
jQuery(this).empty();jQuery(this).addClass("scroll");jQuery(this).jqGrid(jQuery.extend({datatype:"local",width:b,colNames:e,colModel:d,multiselect:c},k||{}));for(b=0;b<f.length;b++)a=null,0<g.length&&(a=g[b])&&a.replace&&(a=encodeURIComponent(a).replace(/[.\-%]/g,"_")),null===a&&(a=b+1),jQuery(this).jqGrid("addRowData",a,f[b]);for(b=0;b<h.length;b++)jQuery(this).jqGrid("setSelection",h[b])}})};
(function(b){b.jgrid.msie&&8==b.jgrid.msiever()&&(b.expr[":"].hidden=function(b){return 0===b.offsetWidth||0===b.offsetHeight||"none"==b.style.display});b.jgrid._multiselect=!1;if(b.ui&&b.ui.multiselect){if(b.ui.multiselect.prototype._setSelected){var o=b.ui.multiselect.prototype._setSelected;b.ui.multiselect.prototype._setSelected=function(a,d){var c=o.call(this,a,d);if(d&&this.selectedList){var e=this.element;this.selectedList.find("li").each(function(){b(this).data("optionLink")&&b(this).data("optionLink").remove().appendTo(e)})}return c}}b.ui.multiselect.prototype.destroy&&
(b.ui.multiselect.prototype.destroy=function(){this.element.show();this.container.remove();b.Widget===void 0?b.widget.prototype.destroy.apply(this,arguments):b.Widget.prototype.destroy.apply(this,arguments)});b.jgrid._multiselect=!0}b.jgrid.extend({sortableColumns:function(a){return this.each(function(){function d(){c.p.disableClick=true}var c=this,e=b.jgrid.jqID(c.p.id),e={tolerance:"pointer",axis:"x",scrollSensitivity:"1",items:">th:not(:has(#jqgh_"+e+"_cb,#jqgh_"+e+"_rn,#jqgh_"+e+"_subgrid),:hidden)",
placeholder:{element:function(a){return b(document.createElement(a[0].nodeName)).addClass(a[0].className+" ui-sortable-placeholder ui-state-highlight").removeClass("ui-sortable-helper")[0]},update:function(b,a){a.height(b.currentItem.innerHeight()-parseInt(b.currentItem.css("paddingTop")||0,10)-parseInt(b.currentItem.css("paddingBottom")||0,10));a.width(b.currentItem.innerWidth()-parseInt(b.currentItem.css("paddingLeft")||0,10)-parseInt(b.currentItem.css("paddingRight")||0,10))}},update:function(a,
e){var d=b(e.item).parent(),d=b(">th",d),f={},g=c.p.id+"_";b.each(c.p.colModel,function(b){f[this.name]=b});var j=[];d.each(function(){var a=b(">div",this).get(0).id.replace(/^jqgh_/,"").replace(g,"");f.hasOwnProperty(a)&&j.push(f[a])});b(c).jqGrid("remapColumns",j,true,true);b.isFunction(c.p.sortable.update)&&c.p.sortable.update(j);setTimeout(function(){c.p.disableClick=false},50)}};if(c.p.sortable.options)b.extend(e,c.p.sortable.options);else if(b.isFunction(c.p.sortable))c.p.sortable={update:c.p.sortable};
if(e.start){var g=e.start;e.start=function(b,a){d();g.call(this,b,a)}}else e.start=d;if(c.p.sortable.exclude)e.items=e.items+(":not("+c.p.sortable.exclude+")");a.sortable(e).data("sortable").floating=true})},columnChooser:function(a){function d(a,c){a&&(typeof a=="string"?b.fn[a]&&b.fn[a].apply(c,b.makeArray(arguments).slice(2)):b.isFunction(a)&&a.apply(c,b.makeArray(arguments).slice(2)))}var c=this;if(!b("#colchooser_"+b.jgrid.jqID(c[0].p.id)).length){var e=b('<div id="colchooser_'+c[0].p.id+'" style="position:relative;overflow:hidden"><div><select multiple="multiple"></select></div></div>'),
g=b("select",e),a=b.extend({width:420,height:240,classname:null,done:function(b){b&&c.jqGrid("remapColumns",b,true)},msel:"multiselect",dlog:"dialog",dialog_opts:{minWidth:470},dlog_opts:function(a){var c={};c[a.bSubmit]=function(){a.apply_perm();a.cleanup(false)};c[a.bCancel]=function(){a.cleanup(true)};return b.extend(true,{buttons:c,close:function(){a.cleanup(true)},modal:a.modal||false,resizable:a.resizable||true,width:a.width+20},a.dialog_opts||{})},apply_perm:function(){b("option",g).each(function(){this.selected?
c.jqGrid("showCol",i[this.value].name):c.jqGrid("hideCol",i[this.value].name)});var e=[];b("option:selected",g).each(function(){e.push(parseInt(this.value,10))});b.each(e,function(){delete m[i[parseInt(this,10)].name]});b.each(m,function(){var b=parseInt(this,10);var a=e,c=b;if(c>=0){var d=a.slice(),i=d.splice(c,Math.max(a.length-c,c));if(c>a.length)c=a.length;d[c]=b;e=d.concat(i)}else e=void 0});a.done&&a.done.call(c,e)},cleanup:function(b){d(a.dlog,e,"destroy");d(a.msel,g,"destroy");e.remove();
b&&a.done&&a.done.call(c)},msel_opts:{}},b.jgrid.col,a||{});if(b.ui&&b.ui.multiselect&&a.msel=="multiselect"){if(!b.jgrid._multiselect){alert("Multiselect plugin loaded after jqGrid. Please load the plugin before the jqGrid!");return}a.msel_opts=b.extend(b.ui.multiselect.defaults,a.msel_opts)}a.caption&&e.attr("title",a.caption);if(a.classname){e.addClass(a.classname);g.addClass(a.classname)}if(a.width){b(">div",e).css({width:a.width,margin:"0 auto"});g.css("width",a.width)}if(a.height){b(">div",
e).css("height",a.height);g.css("height",a.height-10)}var i=c.jqGrid("getGridParam","colModel"),q=c.jqGrid("getGridParam","colNames"),m={},f=[];g.empty();b.each(i,function(a){m[this.name]=a;this.hidedlg?this.hidden||f.push(a):g.append("<option value='"+a+"' "+(this.hidden?"":"selected='selected'")+">"+b.jgrid.stripHtml(q[a])+"</option>")});var n=b.isFunction(a.dlog_opts)?a.dlog_opts.call(c,a):a.dlog_opts;d(a.dlog,e,n);n=b.isFunction(a.msel_opts)?a.msel_opts.call(c,a):a.msel_opts;d(a.msel,g,n)}},sortableRows:function(a){return this.each(function(){var d=
this;if(d.grid&&!d.p.treeGrid&&b.fn.sortable){a=b.extend({cursor:"move",axis:"y",items:".jqgrow"},a||{});if(a.start&&b.isFunction(a.start)){a._start_=a.start;delete a.start}else a._start_=false;if(a.update&&b.isFunction(a.update)){a._update_=a.update;delete a.update}else a._update_=false;a.start=function(c,e){b(e.item).css("border-width","0px");b("td",e.item).each(function(b){this.style.width=d.grid.cols[b].style.width});if(d.p.subGrid){var g=b(e.item).attr("id");try{b(d).jqGrid("collapseSubGridRow",
g)}catch(i){}}a._start_&&a._start_.apply(this,[c,e])};a.update=function(c,e){b(e.item).css("border-width","");d.p.rownumbers===true&&b("td.jqgrid-rownum",d.rows).each(function(a){b(this).html(a+1+(parseInt(d.p.page,10)-1)*parseInt(d.p.rowNum,10))});a._update_&&a._update_.apply(this,[c,e])};b("tbody:first",d).sortable(a);b("tbody:first",d).disableSelection()}})},gridDnD:function(a){return this.each(function(){function d(){var a=b.data(c,"dnd");b("tr.jqgrow:not(.ui-draggable)",c).draggable(b.isFunction(a.drag)?
a.drag.call(b(c),a):a.drag)}var c=this,e,g;if(c.grid&&!c.p.treeGrid&&b.fn.draggable&&b.fn.droppable){b("#jqgrid_dnd")[0]===void 0&&b("body").append("<table id='jqgrid_dnd' class='ui-jqgrid-dnd'></table>");if(typeof a=="string"&&a=="updateDnD"&&c.p.jqgdnd===true)d();else{a=b.extend({drag:function(a){return b.extend({start:function(e,d){var f;if(c.p.subGrid){f=b(d.helper).attr("id");try{b(c).jqGrid("collapseSubGridRow",f)}catch(g){}}for(f=0;f<b.data(c,"dnd").connectWith.length;f++)b(b.data(c,"dnd").connectWith[f]).jqGrid("getGridParam",
"reccount")=="0"&&b(b.data(c,"dnd").connectWith[f]).jqGrid("addRowData","jqg_empty_row",{});d.helper.addClass("ui-state-highlight");b("td",d.helper).each(function(b){this.style.width=c.grid.headers[b].width+"px"});a.onstart&&b.isFunction(a.onstart)&&a.onstart.call(b(c),e,d)},stop:function(e,d){var f;if(d.helper.dropped&&!a.dragcopy){f=b(d.helper).attr("id");f===void 0&&(f=b(this).attr("id"));b(c).jqGrid("delRowData",f)}for(f=0;f<b.data(c,"dnd").connectWith.length;f++)b(b.data(c,"dnd").connectWith[f]).jqGrid("delRowData",
"jqg_empty_row");a.onstop&&b.isFunction(a.onstop)&&a.onstop.call(b(c),e,d)}},a.drag_opts||{})},drop:function(a){return b.extend({accept:function(a){if(!b(a).hasClass("jqgrow"))return a;a=b(a).closest("table.ui-jqgrid-btable");if(a.length>0&&b.data(a[0],"dnd")!==void 0){a=b.data(a[0],"dnd").connectWith;return b.inArray("#"+b.jgrid.jqID(this.id),a)!=-1?true:false}return false},drop:function(e,d){if(b(d.draggable).hasClass("jqgrow")){var f=b(d.draggable).attr("id"),f=d.draggable.parent().parent().jqGrid("getRowData",
f);if(!a.dropbyname){var g=0,j={},h,l,p=b("#"+b.jgrid.jqID(this.id)).jqGrid("getGridParam","colModel");try{for(l in f)if(f.hasOwnProperty(l)){h=p[g].name;h=="cb"||h=="rn"||h=="subgrid"||f.hasOwnProperty(l)&&p[g]&&(j[h]=f[l]);g++}f=j}catch(o){}}d.helper.dropped=true;if(a.beforedrop&&b.isFunction(a.beforedrop)){h=a.beforedrop.call(this,e,d,f,b("#"+b.jgrid.jqID(c.p.id)),b(this));h!==void 0&&h!==null&&typeof h=="object"&&(f=h)}if(d.helper.dropped){var k;if(a.autoid)if(b.isFunction(a.autoid))k=a.autoid.call(this,
f);else{k=Math.ceil(Math.random()*1E3);k=a.autoidprefix+k}b("#"+b.jgrid.jqID(this.id)).jqGrid("addRowData",k,f,a.droppos)}a.ondrop&&b.isFunction(a.ondrop)&&a.ondrop.call(this,e,d,f)}}},a.drop_opts||{})},onstart:null,onstop:null,beforedrop:null,ondrop:null,drop_opts:{activeClass:"ui-state-active",hoverClass:"ui-state-hover"},drag_opts:{revert:"invalid",helper:"clone",cursor:"move",appendTo:"#jqgrid_dnd",zIndex:5E3},dragcopy:false,dropbyname:false,droppos:"first",autoid:true,autoidprefix:"dnd_"},a||
{});if(a.connectWith){a.connectWith=a.connectWith.split(",");a.connectWith=b.map(a.connectWith,function(a){return b.trim(a)});b.data(c,"dnd",a);c.p.reccount!="0"&&!c.p.jqgdnd&&d();c.p.jqgdnd=true;for(e=0;e<a.connectWith.length;e++){g=a.connectWith[e];b(g).droppable(b.isFunction(a.drop)?a.drop.call(b(c),a):a.drop)}}}}})},gridResize:function(a){return this.each(function(){var d=this,c=b.jgrid.jqID(d.p.id);if(d.grid&&b.fn.resizable){a=b.extend({},a||{});if(a.alsoResize){a._alsoResize_=a.alsoResize;delete a.alsoResize}else a._alsoResize_=
false;if(a.stop&&b.isFunction(a.stop)){a._stop_=a.stop;delete a.stop}else a._stop_=false;a.stop=function(e,g){b(d).jqGrid("setGridParam",{height:b("#gview_"+c+" .ui-jqgrid-bdiv").height()});b(d).jqGrid("setGridWidth",g.size.width,a.shrinkToFit);a._stop_&&a._stop_.call(d,e,g)};a.alsoResize=a._alsoResize_?eval("("+("{'#gview_"+c+" .ui-jqgrid-bdiv':true,'"+a._alsoResize_+"':true}")+")"):b(".ui-jqgrid-bdiv","#gview_"+c);delete a._alsoResize_;b("#gbox_"+c).resizable(a)}})}})})(jQuery);
(function(e){typeof define=="function"&&define.amd?define(["jquery"],e):e(jQuery)})(function(e){function o(t){var r=t.data("timepicker-settings"),i=t.data("timepicker-list");i&&i.length&&(i.remove(),t.data("timepicker-list",!1)),i=e("<ul />",{tabindex:-1,"class":"ui-timepicker-list"}),r.className&&i.addClass(r.className),i.css({display:"none",position:"absolute"}),(r.minTime!==null||r.durationTime!==null)&&r.showDuration&&i.addClass("ui-timepicker-with-duration");var s=r.durationTime!==null?r.durationTime:r.minTime,o=r.minTime!==null?r.minTime:0,u=r.maxTime!==null?r.maxTime:o+n-1;u<=o&&(u+=n);for(var a=o;a<=u;a+=r.step*60){var f=a%n,l=e("<li />");l.data("time",f),l.text(m(f,r.timeFormat));if((r.minTime!==null||r.durationTime!==null)&&r.showDuration){var h=e("<span />");h.addClass("ui-timepicker-duration"),h.text(" ("+v(a-s)+")"),l.append(h)}i.append(l)}i.data("timepicker-input",t),t.data("timepicker-list",i);var p=r.appendTo;typeof p=="string"?p=e(p):typeof p=="function"&&(p=p(t)),p.append(i),c(t,i),i.on("click","li",function(n){t.addClass("ui-timepicker-hideme"),t[0].focus(),i.find("li").removeClass("ui-timepicker-selected"),e(this).addClass("ui-timepicker-selected"),d(t),i.hide()})}function u(){var e=new Date,t=e.getTimezoneOffset()*6e4;e.setHours(0),e.setMinutes(0),e.setSeconds(0);var n=e.getTimezoneOffset()*6e4;return new Date(e.valueOf()-n+t)}function a(){"ontouchstart"in document?e("body").on("touchstart.ui-timepicker",f):(e("body").on("mousedown.ui-timepicker",f),e(window).on("scroll.ui-timepicker",f))}function f(t){var n=e(t.target),r=n.closest(".ui-timepicker-input");r.length===0&&n.closest(".ui-timepicker-list").length===0&&s.hide(),e("body").unbind(".ui-timepicker"),e(window).unbind(".ui-timepicker")}function l(t,n,r){if(!r&&r!==0)return!1;var i=t.data("timepicker-settings"),s=!1,o=i.step*30;return n.find("li").each(function(t,n){var i=e(n),u=i.data("time")-r;if(Math.abs(u)<o||u==o)return s=i,!1}),s}function c(e,t){var n=g(e.val()),r=l(e,t,n);r&&r.addClass("ui-timepicker-selected")}function h(){if(this.value==="")return;var t=e(this),n=g(this.value);if(n===null){t.trigger("timeFormatError");return}var r=t.data("timepicker-settings");if(r.forceRoundTime){var i=n%(r.step*60);i>=r.step*30?n+=r.step*60-i:n-=i}var s=m(n,r.timeFormat);t.val(s)}function p(t){var n=e(this),r=n.data("timepicker-list");if(!r.is(":visible")){if(t.keyCode!=40)return!0;n.focus()}switch(t.keyCode){case 13:return d(n),s.hide.apply(this),t.preventDefault(),!1;case 38:var i=r.find(".ui-timepicker-selected");i.length?i.is(":first-child")||(i.removeClass("ui-timepicker-selected"),i.prev().addClass("ui-timepicker-selected"),i.prev().position().top<i.outerHeight()&&r.scrollTop(r.scrollTop()-i.outerHeight())):(r.children().each(function(t,n){if(e(n).position().top>0)return i=e(n),!1}),i.addClass("ui-timepicker-selected"));break;case 40:i=r.find(".ui-timepicker-selected"),i.length===0?(r.children().each(function(t,n){if(e(n).position().top>0)return i=e(n),!1}),i.addClass("ui-timepicker-selected")):i.is(":last-child")||(i.removeClass("ui-timepicker-selected"),i.next().addClass("ui-timepicker-selected"),i.next().position().top+2*i.outerHeight()>r.outerHeight()&&r.scrollTop(r.scrollTop()+i.outerHeight()));break;case 27:r.find("li").removeClass("ui-timepicker-selected"),r.hide();break;case 9:s.hide();break;case 16:case 17:case 18:case 19:case 20:case 33:case 34:case 35:case 36:case 37:case 39:case 45:return;default:r.find("li").removeClass("ui-timepicker-selected");return}}function d(e){var t=e.data("timepicker-settings"),n=e.data("timepicker-list"),r=null,i=n.find(".ui-timepicker-selected");i.length?r=i.data("time"):e.val()&&(r=g(e.val()),c(e,n));if(r!==null){var s=m(r,t.timeFormat);e.val(s)}e.trigger("change").trigger("changeTime")}function v(e){var t=Math.round(e/60),n;if(Math.abs(t)<60)n=[t,i.mins];else if(t==60)n=["1",i.hr];else{var r=(t/60).toFixed(1);i.decimal!="."&&(r=r.replace(".",i.decimal)),n=[r,i.hrs]}return n.join(" ")}function m(e,n){if(e===null)return;var r=new Date(t.valueOf()+e*1e3),i="",s,o;for(var u=0;u<n.length;u++){o=n.charAt(u);switch(o){case"a":i+=r.getHours()>11?"pm":"am";break;case"A":i+=r.getHours()>11?"PM":"AM";break;case"g":s=r.getHours()%12,i+=s===0?"12":s;break;case"G":i+=r.getHours();break;case"h":s=r.getHours()%12,s!==0&&s<10&&(s="0"+s),i+=s===0?"12":s;break;case"H":s=r.getHours(),i+=s>9?s:"0"+s;break;case"i":var a=r.getMinutes();i+=a>9?a:"0"+a;break;case"s":e=r.getSeconds(),i+=e>9?e:"0"+e;break;default:i+=o}}return i}function g(e){if(e==="")return null;if(e+0==e)return e;typeof e=="object"&&(e=e.getHours()+":"+e.getMinutes()+":"+e.getSeconds());var t=new Date(0),n;e.indexOf(":")!==-1?n=/(\d{1,2})(?::(\d{1,2}))?(?::(\d{2}))?\s*([pa]?)/:n=/^([0-2][0-9]):?([0-5][0-9])?:?([0-5][0-9])?\s*([pa]?)$/;var r=e.toLowerCase().match(n);if(!r)return null;var i=parseInt(r[1]*1,10),s;r[4]?i==12?s=r[4]=="p"?12:0:s=i+(r[4]=="p"?12:0):s=i;var o=r[2]*1||0,u=r[3]*1||0;return s*3600+o*60+u}var t=u(),n=86400,r={className:null,minTime:null,maxTime:null,durationTime:null,step:30,showDuration:!1,timeFormat:"g:ia",scrollDefaultNow:!1,scrollDefaultTime:!1,selectOnBlur:!1,disableTouchKeyboard:!0,forceRoundTime:!1,appendTo:"body"},i={decimal:".",mins:"mins",hr:"hr",hrs:"hrs"},s={init:function(t){return this.each(function(){var n=e(this);if(n[0].tagName=="SELECT"){var o={type:"text",value:n.val()},u=n[0].attributes;for(var a=0;a<u.length;a++)o[u[a].nodeName]=u[a].nodeValue;var f=e("<input />",o);n.replaceWith(f),n=f}var l=e.extend({},r);t&&(l=e.extend(l,t)),l.minTime&&(l.minTime=g(l.minTime)),l.maxTime&&(l.maxTime=g(l.maxTime)),l.durationTime&&(l.durationTime=g(l.durationTime)),l.lang&&(i=e.extend(i,l.lang)),n.data("timepicker-settings",l),n.prop("autocomplete","off"),n.on("click.timepicker focus.timepicker",s.show),n.on("blur.timepicker",h),n.on("keydown.timepicker",p),n.addClass("ui-timepicker-input"),h.call(n.get(0))})},show:function(t){var n=e(this),r=n.data("timepicker-settings");"ontouchstart"in document&&r.disableTouchKeyboard&&n.blur();var i=n.data("timepicker-list");if(n.prop("readonly"))return;if(!i||i.length===0)o(n),i=n.data("timepicker-list");if(n.hasClass("ui-timepicker-hideme")){n.removeClass("ui-timepicker-hideme"),i.hide();return}if(i.is(":visible"))return;s.hide(),n.offset().top+n.outerHeight(!0)+i.outerHeight()>e(window).height()+e(window).scrollTop()?i.css({left:n.offset().left,top:n.offset().top-i.outerHeight()}):i.css({left:n.offset().left,top:n.offset().top+n.outerHeight()}),i.show();var u=i.find(".ui-timepicker-selected");u.length||(n.val()?u=l(n,i,g(n.val())):r.scrollDefaultNow?u=l(n,i,g(new Date)):r.scrollDefaultTime!==!1&&(u=l(n,i,g(r.scrollDefaultTime))));if(u&&u.length){var f=i.scrollTop()+u.position().top-u.outerHeight();i.scrollTop(f)}else i.scrollTop(0);a(),n.trigger("showTimepicker")},hide:function(t){e(".ui-timepicker-list:visible").each(function(){var t=e(this),n=t.data("timepicker-input"),r=n.data("timepicker-settings");r&&r.selectOnBlur&&d(n),t.hide(),n.trigger("hideTimepicker")})},option:function(t,n){var r=e(this),i=r.data("timepicker-settings"),s=r.data("timepicker-list");if(typeof t=="object")i=e.extend(i,t);else if(typeof t=="string"&&typeof n!="undefined")i[t]=n;else if(typeof t=="string")return i[t];i.minTime&&(i.minTime=g(i.minTime)),i.maxTime&&(i.maxTime=g(i.maxTime)),i.durationTime&&(i.durationTime=g(i.durationTime)),r.data("timepicker-settings",i),s&&(s.remove(),r.data("timepicker-list",!1))},getSecondsFromMidnight:function(){return g(e(this).val())},getTime:function(){return new Date(t.valueOf()+g(e(this).val())*1e3)},setTime:function(t){var n=e(this),r=m(g(t),n.data("timepicker-settings").timeFormat);n.val(r)},remove:function(){var t=e(this);if(!t.hasClass("ui-timepicker-input"))return;t.removeAttr("autocomplete","off"),t.removeClass("ui-timepicker-input"),t.removeData("timepicker-settings"),t.off(".timepicker"),t.data("timepicker-list")&&t.data("timepicker-list").remove(),t.removeData("timepicker-list")}};e.fn.timepicker=function(t){if(s[t])return s[t].apply(this,Array.prototype.slice.call(arguments,1));if(typeof t=="object"||!t)return s.init.apply(this,arguments);e.error("Method "+t+" does not exist on jQuery.timepicker")}});/*!
 * FullCalendar v1.6.1
 * Docs & License: http://arshaw.com/fullcalendar/
 * (c) 2013 Adam Shaw
 */

/*
 * Use fullcalendar.css for basic styling.
 * For event drag & drop, requires jQuery UI draggable.
 * For event resizing, requires jQuery UI resizable.
 */
 
(function($, undefined) {


;;

var defaults = {

	// display
	defaultView: 'month',
	aspectRatio: 1.35,
	header: {
		left: 'title',
		center: '',
		right: 'today prev,next'
	},
	weekends: true,
	weekNumbers: false,
	weekNumberCalculation: 'iso',
	weekNumberTitle: 'W',
	
	// editing
	//editable: false,
	//disableDragging: false,
	//disableResizing: false,
	
	allDayDefault: true,
	ignoreTimezone: true,
	
	// event ajax
	lazyFetching: true,
	startParam: 'start',
	endParam: 'end',
	
	// time formats
	titleFormat: {
		month: 'MMMM yyyy',
		week: "MMM d[ yyyy]{ '&#8212;'[ MMM] d yyyy}",
		day: 'dddd, MMM d, yyyy'
	},
	columnFormat: {
		month: 'ddd',
		week: 'ddd M/d',
		day: 'dddd M/d'
	},
	timeFormat: { // for event elements
		'': 'h(:mm)t' // default
	},
	
	// locale
	isRTL: false,
	firstDay: 0,
	monthNames: ['January','February','March','April','May','June','July','August','September','October','November','December'],
	monthNamesShort: ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],
	dayNames: ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
	dayNamesShort: ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'],
	buttonText: {
		prev: "<span class='fc-text-arrow'>&lsaquo;</span>",
		next: "<span class='fc-text-arrow'>&rsaquo;</span>",
		prevYear: "<span class='fc-text-arrow'>&laquo;</span>",
		nextYear: "<span class='fc-text-arrow'>&raquo;</span>",
		today: 'today',
		month: 'month',
		week: 'week',
		day: 'day'
	},
	
	// jquery-ui theming
	theme: false,
	buttonIcons: {
		prev: 'circle-triangle-w',
		next: 'circle-triangle-e'
	},
	
	//selectable: false,
	unselectAuto: true,
	
	dropAccept: '*'
	
};

// right-to-left defaults
var rtlDefaults = {
	header: {
		left: 'next,prev today',
		center: '',
		right: 'title'
	},
	buttonText: {
		prev: "<span class='fc-text-arrow'>&rsaquo;</span>",
		next: "<span class='fc-text-arrow'>&lsaquo;</span>",
		prevYear: "<span class='fc-text-arrow'>&raquo;</span>",
		nextYear: "<span class='fc-text-arrow'>&laquo;</span>"
	},
	buttonIcons: {
		prev: 'circle-triangle-e',
		next: 'circle-triangle-w'
	}
};



;;

var fc = $.fullCalendar = { version: "1.6.1" };
var fcViews = fc.views = {};


$.fn.fullCalendar = function(options) {


	// method calling
	if (typeof options == 'string') {
		var args = Array.prototype.slice.call(arguments, 1);
		var res;
		this.each(function() {
			var calendar = $.data(this, 'fullCalendar');
			if (calendar && $.isFunction(calendar[options])) {
				var r = calendar[options].apply(calendar, args);
				if (res === undefined) {
					res = r;
				}
				if (options == 'destroy') {
					$.removeData(this, 'fullCalendar');
				}
			}
		});
		if (res !== undefined) {
			return res;
		}
		return this;
	}
	
	
	// would like to have this logic in EventManager, but needs to happen before options are recursively extended
	var eventSources = options.eventSources || [];
	delete options.eventSources;
	if (options.events) {
		eventSources.push(options.events);
		delete options.events;
	}
	

	options = $.extend(true, {},
		defaults,
		(options.isRTL || options.isRTL===undefined && defaults.isRTL) ? rtlDefaults : {},
		options
	);
	
	
	this.each(function(i, _element) {
		var element = $(_element);
		var calendar = new Calendar(element, options, eventSources);
		element.data('fullCalendar', calendar); // TODO: look into memory leak implications
		calendar.render();
	});
	
	
	return this;
	
};


// function for adding/overriding defaults
function setDefaults(d) {
	$.extend(true, defaults, d);
}



;;

 
function Calendar(element, options, eventSources) {
	var t = this;
	
	
	// exports
	t.options = options;
	t.render = render;
	t.destroy = destroy;
	t.refetchEvents = refetchEvents;
	t.reportEvents = reportEvents;
	t.reportEventChange = reportEventChange;
	t.rerenderEvents = rerenderEvents;
	t.changeView = changeView;
	t.select = select;
	t.unselect = unselect;
	t.prev = prev;
	t.next = next;
	t.prevYear = prevYear;
	t.nextYear = nextYear;
	t.today = today;
	t.gotoDate = gotoDate;
	t.incrementDate = incrementDate;
	t.formatDate = function(format, date) { return formatDate(format, date, options) };
	t.formatDates = function(format, date1, date2) { return formatDates(format, date1, date2, options) };
	t.getDate = getDate;
	t.getView = getView;
	t.option = option;
	t.trigger = trigger;
	
	
	// imports
	EventManager.call(t, options, eventSources);
	var isFetchNeeded = t.isFetchNeeded;
	var fetchEvents = t.fetchEvents;
	
	
	// locals
	var _element = element[0];
	var header;
	var headerElement;
	var content;
	var tm; // for making theme classes
	var currentView;
	var viewInstances = {};
	var elementOuterWidth;
	var suggestedViewHeight;
	var absoluteViewElement;
	var resizeUID = 0;
	var ignoreWindowResize = 0;
	var date = new Date();
	var events = [];
	var _dragElement;
	
	
	
	/* Main Rendering
	-----------------------------------------------------------------------------*/
	
	
	setYMD(date, options.year, options.month, options.date);
	
	
	function render(inc) {
		if (!content) {
			initialRender();
		}else{
			calcSize();
			markSizesDirty();
			markEventsDirty();
			renderView(inc);
		}
	}
	
	
	function initialRender() {
		tm = options.theme ? 'ui' : 'fc';
		element.addClass('fc');
		if (options.isRTL) {
			element.addClass('fc-rtl');
		}
		else {
			element.addClass('fc-ltr');
		}
		if (options.theme) {
			element.addClass('ui-widget');
		}
		content = $("<div class='fc-content' style='position:relative'/>")
			.prependTo(element);
		header = new Header(t, options);
		headerElement = header.render();
		if (headerElement) {
			element.prepend(headerElement);
		}
		changeView(options.defaultView);
		$(window).resize(windowResize);
		// needed for IE in a 0x0 iframe, b/c when it is resized, never triggers a windowResize
		if (!bodyVisible()) {
			lateRender();
		}
	}
	
	
	// called when we know the calendar couldn't be rendered when it was initialized,
	// but we think it's ready now
	function lateRender() {
		setTimeout(function() { // IE7 needs this so dimensions are calculated correctly
			if (!currentView.start && bodyVisible()) { // !currentView.start makes sure this never happens more than once
				renderView();
			}
		},0);
	}
	
	
	function destroy() {
		$(window).unbind('resize', windowResize);
		header.destroy();
		content.remove();
		element.removeClass('fc fc-rtl ui-widget');
	}
	
	
	
	function elementVisible() {
		return _element.offsetWidth !== 0;
	}
	
	
	function bodyVisible() {
		return $('body')[0].offsetWidth !== 0;
	}
	
	
	
	/* View Rendering
	-----------------------------------------------------------------------------*/
	
	// TODO: improve view switching (still weird transition in IE, and FF has whiteout problem)
	
	function changeView(newViewName) {
		if (!currentView || newViewName != currentView.name) {
			ignoreWindowResize++; // because setMinHeight might change the height before render (and subsequently setSize) is reached

			unselect();
			
			var oldView = currentView;
			var newViewElement;
				
			if (oldView) {
				(oldView.beforeHide || noop)(); // called before changing min-height. if called after, scroll state is reset (in Opera)
				setMinHeight(content, content.height());
				oldView.element.hide();
			}else{
				setMinHeight(content, 1); // needs to be 1 (not 0) for IE7, or else view dimensions miscalculated
			}
			content.css('overflow', 'hidden');
			
			currentView = viewInstances[newViewName];
			if (currentView) {
				currentView.element.show();
			}else{
				currentView = viewInstances[newViewName] = new fcViews[newViewName](
					newViewElement = absoluteViewElement =
						$("<div class='fc-view fc-view-" + newViewName + "' style='position:absolute'/>")
							.appendTo(content),
					t // the calendar object
				);
			}
			
			if (oldView) {
				header.deactivateButton(oldView.name);
			}
			header.activateButton(newViewName);
			
			renderView(); // after height has been set, will make absoluteViewElement's position=relative, then set to null
			
			content.css('overflow', '');
			if (oldView) {
				setMinHeight(content, 1);
			}
			
			if (!newViewElement) {
				(currentView.afterShow || noop)(); // called after setting min-height/overflow, so in final scroll state (for Opera)
			}
			
			ignoreWindowResize--;
		}
	}
	
	
	
	function renderView(inc) {
		if (elementVisible()) {
			ignoreWindowResize++; // because renderEvents might temporarily change the height before setSize is reached

			unselect();
			
			if (suggestedViewHeight === undefined) {
				calcSize();
			}
			
			var forceEventRender = false;
			if (!currentView.start || inc || date < currentView.start || date >= currentView.end) {
				// view must render an entire new date range (and refetch/render events)
				currentView.render(date, inc || 0); // responsible for clearing events
				setSize(true);
				forceEventRender = true;
			}
			else if (currentView.sizeDirty) {
				// view must resize (and rerender events)
				currentView.clearEvents();
				setSize();
				forceEventRender = true;
			}
			else if (currentView.eventsDirty) {
				currentView.clearEvents();
				forceEventRender = true;
			}
			currentView.sizeDirty = false;
			currentView.eventsDirty = false;
			updateEvents(forceEventRender);
			
			elementOuterWidth = element.outerWidth();
			
			header.updateTitle(currentView.title);
			var today = new Date();
			if (today >= currentView.start && today < currentView.end) {
				header.disableButton('today');
			}else{
				header.enableButton('today');
			}
			
			ignoreWindowResize--;
			currentView.trigger('viewDisplay', _element);
		}
	}
	
	
	
	/* Resizing
	-----------------------------------------------------------------------------*/
	
	
	function updateSize() {
		markSizesDirty();
		if (elementVisible()) {
			calcSize();
			setSize();
			unselect();
			currentView.clearEvents();
			currentView.renderEvents(events);
			currentView.sizeDirty = false;
		}
	}
	
	
	function markSizesDirty() {
		$.each(viewInstances, function(i, inst) {
			inst.sizeDirty = true;
		});
	}
	
	
	function calcSize() {
		if (options.contentHeight) {
			suggestedViewHeight = options.contentHeight;
		}
		else if (options.height) {
			suggestedViewHeight = options.height - (headerElement ? headerElement.height() : 0) - vsides(content);
		}
		else {
			suggestedViewHeight = Math.round(content.width() / Math.max(options.aspectRatio, .5));
		}
	}
	
	
	function setSize(dateChanged) { // todo: dateChanged?
		ignoreWindowResize++;
		currentView.setHeight(suggestedViewHeight, dateChanged);
		if (absoluteViewElement) {
			absoluteViewElement.css('position', 'relative');
			absoluteViewElement = null;
		}
		currentView.setWidth(content.width(), dateChanged);
		ignoreWindowResize--;
	}
	
	
	function windowResize() {
		if (!ignoreWindowResize) {
			if (currentView.start) { // view has already been rendered
				var uid = ++resizeUID;
				setTimeout(function() { // add a delay
					if (uid == resizeUID && !ignoreWindowResize && elementVisible()) {
						if (elementOuterWidth != (elementOuterWidth = element.outerWidth())) {
							ignoreWindowResize++; // in case the windowResize callback changes the height
							updateSize();
							currentView.trigger('windowResize', _element);
							ignoreWindowResize--;
						}
					}
				}, 200);
			}else{
				// calendar must have been initialized in a 0x0 iframe that has just been resized
				lateRender();
			}
		}
	}
	
	
	
	/* Event Fetching/Rendering
	-----------------------------------------------------------------------------*/
	
	
	// fetches events if necessary, rerenders events if necessary (or if forced)
	function updateEvents(forceRender) {
		if (!options.lazyFetching || isFetchNeeded(currentView.visStart, currentView.visEnd)) {
			refetchEvents();
		}
		else if (forceRender) {
			rerenderEvents();
		}
	}
	
	
	function refetchEvents() {
		fetchEvents(currentView.visStart, currentView.visEnd); // will call reportEvents
	}
	
	
	// called when event data arrives
	function reportEvents(_events) {
		events = _events;
		rerenderEvents();
	}
	
	
	// called when a single event's data has been changed
	function reportEventChange(eventID) {
		rerenderEvents(eventID);
	}
	
	
	// attempts to rerenderEvents
	function rerenderEvents(modifiedEventID) {
		markEventsDirty();
		if (elementVisible()) {
			currentView.clearEvents();
			currentView.renderEvents(events, modifiedEventID);
			currentView.eventsDirty = false;
		}
	}
	
	
	function markEventsDirty() {
		$.each(viewInstances, function(i, inst) {
			inst.eventsDirty = true;
		});
	}
	


	/* Selection
	-----------------------------------------------------------------------------*/
	

	function select(start, end, allDay) {
		currentView.select(start, end, allDay===undefined ? true : allDay);
	}
	

	function unselect() { // safe to be called before renderView
		if (currentView) {
			currentView.unselect();
		}
	}
	
	
	
	/* Date
	-----------------------------------------------------------------------------*/
	
	
	function prev() {
		renderView(-1);
	}
	
	
	function next() {
		renderView(1);
	}
	
	
	function prevYear() {
		addYears(date, -1);
		renderView();
	}
	
	
	function nextYear() {
		addYears(date, 1);
		renderView();
	}
	
	
	function today() {
		date = new Date();
		renderView();
	}
	
	
	function gotoDate(year, month, dateOfMonth) {
		if (year instanceof Date) {
			date = cloneDate(year); // provided 1 argument, a Date
		}else{
			setYMD(date, year, month, dateOfMonth);
		}
		renderView();
	}
	
	
	function incrementDate(years, months, days) {
		if (years !== undefined) {
			addYears(date, years);
		}
		if (months !== undefined) {
			addMonths(date, months);
		}
		if (days !== undefined) {
			addDays(date, days);
		}
		renderView();
	}
	
	
	function getDate() {
		return cloneDate(date);
	}
	
	
	
	/* Misc
	-----------------------------------------------------------------------------*/
	
	
	function getView() {
		return currentView;
	}
	
	
	function option(name, value) {
		if (value === undefined) {
			return options[name];
		}
		if (name == 'height' || name == 'contentHeight' || name == 'aspectRatio') {
			options[name] = value;
			updateSize();
		}
	}
	
	
	function trigger(name, thisObj) {
		if (options[name]) {
			return options[name].apply(
				thisObj || _element,
				Array.prototype.slice.call(arguments, 2)
			);
		}
	}
	
	
	
	/* External Dragging
	------------------------------------------------------------------------*/
	
	if (options.droppable) {
		$(document)
			.bind('dragstart', function(ev, ui) {
				var _e = ev.target;
				var e = $(_e);
				if (!e.parents('.fc').length) { // not already inside a calendar
					var accept = options.dropAccept;
					if ($.isFunction(accept) ? accept.call(_e, e) : e.is(accept)) {
						_dragElement = _e;
						currentView.dragStart(_dragElement, ev, ui);
					}
				}
			})
			.bind('dragstop', function(ev, ui) {
				if (_dragElement) {
					currentView.dragStop(_dragElement, ev, ui);
					_dragElement = null;
				}
			});
	}
	

}

;;

function Header(calendar, options) {
	var t = this;
	
	
	// exports
	t.render = render;
	t.destroy = destroy;
	t.updateTitle = updateTitle;
	t.activateButton = activateButton;
	t.deactivateButton = deactivateButton;
	t.disableButton = disableButton;
	t.enableButton = enableButton;
	
	
	// locals
	var element = $([]);
	var tm;
	


	function render() {
		tm = options.theme ? 'ui' : 'fc';
		var sections = options.header;
		if (sections) {
			element = $("<table class='fc-header' style='width:100%'/>")
				.append(
					$("<tr/>")
						.append(renderSection('left'))
						.append(renderSection('center'))
						.append(renderSection('right'))
				);
			return element;
		}
	}
	
	
	function destroy() {
		element.remove();
	}
	
	
	function renderSection(position) {
		var e = $("<td class='fc-header-" + position + "'/>");
		var buttonStr = options.header[position];
		if (buttonStr) {
			$.each(buttonStr.split(' '), function(i) {
				if (i > 0) {
					e.append("<span class='fc-header-space'/>");
				}
				var prevButton;
				$.each(this.split(','), function(j, buttonName) {
					if (buttonName == 'title') {
						e.append("<span class='fc-header-title'><h2>&nbsp;</h2></span>");
						if (prevButton) {
							prevButton.addClass(tm + '-corner-right');
						}
						prevButton = null;
					}else{
						var buttonClick;
						if (calendar[buttonName]) {
							buttonClick = calendar[buttonName]; // calendar method
						}
						else if (fcViews[buttonName]) {
							buttonClick = function() {
								button.removeClass(tm + '-state-hover'); // forget why
								calendar.changeView(buttonName);
							};
						}
						if (buttonClick) {
							var icon = options.theme ? smartProperty(options.buttonIcons, buttonName) : null; // why are we using smartProperty here?
							var text = smartProperty(options.buttonText, buttonName); // why are we using smartProperty here?
							var button = $(
								"<span class='fc-button fc-button-" + buttonName + " " + tm + "-state-default'>" +
									(icon ?
										"<span class='fc-icon-wrap'>" +
											"<span class='ui-icon ui-icon-" + icon + "'/>" +
										"</span>" :
										text
										) +
								"</span>"
								)
								.click(function() {
									if (!button.hasClass(tm + '-state-disabled')) {
										buttonClick();
									}
								})
								.mousedown(function() {
									button
										.not('.' + tm + '-state-active')
										.not('.' + tm + '-state-disabled')
										.addClass(tm + '-state-down');
								})
								.mouseup(function() {
									button.removeClass(tm + '-state-down');
								})
								.hover(
									function() {
										button
											.not('.' + tm + '-state-active')
											.not('.' + tm + '-state-disabled')
											.addClass(tm + '-state-hover');
									},
									function() {
										button
											.removeClass(tm + '-state-hover')
											.removeClass(tm + '-state-down');
									}
								)
								.appendTo(e);
							disableTextSelection(button);
							if (!prevButton) {
								button.addClass(tm + '-corner-left');
							}
							prevButton = button;
						}
					}
				});
				if (prevButton) {
					prevButton.addClass(tm + '-corner-right');
				}
			});
		}
		return e;
	}
	
	
	function updateTitle(html) {
		element.find('h2')
			.html(html);
	}
	
	
	function activateButton(buttonName) {
		element.find('span.fc-button-' + buttonName)
			.addClass(tm + '-state-active');
	}
	
	
	function deactivateButton(buttonName) {
		element.find('span.fc-button-' + buttonName)
			.removeClass(tm + '-state-active');
	}
	
	
	function disableButton(buttonName) {
		element.find('span.fc-button-' + buttonName)
			.addClass(tm + '-state-disabled');
	}
	
	
	function enableButton(buttonName) {
		element.find('span.fc-button-' + buttonName)
			.removeClass(tm + '-state-disabled');
	}


}

;;

fc.sourceNormalizers = [];
fc.sourceFetchers = [];

var ajaxDefaults = {
	dataType: 'json',
	cache: false
};

var eventGUID = 1;


function EventManager(options, _sources) {
	var t = this;
	
	
	// exports
	t.isFetchNeeded = isFetchNeeded;
	t.fetchEvents = fetchEvents;
	t.addEventSource = addEventSource;
	t.removeEventSource = removeEventSource;
	t.updateEvent = updateEvent;
	t.renderEvent = renderEvent;
	t.removeEvents = removeEvents;
	t.clientEvents = clientEvents;
	t.normalizeEvent = normalizeEvent;
	
	
	// imports
	var trigger = t.trigger;
	var getView = t.getView;
	var reportEvents = t.reportEvents;
	
	
	// locals
	var stickySource = { events: [] };
	var sources = [ stickySource ];
	var rangeStart, rangeEnd;
	var currentFetchID = 0;
	var pendingSourceCnt = 0;
	var loadingLevel = 0;
	var cache = [];
	
	
	for (var i=0; i<_sources.length; i++) {
		_addEventSource(_sources[i]);
	}
	
	
	
	/* Fetching
	-----------------------------------------------------------------------------*/
	
	
	function isFetchNeeded(start, end) {
		return !rangeStart || start < rangeStart || end > rangeEnd;
	}
	
	
	function fetchEvents(start, end) {
		rangeStart = start;
		rangeEnd = end;
		cache = [];
		var fetchID = ++currentFetchID;
		var len = sources.length;
		pendingSourceCnt = len;
		for (var i=0; i<len; i++) {
			fetchEventSource(sources[i], fetchID);
		}
	}
	
	
	function fetchEventSource(source, fetchID) {
		_fetchEventSource(source, function(events) {
			if (fetchID == currentFetchID) {
				if (events) {

					if (options.eventDataTransform) {
						events = $.map(events, options.eventDataTransform);
					}
					if (source.eventDataTransform) {
						events = $.map(events, source.eventDataTransform);
					}
					// TODO: this technique is not ideal for static array event sources.
					//  For arrays, we'll want to process all events right in the beginning, then never again.
				
					for (var i=0; i<events.length; i++) {
						events[i].source = source;
						normalizeEvent(events[i]);
					}
					cache = cache.concat(events);
				}
				pendingSourceCnt--;
				if (!pendingSourceCnt) {
					reportEvents(cache);
				}
			}
		});
	}
	
	
	function _fetchEventSource(source, callback) {
		var i;
		var fetchers = fc.sourceFetchers;
		var res;
		for (i=0; i<fetchers.length; i++) {
			res = fetchers[i](source, rangeStart, rangeEnd, callback);
			if (res === true) {
				// the fetcher is in charge. made its own async request
				return;
			}
			else if (typeof res == 'object') {
				// the fetcher returned a new source. process it
				_fetchEventSource(res, callback);
				return;
			}
		}
		var events = source.events;
		if (events) {
			if ($.isFunction(events)) {
				pushLoading();
				events(cloneDate(rangeStart), cloneDate(rangeEnd), function(events) {
					callback(events);
					popLoading();
				});
			}
			else if ($.isArray(events)) {
				callback(events);
			}
			else {
				callback();
			}
		}else{
			var url = source.url;
			if (url) {
				var success = source.success;
				var error = source.error;
				var complete = source.complete;
				var data = $.extend({}, source.data || {});
				var startParam = firstDefined(source.startParam, options.startParam);
				var endParam = firstDefined(source.endParam, options.endParam);
				if (startParam) {
					data[startParam] = Math.round(+rangeStart / 1000);
				}
				if (endParam) {
					data[endParam] = Math.round(+rangeEnd / 1000);
				}
				pushLoading();
				$.ajax($.extend({}, ajaxDefaults, source, {
					data: data,
					success: function(events) {
						events = events || [];
						var res = applyAll(success, this, arguments);
						if ($.isArray(res)) {
							events = res;
						}
						callback(events);
					},
					error: function() {
						applyAll(error, this, arguments);
						callback();
					},
					complete: function() {
						applyAll(complete, this, arguments);
						popLoading();
					}
				}));
			}else{
				callback();
			}
		}
	}
	
	
	
	/* Sources
	-----------------------------------------------------------------------------*/
	

	function addEventSource(source) {
		source = _addEventSource(source);
		if (source) {
			pendingSourceCnt++;
			fetchEventSource(source, currentFetchID); // will eventually call reportEvents
		}
	}
	
	
	function _addEventSource(source) {
		if ($.isFunction(source) || $.isArray(source)) {
			source = { events: source };
		}
		else if (typeof source == 'string') {
			source = { url: source };
		}
		if (typeof source == 'object') {
			normalizeSource(source);
			sources.push(source);
			return source;
		}
	}
	

	function removeEventSource(source) {
		sources = $.grep(sources, function(src) {
			return !isSourcesEqual(src, source);
		});
		// remove all client events from that source
		cache = $.grep(cache, function(e) {
			return !isSourcesEqual(e.source, source);
		});
		reportEvents(cache);
	}
	
	
	
	/* Manipulation
	-----------------------------------------------------------------------------*/
	
	
	function updateEvent(event) { // update an existing event
		var i, len = cache.length, e,
			defaultEventEnd = getView().defaultEventEnd, // getView???
			startDelta = event.start - event._start,
			endDelta = event.end ?
				(event.end - (event._end || defaultEventEnd(event))) // event._end would be null if event.end
				: 0;                                                      // was null and event was just resized
		for (i=0; i<len; i++) {
			e = cache[i];
			if (e._id == event._id && e != event) {
				e.start = new Date(+e.start + startDelta);
				if (event.end) {
					if (e.end) {
						e.end = new Date(+e.end + endDelta);
					}else{
						e.end = new Date(+defaultEventEnd(e) + endDelta);
					}
				}else{
					e.end = null;
				}
				e.title = event.title;
				e.url = event.url;
				e.allDay = event.allDay;
				e.className = event.className;
				e.editable = event.editable;
				e.color = event.color;
				e.backgroudColor = event.backgroudColor;
				e.borderColor = event.borderColor;
				e.textColor = event.textColor;
				normalizeEvent(e);
			}
		}
		normalizeEvent(event);
		reportEvents(cache);
	}
	
	
	function renderEvent(event, stick) {
		normalizeEvent(event);
		if (!event.source) {
			if (stick) {
				stickySource.events.push(event);
				event.source = stickySource;
			}
			cache.push(event);
		}
		reportEvents(cache);
	}
	
	
	function removeEvents(filter) {
		if (!filter) { // remove all
			cache = [];
			// clear all array sources
			for (var i=0; i<sources.length; i++) {
				if ($.isArray(sources[i].events)) {
					sources[i].events = [];
				}
			}
		}else{
			if (!$.isFunction(filter)) { // an event ID
				var id = filter + '';
				filter = function(e) {
					return e._id == id;
				};
			}
			cache = $.grep(cache, filter, true);
			// remove events from array sources
			for (var i=0; i<sources.length; i++) {
				if ($.isArray(sources[i].events)) {
					sources[i].events = $.grep(sources[i].events, filter, true);
				}
			}
		}
		reportEvents(cache);
	}
	
	
	function clientEvents(filter) {
		if ($.isFunction(filter)) {
			return $.grep(cache, filter);
		}
		else if (filter) { // an event ID
			filter += '';
			return $.grep(cache, function(e) {
				return e._id == filter;
			});
		}
		return cache; // else, return all
	}
	
	
	
	/* Loading State
	-----------------------------------------------------------------------------*/
	
	
	function pushLoading() {
		if (!loadingLevel++) {
			trigger('loading', null, true);
		}
	}
	
	
	function popLoading() {
		if (!--loadingLevel) {
			trigger('loading', null, false);
		}
	}
	
	
	
	/* Event Normalization
	-----------------------------------------------------------------------------*/
	
	
	function normalizeEvent(event) {
		var source = event.source || {};
		var ignoreTimezone = firstDefined(source.ignoreTimezone, options.ignoreTimezone);
		event._id = event._id || (event.id === undefined ? '_fc' + eventGUID++ : event.id + '');
		if (event.date) {
			if (!event.start) {
				event.start = event.date;
			}
			delete event.date;
		}
		event._start = cloneDate(event.start = parseDate(event.start, ignoreTimezone));
		event.end = parseDate(event.end, ignoreTimezone);
		if (event.end && event.end <= event.start) {
			event.end = null;
		}
		event._end = event.end ? cloneDate(event.end) : null;
		if (event.allDay === undefined) {
			event.allDay = firstDefined(source.allDayDefault, options.allDayDefault);
		}
		if (event.className) {
			if (typeof event.className == 'string') {
				event.className = event.className.split(/\s+/);
			}
		}else{
			event.className = [];
		}
		// TODO: if there is no start date, return false to indicate an invalid event
	}
	
	
	
	/* Utils
	------------------------------------------------------------------------------*/
	
	
	function normalizeSource(source) {
		if (source.className) {
			// TODO: repeat code, same code for event classNames
			if (typeof source.className == 'string') {
				source.className = source.className.split(/\s+/);
			}
		}else{
			source.className = [];
		}
		var normalizers = fc.sourceNormalizers;
		for (var i=0; i<normalizers.length; i++) {
			normalizers[i](source);
		}
	}
	
	
	function isSourcesEqual(source1, source2) {
		return source1 && source2 && getSourcePrimitive(source1) == getSourcePrimitive(source2);
	}
	
	
	function getSourcePrimitive(source) {
		return ((typeof source == 'object') ? (source.events || source.url) : '') || source;
	}


}

;;


fc.addDays = addDays;
fc.cloneDate = cloneDate;
fc.parseDate = parseDate;
fc.parseISO8601 = parseISO8601;
fc.parseTime = parseTime;
fc.formatDate = formatDate;
fc.formatDates = formatDates;



/* Date Math
-----------------------------------------------------------------------------*/

var dayIDs = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'],
	DAY_MS = 86400000,
	HOUR_MS = 3600000,
	MINUTE_MS = 60000;
	

function addYears(d, n, keepTime) {
	d.setFullYear(d.getFullYear() + n);
	if (!keepTime) {
		clearTime(d);
	}
	return d;
}


function addMonths(d, n, keepTime) { // prevents day overflow/underflow
	if (+d) { // prevent infinite looping on invalid dates
		var m = d.getMonth() + n,
			check = cloneDate(d);
		check.setDate(1);
		check.setMonth(m);
		d.setMonth(m);
		if (!keepTime) {
			clearTime(d);
		}
		while (d.getMonth() != check.getMonth()) {
			d.setDate(d.getDate() + (d < check ? 1 : -1));
		}
	}
	return d;
}


function addDays(d, n, keepTime) { // deals with daylight savings
	if (+d) {
		var dd = d.getDate() + n,
			check = cloneDate(d);
		check.setHours(9); // set to middle of day
		check.setDate(dd);
		d.setDate(dd);
		if (!keepTime) {
			clearTime(d);
		}
		fixDate(d, check);
	}
	return d;
}


function fixDate(d, check) { // force d to be on check's YMD, for daylight savings purposes
	if (+d) { // prevent infinite looping on invalid dates
		while (d.getDate() != check.getDate()) {
			d.setTime(+d + (d < check ? 1 : -1) * HOUR_MS);
		}
	}
}


function addMinutes(d, n) {
	d.setMinutes(d.getMinutes() + n);
	return d;
}


function clearTime(d) {
	d.setHours(0);
	d.setMinutes(0);
	d.setSeconds(0); 
	d.setMilliseconds(0);
	return d;
}


function cloneDate(d, dontKeepTime) {
	if (dontKeepTime) {
		return clearTime(new Date(+d));
	}
	return new Date(+d);
}


function zeroDate() { // returns a Date with time 00:00:00 and dateOfMonth=1
	var i=0, d;
	do {
		d = new Date(1970, i++, 1);
	} while (d.getHours()); // != 0
	return d;
}


function skipWeekend(date, inc, excl) {
	inc = inc || 1;
	while (!date.getDay() || (excl && date.getDay()==1 || !excl && date.getDay()==6)) {
		addDays(date, inc);
	}
	return date;
}


function dayDiff(d1, d2) { // d1 - d2
	return Math.round((cloneDate(d1, true) - cloneDate(d2, true)) / DAY_MS);
}


function setYMD(date, y, m, d) {
	if (y !== undefined && y != date.getFullYear()) {
		date.setDate(1);
		date.setMonth(0);
		date.setFullYear(y);
	}
	if (m !== undefined && m != date.getMonth()) {
		date.setDate(1);
		date.setMonth(m);
	}
	if (d !== undefined) {
		date.setDate(d);
	}
}



/* Date Parsing
-----------------------------------------------------------------------------*/


function parseDate(s, ignoreTimezone) { // ignoreTimezone defaults to true
	if (typeof s == 'object') { // already a Date object
		return s;
	}
	if (typeof s == 'number') { // a UNIX timestamp
		return new Date(s * 1000);
	}
	if (typeof s == 'string') {
		if (s.match(/^\d+(\.\d+)?$/)) { // a UNIX timestamp
			return new Date(parseFloat(s) * 1000);
		}
		if (ignoreTimezone === undefined) {
			ignoreTimezone = true;
		}
		return parseISO8601(s, ignoreTimezone) || (s ? new Date(s) : null);
	}
	// TODO: never return invalid dates (like from new Date(<string>)), return null instead
	return null;
}


function parseISO8601(s, ignoreTimezone) { // ignoreTimezone defaults to false
	// derived from http://delete.me.uk/2005/03/iso8601.html
	// TODO: for a know glitch/feature, read tests/issue_206_parseDate_dst.html
	var m = s.match(/^([0-9]{4})(-([0-9]{2})(-([0-9]{2})([T ]([0-9]{2}):([0-9]{2})(:([0-9]{2})(\.([0-9]+))?)?(Z|(([-+])([0-9]{2})(:?([0-9]{2}))?))?)?)?)?$/);
	if (!m) {
		return null;
	}
	var date = new Date(m[1], 0, 1);
	if (ignoreTimezone || !m[13]) {
		var check = new Date(m[1], 0, 1, 9, 0);
		if (m[3]) {
			date.setMonth(m[3] - 1);
			check.setMonth(m[3] - 1);
		}
		if (m[5]) {
			date.setDate(m[5]);
			check.setDate(m[5]);
		}
		fixDate(date, check);
		if (m[7]) {
			date.setHours(m[7]);
		}
		if (m[8]) {
			date.setMinutes(m[8]);
		}
		if (m[10]) {
			date.setSeconds(m[10]);
		}
		if (m[12]) {
			date.setMilliseconds(Number("0." + m[12]) * 1000);
		}
		fixDate(date, check);
	}else{
		date.setUTCFullYear(
			m[1],
			m[3] ? m[3] - 1 : 0,
			m[5] || 1
		);
		date.setUTCHours(
			m[7] || 0,
			m[8] || 0,
			m[10] || 0,
			m[12] ? Number("0." + m[12]) * 1000 : 0
		);
		if (m[14]) {
			var offset = Number(m[16]) * 60 + (m[18] ? Number(m[18]) : 0);
			offset *= m[15] == '-' ? 1 : -1;
			date = new Date(+date + (offset * 60 * 1000));
		}
	}
	return date;
}


function parseTime(s) { // returns minutes since start of day
	if (typeof s == 'number') { // an hour
		return s * 60;
	}
	if (typeof s == 'object') { // a Date object
		return s.getHours() * 60 + s.getMinutes();
	}
	var m = s.match(/(\d+)(?::(\d+))?\s*(\w+)?/);
	if (m) {
		var h = parseInt(m[1], 10);
		if (m[3]) {
			h %= 12;
			if (m[3].toLowerCase().charAt(0) == 'p') {
				h += 12;
			}
		}
		return h * 60 + (m[2] ? parseInt(m[2], 10) : 0);
	}
}



/* Date Formatting
-----------------------------------------------------------------------------*/
// TODO: use same function formatDate(date, [date2], format, [options])


function formatDate(date, format, options) {
	return formatDates(date, null, format, options);
}


function formatDates(date1, date2, format, options) {
	options = options || defaults;
	var date = date1,
		otherDate = date2,
		i, len = format.length, c,
		i2, formatter,
		res = '';
	for (i=0; i<len; i++) {
		c = format.charAt(i);
		if (c == "'") {
			for (i2=i+1; i2<len; i2++) {
				if (format.charAt(i2) == "'") {
					if (date) {
						if (i2 == i+1) {
							res += "'";
						}else{
							res += format.substring(i+1, i2);
						}
						i = i2;
					}
					break;
				}
			}
		}
		else if (c == '(') {
			for (i2=i+1; i2<len; i2++) {
				if (format.charAt(i2) == ')') {
					var subres = formatDate(date, format.substring(i+1, i2), options);
					if (parseInt(subres.replace(/\D/, ''), 10)) {
						res += subres;
					}
					i = i2;
					break;
				}
			}
		}
		else if (c == '[') {
			for (i2=i+1; i2<len; i2++) {
				if (format.charAt(i2) == ']') {
					var subformat = format.substring(i+1, i2);
					var subres = formatDate(date, subformat, options);
					if (subres != formatDate(otherDate, subformat, options)) {
						res += subres;
					}
					i = i2;
					break;
				}
			}
		}
		else if (c == '{') {
			date = date2;
			otherDate = date1;
		}
		else if (c == '}') {
			date = date1;
			otherDate = date2;
		}
		else {
			for (i2=len; i2>i; i2--) {
				if (formatter = dateFormatters[format.substring(i, i2)]) {
					if (date) {
						res += formatter(date, options);
					}
					i = i2 - 1;
					break;
				}
			}
			if (i2 == i) {
				if (date) {
					res += c;
				}
			}
		}
	}
	return res;
};


var dateFormatters = {
	s	: function(d)	{ return d.getSeconds() },
	ss	: function(d)	{ return zeroPad(d.getSeconds()) },
	m	: function(d)	{ return d.getMinutes() },
	mm	: function(d)	{ return zeroPad(d.getMinutes()) },
	h	: function(d)	{ return d.getHours() % 12 || 12 },
	hh	: function(d)	{ return zeroPad(d.getHours() % 12 || 12) },
	H	: function(d)	{ return d.getHours() },
	HH	: function(d)	{ return zeroPad(d.getHours()) },
	d	: function(d)	{ return d.getDate() },
	dd	: function(d)	{ return zeroPad(d.getDate()) },
	ddd	: function(d,o)	{ return o.dayNamesShort[d.getDay()] },
	dddd: function(d,o)	{ return o.dayNames[d.getDay()] },
	M	: function(d)	{ return d.getMonth() + 1 },
	MM	: function(d)	{ return zeroPad(d.getMonth() + 1) },
	MMM	: function(d,o)	{ return o.monthNamesShort[d.getMonth()] },
	MMMM: function(d,o)	{ return o.monthNames[d.getMonth()] },
	yy	: function(d)	{ return (d.getFullYear()+'').substring(2) },
	yyyy: function(d)	{ return d.getFullYear() },
	t	: function(d)	{ return d.getHours() < 12 ? 'a' : 'p' },
	tt	: function(d)	{ return d.getHours() < 12 ? 'am' : 'pm' },
	T	: function(d)	{ return d.getHours() < 12 ? 'A' : 'P' },
	TT	: function(d)	{ return d.getHours() < 12 ? 'AM' : 'PM' },
	u	: function(d)	{ return formatDate(d, "yyyy-MM-dd'T'HH:mm:ss'Z'") },
	S	: function(d)	{
		var date = d.getDate();
		if (date > 10 && date < 20) {
			return 'th';
		}
		return ['st', 'nd', 'rd'][date%10-1] || 'th';
	},
	w   : function(d, o) { // local
		return o.weekNumberCalculation(d);
	},
	W   : function(d) { // ISO
		return iso8601Week(d);
	}
};
fc.dateFormatters = dateFormatters;


/* thanks jQuery UI (https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.datepicker.js)
 * 
 * Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
 * @param  date  Date - the date to get the week for
 * @return  number - the number of the week within the year that contains this date
 */
function iso8601Week(date) {
	var time;
	var checkDate = new Date(date.getTime());

	// Find Thursday of this week starting on Monday
	checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));

	time = checkDate.getTime();
	checkDate.setMonth(0); // Compare with Jan 1
	checkDate.setDate(1);
	return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
}


;;

fc.applyAll = applyAll;


/* Event Date Math
-----------------------------------------------------------------------------*/


function exclEndDay(event) {
	if (event.end) {
		return _exclEndDay(event.end, event.allDay);
	}else{
		return addDays(cloneDate(event.start), 1);
	}
}


function _exclEndDay(end, allDay) {
	end = cloneDate(end);
	return allDay || end.getHours() || end.getMinutes() ? addDays(end, 1) : clearTime(end);
}


function segCmp(a, b) {
	return (b.msLength - a.msLength) * 100 + (a.event.start - b.event.start);
}


function segsCollide(seg1, seg2) {
	return seg1.end > seg2.start && seg1.start < seg2.end;
}



/* Event Sorting
-----------------------------------------------------------------------------*/


// event rendering utilities
function sliceSegs(events, visEventEnds, start, end) {
	var segs = [],
		i, len=events.length, event,
		eventStart, eventEnd,
		segStart, segEnd,
		isStart, isEnd;
	for (i=0; i<len; i++) {
		event = events[i];
		eventStart = event.start;
		eventEnd = visEventEnds[i];
		if (eventEnd > start && eventStart < end) {
			if (eventStart < start) {
				segStart = cloneDate(start);
				isStart = false;
			}else{
				segStart = eventStart;
				isStart = true;
			}
			if (eventEnd > end) {
				segEnd = cloneDate(end);
				isEnd = false;
			}else{
				segEnd = eventEnd;
				isEnd = true;
			}
			segs.push({
				event: event,
				start: segStart,
				end: segEnd,
				isStart: isStart,
				isEnd: isEnd,
				msLength: segEnd - segStart
			});
		}
	}
	return segs.sort(segCmp);
}


// event rendering calculation utilities
function stackSegs(segs) {
	var levels = [],
		i, len = segs.length, seg,
		j, collide, k;
	for (i=0; i<len; i++) {
		seg = segs[i];
		j = 0; // the level index where seg should belong
		while (true) {
			collide = false;
			if (levels[j]) {
				for (k=0; k<levels[j].length; k++) {
					if (segsCollide(levels[j][k], seg)) {
						collide = true;
						break;
					}
				}
			}
			if (collide) {
				j++;
			}else{
				break;
			}
		}
		if (levels[j]) {
			levels[j].push(seg);
		}else{
			levels[j] = [seg];
		}
	}
	return levels;
}



/* Event Element Binding
-----------------------------------------------------------------------------*/


function lazySegBind(container, segs, bindHandlers) {
	container.unbind('mouseover').mouseover(function(ev) {
		var parent=ev.target, e,
			i, seg;
		while (parent != this) {
			e = parent;
			parent = parent.parentNode;
		}
		if ((i = e._fci) !== undefined) {
			e._fci = undefined;
			seg = segs[i];
			bindHandlers(seg.event, seg.element, seg);
			$(ev.target).trigger(ev);
		}
		ev.stopPropagation();
	});
}



/* Element Dimensions
-----------------------------------------------------------------------------*/


function setOuterWidth(element, width, includeMargins) {
	for (var i=0, e; i<element.length; i++) {
		e = $(element[i]);
		e.width(Math.max(0, width - hsides(e, includeMargins)));
	}
}


function setOuterHeight(element, height, includeMargins) {
	for (var i=0, e; i<element.length; i++) {
		e = $(element[i]);
		e.height(Math.max(0, height - vsides(e, includeMargins)));
	}
}


function hsides(element, includeMargins) {
	return hpadding(element) + hborders(element) + (includeMargins ? hmargins(element) : 0);
}


function hpadding(element) {
	return (parseFloat($.css(element[0], 'paddingLeft', true)) || 0) +
	       (parseFloat($.css(element[0], 'paddingRight', true)) || 0);
}


function hmargins(element) {
	return (parseFloat($.css(element[0], 'marginLeft', true)) || 0) +
	       (parseFloat($.css(element[0], 'marginRight', true)) || 0);
}


function hborders(element) {
	return (parseFloat($.css(element[0], 'borderLeftWidth', true)) || 0) +
	       (parseFloat($.css(element[0], 'borderRightWidth', true)) || 0);
}


function vsides(element, includeMargins) {
	return vpadding(element) +  vborders(element) + (includeMargins ? vmargins(element) : 0);
}


function vpadding(element) {
	return (parseFloat($.css(element[0], 'paddingTop', true)) || 0) +
	       (parseFloat($.css(element[0], 'paddingBottom', true)) || 0);
}


function vmargins(element) {
	return (parseFloat($.css(element[0], 'marginTop', true)) || 0) +
	       (parseFloat($.css(element[0], 'marginBottom', true)) || 0);
}


function vborders(element) {
	return (parseFloat($.css(element[0], 'borderTopWidth', true)) || 0) +
	       (parseFloat($.css(element[0], 'borderBottomWidth', true)) || 0);
}


function setMinHeight(element, height) {
	height = (typeof height == 'number' ? height + 'px' : height);
	element.each(function(i, _element) {
		_element.style.cssText += ';min-height:' + height + ';_height:' + height;
		// why can't we just use .css() ? i forget
	});
}



/* Misc Utils
-----------------------------------------------------------------------------*/


//TODO: arraySlice
//TODO: isFunction, grep ?


function noop() { }


function cmp(a, b) {
	return a - b;
}


function arrayMax(a) {
	return Math.max.apply(Math, a);
}


function zeroPad(n) {
	return (n < 10 ? '0' : '') + n;
}


function smartProperty(obj, name) { // get a camel-cased/namespaced property of an object
	if (obj[name] !== undefined) {
		return obj[name];
	}
	var parts = name.split(/(?=[A-Z])/),
		i=parts.length-1, res;
	for (; i>=0; i--) {
		res = obj[parts[i].toLowerCase()];
		if (res !== undefined) {
			return res;
		}
	}
	return obj[''];
}


function htmlEscape(s) {
	return s.replace(/&/g, '&amp;')
		.replace(/</g, '&lt;')
		.replace(/>/g, '&gt;')
		.replace(/'/g, '&#039;')
		.replace(/"/g, '&quot;')
		.replace(/\n/g, '<br />');
}


function cssKey(_element) {
	return _element.id + '/' + _element.className + '/' + _element.style.cssText.replace(/(^|;)\s*(top|left|width|height)\s*:[^;]*/ig, '');
}


function disableTextSelection(element) {
	element
		.attr('unselectable', 'on')
		.css('MozUserSelect', 'none')
		.bind('selectstart.ui', function() { return false; });
}


/*
function enableTextSelection(element) {
	element
		.attr('unselectable', 'off')
		.css('MozUserSelect', '')
		.unbind('selectstart.ui');
}
*/


function markFirstLast(e) {
	e.children()
		.removeClass('fc-first fc-last')
		.filter(':first-child')
			.addClass('fc-first')
		.end()
		.filter(':last-child')
			.addClass('fc-last');
}


function setDayID(cell, date) {
	cell.each(function(i, _cell) {
		_cell.className = _cell.className.replace(/^fc-\w*/, 'fc-' + dayIDs[date.getDay()]);
		// TODO: make a way that doesn't rely on order of classes
	});
}


function getSkinCss(event, opt) {
	var source = event.source || {};
	var eventColor = event.color;
	var sourceColor = source.color;
	var optionColor = opt('eventColor');
	var backgroundColor =
		event.backgroundColor ||
		eventColor ||
		source.backgroundColor ||
		sourceColor ||
		opt('eventBackgroundColor') ||
		optionColor;
	var borderColor =
		event.borderColor ||
		eventColor ||
		source.borderColor ||
		sourceColor ||
		opt('eventBorderColor') ||
		optionColor;
	var textColor =
		event.textColor ||
		source.textColor ||
		opt('eventTextColor');
	var statements = [];
	if (backgroundColor) {
		statements.push('background-color:' + backgroundColor);
	}
	if (borderColor) {
		statements.push('border-color:' + borderColor);
	}
	if (textColor) {
		statements.push('color:' + textColor);
	}
	return statements.join(';');
}


function applyAll(functions, thisObj, args) {
	if ($.isFunction(functions)) {
		functions = [ functions ];
	}
	if (functions) {
		var i;
		var ret;
		for (i=0; i<functions.length; i++) {
			ret = functions[i].apply(thisObj, args) || ret;
		}
		return ret;
	}
}


function firstDefined() {
	for (var i=0; i<arguments.length; i++) {
		if (arguments[i] !== undefined) {
			return arguments[i];
		}
	}
}


;;

fcViews.month = MonthView;

function MonthView(element, calendar) {
	var t = this;
	
	
	// exports
	t.render = render;
	
	
	// imports
	BasicView.call(t, element, calendar, 'month');
	var opt = t.opt;
	var renderBasic = t.renderBasic;
	var formatDate = calendar.formatDate;
	
	
	
	function render(date, delta) {
		if (delta) {
			addMonths(date, delta);
			date.setDate(1);
		}
		var start = cloneDate(date, true);
		start.setDate(1);
		var end = addMonths(cloneDate(start), 1);
		var visStart = cloneDate(start);
		var visEnd = cloneDate(end);
		var firstDay = opt('firstDay');
		var nwe = opt('weekends') ? 0 : 1;
		if (nwe) {
			skipWeekend(visStart);
			skipWeekend(visEnd, -1, true);
		}
		addDays(visStart, -((visStart.getDay() - Math.max(firstDay, nwe) + 7) % 7));
		addDays(visEnd, (7 - visEnd.getDay() + Math.max(firstDay, nwe)) % 7);
		var rowCnt = Math.round((visEnd - visStart) / (DAY_MS * 7));
		if (opt('weekMode') == 'fixed') {
			addDays(visEnd, (6 - rowCnt) * 7);
			rowCnt = 6;
		}
		t.title = formatDate(start, opt('titleFormat'));
		t.start = start;
		t.end = end;
		t.visStart = visStart;
		t.visEnd = visEnd;
		renderBasic(rowCnt, nwe ? 5 : 7, true);
	}
	
	
}

;;

fcViews.basicWeek = BasicWeekView;

function BasicWeekView(element, calendar) {
	var t = this;
	
	
	// exports
	t.render = render;
	
	
	// imports
	BasicView.call(t, element, calendar, 'basicWeek');
	var opt = t.opt;
	var renderBasic = t.renderBasic;
	var formatDates = calendar.formatDates;
	
	
	
	function render(date, delta) {
		if (delta) {
			addDays(date, delta * 7);
		}
		var start = addDays(cloneDate(date), -((date.getDay() - opt('firstDay') + 7) % 7));
		var end = addDays(cloneDate(start), 7);
		var visStart = cloneDate(start);
		var visEnd = cloneDate(end);
		var weekends = opt('weekends');
		if (!weekends) {
			skipWeekend(visStart);
			skipWeekend(visEnd, -1, true);
		}
		t.title = formatDates(
			visStart,
			addDays(cloneDate(visEnd), -1),
			opt('titleFormat')
		);
		t.start = start;
		t.end = end;
		t.visStart = visStart;
		t.visEnd = visEnd;
		renderBasic(1, weekends ? 7 : 5, false);
	}
	
	
}

;;

fcViews.basicDay = BasicDayView;

//TODO: when calendar's date starts out on a weekend, shouldn't happen


function BasicDayView(element, calendar) {
	var t = this;
	
	
	// exports
	t.render = render;
	
	
	// imports
	BasicView.call(t, element, calendar, 'basicDay');
	var opt = t.opt;
	var renderBasic = t.renderBasic;
	var formatDate = calendar.formatDate;
	
	
	
	function render(date, delta) {
		if (delta) {
			addDays(date, delta);
			if (!opt('weekends')) {
				skipWeekend(date, delta < 0 ? -1 : 1);
			}
		}
		t.title = formatDate(date, opt('titleFormat'));
		t.start = t.visStart = cloneDate(date, true);
		t.end = t.visEnd = addDays(cloneDate(t.start), 1);
		renderBasic(1, 1, false);
	}
	
	
}

;;

setDefaults({
	weekMode: 'fixed'
});


function BasicView(element, calendar, viewName) {
	var t = this;
	
	
	// exports
	t.renderBasic = renderBasic;
	t.setHeight = setHeight;
	t.setWidth = setWidth;
	t.renderDayOverlay = renderDayOverlay;
	t.defaultSelectionEnd = defaultSelectionEnd;
	t.renderSelection = renderSelection;
	t.clearSelection = clearSelection;
	t.reportDayClick = reportDayClick; // for selection (kinda hacky)
	t.dragStart = dragStart;
	t.dragStop = dragStop;
	t.defaultEventEnd = defaultEventEnd;
	t.getHoverListener = function() { return hoverListener };
	t.colContentLeft = colContentLeft;
	t.colContentRight = colContentRight;
	t.dayOfWeekCol = dayOfWeekCol;
	t.dateCell = dateCell;
	t.cellDate = cellDate;
	t.cellIsAllDay = function() { return true };
	t.allDayRow = allDayRow;
	t.allDayBounds = allDayBounds;
	t.getRowCnt = function() { return rowCnt };
	t.getColCnt = function() { return colCnt };
	t.getColWidth = function() { return colWidth };
	t.getDaySegmentContainer = function() { return daySegmentContainer };
	
	
	// imports
	View.call(t, element, calendar, viewName);
	OverlayManager.call(t);
	SelectionManager.call(t);
	BasicEventRenderer.call(t);
	var opt = t.opt;
	var trigger = t.trigger;
	var clearEvents = t.clearEvents;
	var renderOverlay = t.renderOverlay;
	var clearOverlays = t.clearOverlays;
	var daySelectionMousedown = t.daySelectionMousedown;
	var formatDate = calendar.formatDate;
	
	
	// locals
	
	var table;
	var head;
	var headCells;
	var body;
	var bodyRows;
	var bodyCells;
	var bodyFirstCells;
	var bodyCellTopInners;
	var daySegmentContainer;
	
	var viewWidth;
	var viewHeight;
	var colWidth;
	var weekNumberWidth;
	
	var rowCnt, colCnt;
	var coordinateGrid;
	var hoverListener;
	var colContentPositions;
	
	var rtl, dis, dit;
	var firstDay;
	var nwe; // no weekends? a 0 or 1 for easy computations
	var tm;
	var colFormat;
	var showWeekNumbers;
	var weekNumberTitle;
	var weekNumberFormat;
	
	
	
	/* Rendering
	------------------------------------------------------------*/
	
	
	disableTextSelection(element.addClass('fc-grid'));
	
	
	function renderBasic(r, c, showNumbers) {
		rowCnt = r;
		colCnt = c;
		updateOptions();
		var firstTime = !body;
		if (firstTime) {
			buildEventContainer();
		}else{
			clearEvents();
		}
		buildTable(showNumbers);
	}
	
	
	
	function updateOptions() {
		rtl = opt('isRTL');
		if (rtl) {
			dis = -1;
			dit = colCnt - 1;
		}else{
			dis = 1;
			dit = 0;
		}
		firstDay = opt('firstDay');
		nwe = opt('weekends') ? 0 : 1;
		tm = opt('theme') ? 'ui' : 'fc';
		colFormat = opt('columnFormat');

		// week # options. (TODO: bad, logic also in other views)
		showWeekNumbers = opt('weekNumbers');
		weekNumberTitle = opt('weekNumberTitle');
		if (opt('weekNumberCalculation') != 'iso') {
			weekNumberFormat = "w";
		}
		else {
			weekNumberFormat = "W";
		}
	}
	
	
	
	function buildEventContainer() {
		daySegmentContainer =
			$("<div style='position:absolute;z-index:8;top:0;left:0'/>")
				.appendTo(element);
	}
	
	
	
	function buildTable(showNumbers) {
		var html = '';
		var i, j;
		var headerClass = tm + "-widget-header";
		var contentClass = tm + "-widget-content";
		var month = t.start.getMonth();
		var today = clearTime(new Date());
		var cellDate; // not to be confused with local function. TODO: better names
		var cellClasses;
		var cell;

		html += "<table class='fc-border-separate' style='width:100%' cellspacing='0'>" +
		        "<thead>" +
		        "<tr>";

		if (showWeekNumbers) {
			html += "<th class='fc-week-number " + headerClass + "'/>";
		}

		for (i=0; i<colCnt; i++) {
			cellDate = _cellDate(0, i); // a little confusing. cellDate is local variable. _cellDate is private function
			html += "<th class='fc-day-header fc-" + dayIDs[cellDate.getDay()] + " " + headerClass + "'/>";
		}

		html += "</tr>" +
		        "</thead>" +
		        "<tbody>";

		for (i=0; i<rowCnt; i++) {
			html += "<tr class='fc-week'>";

			if (showWeekNumbers) {
				html += "<td class='fc-week-number " + contentClass + "'>" +
				        "<div/>" +
				        "</td>";
			}

			for (j=0; j<colCnt; j++) {
				cellDate = _cellDate(i, j); // a little confusing. cellDate is local variable. _cellDate is private function

				cellClasses = [
					'fc-day',
					'fc-' + dayIDs[cellDate.getDay()],
					contentClass
				];
				if (cellDate.getMonth() != month) {
					cellClasses.push('fc-other-month');
				}
				if (+cellDate == +today) {
					cellClasses.push('fc-today');
					cellClasses.push(tm + '-state-highlight');
				}

				html += "<td" +
				        " class='" + cellClasses.join(' ') + "'" +
				        " data-date='" + formatDate(cellDate, 'yyyy-MM-dd') + "'" +
				        ">" + 
				        "<div>";
				if (showNumbers) {
					html += "<div class='fc-day-number'>" + cellDate.getDate() + "</div>";
				}
				html += "<div class='fc-day-content'>" +
				        "<div style='position:relative'>&nbsp;</div>" +
				        "</div>" +
				        "</div>" +
				        "</td>";
			}

			html += "</tr>";
		}
		html += "</tbody>" +
		        "</table>";

		lockHeight(); // the unlock happens later, in setHeight()...
		if (table) {
			table.remove();
		}
		table = $(html).appendTo(element);

		head = table.find('thead');
		headCells = head.find('.fc-day-header');
		body = table.find('tbody');
		bodyRows = body.find('tr');
		bodyCells = body.find('.fc-day');
		bodyFirstCells = bodyRows.find('td:first-child');
		bodyCellTopInners = bodyRows.eq(0).find('.fc-day-content > div');
		
		markFirstLast(head.add(head.find('tr'))); // marks first+last tr/th's
		markFirstLast(bodyRows); // marks first+last td's
		bodyRows.eq(0).addClass('fc-first');
		bodyRows.filter(':last').addClass('fc-last');
	
		if (showWeekNumbers) {
			head.find('.fc-week-number').text(weekNumberTitle);
		}

		headCells.each(function(i, _cell) {
			var date = indexDate(i);
			$(_cell).text(formatDate(date, colFormat));
		});

		if (showWeekNumbers) {
			body.find('.fc-week-number > div').each(function(i, _cell) {
				var weekStart = _cellDate(i, 0);
				$(_cell).text(formatDate(weekStart, weekNumberFormat));
			});
		}
		
		bodyCells.each(function(i, _cell) {
			var date = indexDate(i);
			trigger('dayRender', t, date, $(_cell));
		});

		dayBind(bodyCells);
	}
	
	
	
	function setHeight(height) {
		viewHeight = height;
		
		var bodyHeight = viewHeight - head.height();
		var rowHeight;
		var rowHeightLast;
		var cell;
			
		if (opt('weekMode') == 'variable') {
			rowHeight = rowHeightLast = Math.floor(bodyHeight / (rowCnt==1 ? 2 : 6));
		}else{
			rowHeight = Math.floor(bodyHeight / rowCnt);
			rowHeightLast = bodyHeight - rowHeight * (rowCnt-1);
		}
		
		bodyFirstCells.each(function(i, _cell) {
			if (i < rowCnt) {
				cell = $(_cell);
				setMinHeight(
					cell.find('> div'),
					(i==rowCnt-1 ? rowHeightLast : rowHeight) - vsides(cell)
				);
			}
		});
		
		unlockHeight();
	}
	
	
	function setWidth(width) {
		viewWidth = width;
		colContentPositions.clear();

		weekNumberWidth = 0;
		if (showWeekNumbers) {
			weekNumberWidth = head.find('th.fc-week-number').outerWidth();
		}

		colWidth = Math.floor((viewWidth - weekNumberWidth) / colCnt);
		setOuterWidth(headCells.slice(0, -1), colWidth);
	}
	
	
	
	/* Day clicking and binding
	-----------------------------------------------------------*/
	
	
	function dayBind(days) {
		days.click(dayClick)
			.mousedown(daySelectionMousedown);
	}
	
	
	function dayClick(ev) {
		if (!opt('selectable')) { // if selectable, SelectionManager will worry about dayClick
			var date = parseISO8601($(this).data('date'));
			trigger('dayClick', this, date, true, ev);
		}
	}
	
	
	
	/* Semi-transparent Overlay Helpers
	------------------------------------------------------*/
	
	
	function renderDayOverlay(overlayStart, overlayEnd, refreshCoordinateGrid) { // overlayEnd is exclusive
		if (refreshCoordinateGrid) {
			coordinateGrid.build();
		}
		var rowStart = cloneDate(t.visStart);
		var rowEnd = addDays(cloneDate(rowStart), colCnt);
		for (var i=0; i<rowCnt; i++) {
			var stretchStart = new Date(Math.max(rowStart, overlayStart));
			var stretchEnd = new Date(Math.min(rowEnd, overlayEnd));
			if (stretchStart < stretchEnd) {
				var colStart, colEnd;
				if (rtl) {
					colStart = dayDiff(stretchEnd, rowStart)*dis+dit+1;
					colEnd = dayDiff(stretchStart, rowStart)*dis+dit+1;
				}else{
					colStart = dayDiff(stretchStart, rowStart);
					colEnd = dayDiff(stretchEnd, rowStart);
				}
				dayBind(
					renderCellOverlay(i, colStart, i, colEnd-1)
				);
			}
			addDays(rowStart, 7);
			addDays(rowEnd, 7);
		}
	}
	
	
	function renderCellOverlay(row0, col0, row1, col1) { // row1,col1 is inclusive
		var rect = coordinateGrid.rect(row0, col0, row1, col1, element);
		return renderOverlay(rect, element);
	}
	
	
	
	/* Selection
	-----------------------------------------------------------------------*/
	
	
	function defaultSelectionEnd(startDate, allDay) {
		return cloneDate(startDate);
	}
	
	
	function renderSelection(startDate, endDate, allDay) {
		renderDayOverlay(startDate, addDays(cloneDate(endDate), 1), true); // rebuild every time???
	}
	
	
	function clearSelection() {
		clearOverlays();
	}
	
	
	function reportDayClick(date, allDay, ev) {
		var cell = dateCell(date);
		var _element = bodyCells[cell.row*colCnt + cell.col];
		trigger('dayClick', _element, date, allDay, ev);
	}
	
	
	
	/* External Dragging
	-----------------------------------------------------------------------*/
	
	
	function dragStart(_dragElement, ev, ui) {
		hoverListener.start(function(cell) {
			clearOverlays();
			if (cell) {
				renderCellOverlay(cell.row, cell.col, cell.row, cell.col);
			}
		}, ev);
	}
	
	
	function dragStop(_dragElement, ev, ui) {
		var cell = hoverListener.stop();
		clearOverlays();
		if (cell) {
			var d = cellDate(cell);
			trigger('drop', _dragElement, d, true, ev, ui);
		}
	}
	
	
	
	/* Utilities
	--------------------------------------------------------*/
	
	
	function defaultEventEnd(event) {
		return cloneDate(event.start);
	}
	
	
	coordinateGrid = new CoordinateGrid(function(rows, cols) {
		var e, n, p;
		headCells.each(function(i, _e) {
			e = $(_e);
			n = e.offset().left;
			if (i) {
				p[1] = n;
			}
			p = [n];
			cols[i] = p;
		});
		p[1] = n + e.outerWidth();
		bodyRows.each(function(i, _e) {
			if (i < rowCnt) {
				e = $(_e);
				n = e.offset().top;
				if (i) {
					p[1] = n;
				}
				p = [n];
				rows[i] = p;
			}
		});
		p[1] = n + e.outerHeight();
	});
	
	
	hoverListener = new HoverListener(coordinateGrid);
	
	
	colContentPositions = new HorizontalPositionCache(function(col) {
		return bodyCellTopInners.eq(col);
	});
	
	
	function colContentLeft(col) {
		return colContentPositions.left(col);
	}
	
	
	function colContentRight(col) {
		return colContentPositions.right(col);
	}
	
	
	
	
	function dateCell(date) {
		return {
			row: Math.floor(dayDiff(date, t.visStart) / 7),
			col: dayOfWeekCol(date.getDay())
		};
	}
	
	
	function cellDate(cell) {
		return _cellDate(cell.row, cell.col);
	}
	
	
	function _cellDate(row, col) {
		return addDays(cloneDate(t.visStart), row*7 + col*dis+dit);
		// what about weekends in middle of week?
	}
	
	
	function indexDate(index) {
		return _cellDate(Math.floor(index/colCnt), index%colCnt);
	}
	
	
	function dayOfWeekCol(dayOfWeek) {
		return ((dayOfWeek - Math.max(firstDay, nwe) + colCnt) % colCnt) * dis + dit;
	}
	
	
	
	
	function allDayRow(i) {
		return bodyRows.eq(i);
	}
	
	
	function allDayBounds(i) {
		var left = 0;
		if (showWeekNumbers) {
			left += weekNumberWidth;
		}
		return {
			left: left,
			right: viewWidth
		};
	}



	// makes sure height doesn't collapse while we destroy/render new cells
	// (this causes a bad end-user scrollbar jump)
	// TODO: generalize this for all view rendering. (also in Calendar.js)

	function lockHeight() {
		setMinHeight(element, element.height());
	}

	function unlockHeight() {
		setMinHeight(element, 1);
	}
	
}

;;

function BasicEventRenderer() {
	var t = this;
	
	
	// exports
	t.renderEvents = renderEvents;
	t.compileDaySegs = compileSegs; // for DayEventRenderer
	t.clearEvents = clearEvents;
	t.bindDaySeg = bindDaySeg;
	
	
	// imports
	DayEventRenderer.call(t);
	var opt = t.opt;
	var trigger = t.trigger;
	//var setOverflowHidden = t.setOverflowHidden;
	var isEventDraggable = t.isEventDraggable;
	var isEventResizable = t.isEventResizable;
	var reportEvents = t.reportEvents;
	var reportEventClear = t.reportEventClear;
	var eventElementHandlers = t.eventElementHandlers;
	var showEvents = t.showEvents;
	var hideEvents = t.hideEvents;
	var eventDrop = t.eventDrop;
	var getDaySegmentContainer = t.getDaySegmentContainer;
	var getHoverListener = t.getHoverListener;
	var renderDayOverlay = t.renderDayOverlay;
	var clearOverlays = t.clearOverlays;
	var getRowCnt = t.getRowCnt;
	var getColCnt = t.getColCnt;
	var renderDaySegs = t.renderDaySegs;
	var resizableDayEvent = t.resizableDayEvent;
	
	
	
	/* Rendering
	--------------------------------------------------------------------*/
	
	
	function renderEvents(events, modifiedEventId) {
		reportEvents(events);
		renderDaySegs(compileSegs(events), modifiedEventId);
		trigger('eventAfterAllRender');
	}
	
	
	function clearEvents() {
		reportEventClear();
		getDaySegmentContainer().empty();
	}
	
	
	function compileSegs(events) {
		var rowCnt = getRowCnt(),
			colCnt = getColCnt(),
			d1 = cloneDate(t.visStart),
			d2 = addDays(cloneDate(d1), colCnt),
			visEventsEnds = $.map(events, exclEndDay),
			i, row,
			j, level,
			k, seg,
			segs=[];
		for (i=0; i<rowCnt; i++) {
			row = stackSegs(sliceSegs(events, visEventsEnds, d1, d2));
			for (j=0; j<row.length; j++) {
				level = row[j];
				for (k=0; k<level.length; k++) {
					seg = level[k];
					seg.row = i;
					seg.level = j; // not needed anymore
					segs.push(seg);
				}
			}
			addDays(d1, 7);
			addDays(d2, 7);
		}
		return segs;
	}
	
	
	function bindDaySeg(event, eventElement, seg) {
		if (isEventDraggable(event)) {
			draggableDayEvent(event, eventElement);
		}
		if (seg.isEnd && isEventResizable(event)) {
			resizableDayEvent(event, eventElement, seg);
		}
		eventElementHandlers(event, eventElement);
			// needs to be after, because resizableDayEvent might stopImmediatePropagation on click
	}
	
	
	
	/* Dragging
	----------------------------------------------------------------------------*/
	
	
	function draggableDayEvent(event, eventElement) {
		var hoverListener = getHoverListener();
		var dayDelta;
		eventElement.draggable({
			zIndex: 9,
			delay: 50,
			opacity: opt('dragOpacity'),
			revertDuration: opt('dragRevertDuration'),
			start: function(ev, ui) {
				trigger('eventDragStart', eventElement, event, ev, ui);
				hideEvents(event, eventElement);
				hoverListener.start(function(cell, origCell, rowDelta, colDelta) {
					eventElement.draggable('option', 'revert', !cell || !rowDelta && !colDelta);
					clearOverlays();
					if (cell) {
						//setOverflowHidden(true);
						dayDelta = rowDelta*7 + colDelta * (opt('isRTL') ? -1 : 1);
						renderDayOverlay(
							addDays(cloneDate(event.start), dayDelta),
							addDays(exclEndDay(event), dayDelta)
						);
					}else{
						//setOverflowHidden(false);
						dayDelta = 0;
					}
				}, ev, 'drag');
			},
			stop: function(ev, ui) {
				hoverListener.stop();
				clearOverlays();
				trigger('eventDragStop', eventElement, event, ev, ui);
				if (dayDelta) {
					eventDrop(this, event, dayDelta, 0, event.allDay, ev, ui);
				}else{
					eventElement.css('filter', ''); // clear IE opacity side-effects
					showEvents(event, eventElement);
				}
				//setOverflowHidden(false);
			}
		});
	}


}

;;

fcViews.agendaWeek = AgendaWeekView;

function AgendaWeekView(element, calendar) {
	var t = this;
	
	
	// exports
	t.render = render;
	
	
	// imports
	AgendaView.call(t, element, calendar, 'agendaWeek');
	var opt = t.opt;
	var renderAgenda = t.renderAgenda;
	var formatDates = calendar.formatDates;
	
	
	
	function render(date, delta) {
		if (delta) {
			addDays(date, delta * 7);
		}
		var start = addDays(cloneDate(date), -((date.getDay() - opt('firstDay') + 7) % 7));
		var end = addDays(cloneDate(start), 7);
		var visStart = cloneDate(start);
		var visEnd = cloneDate(end);
		var weekends = opt('weekends');
		if (!weekends) {
			skipWeekend(visStart);
			skipWeekend(visEnd, -1, true);
		}
		t.title = formatDates(
			visStart,
			addDays(cloneDate(visEnd), -1),
			opt('titleFormat')
		);
		t.start = start;
		t.end = end;
		t.visStart = visStart;
		t.visEnd = visEnd;
		renderAgenda(weekends ? 7 : 5);
	}
	

}

;;

fcViews.agendaDay = AgendaDayView;

function AgendaDayView(element, calendar) {
	var t = this;
	
	
	// exports
	t.render = render;
	
	
	// imports
	AgendaView.call(t, element, calendar, 'agendaDay');
	var opt = t.opt;
	var renderAgenda = t.renderAgenda;
	var formatDate = calendar.formatDate;
	
	
	
	function render(date, delta) {
		if (delta) {
			addDays(date, delta);
			if (!opt('weekends')) {
				skipWeekend(date, delta < 0 ? -1 : 1);
			}
		}
		var start = cloneDate(date, true);
		var end = addDays(cloneDate(start), 1);
		t.title = formatDate(date, opt('titleFormat'));
		t.start = t.visStart = start;
		t.end = t.visEnd = end;
		renderAgenda(1);
	}
	

}

;;

setDefaults({
	allDaySlot: true,
	allDayText: 'all-day',
	firstHour: 6,
	slotMinutes: 30,
	defaultEventMinutes: 120,
	axisFormat: 'h(:mm)tt',
	timeFormat: {
		agenda: 'h:mm{ - h:mm}'
	},
	dragOpacity: {
		agenda: .5
	},
	minTime: 0,
	maxTime: 24
});


// TODO: make it work in quirks mode (event corners, all-day height)
// TODO: test liquid width, especially in IE6


function AgendaView(element, calendar, viewName) {
	var t = this;
	
	
	// exports
	t.renderAgenda = renderAgenda;
	t.setWidth = setWidth;
	t.setHeight = setHeight;
	t.beforeHide = beforeHide;
	t.afterShow = afterShow;
	t.defaultEventEnd = defaultEventEnd;
	t.timePosition = timePosition;
	t.dayOfWeekCol = dayOfWeekCol;
	t.dateCell = dateCell;
	t.cellDate = cellDate;
	t.cellIsAllDay = cellIsAllDay;
	t.allDayRow = getAllDayRow;
	t.allDayBounds = allDayBounds;
	t.getHoverListener = function() { return hoverListener };
	t.colContentLeft = colContentLeft;
	t.colContentRight = colContentRight;
	t.getDaySegmentContainer = function() { return daySegmentContainer };
	t.getSlotSegmentContainer = function() { return slotSegmentContainer };
	t.getMinMinute = function() { return minMinute };
	t.getMaxMinute = function() { return maxMinute };
	t.getBodyContent = function() { return slotContent }; // !!??
	t.getRowCnt = function() { return 1 };
	t.getColCnt = function() { return colCnt };
	t.getColWidth = function() { return colWidth };
	t.getSnapHeight = function() { return snapHeight };
	t.getSnapMinutes = function() { return snapMinutes };
	t.defaultSelectionEnd = defaultSelectionEnd;
	t.renderDayOverlay = renderDayOverlay;
	t.renderSelection = renderSelection;
	t.clearSelection = clearSelection;
	t.reportDayClick = reportDayClick; // selection mousedown hack
	t.dragStart = dragStart;
	t.dragStop = dragStop;
	
	
	// imports
	View.call(t, element, calendar, viewName);
	OverlayManager.call(t);
	SelectionManager.call(t);
	AgendaEventRenderer.call(t);
	var opt = t.opt;
	var trigger = t.trigger;
	var clearEvents = t.clearEvents;
	var renderOverlay = t.renderOverlay;
	var clearOverlays = t.clearOverlays;
	var reportSelection = t.reportSelection;
	var unselect = t.unselect;
	var daySelectionMousedown = t.daySelectionMousedown;
	var slotSegHtml = t.slotSegHtml;
	var formatDate = calendar.formatDate;
	
	
	// locals
	
	var dayTable;
	var dayHead;
	var dayHeadCells;
	var dayBody;
	var dayBodyCells;
	var dayBodyCellInners;
	var dayBodyFirstCell;
	var dayBodyFirstCellStretcher;
	var slotLayer;
	var daySegmentContainer;
	var allDayTable;
	var allDayRow;
	var slotScroller;
	var slotContent;
	var slotSegmentContainer;
	var slotTable;
	var slotTableFirstInner;
	var axisFirstCells;
	var gutterCells;
	var selectionHelper;
	
	var viewWidth;
	var viewHeight;
	var axisWidth;
	var colWidth;
	var gutterWidth;
	var slotHeight; // TODO: what if slotHeight changes? (see issue 650)

	var snapMinutes;
	var snapRatio; // ratio of number of "selection" slots to normal slots. (ex: 1, 2, 4)
	var snapHeight; // holds the pixel hight of a "selection" slot
	
	var colCnt;
	var slotCnt;
	var coordinateGrid;
	var hoverListener;
	var colContentPositions;
	var slotTopCache = {};
	var savedScrollTop;
	
	var tm;
	var firstDay;
	var nwe;            // no weekends (int)
	var rtl, dis, dit;  // day index sign / translate
	var minMinute, maxMinute;
	var colFormat;
	var showWeekNumbers;
	var weekNumberTitle;
	var weekNumberFormat;
	

	
	/* Rendering
	-----------------------------------------------------------------------------*/
	
	
	disableTextSelection(element.addClass('fc-agenda'));
	
	
	function renderAgenda(c) {
		colCnt = c;
		updateOptions();
		if (!dayTable) {
			buildSkeleton();
		}else{
			clearEvents();
		}
		updateCells();
	}
	
	
	
	function updateOptions() {
		tm = opt('theme') ? 'ui' : 'fc';
		nwe = opt('weekends') ? 0 : 1;
		firstDay = opt('firstDay');
		if (rtl = opt('isRTL')) {
			dis = -1;
			dit = colCnt - 1;
		}else{
			dis = 1;
			dit = 0;
		}
		minMinute = parseTime(opt('minTime'));
		maxMinute = parseTime(opt('maxTime'));
		colFormat = opt('columnFormat');

		// week # options. (TODO: bad, logic also in other views)
		showWeekNumbers = opt('weekNumbers');
		weekNumberTitle = opt('weekNumberTitle');
		if (opt('weekNumberCalculation') != 'iso') {
			weekNumberFormat = "w";
		}
		else {
			weekNumberFormat = "W";
		}

		snapMinutes = opt('snapMinutes') || opt('slotMinutes');
	}
	
	
	
	function buildSkeleton() {
		var headerClass = tm + "-widget-header";
		var contentClass = tm + "-widget-content";
		var s;
		var i;
		var d;
		var maxd;
		var minutes;
		var slotNormal = opt('slotMinutes') % 15 == 0;
		
		s =
			"<table style='width:100%' class='fc-agenda-days fc-border-separate' cellspacing='0'>" +
			"<thead>" +
			"<tr>";

		if (showWeekNumbers) {
			s += "<th class='fc-agenda-axis fc-week-number " + headerClass + "'/>";
		}
		else {
			s += "<th class='fc-agenda-axis " + headerClass + "'>&nbsp;</th>";
		}

		for (i=0; i<colCnt; i++) {
			s +=
				"<th class='fc- fc-col" + i + ' ' + headerClass + "'/>"; // fc- needed for setDayID
		}
		s +=
			"<th class='fc-agenda-gutter " + headerClass + "'>&nbsp;</th>" +
			"</tr>" +
			"</thead>" +
			"<tbody>" +
			"<tr>" +
			"<th class='fc-agenda-axis " + headerClass + "'>&nbsp;</th>";
		for (i=0; i<colCnt; i++) {
			s +=
				"<td class='fc- fc-col" + i + ' ' + contentClass + "'>" + // fc- needed for setDayID
				"<div>" +
				"<div class='fc-day-content'>" +
				"<div style='position:relative'>&nbsp;</div>" +
				"</div>" +
				"</div>" +
				"</td>";
		}
		s +=
			"<td class='fc-agenda-gutter " + contentClass + "'>&nbsp;</td>" +
			"</tr>" +
			"</tbody>" +
			"</table>";
		dayTable = $(s).appendTo(element);
		dayHead = dayTable.find('thead');
		dayHeadCells = dayHead.find('th').slice(1, -1);
		dayBody = dayTable.find('tbody');
		dayBodyCells = dayBody.find('td').slice(0, -1);
		dayBodyCellInners = dayBodyCells.find('div.fc-day-content div');
		dayBodyFirstCell = dayBodyCells.eq(0);
		dayBodyFirstCellStretcher = dayBodyFirstCell.find('> div');
		
		markFirstLast(dayHead.add(dayHead.find('tr')));
		markFirstLast(dayBody.add(dayBody.find('tr')));
		
		axisFirstCells = dayHead.find('th:first');
		gutterCells = dayTable.find('.fc-agenda-gutter');
		
		slotLayer =
			$("<div style='position:absolute;z-index:2;left:0;width:100%'/>")
				.appendTo(element);
				
		if (opt('allDaySlot')) {
		
			daySegmentContainer =
				$("<div style='position:absolute;z-index:8;top:0;left:0'/>")
					.appendTo(slotLayer);
		
			s =
				"<table style='width:100%' class='fc-agenda-allday' cellspacing='0'>" +
				"<tr>" +
				"<th class='" + headerClass + " fc-agenda-axis'>" + opt('allDayText') + "</th>" +
				"<td>" +
				"<div class='fc-day-content'><div style='position:relative'/></div>" +
				"</td>" +
				"<th class='" + headerClass + " fc-agenda-gutter'>&nbsp;</th>" +
				"</tr>" +
				"</table>";
			allDayTable = $(s).appendTo(slotLayer);
			allDayRow = allDayTable.find('tr');
			
			dayBind(allDayRow.find('td'));
			
			axisFirstCells = axisFirstCells.add(allDayTable.find('th:first'));
			gutterCells = gutterCells.add(allDayTable.find('th.fc-agenda-gutter'));
			
			slotLayer.append(
				"<div class='fc-agenda-divider " + headerClass + "'>" +
				"<div class='fc-agenda-divider-inner'/>" +
				"</div>"
			);
			
		}else{
		
			daySegmentContainer = $([]); // in jQuery 1.4, we can just do $()
		
		}
		
		slotScroller =
			$("<div style='position:absolute;width:100%;overflow-x:hidden;overflow-y:auto'/>")
				.appendTo(slotLayer);
				
		slotContent =
			$("<div style='position:relative;width:100%;overflow:hidden'/>")
				.appendTo(slotScroller);
				
		slotSegmentContainer =
			$("<div style='position:absolute;z-index:8;top:0;left:0'/>")
				.appendTo(slotContent);
		
		s =
			"<table class='fc-agenda-slots' style='width:100%' cellspacing='0'>" +
			"<tbody>";
		d = zeroDate();
		maxd = addMinutes(cloneDate(d), maxMinute);
		addMinutes(d, minMinute);
		slotCnt = 0;
		for (i=0; d < maxd; i++) {
			minutes = d.getMinutes();
			s +=
				"<tr class='fc-slot" + i + ' ' + (!minutes ? '' : 'fc-minor') + "'>" +
				"<th class='fc-agenda-axis " + headerClass + "'>" +
				((!slotNormal || !minutes) ? formatDate(d, opt('axisFormat')) : '&nbsp;') +
				"</th>" +
				"<td class='" + contentClass + "'>" +
				"<div style='position:relative'>&nbsp;</div>" +
				"</td>" +
				"</tr>";
			addMinutes(d, opt('slotMinutes'));
			slotCnt++;
		}
		s +=
			"</tbody>" +
			"</table>";
		slotTable = $(s).appendTo(slotContent);
		slotTableFirstInner = slotTable.find('div:first');
		
		slotBind(slotTable.find('td'));
		
		axisFirstCells = axisFirstCells.add(slotTable.find('th:first'));
	}
	
	
	
	function updateCells() {
		var i;
		var headCell;
		var bodyCell;
		var date;
		var today = clearTime(new Date());

		if (showWeekNumbers) {
			var weekText = formatDate(colDate(0), weekNumberFormat);
			if (rtl) {
				weekText = weekText + weekNumberTitle;
			}
			else {
				weekText = weekNumberTitle + weekText;
			}
			dayHead.find('.fc-week-number').text(weekText);
		}

		for (i=0; i<colCnt; i++) {
			date = colDate(i);
			headCell = dayHeadCells.eq(i);
			headCell.html(formatDate(date, colFormat));
			bodyCell = dayBodyCells.eq(i);
			if (+date == +today) {
				bodyCell.addClass(tm + '-state-highlight fc-today');
			}else{
				bodyCell.removeClass(tm + '-state-highlight fc-today');
			}
			setDayID(headCell.add(bodyCell), date);
		}
	}
	
	
	
	function setHeight(height, dateChanged) {
		if (height === undefined) {
			height = viewHeight;
		}
		viewHeight = height;
		slotTopCache = {};
	
		var headHeight = dayBody.position().top;
		var allDayHeight = slotScroller.position().top; // including divider
		var bodyHeight = Math.min( // total body height, including borders
			height - headHeight,   // when scrollbars
			slotTable.height() + allDayHeight + 1 // when no scrollbars. +1 for bottom border
		);
		
		dayBodyFirstCellStretcher
			.height(bodyHeight - vsides(dayBodyFirstCell));
		
		slotLayer.css('top', headHeight);
		
		slotScroller.height(bodyHeight - allDayHeight - 1);
		
		slotHeight = slotTableFirstInner.height() + 1; // +1 for border

		snapRatio = opt('slotMinutes') / snapMinutes;
		snapHeight = slotHeight / snapRatio;
		
		if (dateChanged) {
			resetScroll();
		}
	}
	
	
	
	function setWidth(width) {
		viewWidth = width;
		colContentPositions.clear();
		
		axisWidth = 0;
		setOuterWidth(
			axisFirstCells
				.width('')
				.each(function(i, _cell) {
					$(_cell).css('width','');
					axisWidth = Math.max(axisWidth, $(_cell).outerWidth());
				}),
			axisWidth
		);
		
		var slotTableWidth = slotScroller[0].clientWidth; // needs to be done after axisWidth (for IE7)
		//slotTable.width(slotTableWidth);
		
		gutterWidth = slotScroller.width() - slotTableWidth;
		if (gutterWidth) {
			setOuterWidth(gutterCells, gutterWidth);
			gutterCells
				.show()
				.prev()
				.removeClass('fc-last');
		}else{
			gutterCells
				.hide()
				.prev()
				.addClass('fc-last');
		}
		
		colWidth = Math.floor((slotTableWidth - axisWidth) / colCnt);
		setOuterWidth(dayHeadCells.slice(0, -1), colWidth);
	}
	


	function resetScroll() {
		var d0 = zeroDate();
		var scrollDate = cloneDate(d0);
		scrollDate.setHours(opt('firstHour'));
		var top = timePosition(d0, scrollDate) + 1; // +1 for the border
		function scroll() {
			slotScroller.scrollTop(top);
		}
		scroll();
		setTimeout(scroll, 0); // overrides any previous scroll state made by the browser
	}
	
	
	function beforeHide() {
		savedScrollTop = slotScroller.scrollTop();
	}
	
	
	function afterShow() {
		slotScroller.scrollTop(savedScrollTop);
	}
	
	
	
	/* Slot/Day clicking and binding
	-----------------------------------------------------------------------*/
	

	function dayBind(cells) {
		cells.click(slotClick)
			.mousedown(daySelectionMousedown);
	}


	function slotBind(cells) {
		cells.click(slotClick)
			.mousedown(slotSelectionMousedown);
	}
	
	
	function slotClick(ev) {
		if (!opt('selectable')) { // if selectable, SelectionManager will worry about dayClick
			var col = Math.min(colCnt-1, Math.floor((ev.pageX - dayTable.offset().left - axisWidth) / colWidth));
			var date = colDate(col);
			var rowMatch = this.parentNode.className.match(/fc-slot(\d+)/); // TODO: maybe use data
			if (rowMatch) {
				var mins = parseInt(rowMatch[1]) * opt('slotMinutes');
				var hours = Math.floor(mins/60);
				date.setHours(hours);
				date.setMinutes(mins%60 + minMinute);
				trigger('dayClick', dayBodyCells[col], date, false, ev);
			}else{
				trigger('dayClick', dayBodyCells[col], date, true, ev);
			}
		}
	}
	
	
	
	/* Semi-transparent Overlay Helpers
	-----------------------------------------------------*/
	

	function renderDayOverlay(startDate, endDate, refreshCoordinateGrid) { // endDate is exclusive
		if (refreshCoordinateGrid) {
			coordinateGrid.build();
		}
		var visStart = cloneDate(t.visStart);
		var startCol, endCol;
		if (rtl) {
			startCol = dayDiff(endDate, visStart)*dis+dit+1;
			endCol = dayDiff(startDate, visStart)*dis+dit+1;
		}else{
			startCol = dayDiff(startDate, visStart);
			endCol = dayDiff(endDate, visStart);
		}
		startCol = Math.max(0, startCol);
		endCol = Math.min(colCnt, endCol);
		if (startCol < endCol) {
			dayBind(
				renderCellOverlay(0, startCol, 0, endCol-1)
			);
		}
	}
	
	
	function renderCellOverlay(row0, col0, row1, col1) { // only for all-day?
		var rect = coordinateGrid.rect(row0, col0, row1, col1, slotLayer);
		return renderOverlay(rect, slotLayer);
	}
	

	function renderSlotOverlay(overlayStart, overlayEnd) {
		var dayStart = cloneDate(t.visStart);
		var dayEnd = addDays(cloneDate(dayStart), 1);
		for (var i=0; i<colCnt; i++) {
			var stretchStart = new Date(Math.max(dayStart, overlayStart));
			var stretchEnd = new Date(Math.min(dayEnd, overlayEnd));
			if (stretchStart < stretchEnd) {
				var col = i*dis+dit;
				var rect = coordinateGrid.rect(0, col, 0, col, slotContent); // only use it for horizontal coords
				var top = timePosition(dayStart, stretchStart);
				var bottom = timePosition(dayStart, stretchEnd);
				rect.top = top;
				rect.height = bottom - top;
				slotBind(
					renderOverlay(rect, slotContent)
				);
			}
			addDays(dayStart, 1);
			addDays(dayEnd, 1);
		}
	}
	
	
	
	/* Coordinate Utilities
	-----------------------------------------------------------------------------*/
	
	
	coordinateGrid = new CoordinateGrid(function(rows, cols) {
		var e, n, p;
		dayHeadCells.each(function(i, _e) {
			e = $(_e);
			n = e.offset().left;
			if (i) {
				p[1] = n;
			}
			p = [n];
			cols[i] = p;
		});
		p[1] = n + e.outerWidth();
		if (opt('allDaySlot')) {
			e = allDayRow;
			n = e.offset().top;
			rows[0] = [n, n+e.outerHeight()];
		}
		var slotTableTop = slotContent.offset().top;
		var slotScrollerTop = slotScroller.offset().top;
		var slotScrollerBottom = slotScrollerTop + slotScroller.outerHeight();
		function constrain(n) {
			return Math.max(slotScrollerTop, Math.min(slotScrollerBottom, n));
		}
		for (var i=0; i<slotCnt*snapRatio; i++) { // adapt slot count to increased/decreased selection slot count
			rows.push([
				constrain(slotTableTop + snapHeight*i),
				constrain(slotTableTop + snapHeight*(i+1))
			]);
		}
	});
	
	
	hoverListener = new HoverListener(coordinateGrid);
	
	
	colContentPositions = new HorizontalPositionCache(function(col) {
		return dayBodyCellInners.eq(col);
	});
	
	
	function colContentLeft(col) {
		return colContentPositions.left(col);
	}
	
	
	function colContentRight(col) {
		return colContentPositions.right(col);
	}
	
	
	
	
	function dateCell(date) { // "cell" terminology is now confusing
		return {
			row: Math.floor(dayDiff(date, t.visStart) / 7),
			col: dayOfWeekCol(date.getDay())
		};
	}
	
	
	function cellDate(cell) {
		var d = colDate(cell.col);
		var slotIndex = cell.row;
		if (opt('allDaySlot')) {
			slotIndex--;
		}
		if (slotIndex >= 0) {
			addMinutes(d, minMinute + slotIndex * snapMinutes);
		}
		return d;
	}
	
	
	function colDate(col) { // returns dates with 00:00:00
		return addDays(cloneDate(t.visStart), col*dis+dit);
	}
	
	
	function cellIsAllDay(cell) {
		return opt('allDaySlot') && !cell.row;
	}
	
	
	function dayOfWeekCol(dayOfWeek) {
		return ((dayOfWeek - Math.max(firstDay, nwe) + colCnt) % colCnt)*dis+dit;
	}
	
	
	
	
	// get the Y coordinate of the given time on the given day (both Date objects)
	function timePosition(day, time) { // both date objects. day holds 00:00 of current day
		day = cloneDate(day, true);
		if (time < addMinutes(cloneDate(day), minMinute)) {
			return 0;
		}
		if (time >= addMinutes(cloneDate(day), maxMinute)) {
			return slotTable.height();
		}
		var slotMinutes = opt('slotMinutes'),
			minutes = time.getHours()*60 + time.getMinutes() - minMinute,
			slotI = Math.floor(minutes / slotMinutes),
			slotTop = slotTopCache[slotI];
		if (slotTop === undefined) {
			slotTop = slotTopCache[slotI] = slotTable.find('tr:eq(' + slotI + ') td div')[0].offsetTop; //.position().top; // need this optimization???
		}
		return Math.max(0, Math.round(
			slotTop - 1 + slotHeight * ((minutes % slotMinutes) / slotMinutes)
		));
	}
	
	
	function allDayBounds() {
		return {
			left: axisWidth,
			right: viewWidth - gutterWidth
		}
	}
	
	
	function getAllDayRow(index) {
		return allDayRow;
	}
	
	
	function defaultEventEnd(event) {
		var start = cloneDate(event.start);
		if (event.allDay) {
			return start;
		}
		return addMinutes(start, opt('defaultEventMinutes'));
	}
	
	
	
	/* Selection
	---------------------------------------------------------------------------------*/
	
	
	function defaultSelectionEnd(startDate, allDay) {
		if (allDay) {
			return cloneDate(startDate);
		}
		return addMinutes(cloneDate(startDate), opt('slotMinutes'));
	}
	
	
	function renderSelection(startDate, endDate, allDay) { // only for all-day
		if (allDay) {
			if (opt('allDaySlot')) {
				renderDayOverlay(startDate, addDays(cloneDate(endDate), 1), true);
			}
		}else{
			renderSlotSelection(startDate, endDate);
		}
	}
	
	
	function renderSlotSelection(startDate, endDate) {
		var helperOption = opt('selectHelper');
		coordinateGrid.build();
		if (helperOption) {
			var col = dayDiff(startDate, t.visStart) * dis + dit;
			if (col >= 0 && col < colCnt) { // only works when times are on same day
				var rect = coordinateGrid.rect(0, col, 0, col, slotContent); // only for horizontal coords
				var top = timePosition(startDate, startDate);
				var bottom = timePosition(startDate, endDate);
				if (bottom > top) { // protect against selections that are entirely before or after visible range
					rect.top = top;
					rect.height = bottom - top;
					rect.left += 2;
					rect.width -= 5;
					if ($.isFunction(helperOption)) {
						var helperRes = helperOption(startDate, endDate);
						if (helperRes) {
							rect.position = 'absolute';
							rect.zIndex = 8;
							selectionHelper = $(helperRes)
								.css(rect)
								.appendTo(slotContent);
						}
					}else{
						rect.isStart = true; // conside rect a "seg" now
						rect.isEnd = true;   //
						selectionHelper = $(slotSegHtml(
							{
								title: '',
								start: startDate,
								end: endDate,
								className: ['fc-select-helper'],
								editable: false
							},
							rect
						));
						selectionHelper.css('opacity', opt('dragOpacity'));
					}
					if (selectionHelper) {
						slotBind(selectionHelper);
						slotContent.append(selectionHelper);
						setOuterWidth(selectionHelper, rect.width, true); // needs to be after appended
						setOuterHeight(selectionHelper, rect.height, true);
					}
				}
			}
		}else{
			renderSlotOverlay(startDate, endDate);
		}
	}
	
	
	function clearSelection() {
		clearOverlays();
		if (selectionHelper) {
			selectionHelper.remove();
			selectionHelper = null;
		}
	}
	
	
	function slotSelectionMousedown(ev) {
		if (ev.which == 1 && opt('selectable')) { // ev.which==1 means left mouse button
			unselect(ev);
			var dates;
			hoverListener.start(function(cell, origCell) {
				clearSelection();
				if (cell && cell.col == origCell.col && !cellIsAllDay(cell)) {
					var d1 = cellDate(origCell);
					var d2 = cellDate(cell);
					dates = [
						d1,
						addMinutes(cloneDate(d1), snapMinutes), // calculate minutes depending on selection slot minutes 
						d2,
						addMinutes(cloneDate(d2), snapMinutes)
					].sort(cmp);
					renderSlotSelection(dates[0], dates[3]);
				}else{
					dates = null;
				}
			}, ev);
			$(document).one('mouseup', function(ev) {
				hoverListener.stop();
				if (dates) {
					if (+dates[0] == +dates[1]) {
						reportDayClick(dates[0], false, ev);
					}
					reportSelection(dates[0], dates[3], false, ev);
				}
			});
		}
	}
	
	
	function reportDayClick(date, allDay, ev) {
		trigger('dayClick', dayBodyCells[dayOfWeekCol(date.getDay())], date, allDay, ev);
	}
	
	
	
	/* External Dragging
	--------------------------------------------------------------------------------*/
	
	
	function dragStart(_dragElement, ev, ui) {
		hoverListener.start(function(cell) {
			clearOverlays();
			if (cell) {
				if (cellIsAllDay(cell)) {
					renderCellOverlay(cell.row, cell.col, cell.row, cell.col);
				}else{
					var d1 = cellDate(cell);
					var d2 = addMinutes(cloneDate(d1), opt('defaultEventMinutes'));
					renderSlotOverlay(d1, d2);
				}
			}
		}, ev);
	}
	
	
	function dragStop(_dragElement, ev, ui) {
		var cell = hoverListener.stop();
		clearOverlays();
		if (cell) {
			trigger('drop', _dragElement, cellDate(cell), cellIsAllDay(cell), ev, ui);
		}
	}


}

;;

function AgendaEventRenderer() {
	var t = this;
	
	
	// exports
	t.renderEvents = renderEvents;
	t.compileDaySegs = compileDaySegs; // for DayEventRenderer
	t.clearEvents = clearEvents;
	t.slotSegHtml = slotSegHtml;
	t.bindDaySeg = bindDaySeg;
	
	
	// imports
	DayEventRenderer.call(t);
	var opt = t.opt;
	var trigger = t.trigger;
	//var setOverflowHidden = t.setOverflowHidden;
	var isEventDraggable = t.isEventDraggable;
	var isEventResizable = t.isEventResizable;
	var eventEnd = t.eventEnd;
	var reportEvents = t.reportEvents;
	var reportEventClear = t.reportEventClear;
	var eventElementHandlers = t.eventElementHandlers;
	var setHeight = t.setHeight;
	var getDaySegmentContainer = t.getDaySegmentContainer;
	var getSlotSegmentContainer = t.getSlotSegmentContainer;
	var getHoverListener = t.getHoverListener;
	var getMaxMinute = t.getMaxMinute;
	var getMinMinute = t.getMinMinute;
	var timePosition = t.timePosition;
	var colContentLeft = t.colContentLeft;
	var colContentRight = t.colContentRight;
	var renderDaySegs = t.renderDaySegs;
	var resizableDayEvent = t.resizableDayEvent; // TODO: streamline binding architecture
	var getColCnt = t.getColCnt;
	var getColWidth = t.getColWidth;
	var getSnapHeight = t.getSnapHeight;
	var getSnapMinutes = t.getSnapMinutes;
	var getBodyContent = t.getBodyContent;
	var reportEventElement = t.reportEventElement;
	var showEvents = t.showEvents;
	var hideEvents = t.hideEvents;
	var eventDrop = t.eventDrop;
	var eventResize = t.eventResize;
	var renderDayOverlay = t.renderDayOverlay;
	var clearOverlays = t.clearOverlays;
	var calendar = t.calendar;
	var formatDate = calendar.formatDate;
	var formatDates = calendar.formatDates;
	
	
	
	/* Rendering
	----------------------------------------------------------------------------*/
	

	function renderEvents(events, modifiedEventId) {
		reportEvents(events);
		var i, len=events.length,
			dayEvents=[],
			slotEvents=[];
		for (i=0; i<len; i++) {
			if (events[i].allDay) {
				dayEvents.push(events[i]);
			}else{
				slotEvents.push(events[i]);
			}
		}
		if (opt('allDaySlot')) {
			renderDaySegs(compileDaySegs(dayEvents), modifiedEventId);
			setHeight(); // no params means set to viewHeight
		}
		renderSlotSegs(compileSlotSegs(slotEvents), modifiedEventId);
		trigger('eventAfterAllRender');
	}
	
	
	function clearEvents() {
		reportEventClear();
		getDaySegmentContainer().empty();
		getSlotSegmentContainer().empty();
	}
	
	
	function compileDaySegs(events) {
		var levels = stackSegs(sliceSegs(events, $.map(events, exclEndDay), t.visStart, t.visEnd)),
			i, levelCnt=levels.length, level,
			j, seg,
			segs=[];
		for (i=0; i<levelCnt; i++) {
			level = levels[i];
			for (j=0; j<level.length; j++) {
				seg = level[j];
				seg.row = 0;
				seg.level = i; // not needed anymore
				segs.push(seg);
			}
		}
		return segs;
	}
	
	
	function compileSlotSegs(events) {
		var colCnt = getColCnt(),
			minMinute = getMinMinute(),
			maxMinute = getMaxMinute(),
			d = addMinutes(cloneDate(t.visStart), minMinute),
			visEventEnds = $.map(events, slotEventEnd),
			i, col,
			j, level,
			k, seg,
			segs=[];
		for (i=0; i<colCnt; i++) {
			col = stackSegs(sliceSegs(events, visEventEnds, d, addMinutes(cloneDate(d), maxMinute-minMinute)));
			countForwardSegs(col);
			for (j=0; j<col.length; j++) {
				level = col[j];
				for (k=0; k<level.length; k++) {
					seg = level[k];
					seg.col = i;
					seg.level = j;
					segs.push(seg);
				}
			}
			addDays(d, 1, true);
		}
		return segs;
	}
	
	
	function slotEventEnd(event) {
		if (event.end) {
			return cloneDate(event.end);
		}else{
			return addMinutes(cloneDate(event.start), opt('defaultEventMinutes'));
		}
	}
	
	
	// renders events in the 'time slots' at the bottom
	
	function renderSlotSegs(segs, modifiedEventId) {
	
		var i, segCnt=segs.length, seg,
			event,
			classes,
			top, bottom,
			colI, levelI, forward,
			leftmost,
			availWidth,
			outerWidth,
			left,
			html='',
			eventElements,
			eventElement,
			triggerRes,
			vsideCache={},
			hsideCache={},
			key, val,
			titleElement,
			height,
			slotSegmentContainer = getSlotSegmentContainer(),
			rtl, dis, dit,
			colCnt = getColCnt();
			
		if (rtl = opt('isRTL')) {
			dis = -1;
			dit = colCnt - 1;
		}else{
			dis = 1;
			dit = 0;
		}
			
		// calculate position/dimensions, create html
		for (i=0; i<segCnt; i++) {
			seg = segs[i];
			event = seg.event;
			top = timePosition(seg.start, seg.start);
			bottom = timePosition(seg.start, seg.end);
			colI = seg.col;
			levelI = seg.level;
			forward = seg.forward || 0;
			leftmost = colContentLeft(colI*dis + dit);
			availWidth = colContentRight(colI*dis + dit) - leftmost;
			availWidth = Math.min(availWidth-6, availWidth*.95); // TODO: move this to CSS
			if (levelI) {
				// indented and thin
				outerWidth = availWidth / (levelI + forward + 1);
			}else{
				if (forward) {
					// moderately wide, aligned left still
					outerWidth = ((availWidth / (forward + 1)) - (12/2)) * 2; // 12 is the predicted width of resizer =
				}else{
					// can be entire width, aligned left
					outerWidth = availWidth;
				}
			}
			left = leftmost +                                  // leftmost possible
				(availWidth / (levelI + forward + 1) * levelI) // indentation
				* dis + (rtl ? availWidth - outerWidth : 0);   // rtl
			seg.top = top;
			seg.left = left;
			seg.outerWidth = outerWidth;
			seg.outerHeight = bottom - top;
			html += slotSegHtml(event, seg);
		}
		slotSegmentContainer[0].innerHTML = html; // faster than html()
		eventElements = slotSegmentContainer.children();
		
		// retrieve elements, run through eventRender callback, bind event handlers
		for (i=0; i<segCnt; i++) {
			seg = segs[i];
			event = seg.event;
			eventElement = $(eventElements[i]); // faster than eq()
			triggerRes = trigger('eventRender', event, event, eventElement);
			if (triggerRes === false) {
				eventElement.remove();
			}else{
				if (triggerRes && triggerRes !== true) {
					eventElement.remove();
					eventElement = $(triggerRes)
						.css({
							position: 'absolute',
							top: seg.top,
							left: seg.left
						})
						.appendTo(slotSegmentContainer);
				}
				seg.element = eventElement;
				if (event._id === modifiedEventId) {
					bindSlotSeg(event, eventElement, seg);
				}else{
					eventElement[0]._fci = i; // for lazySegBind
				}
				reportEventElement(event, eventElement);
			}
		}
		
		lazySegBind(slotSegmentContainer, segs, bindSlotSeg);
		
		// record event sides and title positions
		for (i=0; i<segCnt; i++) {
			seg = segs[i];
			if (eventElement = seg.element) {
				val = vsideCache[key = seg.key = cssKey(eventElement[0])];
				seg.vsides = val === undefined ? (vsideCache[key] = vsides(eventElement, true)) : val;
				val = hsideCache[key];
				seg.hsides = val === undefined ? (hsideCache[key] = hsides(eventElement, true)) : val;
				titleElement = eventElement.find('.fc-event-title');
				if (titleElement.length) {
					seg.contentTop = titleElement[0].offsetTop;
				}
			}
		}
		
		// set all positions/dimensions at once
		for (i=0; i<segCnt; i++) {
			seg = segs[i];
			if (eventElement = seg.element) {
				eventElement[0].style.width = Math.max(0, seg.outerWidth - seg.hsides) + 'px';
				height = Math.max(0, seg.outerHeight - seg.vsides);
				eventElement[0].style.height = height + 'px';
				event = seg.event;
				if (seg.contentTop !== undefined && height - seg.contentTop < 10) {
					// not enough room for title, put it in the time (TODO: maybe make both display:inline instead)
					eventElement.find('div.fc-event-time')
						.text(formatDate(event.start, opt('timeFormat')) + ' - ' + event.title);
					eventElement.find('div.fc-event-title')
						.remove();
				}
				trigger('eventAfterRender', event, event, eventElement);
			}
		}
					
	}
	
	
	function slotSegHtml(event, seg) {
		var html = "<";
		var url = event.url;
		var skinCss = getSkinCss(event, opt);
		var classes = ['fc-event', 'fc-event-vert'];
		if (isEventDraggable(event)) {
			classes.push('fc-event-draggable');
		}
		if (seg.isStart) {
			classes.push('fc-event-start');
		}
		if (seg.isEnd) {
			classes.push('fc-event-end');
		}
		classes = classes.concat(event.className);
		if (event.source) {
			classes = classes.concat(event.source.className || []);
		}
		if (url) {
			html += "a href='" + htmlEscape(event.url) + "'";
		}else{
			html += "div";
		}
		html +=
			" class='" + classes.join(' ') + "'" +
			" style='position:absolute;z-index:8;top:" + seg.top + "px;left:" + seg.left + "px;" + skinCss + "'" +
			">" +
			"<div class='fc-event-inner'>" +
			"<div class='fc-event-time'>" +
			htmlEscape(formatDates(event.start, event.end, opt('timeFormat'))) +
			"</div>" +
			"<div class='fc-event-title'>" +
			htmlEscape(event.title) +
			"</div>" +
			"</div>" +
			"<div class='fc-event-bg'></div>";
		if (seg.isEnd && isEventResizable(event)) {
			html +=
				"<div class='ui-resizable-handle ui-resizable-s'>=</div>";
		}
		html +=
			"</" + (url ? "a" : "div") + ">";
		return html;
	}
	
	
	function bindDaySeg(event, eventElement, seg) {
		if (isEventDraggable(event)) {
			draggableDayEvent(event, eventElement, seg.isStart);
		}
		if (seg.isEnd && isEventResizable(event)) {
			resizableDayEvent(event, eventElement, seg);
		}
		eventElementHandlers(event, eventElement);
			// needs to be after, because resizableDayEvent might stopImmediatePropagation on click
	}
	
	
	function bindSlotSeg(event, eventElement, seg) {
		var timeElement = eventElement.find('div.fc-event-time');
		if (isEventDraggable(event)) {
			draggableSlotEvent(event, eventElement, timeElement);
		}
		if (seg.isEnd && isEventResizable(event)) {
			resizableSlotEvent(event, eventElement, timeElement);
		}
		eventElementHandlers(event, eventElement);
	}
	
	
	
	/* Dragging
	-----------------------------------------------------------------------------------*/
	
	
	// when event starts out FULL-DAY
	
	function draggableDayEvent(event, eventElement, isStart) {
		var origWidth;
		var revert;
		var allDay=true;
		var dayDelta;
		var dis = opt('isRTL') ? -1 : 1;
		var hoverListener = getHoverListener();
		var colWidth = getColWidth();
		var snapHeight = getSnapHeight();
		var snapMinutes = getSnapMinutes();
		var minMinute = getMinMinute();
		eventElement.draggable({
			zIndex: 9,
			opacity: opt('dragOpacity', 'month'), // use whatever the month view was using
			revertDuration: opt('dragRevertDuration'),
			start: function(ev, ui) {
				trigger('eventDragStart', eventElement, event, ev, ui);
				hideEvents(event, eventElement);
				origWidth = eventElement.width();
				hoverListener.start(function(cell, origCell, rowDelta, colDelta) {
					clearOverlays();
					if (cell) {
						//setOverflowHidden(true);
						revert = false;
						dayDelta = colDelta * dis;
						if (!cell.row) {
							// on full-days
							renderDayOverlay(
								addDays(cloneDate(event.start), dayDelta),
								addDays(exclEndDay(event), dayDelta)
							);
							resetElement();
						}else{
							// mouse is over bottom slots
							if (isStart) {
								if (allDay) {
									// convert event to temporary slot-event
									eventElement.width(colWidth - 10); // don't use entire width
									setOuterHeight(
										eventElement,
										snapHeight * Math.round(
											(event.end ? ((event.end - event.start) / MINUTE_MS) : opt('defaultEventMinutes')) /
												snapMinutes
										)
									);
									eventElement.draggable('option', 'grid', [colWidth, 1]);
									allDay = false;
								}
							}else{
								revert = true;
							}
						}
						revert = revert || (allDay && !dayDelta);
					}else{
						resetElement();
						//setOverflowHidden(false);
						revert = true;
					}
					eventElement.draggable('option', 'revert', revert);
				}, ev, 'drag');
			},
			stop: function(ev, ui) {
				hoverListener.stop();
				clearOverlays();
				trigger('eventDragStop', eventElement, event, ev, ui);
				if (revert) {
					// hasn't moved or is out of bounds (draggable has already reverted)
					resetElement();
					eventElement.css('filter', ''); // clear IE opacity side-effects
					showEvents(event, eventElement);
				}else{
					// changed!
					var minuteDelta = 0;
					if (!allDay) {
						minuteDelta = Math.round((eventElement.offset().top - getBodyContent().offset().top) / snapHeight)
							* snapMinutes
							+ minMinute
							- (event.start.getHours() * 60 + event.start.getMinutes());
					}
					eventDrop(this, event, dayDelta, minuteDelta, allDay, ev, ui);
				}
				//setOverflowHidden(false);
			}
		});
		function resetElement() {
			if (!allDay) {
				eventElement
					.width(origWidth)
					.height('')
					.draggable('option', 'grid', null);
				allDay = true;
			}
		}
	}
	
	
	// when event starts out IN TIMESLOTS
	
	function draggableSlotEvent(event, eventElement, timeElement) {
		var origPosition;
		var allDay=false;
		var dayDelta;
		var minuteDelta;
		var prevMinuteDelta;
		var dis = opt('isRTL') ? -1 : 1;
		var hoverListener = getHoverListener();
		var colCnt = getColCnt();
		var colWidth = getColWidth();
		var snapHeight = getSnapHeight();
		var snapMinutes = getSnapMinutes();
		eventElement.draggable({
			zIndex: 9,
			scroll: false,
			grid: [colWidth, snapHeight],
			axis: colCnt==1 ? 'y' : false,
			opacity: opt('dragOpacity'),
			revertDuration: opt('dragRevertDuration'),
			start: function(ev, ui) {
				trigger('eventDragStart', eventElement, event, ev, ui);
				hideEvents(event, eventElement);
				origPosition = eventElement.position();
				minuteDelta = prevMinuteDelta = 0;
				hoverListener.start(function(cell, origCell, rowDelta, colDelta) {
					eventElement.draggable('option', 'revert', !cell);
					clearOverlays();
					if (cell) {
						dayDelta = colDelta * dis;
						if (opt('allDaySlot') && !cell.row) {
							// over full days
							if (!allDay) {
								// convert to temporary all-day event
								allDay = true;
								timeElement.hide();
								eventElement.draggable('option', 'grid', null);
							}
							renderDayOverlay(
								addDays(cloneDate(event.start), dayDelta),
								addDays(exclEndDay(event), dayDelta)
							);
						}else{
							// on slots
							resetElement();
						}
					}
				}, ev, 'drag');
			},
			drag: function(ev, ui) {
				minuteDelta = Math.round((ui.position.top - origPosition.top) / snapHeight) * snapMinutes;
				if (minuteDelta != prevMinuteDelta) {
					if (!allDay) {
						updateTimeText(minuteDelta);
					}
					prevMinuteDelta = minuteDelta;
				}
			},
			stop: function(ev, ui) {
				var cell = hoverListener.stop();
				clearOverlays();
				trigger('eventDragStop', eventElement, event, ev, ui);
				if (cell && (dayDelta || minuteDelta || allDay)) {
					// changed!
					eventDrop(this, event, dayDelta, allDay ? 0 : minuteDelta, allDay, ev, ui);
				}else{
					// either no change or out-of-bounds (draggable has already reverted)
					resetElement();
					eventElement.css('filter', ''); // clear IE opacity side-effects
					eventElement.css(origPosition); // sometimes fast drags make event revert to wrong position
					updateTimeText(0);
					showEvents(event, eventElement);
				}
			}
		});
		function updateTimeText(minuteDelta) {
			var newStart = addMinutes(cloneDate(event.start), minuteDelta);
			var newEnd;
			if (event.end) {
				newEnd = addMinutes(cloneDate(event.end), minuteDelta);
			}
			timeElement.text(formatDates(newStart, newEnd, opt('timeFormat')));
		}
		function resetElement() {
			// convert back to original slot-event
			if (allDay) {
				timeElement.css('display', ''); // show() was causing display=inline
				eventElement.draggable('option', 'grid', [colWidth, snapHeight]);
				allDay = false;
			}
		}
	}
	
	
	
	/* Resizing
	--------------------------------------------------------------------------------------*/
	
	
	function resizableSlotEvent(event, eventElement, timeElement) {
		var snapDelta, prevSnapDelta;
		var snapHeight = getSnapHeight();
		var snapMinutes = getSnapMinutes();
		eventElement.resizable({
			handles: {
				s: '.ui-resizable-handle'
			},
			grid: snapHeight,
			start: function(ev, ui) {
				snapDelta = prevSnapDelta = 0;
				hideEvents(event, eventElement);
				eventElement.css('z-index', 9);
				trigger('eventResizeStart', this, event, ev, ui);
			},
			resize: function(ev, ui) {
				// don't rely on ui.size.height, doesn't take grid into account
				snapDelta = Math.round((Math.max(snapHeight, eventElement.height()) - ui.originalSize.height) / snapHeight);
				if (snapDelta != prevSnapDelta) {
					timeElement.text(
						formatDates(
							event.start,
							(!snapDelta && !event.end) ? null : // no change, so don't display time range
								addMinutes(eventEnd(event), snapMinutes*snapDelta),
							opt('timeFormat')
						)
					);
					prevSnapDelta = snapDelta;
				}
			},
			stop: function(ev, ui) {
				trigger('eventResizeStop', this, event, ev, ui);
				if (snapDelta) {
					eventResize(this, event, 0, snapMinutes*snapDelta, ev, ui);
				}else{
					eventElement.css('z-index', 8);
					showEvents(event, eventElement);
					// BUG: if event was really short, need to put title back in span
				}
			}
		});
	}
	

}


function countForwardSegs(levels) {
	var i, j, k, level, segForward, segBack;
	for (i=levels.length-1; i>0; i--) {
		level = levels[i];
		for (j=0; j<level.length; j++) {
			segForward = level[j];
			for (k=0; k<levels[i-1].length; k++) {
				segBack = levels[i-1][k];
				if (segsCollide(segForward, segBack)) {
					segBack.forward = Math.max(segBack.forward||0, (segForward.forward||0)+1);
				}
			}
		}
	}
}



;;


function View(element, calendar, viewName) {
	var t = this;
	
	
	// exports
	t.element = element;
	t.calendar = calendar;
	t.name = viewName;
	t.opt = opt;
	t.trigger = trigger;
	//t.setOverflowHidden = setOverflowHidden;
	t.isEventDraggable = isEventDraggable;
	t.isEventResizable = isEventResizable;
	t.reportEvents = reportEvents;
	t.eventEnd = eventEnd;
	t.reportEventElement = reportEventElement;
	t.reportEventClear = reportEventClear;
	t.eventElementHandlers = eventElementHandlers;
	t.showEvents = showEvents;
	t.hideEvents = hideEvents;
	t.eventDrop = eventDrop;
	t.eventResize = eventResize;
	// t.title
	// t.start, t.end
	// t.visStart, t.visEnd
	
	
	// imports
	var defaultEventEnd = t.defaultEventEnd;
	var normalizeEvent = calendar.normalizeEvent; // in EventManager
	var reportEventChange = calendar.reportEventChange;
	
	
	// locals
	var eventsByID = {};
	var eventElements = [];
	var eventElementsByID = {};
	var options = calendar.options;
	
	
	
	function opt(name, viewNameOverride) {
		var v = options[name];
		if (typeof v == 'object') {
			return smartProperty(v, viewNameOverride || viewName);
		}
		return v;
	}

	
	function trigger(name, thisObj) {
		return calendar.trigger.apply(
			calendar,
			[name, thisObj || t].concat(Array.prototype.slice.call(arguments, 2), [t])
		);
	}
	
	
	/*
	function setOverflowHidden(bool) {
		element.css('overflow', bool ? 'hidden' : '');
	}
	*/
	
	
	function isEventDraggable(event) {
		return isEventEditable(event) && !opt('disableDragging');
	}
	
	
	function isEventResizable(event) { // but also need to make sure the seg.isEnd == true
		return isEventEditable(event) && !opt('disableResizing');
	}
	
	
	function isEventEditable(event) {
		return firstDefined(event.editable, (event.source || {}).editable, opt('editable'));
	}
	
	
	
	/* Event Data
	------------------------------------------------------------------------------*/
	
	
	// report when view receives new events
	function reportEvents(events) { // events are already normalized at this point
		eventsByID = {};
		var i, len=events.length, event;
		for (i=0; i<len; i++) {
			event = events[i];
			if (eventsByID[event._id]) {
				eventsByID[event._id].push(event);
			}else{
				eventsByID[event._id] = [event];
			}
		}
	}
	
	
	// returns a Date object for an event's end
	function eventEnd(event) {
		return event.end ? cloneDate(event.end) : defaultEventEnd(event);
	}
	
	
	
	/* Event Elements
	------------------------------------------------------------------------------*/
	
	
	// report when view creates an element for an event
	function reportEventElement(event, element) {
		eventElements.push(element);
		if (eventElementsByID[event._id]) {
			eventElementsByID[event._id].push(element);
		}else{
			eventElementsByID[event._id] = [element];
		}
	}
	
	
	function reportEventClear() {
		eventElements = [];
		eventElementsByID = {};
	}
	
	
	// attaches eventClick, eventMouseover, eventMouseout
	function eventElementHandlers(event, eventElement) {
		eventElement
			.click(function(ev) {
				if (!eventElement.hasClass('ui-draggable-dragging') &&
					!eventElement.hasClass('ui-resizable-resizing')) {
						return trigger('eventClick', this, event, ev);
					}
			})
			.hover(
				function(ev) {
					trigger('eventMouseover', this, event, ev);
				},
				function(ev) {
					trigger('eventMouseout', this, event, ev);
				}
			);
		// TODO: don't fire eventMouseover/eventMouseout *while* dragging is occuring (on subject element)
		// TODO: same for resizing
	}
	
	
	function showEvents(event, exceptElement) {
		eachEventElement(event, exceptElement, 'show');
	}
	
	
	function hideEvents(event, exceptElement) {
		eachEventElement(event, exceptElement, 'hide');
	}
	
	
	function eachEventElement(event, exceptElement, funcName) {
		var elements = eventElementsByID[event._id],
			i, len = elements.length;
		for (i=0; i<len; i++) {
			if (!exceptElement || elements[i][0] != exceptElement[0]) {
				elements[i][funcName]();
			}
		}
	}
	
	
	
	/* Event Modification Reporting
	---------------------------------------------------------------------------------*/
	
	
	function eventDrop(e, event, dayDelta, minuteDelta, allDay, ev, ui) {
		var oldAllDay = event.allDay;
		var eventId = event._id;
		moveEvents(eventsByID[eventId], dayDelta, minuteDelta, allDay);
		trigger(
			'eventDrop',
			e,
			event,
			dayDelta,
			minuteDelta,
			allDay,
			function() {
				// TODO: investigate cases where this inverse technique might not work
				moveEvents(eventsByID[eventId], -dayDelta, -minuteDelta, oldAllDay);
				reportEventChange(eventId);
			},
			ev,
			ui
		);
		reportEventChange(eventId);
	}
	
	
	function eventResize(e, event, dayDelta, minuteDelta, ev, ui) {
		var eventId = event._id;
		elongateEvents(eventsByID[eventId], dayDelta, minuteDelta);
		trigger(
			'eventResize',
			e,
			event,
			dayDelta,
			minuteDelta,
			function() {
				// TODO: investigate cases where this inverse technique might not work
				elongateEvents(eventsByID[eventId], -dayDelta, -minuteDelta);
				reportEventChange(eventId);
			},
			ev,
			ui
		);
		reportEventChange(eventId);
	}
	
	
	
	/* Event Modification Math
	---------------------------------------------------------------------------------*/
	
	
	function moveEvents(events, dayDelta, minuteDelta, allDay) {
		minuteDelta = minuteDelta || 0;
		for (var e, len=events.length, i=0; i<len; i++) {
			e = events[i];
			if (allDay !== undefined) {
				e.allDay = allDay;
			}
			addMinutes(addDays(e.start, dayDelta, true), minuteDelta);
			if (e.end) {
				e.end = addMinutes(addDays(e.end, dayDelta, true), minuteDelta);
			}
			normalizeEvent(e, options);
		}
	}
	
	
	function elongateEvents(events, dayDelta, minuteDelta) {
		minuteDelta = minuteDelta || 0;
		for (var e, len=events.length, i=0; i<len; i++) {
			e = events[i];
			e.end = addMinutes(addDays(eventEnd(e), dayDelta, true), minuteDelta);
			normalizeEvent(e, options);
		}
	}
	

}

;;

function DayEventRenderer() {
	var t = this;

	
	// exports
	t.renderDaySegs = renderDaySegs;
	t.resizableDayEvent = resizableDayEvent;
	
	
	// imports
	var opt = t.opt;
	var trigger = t.trigger;
	var isEventDraggable = t.isEventDraggable;
	var isEventResizable = t.isEventResizable;
	var eventEnd = t.eventEnd;
	var reportEventElement = t.reportEventElement;
	var showEvents = t.showEvents;
	var hideEvents = t.hideEvents;
	var eventResize = t.eventResize;
	var getRowCnt = t.getRowCnt;
	var getColCnt = t.getColCnt;
	var getColWidth = t.getColWidth;
	var allDayRow = t.allDayRow;
	var allDayBounds = t.allDayBounds;
	var colContentLeft = t.colContentLeft;
	var colContentRight = t.colContentRight;
	var dayOfWeekCol = t.dayOfWeekCol;
	var dateCell = t.dateCell;
	var compileDaySegs = t.compileDaySegs;
	var getDaySegmentContainer = t.getDaySegmentContainer;
	var bindDaySeg = t.bindDaySeg; //TODO: streamline this
	var formatDates = t.calendar.formatDates;
	var renderDayOverlay = t.renderDayOverlay;
	var clearOverlays = t.clearOverlays;
	var clearSelection = t.clearSelection;
	
	
	
	/* Rendering
	-----------------------------------------------------------------------------*/
	
	
	function renderDaySegs(segs, modifiedEventId) {
		var segmentContainer = getDaySegmentContainer();
		var rowDivs;
		var rowCnt = getRowCnt();
		var colCnt = getColCnt();
		var i = 0;
		var rowI;
		var levelI;
		var colHeights;
		var j;
		var segCnt = segs.length;
		var seg;
		var top;
		var k;
		segmentContainer[0].innerHTML = daySegHTML(segs); // faster than .html()
		daySegElementResolve(segs, segmentContainer.children());
		daySegElementReport(segs);
		daySegHandlers(segs, segmentContainer, modifiedEventId);
		daySegCalcHSides(segs);
		daySegSetWidths(segs);
		daySegCalcHeights(segs);
		rowDivs = getRowDivs();
		// set row heights, calculate event tops (in relation to row top)
		for (rowI=0; rowI<rowCnt; rowI++) {
			levelI = 0;
			colHeights = [];
			for (j=0; j<colCnt; j++) {
				colHeights[j] = 0;
			}
			while (i<segCnt && (seg = segs[i]).row == rowI) {
				// loop through segs in a row
				top = arrayMax(colHeights.slice(seg.startCol, seg.endCol));
				seg.top = top;
				top += seg.outerHeight;
				for (k=seg.startCol; k<seg.endCol; k++) {
					colHeights[k] = top;
				}
				i++;
			}
			rowDivs[rowI].height(arrayMax(colHeights));
		}
		daySegSetTops(segs, getRowTops(rowDivs));
	}
	
	
	function renderTempDaySegs(segs, adjustRow, adjustTop) {
		var tempContainer = $("<div/>");
		var elements;
		var segmentContainer = getDaySegmentContainer();
		var i;
		var segCnt = segs.length;
		var element;
		tempContainer[0].innerHTML = daySegHTML(segs); // faster than .html()
		elements = tempContainer.children();
		segmentContainer.append(elements);
		daySegElementResolve(segs, elements);
		daySegCalcHSides(segs);
		daySegSetWidths(segs);
		daySegCalcHeights(segs);
		daySegSetTops(segs, getRowTops(getRowDivs()));
		elements = [];
		for (i=0; i<segCnt; i++) {
			element = segs[i].element;
			if (element) {
				if (segs[i].row === adjustRow) {
					element.css('top', adjustTop);
				}
				elements.push(element[0]);
			}
		}
		return $(elements);
	}
	
	
	function daySegHTML(segs) { // also sets seg.left and seg.outerWidth
		var rtl = opt('isRTL');
		var i;
		var segCnt=segs.length;
		var seg;
		var event;
		var url;
		var classes;
		var bounds = allDayBounds();
		var minLeft = bounds.left;
		var maxLeft = bounds.right;
		var leftCol;
		var rightCol;
		var left;
		var right;
		var skinCss;
		var html = '';
		// calculate desired position/dimensions, create html
		for (i=0; i<segCnt; i++) {
			seg = segs[i];
			event = seg.event;
			classes = ['fc-event', 'fc-event-hori'];
			if (isEventDraggable(event)) {
				classes.push('fc-event-draggable');
			}
			if (seg.isStart) {
				classes.push('fc-event-start');
			}
			if (seg.isEnd) {
				classes.push('fc-event-end');
			}
			if (rtl) {
				leftCol = dayOfWeekCol(seg.end.getDay()-1);
				rightCol = dayOfWeekCol(seg.start.getDay());
				left = seg.isEnd ? colContentLeft(leftCol) : minLeft;
				right = seg.isStart ? colContentRight(rightCol) : maxLeft;
			}else{
				leftCol = dayOfWeekCol(seg.start.getDay());
				rightCol = dayOfWeekCol(seg.end.getDay()-1);
				left = seg.isStart ? colContentLeft(leftCol) : minLeft;
				right = seg.isEnd ? colContentRight(rightCol) : maxLeft;
			}
			classes = classes.concat(event.className);
			if (event.source) {
				classes = classes.concat(event.source.className || []);
			}
			url = event.url;
			skinCss = getSkinCss(event, opt);
			if (url) {
				html += "<a href='" + htmlEscape(url) + "'";
			}else{
				html += "<div";
			}
			html +=
				" class='" + classes.join(' ') + "'" +
				" style='position:absolute;z-index:8;left:"+left+"px;" + skinCss + "'" +
				">" +
				"<div class='fc-event-inner'>";
			if (!event.allDay && seg.isStart) {
				html +=
					"<span class='fc-event-time'>" +
					htmlEscape(formatDates(event.start, event.end, opt('timeFormat'))) +
					"</span>";
			}
			html +=
				"<span class='fc-event-title'>" + htmlEscape(event.title) + "</span>" +
				"</div>";
			if (seg.isEnd && isEventResizable(event)) {
				html +=
					"<div class='ui-resizable-handle ui-resizable-" + (rtl ? 'w' : 'e') + "'>" +
					"&nbsp;&nbsp;&nbsp;" + // makes hit area a lot better for IE6/7
					"</div>";
			}
			html +=
				"</" + (url ? "a" : "div" ) + ">";
			seg.left = left;
			seg.outerWidth = right - left;
			seg.startCol = leftCol;
			seg.endCol = rightCol + 1; // needs to be exclusive
		}
		return html;
	}
	
	
	function daySegElementResolve(segs, elements) { // sets seg.element
		var i;
		var segCnt = segs.length;
		var seg;
		var event;
		var element;
		var triggerRes;
		for (i=0; i<segCnt; i++) {
			seg = segs[i];
			event = seg.event;
			element = $(elements[i]); // faster than .eq()
			triggerRes = trigger('eventRender', event, event, element);
			if (triggerRes === false) {
				element.remove();
			}else{
				if (triggerRes && triggerRes !== true) {
					triggerRes = $(triggerRes)
						.css({
							position: 'absolute',
							left: seg.left
						});
					element.replaceWith(triggerRes);
					element = triggerRes;
				}
				seg.element = element;
			}
		}
	}
	
	
	function daySegElementReport(segs) {
		var i;
		var segCnt = segs.length;
		var seg;
		var element;
		for (i=0; i<segCnt; i++) {
			seg = segs[i];
			element = seg.element;
			if (element) {
				reportEventElement(seg.event, element);
			}
		}
	}
	
	
	function daySegHandlers(segs, segmentContainer, modifiedEventId) {
		var i;
		var segCnt = segs.length;
		var seg;
		var element;
		var event;
		// retrieve elements, run through eventRender callback, bind handlers
		for (i=0; i<segCnt; i++) {
			seg = segs[i];
			element = seg.element;
			if (element) {
				event = seg.event;
				if (event._id === modifiedEventId) {
					bindDaySeg(event, element, seg);
				}else{
					element[0]._fci = i; // for lazySegBind
				}
			}
		}
		lazySegBind(segmentContainer, segs, bindDaySeg);
	}
	
	
	function daySegCalcHSides(segs) { // also sets seg.key
		var i;
		var segCnt = segs.length;
		var seg;
		var element;
		var key, val;
		var hsideCache = {};
		// record event horizontal sides
		for (i=0; i<segCnt; i++) {
			seg = segs[i];
			element = seg.element;
			if (element) {
				key = seg.key = cssKey(element[0]);
				val = hsideCache[key];
				if (val === undefined) {
					val = hsideCache[key] = hsides(element, true);
				}
				seg.hsides = val;
			}
		}
	}
	
	
	function daySegSetWidths(segs) {
		var i;
		var segCnt = segs.length;
		var seg;
		var element;
		for (i=0; i<segCnt; i++) {
			seg = segs[i];
			element = seg.element;
			if (element) {
				element[0].style.width = Math.max(0, seg.outerWidth - seg.hsides) + 'px';
			}
		}
	}
	
	
	function daySegCalcHeights(segs) {
		var i;
		var segCnt = segs.length;
		var seg;
		var element;
		var key, val;
		var vmarginCache = {};
		// record event heights
		for (i=0; i<segCnt; i++) {
			seg = segs[i];
			element = seg.element;
			if (element) {
				key = seg.key; // created in daySegCalcHSides
				val = vmarginCache[key];
				if (val === undefined) {
					val = vmarginCache[key] = vmargins(element);
				}
				seg.outerHeight = element[0].offsetHeight + val;
			}
		}
	}
	
	
	function getRowDivs() {
		var i;
		var rowCnt = getRowCnt();
		var rowDivs = [];
		for (i=0; i<rowCnt; i++) {
			rowDivs[i] = allDayRow(i)
				.find('div.fc-day-content > div'); // optimal selector?
		}
		return rowDivs;
	}
	
	
	function getRowTops(rowDivs) {
		var i;
		var rowCnt = rowDivs.length;
		var tops = [];
		for (i=0; i<rowCnt; i++) {
			tops[i] = rowDivs[i][0].offsetTop; // !!?? but this means the element needs position:relative if in a table cell!!!!
		}
		return tops;
	}
	
	
	function daySegSetTops(segs, rowTops) { // also triggers eventAfterRender
		var i;
		var segCnt = segs.length;
		var seg;
		var element;
		var event;
		for (i=0; i<segCnt; i++) {
			seg = segs[i];
			element = seg.element;
			if (element) {
				element[0].style.top = rowTops[seg.row] + (seg.top||0) + 'px';
				event = seg.event;
				trigger('eventAfterRender', event, event, element);
			}
		}
	}
	
	
	
	/* Resizing
	-----------------------------------------------------------------------------------*/
	
	
	function resizableDayEvent(event, element, seg) {
		var rtl = opt('isRTL');
		var direction = rtl ? 'w' : 'e';
		var handle = element.find('.ui-resizable-' + direction); // TODO: stop using this class because we aren't using jqui for this
		var isResizing = false;
		
		// TODO: look into using jquery-ui mouse widget for this stuff
		disableTextSelection(element); // prevent native <a> selection for IE
		element
			.mousedown(function(ev) { // prevent native <a> selection for others
				ev.preventDefault();
			})
			.click(function(ev) {
				if (isResizing) {
					ev.preventDefault(); // prevent link from being visited (only method that worked in IE6)
					ev.stopImmediatePropagation(); // prevent fullcalendar eventClick handler from being called
					                               // (eventElementHandlers needs to be bound after resizableDayEvent)
				}
			});
		
		handle.mousedown(function(ev) {
			if (ev.which != 1) {
				return; // needs to be left mouse button
			}
			isResizing = true;
			var hoverListener = t.getHoverListener();
			var rowCnt = getRowCnt();
			var colCnt = getColCnt();
			var dis = rtl ? -1 : 1;
			var dit = rtl ? colCnt-1 : 0;
			var elementTop = element.css('top');
			var dayDelta;
			var helpers;
			var eventCopy = $.extend({}, event);
			var minCell = dateCell(event.start);
			clearSelection();
			$('body')
				.css('cursor', direction + '-resize')
				.one('mouseup', mouseup);
			trigger('eventResizeStart', this, event, ev);
			hoverListener.start(function(cell, origCell) {
				if (cell) {
					var r = Math.max(minCell.row, cell.row);
					var c = cell.col;
					if (rowCnt == 1) {
						r = 0; // hack for all-day area in agenda views
					}
					if (r == minCell.row) {
						if (rtl) {
							c = Math.min(minCell.col, c);
						}else{
							c = Math.max(minCell.col, c);
						}
					}
					dayDelta = (r*7 + c*dis+dit) - (origCell.row*7 + origCell.col*dis+dit);
					var newEnd = addDays(eventEnd(event), dayDelta, true);
					if (dayDelta) {
						eventCopy.end = newEnd;
						var oldHelpers = helpers;
						helpers = renderTempDaySegs(compileDaySegs([eventCopy]), seg.row, elementTop);
						helpers.find('*').css('cursor', direction + '-resize');
						if (oldHelpers) {
							oldHelpers.remove();
						}
						hideEvents(event);
					}else{
						if (helpers) {
							showEvents(event);
							helpers.remove();
							helpers = null;
						}
					}
					clearOverlays();
					renderDayOverlay(event.start, addDays(cloneDate(newEnd), 1)); // coordinate grid already rebuild at hoverListener.start
				}
			}, ev);
			
			function mouseup(ev) {
				trigger('eventResizeStop', this, event, ev);
				$('body').css('cursor', '');
				hoverListener.stop();
				clearOverlays();
				if (dayDelta) {
					eventResize(this, event, dayDelta, 0, ev);
					// event redraw will clear helpers
				}
				// otherwise, the drag handler already restored the old events
				
				setTimeout(function() { // make this happen after the element's click event
					isResizing = false;
				},0);
			}
			
		});
	}
	

}

;;

//BUG: unselect needs to be triggered when events are dragged+dropped

function SelectionManager() {
	var t = this;
	
	
	// exports
	t.select = select;
	t.unselect = unselect;
	t.reportSelection = reportSelection;
	t.daySelectionMousedown = daySelectionMousedown;
	
	
	// imports
	var opt = t.opt;
	var trigger = t.trigger;
	var defaultSelectionEnd = t.defaultSelectionEnd;
	var renderSelection = t.renderSelection;
	var clearSelection = t.clearSelection;
	
	
	// locals
	var selected = false;



	// unselectAuto
	if (opt('selectable') && opt('unselectAuto')) {
		$(document).mousedown(function(ev) {
			var ignore = opt('unselectCancel');
			if (ignore) {
				if ($(ev.target).parents(ignore).length) { // could be optimized to stop after first match
					return;
				}
			}
			unselect(ev);
		});
	}
	

	function select(startDate, endDate, allDay) {
		unselect();
		if (!endDate) {
			endDate = defaultSelectionEnd(startDate, allDay);
		}
		renderSelection(startDate, endDate, allDay);
		reportSelection(startDate, endDate, allDay);
	}
	
	
	function unselect(ev) {
		if (selected) {
			selected = false;
			clearSelection();
			trigger('unselect', null, ev);
		}
	}
	
	
	function reportSelection(startDate, endDate, allDay, ev) {
		selected = true;
		trigger('select', null, startDate, endDate, allDay, ev);
	}
	
	
	function daySelectionMousedown(ev) { // not really a generic manager method, oh well
		var cellDate = t.cellDate;
		var cellIsAllDay = t.cellIsAllDay;
		var hoverListener = t.getHoverListener();
		var reportDayClick = t.reportDayClick; // this is hacky and sort of weird
		if (ev.which == 1 && opt('selectable')) { // which==1 means left mouse button
			unselect(ev);
			var _mousedownElement = this;
			var dates;
			hoverListener.start(function(cell, origCell) { // TODO: maybe put cellDate/cellIsAllDay info in cell
				clearSelection();
				if (cell && cellIsAllDay(cell)) {
					dates = [ cellDate(origCell), cellDate(cell) ].sort(cmp);
					renderSelection(dates[0], dates[1], true);
				}else{
					dates = null;
				}
			}, ev);
			$(document).one('mouseup', function(ev) {
				hoverListener.stop();
				if (dates) {
					if (+dates[0] == +dates[1]) {
						reportDayClick(dates[0], true, ev);
					}
					reportSelection(dates[0], dates[1], true, ev);
				}
			});
		}
	}


}

;;
 
function OverlayManager() {
	var t = this;
	
	
	// exports
	t.renderOverlay = renderOverlay;
	t.clearOverlays = clearOverlays;
	
	
	// locals
	var usedOverlays = [];
	var unusedOverlays = [];
	
	
	function renderOverlay(rect, parent) {
		var e = unusedOverlays.shift();
		if (!e) {
			e = $("<div class='fc-cell-overlay' style='position:absolute;z-index:3'/>");
		}
		if (e[0].parentNode != parent[0]) {
			e.appendTo(parent);
		}
		usedOverlays.push(e.css(rect).show());
		return e;
	}
	

	function clearOverlays() {
		var e;
		while (e = usedOverlays.shift()) {
			unusedOverlays.push(e.hide().unbind());
		}
	}


}

;;

function CoordinateGrid(buildFunc) {

	var t = this;
	var rows;
	var cols;
	
	
	t.build = function() {
		rows = [];
		cols = [];
		buildFunc(rows, cols);
	};
	
	
	t.cell = function(x, y) {
		var rowCnt = rows.length;
		var colCnt = cols.length;
		var i, r=-1, c=-1;
		for (i=0; i<rowCnt; i++) {
			if (y >= rows[i][0] && y < rows[i][1]) {
				r = i;
				break;
			}
		}
		for (i=0; i<colCnt; i++) {
			if (x >= cols[i][0] && x < cols[i][1]) {
				c = i;
				break;
			}
		}
		return (r>=0 && c>=0) ? { row:r, col:c } : null;
	};
	
	
	t.rect = function(row0, col0, row1, col1, originElement) { // row1,col1 is inclusive
		var origin = originElement.offset();
		return {
			top: rows[row0][0] - origin.top,
			left: cols[col0][0] - origin.left,
			width: cols[col1][1] - cols[col0][0],
			height: rows[row1][1] - rows[row0][0]
		};
	};

}

;;

function HoverListener(coordinateGrid) {


	var t = this;
	var bindType;
	var change;
	var firstCell;
	var cell;
	
	
	t.start = function(_change, ev, _bindType) {
		change = _change;
		firstCell = cell = null;
		coordinateGrid.build();
		mouse(ev);
		bindType = _bindType || 'mousemove';
		$(document).bind(bindType, mouse);
	};
	
	
	function mouse(ev) {
		_fixUIEvent(ev); // see below
		var newCell = coordinateGrid.cell(ev.pageX, ev.pageY);
		if (!newCell != !cell || newCell && (newCell.row != cell.row || newCell.col != cell.col)) {
			if (newCell) {
				if (!firstCell) {
					firstCell = newCell;
				}
				change(newCell, firstCell, newCell.row-firstCell.row, newCell.col-firstCell.col);
			}else{
				change(newCell, firstCell);
			}
			cell = newCell;
		}
	}
	
	
	t.stop = function() {
		$(document).unbind(bindType, mouse);
		return cell;
	};
	
	
}



// this fix was only necessary for jQuery UI 1.8.16 (and jQuery 1.7 or 1.7.1)
// upgrading to jQuery UI 1.8.17 (and using either jQuery 1.7 or 1.7.1) fixed the problem
// but keep this in here for 1.8.16 users
// and maybe remove it down the line

function _fixUIEvent(event) { // for issue 1168
	if (event.pageX === undefined) {
		event.pageX = event.originalEvent.pageX;
		event.pageY = event.originalEvent.pageY;
	}
}
;;

function HorizontalPositionCache(getElement) {

	var t = this,
		elements = {},
		lefts = {},
		rights = {};
		
	function e(i) {
		return elements[i] = elements[i] || getElement(i);
	}
	
	t.left = function(i) {
		return lefts[i] = lefts[i] === undefined ? e(i).position().left : lefts[i];
	};
	
	t.right = function(i) {
		return rights[i] = rights[i] === undefined ? t.left(i) + e(i).width() : rights[i];
	};
	
	t.clear = function() {
		elements = {};
		lefts = {};
		rights = {};
	};
	
}

;;

})(jQuery);
//######
//## This work is licensed under the Creative Commons Attribution-Share Alike 3.0 
//## United States License. To view a copy of this license, 
//## visit http://creativecommons.org/licenses/by-sa/3.0/us/ or send a letter 
//## to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.
//######

(function($){
 $.fn.idleTimeout = function(options) {
    var defaults = {
			inactivity: 1200000, //20 Minutes
			noconfirm: 10000, //10 Seconds
			sessionAlive: 30000, //10 Minutes
			redirect_url: '/js_sandbox/',
			click_reset: true,
			alive_url: '/js_sandbox/',
			logout_url: '/js_sandbox/'
		}
    
    //##############################
    //## Private Variables
    //##############################
    var opts = $.extend(defaults, options);
    var liveTimeout, confTimeout, sessionTimeout;
    var modal = "<div id='modal_pop'><p>You are about to be signed out due to inactivity.</p></div>";
    //##############################
    //## Private Functions
    //##############################
    var start_liveTimeout = function()
    {
      clearTimeout(liveTimeout);
      clearTimeout(confTimeout);
      liveTimeout = setTimeout(logout, opts.inactivity);
      
      if(opts.sessionAlive)
      {
        clearTimeout(sessionTimeout);
        sessionTimeout = setTimeout(keep_session, opts.sessionAlive);
      }
    }
    
    var logout = function()
    {
      
      confTimeout = setTimeout(redirect, opts.noconfirm);
      $(modal).dialog({
        buttons: {"Stay Logged In":  function(){
          $(this).dialog('close');
          stay_logged_in();
        }},
        modal: true,
        title: 'Auto Logout'
      });
      
    }
    
    var redirect = function()
    {
      if(opts.logout_url)
      {
        $.get(opts.logout_url);
      }
      window.location.href = opts.redirect_url;
    }
    
    var stay_logged_in = function(el)
    {
      start_liveTimeout();
      if(opts.alive_url)
      {
        $.get(opts.alive_url);
      }
    }
    
    var keep_session = function()
    {
      $.get(opts.alive_url);
      clearTimeout(sessionTimeout);
      sessionTimeout = setTimeout(keep_session, opts.sessionAlive);
    } 
    
    //###############################
    //Build & Return the instance of the item as a plugin
    // This is basically your construct.
    //###############################
    return this.each(function() {
      obj = $(this);
      start_liveTimeout();
      if(opts.click_reset)
      {
        $(document).bind('click', start_liveTimeout);
      }
      if(opts.sessionAlive)
      {
        keep_session();
      }
    });
    
 };
})(jQuery);
/*
 * jQuery iFramer
 * By: Trent Richardson [http://trentrichardson.com]
 * Version 0.1
 * Last Modified: 6/5/2009
 * 
 * Copyright 2009 Trent Richardson
 * Dual licensed under the MIT and GPL licenses.
 * http://trentrichardson.com/Impromptu/GPL-LICENSE.txt
 * http://trentrichardson.com/Impromptu/MIT-LICENSE.txt
 * 
 */
(function($){

	$.fn.extend({
		iframer: function(options){
			options = $.extend({},{ iframe: 'iframer_iframe', returnType: 'html', onComplete:function(){} },options);
			
			var $theframe = $('<iframe name='+ options.iframe +' id="'+ options.iframe +'" width="0" height="0" frameborder="0" style="border: none; display: none; visibility: hidden;"></iframe>');

			$(this).append($theframe).attr('target',options.iframe).submit(function(){
				$('#'+ options.iframe).load(function(){
					var data = $('#'+ options.iframe).contents().find('body').html();
					if(options.returnType.toLowerCase() == 'json')
						eval('data='+ data);
					options.onComplete(data);
					$('#'+ options.iframe).contents().find('body').html('');
					$('#'+ options.iframe).unbind('load');
				});
				
				return true;
			});			
		}
	});

})(jQuery);
/*
* .serializeObject (c) Dan Heberden
* danheberden.com
*
* Gives you a pretty object for your form elements
*/
(function($){
  $.fn.serializeObject = function() {
    if ( !this.length ) { return false; }

    var $el = this,
      data = {},
      lookup = data; //current reference of data

      $el.find(':input[type!="checkbox"][type!="radio"], input:checked').each(function() {
        // data[a][b] becomes [ data, a, b ]
        var named = this.name.replace(/\[([^\]]+)?\]/g, ',$1').split(','),
            cap = named.length - 1,
            i = 0;

        // Ensure that only elements with valid `name` properties will be serialized
        if ( named[ 0 ] ) {
          for ( ; i < cap; i++ ) {
              // move down the tree - create objects or array if necessary
              lookup = lookup[ named[i] ] = lookup[ named[i] ] ||
                  ( named[i+1] == "" ? [] : {} );
          }

          // at the end, psuh or assign the value
          if ( lookup.length != undefined ) {
               lookup.push( $(this).val() );
          }else {
                lookup[ named[ cap ] ]  = $(this).val();
          }

          // assign the reference back to root
          lookup = data;

        }
      });

    return data;
  };
})(jQuery);
/*
 SignaturePad: A jQuery plugin for assisting in the creation of an HTML5 canvas
 based signature pad. Records the drawn signature in JSON for later regeneration.

 Dependencies: FlashCanvas/1.5, json2.js, jQuery/1.3.2+

 @project ca.thomasjbradley.applications.signaturepad
 @author Thomas J Bradley <hey@thomasjbradley.ca>
 @link http://thomasjbradley.ca/lab/signature-pad
 @link http://github.com/thomasjbradley/signature-pad
 @copyright Copyright MMXI, Thomas J Bradley
 @license New BSD License
 @version 2.1.2
*/
(function(c){function C(n,q){function s(a,e){var f=c(a.target).offset(),g;clearTimeout(o);o=false;if(typeof a.changedTouches!=="undefined"){g=Math.floor(a.changedTouches[0].pageX-f.left);f=Math.floor(a.changedTouches[0].pageY-f.top)}else{g=Math.floor(a.pageX-f.left);f=Math.floor(a.pageY-f.top)}if(j.x===g&&j.y===f)return true;if(j.x===null)j.x=g;if(j.y===null)j.y=f;if(e)f+=e;h.beginPath();h.moveTo(j.x,j.y);h.lineTo(g,f);h.lineCap=b.penCap;h.stroke();h.closePath();l.push({lx:g,ly:f,mx:j.x,my:j.y});
j.x=g;j.y=f}function m(){r?i.each(function(){this.ontouchmove=null}):i.unbind("mousemove.signaturepad");j.x=null;j.y=null;l.length>0&&c(b.output,d).val(JSON.stringify(l))}function t(){m();h.clearRect(0,0,k.width,k.height);h.fillStyle=b.bgColour;h.fillRect(0,0,k.width,k.height);if(!b.displayOnly)if(b.lineWidth){h.beginPath();h.lineWidth=b.lineWidth;h.strokeStyle=b.lineColour;h.moveTo(b.lineMargin,b.lineTop);h.lineTo(k.width-b.lineMargin,b.lineTop);h.stroke();h.closePath()}h.lineWidth=b.penWidth;h.strokeStyle=
b.penColour;c(b.output,d).val("");l=[]}function w(a){r?i.each(function(){this.addEventListener("touchmove",s,false)}):i.bind("mousemove.signaturepad",s);s(a,1)}function D(){u=false;if(r)i.each(function(){this.removeEventListener("touchstart",m);this.removeEventListener("touchend",m);this.removeEventListener("touchmove",s)});else{i.unbind("mousedown.signaturepad");i.unbind("mouseup.signaturepad");i.unbind("mousemove.signaturepad");i.unbind("mouseleave.signaturepad")}c(b.clear,d).unbind("click.signaturepad")}
function x(a){if(u)return false;u=true;if(typeof a.changedTouches!=="undefined")r=true;if(r){i.each(function(){this.addEventListener("touchend",m,false);this.addEventListener("touchcancel",m,false)});i.unbind("mousedown.signaturepad")}else{i.bind("mouseup.signaturepad",function(){m()});i.bind("mouseleave.signaturepad",function(){o||(o=setTimeout(function(){m();clearTimeout(o);o=false},500))});i.each(function(){this.ontouchstart=null})}}function v(){c(b.typed,d).hide();t();i.each(function(){this.ontouchstart=
function(a){a.preventDefault();x(a);w(a,this)}});i.bind("mousedown.signaturepad",function(a){x(a);w(a,this)});c(b.clear,d).bind("click.signaturepad",function(a){a.preventDefault();t()});c(b.typeIt,d).bind("click.signaturepad",function(a){a.preventDefault();y()});c(b.drawIt,d).unbind("click.signaturepad");c(b.drawIt,d).bind("click.signaturepad",function(a){a.preventDefault()});c(b.typeIt,d).removeClass(b.currentClass);c(b.drawIt,d).addClass(b.currentClass);c(b.sig,d).addClass(b.currentClass);c(b.typeItDesc,
d).hide();c(b.drawItDesc,d).show();c(b.clear,d).show()}function y(){t();D();c(b.typed,d).show();c(b.drawIt,d).bind("click.signaturepad",function(a){a.preventDefault();v()});c(b.typeIt,d).unbind("click.signaturepad");c(b.typeIt,d).bind("click.signaturepad",function(a){a.preventDefault()});c(b.output,d).val("");c(b.drawIt,d).removeClass(b.currentClass);c(b.typeIt,d).addClass(b.currentClass);c(b.sig,d).removeClass(b.currentClass);c(b.drawItDesc,d).hide();c(b.clear,d).hide();c(b.typeItDesc,d).show()}
function z(a){for(c(b.typed,d).html(a.replace(/>/g,"&gt;").replace(/</g,"&lt;"));c(b.typed,d).width()>k.width;){a=c(b.typed,d).css("font-size").replace(/px/,"");c(b.typed,d).css("font-size",a-1+"px")}}function E(a,e){c("p."+e.errorClass,a).remove();a.removeClass(e.errorClass);c("input, label",a).removeClass(e.errorClass)}function F(a,e,f){if(a.nameInvalid){e.prepend(['<p class="',f.errorClass,'">',f.errorMessage,"</p>"].join(""));c(f.name,e).focus();c(f.name,e).addClass(f.errorClass);c("label[for="+
c(f.name).attr("id")+"]",e).addClass(f.errorClass)}a.drawInvalid&&e.prepend(['<p class="',f.errorClass,'">',f.errorMessageDraw,"</p>"].join(""))}function A(){var a=true,e={drawInvalid:false,nameInvalid:false},f=[d,b],g=[e,d,b];b.onBeforeValidate&&typeof b.onBeforeValidate==="function"?b.onBeforeValidate.apply(p,f):E.apply(p,f);if(b.drawOnly&&l.length<1){e.drawInvalid=true;a=false}if(c(b.name,d).val()===""){e.nameInvalid=true;a=false}b.onFormError&&typeof b.onFormError==="function"?b.onFormError.apply(p,
g):F.apply(p,g);return a}function B(a,e,f){for(var g in a)if(typeof a[g]==="object"){e.beginPath();e.moveTo(a[g].mx,a[g].my);e.lineTo(a[g].lx,a[g].ly);e.lineCap=b.penCap;e.stroke();e.closePath();f&&l.push({lx:a[g].lx,ly:a[g].ly,mx:a[g].mx,my:a[g].my})}}function G(){if(parseFloat((/CPU.+OS ([0-9_]{3}).*AppleWebkit.*Mobile/i.exec(navigator.userAgent)||[0,"4_2"])[1].replace("_","."))<4.1){c.fn.Oldoffset=c.fn.offset;c.fn.offset=function(){var a=c(this).Oldoffset();a.top-=window.scrollY;a.left-=window.scrollX;
return a}}c(b.typed,d).bind("selectstart.signaturepad",function(a){return c(a.target).is(":input")});i.bind("selectstart.signaturepad",function(a){return c(a.target).is(":input")});!k.getContext&&FlashCanvas&&FlashCanvas.initElement(k);if(k.getContext){h=k.getContext("2d");c(b.sig,d).show();if(!b.displayOnly){if(!b.drawOnly){c(b.name,d).bind("keyup.signaturepad",function(){z(c(this).val())});c(b.name,d).bind("blur.signaturepad",function(){z(c(this).val())});c(b.drawIt,d).bind("click.signaturepad",
function(a){a.preventDefault();v()})}b.drawOnly||b.defaultAction==="drawIt"?v():y();if(b.validateFields)c(n).is("form")?c(n).bind("submit.signaturepad",function(){return A()}):c(n).parents("form").bind("submit.signaturepad",function(){return A()});c(b.sigNav,d).show()}}}var p=this,b=c.extend({},c.fn.signaturePad.defaults,q),d=c(n),i=c(b.canvas,d),k=i.get(0),h=null,j={x:null,y:null},l=[],o=false,r=false,u=false;c.extend(p,{init:function(){G()},regenerate:function(a){p.clearCanvas();c(b.typed,d).hide();
if(typeof a==="string")a=JSON.parse(a);B(a,h,true);c(b.output,d).length>0&&c(b.output,d).val(JSON.stringify(l))},clearCanvas:function(){t()},getSignature:function(){return l},getSignatureString:function(){return JSON.stringify(l)},getSignatureImage:function(){var a=document.createElement("canvas"),e=null;e=null;a.style.position="absolute";a.style.top="-999em";a.width=k.width;a.height=k.height;document.body.appendChild(a);!a.getContext&&FlashCanvas&&FlashCanvas.initElement(a);e=a.getContext("2d");
e.fillStyle=b.bgColour;e.fillRect(0,0,k.width,k.height);e.lineWidth=b.penWidth;e.strokeStyle=b.penColour;B(l,e);e=a.toDataURL.apply(a,arguments);document.body.removeChild(a);return e}})}c.fn.signaturePad=function(n){var q=null;this.each(function(){q=new C(this,n);q.init()});return q};c.fn.signaturePad.defaults={defaultAction:"typeIt",displayOnly:false,drawOnly:false,canvas:"canvas",sig:".sig",sigNav:".sigNav",bgColour:"#ffffff",penColour:"#145394",penWidth:2,penCap:"round",lineColour:"#ccc",lineWidth:2,
lineMargin:5,lineTop:35,name:".name",typed:".typed",clear:".clearButton",typeIt:".typeIt a",drawIt:".drawIt a",typeItDesc:".typeItDesc",drawItDesc:".drawItDesc",output:".output",currentClass:"current",validateFields:true,errorClass:"error",errorMessage:"Please enter your name",errorMessageDraw:"Please sign the document",onBeforeValidate:null,onFormError:null}})(jQuery);
if(!this.JSON){this.JSON={};}
(function(){function f(n){return n<10?'0'+n:n;}
if(typeof Date.prototype.toJSON!=='function'){Date.prototype.toJSON=function(key){return isFinite(this.valueOf())?this.getUTCFullYear()+'-'+
f(this.getUTCMonth()+1)+'-'+
f(this.getUTCDate())+'T'+
f(this.getUTCHours())+':'+
f(this.getUTCMinutes())+':'+
f(this.getUTCSeconds())+'Z':null;};String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(key){return this.valueOf();};}
var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={'\b':'\\b','\t':'\\t','\n':'\\n','\f':'\\f','\r':'\\r','"':'\\"','\\':'\\\\'},rep;function quote(string){escapable.lastIndex=0;return escapable.test(string)?'"'+string.replace(escapable,function(a){var c=meta[a];return typeof c==='string'?c:'\\u'+('0000'+a.charCodeAt(0).toString(16)).slice(-4);})+'"':'"'+string+'"';}
function str(key,holder){var i,k,v,length,mind=gap,partial,value=holder[key];if(value&&typeof value==='object'&&typeof value.toJSON==='function'){value=value.toJSON(key);}
if(typeof rep==='function'){value=rep.call(holder,key,value);}
switch(typeof value){case'string':return quote(value);case'number':return isFinite(value)?String(value):'null';case'boolean':case'null':return String(value);case'object':if(!value){return'null';}
gap+=indent;partial=[];if(Object.prototype.toString.apply(value)==='[object Array]'){length=value.length;for(i=0;i<length;i+=1){partial[i]=str(i,value)||'null';}
v=partial.length===0?'[]':gap?'[\n'+gap+
partial.join(',\n'+gap)+'\n'+
mind+']':'['+partial.join(',')+']';gap=mind;return v;}
if(rep&&typeof rep==='object'){length=rep.length;for(i=0;i<length;i+=1){k=rep[i];if(typeof k==='string'){v=str(k,value);if(v){partial.push(quote(k)+(gap?': ':':')+v);}}}}else{for(k in value){if(Object.hasOwnProperty.call(value,k)){v=str(k,value);if(v){partial.push(quote(k)+(gap?': ':':')+v);}}}}
v=partial.length===0?'{}':gap?'{\n'+gap+partial.join(',\n'+gap)+'\n'+
mind+'}':'{'+partial.join(',')+'}';gap=mind;return v;}}
if(typeof JSON.stringify!=='function'){JSON.stringify=function(value,replacer,space){var i;gap='';indent='';if(typeof space==='number'){for(i=0;i<space;i+=1){indent+=' ';}}else if(typeof space==='string'){indent=space;}
rep=replacer;if(replacer&&typeof replacer!=='function'&&(typeof replacer!=='object'||typeof replacer.length!=='number')){throw new Error('JSON.stringify');}
return str('',{'':value});};}
if(typeof JSON.parse!=='function'){JSON.parse=function(text,reviver){var j;function walk(holder,key){var k,v,value=holder[key];if(value&&typeof value==='object'){for(k in value){if(Object.hasOwnProperty.call(value,k)){v=walk(value,k);if(v!==undefined){value[k]=v;}else{delete value[k];}}}}
return reviver.call(holder,key,value);}
cx.lastIndex=0;if(cx.test(text)){text=text.replace(cx,function(a){return'\\u'+
('0000'+a.charCodeAt(0).toString(16)).slice(-4);});}
if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,'@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,']').replace(/(?:^|:|,)(?:\s*\[)+/g,''))){j=eval('('+text+')');return typeof reviver==='function'?walk({'':j},''):j;}
throw new SyntaxError('JSON.parse');};}}());/*
 Highcharts JS v2.3.2 (2012-08-31)

 (c) 2009-2011 Torstein Hønsi

 License: www.highcharts.com/license
*/
(function(){function s(a,b){var c;a||(a={});for(c in b)a[c]=b[c];return a}function la(){for(var a=0,b=arguments,c=b.length,d={};a<c;a++)d[b[a++]]=b[a];return d}function A(a,b){return parseInt(a,b||10)}function ma(a){return typeof a==="string"}function Z(a){return typeof a==="object"}function Fa(a){return Object.prototype.toString.call(a)==="[object Array]"}function Ga(a){return typeof a==="number"}function na(a){return K.log(a)/K.LN10}function ca(a){return K.pow(10,a)}function ya(a,b){for(var c=a.length;c--;)if(a[c]===
b){a.splice(c,1);break}}function u(a){return a!==x&&a!==null}function B(a,b,c){var d,e;if(ma(b))u(c)?a.setAttribute(b,c):a&&a.getAttribute&&(e=a.getAttribute(b));else if(u(b)&&Z(b))for(d in b)a.setAttribute(d,b[d]);return e}function oa(a){return Fa(a)?a:[a]}function p(){var a=arguments,b,c,d=a.length;for(b=0;b<d;b++)if(c=a[b],typeof c!=="undefined"&&c!==null)return c}function G(a,b){if(Ha&&b&&b.opacity!==x)b.filter="alpha(opacity="+b.opacity*100+")";s(a.style,b)}function S(a,b,c,d,e){a=z.createElement(a);
b&&s(a,b);e&&G(a,{padding:0,border:T,margin:0});c&&G(a,c);d&&d.appendChild(a);return a}function da(a,b){var c=function(){};c.prototype=new a;s(c.prototype,b);return c}function Ia(a,b,c,d){var e=O.lang,f=a;b===-1?(b=(a||0).toString(),a=b.indexOf(".")>-1?b.split(".")[1].length:0):a=isNaN(b=N(b))?2:b;var b=a,c=c===void 0?e.decimalPoint:c,d=d===void 0?e.thousandsSep:d,e=f<0?"-":"",a=String(A(f=N(+f||0).toFixed(b))),g=a.length>3?a.length%3:0;return e+(g?a.substr(0,g)+d:"")+a.substr(g).replace(/(\d{3})(?=\d)/g,
"$1"+d)+(b?c+N(f-a).toFixed(b).slice(2):"")}function sa(a,b){return Array((b||2)+1-String(a).length).join(0)+a}function hb(a,b,c,d){var e,c=p(c,1);e=a/c;b||(b=[1,2,2.5,5,10],d&&d.allowDecimals===!1&&(c===1?b=[1,2,5,10]:c<=0.1&&(b=[1/c])));for(d=0;d<b.length;d++)if(a=b[d],e<=(b[d]+(b[d+1]||b[d]))/2)break;a*=c;return a}function Nb(a,b){var c=b||[[zb,[1,2,5,10,20,25,50,100,200,500]],[ib,[1,2,5,10,15,30]],[Ua,[1,2,5,10,15,30]],[Ja,[1,2,3,4,6,8,12]],[pa,[1,2]],[Va,[1,2]],[Ka,[1,2,3,4,6]],[ta,null]],d=
c[c.length-1],e=D[d[0]],f=d[1],g;for(g=0;g<c.length;g++)if(d=c[g],e=D[d[0]],f=d[1],c[g+1]&&a<=(e*f[f.length-1]+D[c[g+1][0]])/2)break;e===D[ta]&&a<5*e&&(f=[1,2,5]);e===D[ta]&&a<5*e&&(f=[1,2,5]);c=hb(a/e,f);return{unitRange:e,count:c,unitName:d[0]}}function Ob(a,b,c,d){var e=[],f={},g=O.global.useUTC,h,i=new Date(b),b=a.unitRange,j=a.count;b>=D[ib]&&(i.setMilliseconds(0),i.setSeconds(b>=D[Ua]?0:j*V(i.getSeconds()/j)));if(b>=D[Ua])i[Ab](b>=D[Ja]?0:j*V(i[jb]()/j));if(b>=D[Ja])i[Bb](b>=D[pa]?0:j*V(i[kb]()/
j));if(b>=D[pa])i[lb](b>=D[Ka]?1:j*V(i[La]()/j));b>=D[Ka]&&(i[Cb](b>=D[ta]?0:j*V(i[Wa]()/j)),h=i[Xa]());b>=D[ta]&&(h-=h%j,i[Db](h));if(b===D[Va])i[lb](i[La]()-i[mb]()+p(d,1));d=1;h=i[Xa]();for(var k=i.getTime(),l=i[Wa](),m=i[La](),i=g?0:(864E5+i.getTimezoneOffset()*6E4)%864E5;k<c;)e.push(k),b===D[ta]?k=Ya(h+d*j,0):b===D[Ka]?k=Ya(h,l+d*j):!g&&(b===D[pa]||b===D[Va])?k=Ya(h,l,m+d*j*(b===D[pa]?1:7)):(k+=b*j,b<=D[Ja]&&k%D[pa]===i&&(f[k]=pa)),d++;e.push(k);e.info=s(a,{higherRanks:f,totalRange:b*j});return e}
function Eb(){this.symbol=this.color=0}function Fb(a,b){var c=a.length,d,e;for(e=0;e<c;e++)a[e].ss_i=e;a.sort(function(a,c){d=b(a,c);return d===0?a.ss_i-c.ss_i:d});for(e=0;e<c;e++)delete a[e].ss_i}function Ma(a){for(var b=a.length,c=a[0];b--;)a[b]<c&&(c=a[b]);return c}function za(a){for(var b=a.length,c=a[0];b--;)a[b]>c&&(c=a[b]);return c}function Aa(a,b){for(var c in a)a[c]&&a[c]!==b&&a[c].destroy&&a[c].destroy(),delete a[c]}function Na(a){Za||(Za=S(ia));a&&Za.appendChild(a);Za.innerHTML=""}function $a(a,
b){var c="Highcharts error #"+a+": www.highcharts.com/errors/"+a;if(b)throw c;else L.console&&console.log(c)}function ja(a){return parseFloat(a.toPrecision(14))}function ua(a,b){Oa=p(a,b.animation)}function Gb(){var a=O.global.useUTC,b=a?"getUTC":"get",c=a?"setUTC":"set";Ya=a?Date.UTC:function(a,b,c,g,h,i){return(new Date(a,b,p(c,1),p(g,0),p(h,0),p(i,0))).getTime()};jb=b+"Minutes";kb=b+"Hours";mb=b+"Day";La=b+"Date";Wa=b+"Month";Xa=b+"FullYear";Ab=c+"Minutes";Bb=c+"Hours";lb=c+"Date";Cb=c+"Month";
Db=c+"FullYear"}function va(){}function Pa(a,b,c){this.axis=a;this.pos=b;this.type=c||"";this.isNew=!0;c||this.addLabel()}function nb(a,b){this.axis=a;if(b)this.options=b,this.id=b.id;return this}function Hb(a,b,c,d,e){var f=a.chart.inverted;this.axis=a;this.isNegative=c;this.options=b;this.x=d;this.stack=e;this.alignOptions={align:b.align||(f?c?"left":"right":"center"),verticalAlign:b.verticalAlign||(f?"middle":c?"bottom":"top"),y:p(b.y,f?4:c?14:-6),x:p(b.x,f?c?-6:6:0)};this.textAlign=b.textAlign||
(f?c?"right":"left":"center")}function ob(){this.init.apply(this,arguments)}function pb(a,b){var c=b.borderWidth,d=b.style,e=A(d.padding);this.chart=a;this.options=b;this.crosshairs=[];this.now={x:0,y:0};this.isHidden=!0;this.label=a.renderer.label("",0,0,b.shape,null,null,b.useHTML,null,"tooltip").attr({padding:e,fill:b.backgroundColor,"stroke-width":c,r:b.borderRadius,zIndex:8}).css(d).css({padding:0}).hide().add();$||this.label.shadow(b.shadow);this.shared=b.shared}function qb(a,b){var c=$?"":
b.chart.zoomType;this.zoomX=/x/.test(c);this.zoomY=/y/.test(c);this.options=b;this.chart=a;this.init(a,b.tooltip)}function rb(a){this.init(a)}function sb(a,b){var c,d=a.series;a.series=null;c=C(O,a);c.series=a.series=d;var d=c.chart,e=d.margin,e=Z(e)?e:[e,e,e,e];this.optionsMarginTop=p(d.marginTop,e[0]);this.optionsMarginRight=p(d.marginRight,e[1]);this.optionsMarginBottom=p(d.marginBottom,e[2]);this.optionsMarginLeft=p(d.marginLeft,e[3]);this.runChartClick=(e=d.events)&&!!e.click;this.callback=b;
this.isResizing=0;this.options=c;this.axes=[];this.series=[];this.hasCartesianSeries=d.showAxes;this.init(e)}var x,z=document,L=window,K=Math,t=K.round,V=K.floor,wa=K.ceil,v=K.max,P=K.min,N=K.abs,W=K.cos,aa=K.sin,xa=K.PI,ab=xa*2/360,Ba=navigator.userAgent,Ib=L.opera,Ha=/msie/i.test(Ba)&&!Ib,Qa=z.documentMode===8,tb=/AppleWebKit/.test(Ba),bb=/Firefox/.test(Ba),fa=!!z.createElementNS&&!!z.createElementNS("http://www.w3.org/2000/svg","svg").createSVGRect,Pb=bb&&parseInt(Ba.split("Firefox/")[1],10)<4,
$=!fa&&!Ha&&!!z.createElement("canvas").getContext,Ra,ga=z.documentElement.ontouchstart!==x,Jb={},ub=0,Za,O,cb,Oa,vb,D,Ca=function(){},ia="div",T="none",wb="rgba(192,192,192,"+(fa?1.0E-6:0.0020)+")",zb="millisecond",ib="second",Ua="minute",Ja="hour",pa="day",Va="week",Ka="month",ta="year",Ya,jb,kb,mb,La,Wa,Xa,Ab,Bb,lb,Cb,Db,ba={};L.Highcharts={};cb=function(a,b,c){if(!u(b)||isNaN(b))return"Invalid date";var a=p(a,"%Y-%m-%d %H:%M:%S"),d=new Date(b),e,f=d[kb](),g=d[mb](),h=d[La](),i=d[Wa](),j=d[Xa](),
k=O.lang,l=k.weekdays,b={a:l[g].substr(0,3),A:l[g],d:sa(h),e:h,b:k.shortMonths[i],B:k.months[i],m:sa(i+1),y:j.toString().substr(2,2),Y:j,H:sa(f),I:sa(f%12||12),l:f%12||12,M:sa(d[jb]()),p:f<12?"AM":"PM",P:f<12?"am":"pm",S:sa(d.getSeconds()),L:sa(t(b%1E3),3)};for(e in b)a=a.replace("%"+e,b[e]);return c?a.substr(0,1).toUpperCase()+a.substr(1):a};Eb.prototype={wrapColor:function(a){if(this.color>=a)this.color=0},wrapSymbol:function(a){if(this.symbol>=a)this.symbol=0}};D=la(zb,1,ib,1E3,Ua,6E4,Ja,36E5,
pa,864E5,Va,6048E5,Ka,2592E6,ta,31556952E3);vb={init:function(a,b,c){var b=b||"",d=a.shift,e=b.indexOf("C")>-1,f=e?7:3,g,b=b.split(" "),c=[].concat(c),h,i,j=function(a){for(g=a.length;g--;)a[g]==="M"&&a.splice(g+1,0,a[g+1],a[g+2],a[g+1],a[g+2])};e&&(j(b),j(c));a.isArea&&(h=b.splice(b.length-6,6),i=c.splice(c.length-6,6));if(d<=c.length/f)for(;d--;)c=[].concat(c).splice(0,f).concat(c);a.shift=0;if(b.length)for(a=c.length;b.length<a;)d=[].concat(b).splice(b.length-f,f),e&&(d[f-6]=d[f-2],d[f-5]=d[f-
1]),b=b.concat(d);h&&(b=b.concat(h),c=c.concat(i));return[b,c]},step:function(a,b,c,d){var e=[],f=a.length;if(c===1)e=d;else if(f===b.length&&c<1)for(;f--;)d=parseFloat(a[f]),e[f]=isNaN(d)?a[f]:c*parseFloat(b[f]-d)+d;else e=b;return e}};(function(a){L.HighchartsAdapter=L.HighchartsAdapter||a&&{init:function(b){var c=a.fx,d=c.step,e,f=a.Tween,g=f&&f.propHooks;a.extend(a.easing,{easeOutQuad:function(a,b,c,d,e){return-d*(b/=e)*(b-2)+c}});a.each(["cur","_default","width","height"],function(a,b){var e=
d,k,l;b==="cur"?e=c.prototype:b==="_default"&&f&&(e=g[b],b="set");(k=e[b])&&(e[b]=function(c){c=a?c:this;l=c.elem;return l.attr?l.attr(c.prop,b==="cur"?x:c.now):k.apply(this,arguments)})});e=function(a){var c=a.elem,d;if(!a.started)d=b.init(c,c.d,c.toD),a.start=d[0],a.end=d[1],a.started=!0;c.attr("d",b.step(a.start,a.end,a.pos,c.toD))};f?g.d={set:e}:d.d=e;this.each=Array.prototype.forEach?function(a,b){return Array.prototype.forEach.call(a,b)}:function(a,b){for(var c=0,d=a.length;c<d;c++)if(b.call(a[c],
a[c],c,a)===!1)return c}},getScript:a.getScript,inArray:a.inArray,adapterRun:function(b,c){return a(b)[c]()},grep:a.grep,map:function(a,c){for(var d=[],e=0,f=a.length;e<f;e++)d[e]=c.call(a[e],a[e],e,a);return d},merge:function(){var b=arguments;return a.extend(!0,null,b[0],b[1],b[2],b[3])},offset:function(b){return a(b).offset()},addEvent:function(b,c,d){a(b).bind(c,d)},removeEvent:function(b,c,d){var e=z.removeEventListener?"removeEventListener":"detachEvent";z[e]&&!b[e]&&(b[e]=function(){});a(b).unbind(c,
d)},fireEvent:function(b,c,d,e){var f=a.Event(c),g="detached"+c,h;!Ha&&d&&(delete d.layerX,delete d.layerY);s(f,d);b[c]&&(b[g]=b[c],b[c]=null);a.each(["preventDefault","stopPropagation"],function(a,b){var c=f[b];f[b]=function(){try{c.call(f)}catch(a){b==="preventDefault"&&(h=!0)}}});a(b).trigger(f);b[g]&&(b[c]=b[g],b[g]=null);e&&!f.isDefaultPrevented()&&!h&&e(f)},washMouseEvent:function(a){var c=a.originalEvent||a;c.pageX=a.pageX;c.pageY=a.pageY;return c},animate:function(b,c,d){var e=a(b);if(c.d)b.toD=
c.d,c.d=1;e.stop();e.animate(c,d)},stop:function(b){a(b).stop()}}})(L.jQuery);var X=L.HighchartsAdapter,F=X||{};X&&X.init.call(X,vb);var db=F.adapterRun,Qb=F.getScript,Rb=F.inArray,n=F.each,Kb=F.grep,Sb=F.offset,Sa=F.map,C=F.merge,H=F.addEvent,U=F.removeEvent,E=F.fireEvent,Lb=F.washMouseEvent,xb=F.animate,eb=F.stop,F={enabled:!0,align:"center",x:0,y:15,style:{color:"#666",fontSize:"11px",lineHeight:"14px"}};O={colors:"#4572A7,#AA4643,#89A54E,#80699B,#3D96AE,#DB843D,#92A8CD,#A47D7C,#B5CA92".split(","),
symbols:["circle","diamond","square","triangle","triangle-down"],lang:{loading:"Loading...",months:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),shortMonths:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),weekdays:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),decimalPoint:".",numericSymbols:"k,M,G,T,P,E".split(","),resetZoom:"Reset zoom",resetZoomTitle:"Reset zoom level 1:1",thousandsSep:","},global:{useUTC:!0,
canvasToolsURL:"http://code.highcharts.com/2.3.2/modules/canvas-tools.js",VMLRadialGradientURL:"http://code.highcharts.com/2.3.2/gfx/vml-radial-gradient.png"},chart:{borderColor:"#4572A7",borderRadius:5,defaultSeriesType:"line",ignoreHiddenSeries:!0,spacingTop:10,spacingRight:10,spacingBottom:15,spacingLeft:10,style:{fontFamily:'"Lucida Grande", "Lucida Sans Unicode", Verdana, Arial, Helvetica, sans-serif',fontSize:"12px"},backgroundColor:"#FFFFFF",plotBorderColor:"#C0C0C0",resetZoomButton:{theme:{zIndex:20},
position:{align:"right",x:-10,y:10}}},title:{text:"Chart title",align:"center",y:15,style:{color:"#3E576F",fontSize:"16px"}},subtitle:{text:"",align:"center",y:30,style:{color:"#6D869F"}},plotOptions:{line:{allowPointSelect:!1,showCheckbox:!1,animation:{duration:1E3},events:{},lineWidth:2,shadow:!0,marker:{enabled:!0,lineWidth:0,radius:4,lineColor:"#FFFFFF",states:{hover:{enabled:!0},select:{fillColor:"#FFFFFF",lineColor:"#000000",lineWidth:2}}},point:{events:{}},dataLabels:C(F,{enabled:!1,y:-6,formatter:function(){return this.y}}),
cropThreshold:300,pointRange:0,showInLegend:!0,states:{hover:{marker:{}},select:{marker:{}}},stickyTracking:!0}},labels:{style:{position:"absolute",color:"#3E576F"}},legend:{enabled:!0,align:"center",layout:"horizontal",labelFormatter:function(){return this.name},borderWidth:1,borderColor:"#909090",borderRadius:5,navigation:{activeColor:"#3E576F",inactiveColor:"#CCC"},shadow:!1,itemStyle:{cursor:"pointer",color:"#3E576F",fontSize:"12px"},itemHoverStyle:{color:"#000"},itemHiddenStyle:{color:"#CCC"},
itemCheckboxStyle:{position:"absolute",width:"13px",height:"13px"},symbolWidth:16,symbolPadding:5,verticalAlign:"bottom",x:0,y:0},loading:{labelStyle:{fontWeight:"bold",position:"relative",top:"1em"},style:{position:"absolute",backgroundColor:"white",opacity:0.5,textAlign:"center"}},tooltip:{enabled:!0,backgroundColor:"rgba(255, 255, 255, .85)",borderWidth:2,borderRadius:5,dateTimeLabelFormats:{millisecond:"%A, %b %e, %H:%M:%S.%L",second:"%A, %b %e, %H:%M:%S",minute:"%A, %b %e, %H:%M",hour:"%A, %b %e, %H:%M",
day:"%A, %b %e, %Y",week:"Week from %A, %b %e, %Y",month:"%B %Y",year:"%Y"},headerFormat:'<span style="font-size: 10px">{point.key}</span><br/>',pointFormat:'<span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b><br/>',shadow:!0,shared:$,snap:ga?25:10,style:{color:"#333333",fontSize:"12px",padding:"5px",whiteSpace:"nowrap"}},credits:{enabled:!0,text:"Highcharts.com",href:"http://www.highcharts.com",position:{align:"right",x:-10,verticalAlign:"bottom",y:-5},style:{cursor:"pointer",
color:"#909090",fontSize:"10px"}}};var Y=O.plotOptions,X=Y.line;Gb();var qa=function(a){var b=[],c;(function(a){(c=/rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]?(?:\.[0-9]+)?)\s*\)/.exec(a))?b=[A(c[1]),A(c[2]),A(c[3]),parseFloat(c[4],10)]:(c=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(a))&&(b=[A(c[1],16),A(c[2],16),A(c[3],16),1])})(a);return{get:function(c){return b&&!isNaN(b[0])?c==="rgb"?"rgb("+b[0]+","+b[1]+","+b[2]+")":c==="a"?b[3]:"rgba("+b.join(",")+
")":a},brighten:function(a){if(Ga(a)&&a!==0){var c;for(c=0;c<3;c++)b[c]+=A(a*255),b[c]<0&&(b[c]=0),b[c]>255&&(b[c]=255)}return this},setOpacity:function(a){b[3]=a;return this}}};va.prototype={init:function(a,b){this.element=b==="span"?S(b):z.createElementNS("http://www.w3.org/2000/svg",b);this.renderer=a;this.attrSetters={}},animate:function(a,b,c){b=p(b,Oa,!0);eb(this);if(b){b=C(b);if(c)b.complete=c;xb(this,a,b)}else this.attr(a),c&&c()},attr:function(a,b){var c,d,e,f,g=this.element,h=g.nodeName,
i=this.renderer,j,k=this.attrSetters,l=this.shadows,m,o,r=this;ma(a)&&u(b)&&(c=a,a={},a[c]=b);if(ma(a))c=a,h==="circle"?c={x:"cx",y:"cy"}[c]||c:c==="strokeWidth"&&(c="stroke-width"),r=B(g,c)||this[c]||0,c!=="d"&&c!=="visibility"&&(r=parseFloat(r));else for(c in a)if(j=!1,d=a[c],e=k[c]&&k[c].call(this,d,c),e!==!1){e!==x&&(d=e);if(c==="d")d&&d.join&&(d=d.join(" ")),/(NaN| {2}|^$)/.test(d)&&(d="M 0 0");else if(c==="x"&&h==="text"){for(e=0;e<g.childNodes.length;e++)f=g.childNodes[e],B(f,"x")===B(g,"x")&&
B(f,"x",d);this.rotation&&B(g,"transform","rotate("+this.rotation+" "+d+" "+A(a.y||B(g,"y"))+")")}else if(c==="fill")d=i.color(d,g,c);else if(h==="circle"&&(c==="x"||c==="y"))c={x:"cx",y:"cy"}[c]||c;else if(h==="rect"&&c==="r")B(g,{rx:d,ry:d}),j=!0;else if(c==="translateX"||c==="translateY"||c==="rotation"||c==="verticalAlign")j=o=!0;else if(c==="stroke")d=i.color(d,g,c);else if(c==="dashstyle")if(c="stroke-dasharray",d=d&&d.toLowerCase(),d==="solid")d=T;else{if(d){d=d.replace("shortdashdotdot","3,1,1,1,1,1,").replace("shortdashdot",
"3,1,1,1").replace("shortdot","1,1,").replace("shortdash","3,1,").replace("longdash","8,3,").replace(/dot/g,"1,3,").replace("dash","4,3,").replace(/,$/,"").split(",");for(e=d.length;e--;)d[e]=A(d[e])*a["stroke-width"];d=d.join(",")}}else if(c==="isTracker")this[c]=d;else if(c==="width")d=A(d);else if(c==="align")c="text-anchor",d={left:"start",center:"middle",right:"end"}[d];else if(c==="title")e=g.getElementsByTagName("title")[0],e||(e=z.createElementNS("http://www.w3.org/2000/svg","title"),g.appendChild(e)),
e.textContent=d;c==="strokeWidth"&&(c="stroke-width");tb&&c==="stroke-width"&&d===0&&(d=1.0E-6);this.symbolName&&/^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(c)&&(m||(this.symbolAttr(a),m=!0),j=!0);if(l&&/^(width|height|visibility|x|y|d|transform)$/.test(c))for(e=l.length;e--;)B(l[e],c,c==="height"?v(d-(l[e].cutHeight||0),0):d);if((c==="width"||c==="height")&&h==="rect"&&d<0)d=0;this[c]=d;o&&this.updateTransform();c==="text"?(d!==this.textStr&&delete this.bBox,this.textStr=d,this.added&&
i.buildText(this)):j||B(g,c,d)}return r},symbolAttr:function(a){var b=this;n("x,y,r,start,end,width,height,innerR,anchorX,anchorY".split(","),function(c){b[c]=p(a[c],b[c])});b.attr({d:b.renderer.symbols[b.symbolName](b.x,b.y,b.width,b.height,b)})},clip:function(a){return this.attr("clip-path",a?"url("+this.renderer.url+"#"+a.id+")":T)},crisp:function(a,b,c,d,e){var f,g={},h={},i,a=a||this.strokeWidth||this.attr&&this.attr("stroke-width")||0;i=t(a)%2/2;h.x=V(b||this.x||0)+i;h.y=V(c||this.y||0)+i;h.width=
V((d||this.width||0)-2*i);h.height=V((e||this.height||0)-2*i);h.strokeWidth=a;for(f in h)this[f]!==h[f]&&(this[f]=g[f]=h[f]);return g},css:function(a){var b=this.element,b=a&&a.width&&b.nodeName==="text",c,d="",e=function(a,b){return"-"+b.toLowerCase()};if(a&&a.color)a.fill=a.color;this.styles=a=s(this.styles,a);if(Ha&&!fa)b&&delete a.width,G(this.element,a);else{for(c in a)d+=c.replace(/([A-Z])/g,e)+":"+a[c]+";";this.attr({style:d})}b&&this.added&&this.renderer.buildText(this);return this},on:function(a,
b){var c=b;ga&&a==="click"&&(a="touchstart",c=function(a){a.preventDefault();b()});this.element["on"+a]=c;return this},setRadialReference:function(a){this.element.radialReference=a;return this},translate:function(a,b){return this.attr({translateX:a,translateY:b})},invert:function(){this.inverted=!0;this.updateTransform();return this},htmlCss:function(a){var b=this.element;if(b=a&&b.tagName==="SPAN"&&a.width)delete a.width,this.textWidth=b,this.updateTransform();this.styles=s(this.styles,a);G(this.element,
a);return this},htmlGetBBox:function(){var a=this.element,b=this.bBox;if(!b){if(a.nodeName==="text")a.style.position="absolute";b=this.bBox={x:a.offsetLeft,y:a.offsetTop,width:a.offsetWidth,height:a.offsetHeight}}return b},htmlUpdateTransform:function(){if(this.added){var a=this.renderer,b=this.element,c=this.translateX||0,d=this.translateY||0,e=this.x||0,f=this.y||0,g=this.textAlign||"left",h={left:0,center:0.5,right:1}[g],i=g&&g!=="left",j=this.shadows;if(c||d)G(b,{marginLeft:c,marginTop:d}),j&&
n(j,function(a){G(a,{marginLeft:c+1,marginTop:d+1})});this.inverted&&n(b.childNodes,function(c){a.invertChild(c,b)});if(b.tagName==="SPAN"){var k,l,j=this.rotation,m,o=0,r=1,o=0,ea;m=A(this.textWidth);var q=this.xCorr||0,y=this.yCorr||0,M=[j,g,b.innerHTML,this.textWidth].join(",");k={};if(M!==this.cTT){if(u(j))a.isSVG?(q=Ha?"-ms":tb?"-webkit":bb?"-moz":Ib?"-o":"",k[q+"-transform"]=k.transform="rotate("+j+"deg)"):(o=j*ab,r=W(o),o=aa(o),k.filter=j?["progid:DXImageTransform.Microsoft.Matrix(M11=",r,
", M12=",-o,", M21=",o,", M22=",r,", sizingMethod='auto expand')"].join(""):T),G(b,k);k=p(this.elemWidth,b.offsetWidth);l=p(this.elemHeight,b.offsetHeight);k>m&&/[ \-]/.test(b.innerText)&&(G(b,{width:m+"px",display:"block",whiteSpace:"normal"}),k=m);m=a.fontMetrics(b.style.fontSize).b;q=r<0&&-k;y=o<0&&-l;ea=r*o<0;q+=o*m*(ea?1-h:h);y-=r*m*(j?ea?h:1-h:1);i&&(q-=k*h*(r<0?-1:1),j&&(y-=l*h*(o<0?-1:1)),G(b,{textAlign:g}));this.xCorr=q;this.yCorr=y}G(b,{left:e+q+"px",top:f+y+"px"});this.cTT=M}}else this.alignOnAdd=
!0},updateTransform:function(){var a=this.translateX||0,b=this.translateY||0,c=this.inverted,d=this.rotation,e=[];c&&(a+=this.attr("width"),b+=this.attr("height"));(a||b)&&e.push("translate("+a+","+b+")");c?e.push("rotate(90) scale(-1,1)"):d&&e.push("rotate("+d+" "+(this.x||0)+" "+(this.y||0)+")");e.length&&B(this.element,"transform",e.join(" "))},toFront:function(){var a=this.element;a.parentNode.appendChild(a);return this},align:function(a,b,c){a?(this.alignOptions=a,this.alignByTranslate=b,c||
this.renderer.alignedObjects.push(this)):(a=this.alignOptions,b=this.alignByTranslate);var c=p(c,this.renderer),d=a.align,e=a.verticalAlign,f=(c.x||0)+(a.x||0),g=(c.y||0)+(a.y||0),h={};/^(right|center)$/.test(d)&&(f+=(c.width-(a.width||0))/{right:1,center:2}[d]);h[b?"translateX":"x"]=t(f);/^(bottom|middle)$/.test(e)&&(g+=(c.height-(a.height||0))/({bottom:1,middle:2}[e]||1));h[b?"translateY":"y"]=t(g);this[this.placed?"animate":"attr"](h);this.placed=!0;this.alignAttr=h;return this},getBBox:function(){var a=
this.bBox,b=this.renderer,c,d=this.rotation;c=this.element;var e=d*ab;if(!a){if(c.namespaceURI==="http://www.w3.org/2000/svg"||b.forExport){try{a=c.getBBox?s({},c.getBBox()):{width:c.offsetWidth,height:c.offsetHeight}}catch(f){}if(!a||a.width<0)a={width:0,height:0}}else a=this.htmlGetBBox();if(b.isSVG&&(b=a.width,c=a.height,d))a.width=N(c*aa(e))+N(b*W(e)),a.height=N(c*W(e))+N(b*aa(e));this.bBox=a}return a},show:function(){return this.attr({visibility:"visible"})},hide:function(){return this.attr({visibility:"hidden"})},
add:function(a){var b=this.renderer,c=a||b,d=c.element||b.box,e=d.childNodes,f=this.element,g=B(f,"zIndex"),h;if(a)this.parentGroup=a;this.parentInverted=a&&a.inverted;this.textStr!==void 0&&b.buildText(this);if(g)c.handleZ=!0,g=A(g);if(c.handleZ)for(c=0;c<e.length;c++)if(a=e[c],b=B(a,"zIndex"),a!==f&&(A(b)>g||!u(g)&&u(b))){d.insertBefore(f,a);h=!0;break}h||d.appendChild(f);this.added=!0;E(this,"add");return this},safeRemoveChild:function(a){var b=a.parentNode;b&&b.removeChild(a)},destroy:function(){var a=
this,b=a.element||{},c=a.shadows,d=a.box,e,f;b.onclick=b.onmouseout=b.onmouseover=b.onmousemove=null;eb(a);if(a.clipPath)a.clipPath=a.clipPath.destroy();if(a.stops){for(f=0;f<a.stops.length;f++)a.stops[f]=a.stops[f].destroy();a.stops=null}a.safeRemoveChild(b);c&&n(c,function(b){a.safeRemoveChild(b)});d&&d.destroy();ya(a.renderer.alignedObjects,a);for(e in a)delete a[e];return null},empty:function(){for(var a=this.element,b=a.childNodes,c=b.length;c--;)a.removeChild(b[c])},shadow:function(a,b,c){var d=
[],e,f,g=this.element,h,i,j,k;if(a){i=p(a.width,3);j=(a.opacity||0.15)/i;k=this.parentInverted?"(-1,-1)":"("+(a.offsetX||1)+", "+(a.offsetY||1)+")";for(e=1;e<=i;e++){f=g.cloneNode(0);h=i*2+1-2*e;B(f,{isShadow:"true",stroke:a.color||"black","stroke-opacity":j*e,"stroke-width":h,transform:"translate"+k,fill:T});if(c)B(f,"height",v(B(f,"height")-h,0)),f.cutHeight=h;b?b.element.appendChild(f):g.parentNode.insertBefore(f,g);d.push(f)}this.shadows=d}return this}};var ra=function(){this.init.apply(this,
arguments)};ra.prototype={Element:va,init:function(a,b,c,d){var e=location,f;f=this.createElement("svg").attr({xmlns:"http://www.w3.org/2000/svg",version:"1.1"});a.appendChild(f.element);this.isSVG=!0;this.box=f.element;this.boxWrapper=f;this.alignedObjects=[];this.url=(bb||tb)&&z.getElementsByTagName("base").length?e.href.replace(/#.*?$/,"").replace(/([\('\)])/g,"\\$1").replace(/ /g,"%20"):"";this.defs=this.createElement("defs").add();this.forExport=d;this.gradients={};this.setSize(b,c,!1);var g;
if(bb&&a.getBoundingClientRect)this.subPixelFix=b=function(){G(a,{left:0,top:0});g=a.getBoundingClientRect();G(a,{left:wa(g.left)-g.left+"px",top:wa(g.top)-g.top+"px"})},b(),H(L,"resize",b)},isHidden:function(){return!this.boxWrapper.getBBox().width},destroy:function(){var a=this.defs;this.box=null;this.boxWrapper=this.boxWrapper.destroy();Aa(this.gradients||{});this.gradients=null;if(a)this.defs=a.destroy();this.subPixelFix&&U(L,"resize",this.subPixelFix);return this.alignedObjects=null},createElement:function(a){var b=
new this.Element;b.init(this,a);return b},draw:function(){},buildText:function(a){for(var b=a.element,c=p(a.textStr,"").toString().replace(/<(b|strong)>/g,'<span style="font-weight:bold">').replace(/<(i|em)>/g,'<span style="font-style:italic">').replace(/<a/g,"<span").replace(/<\/(b|strong|i|em|a)>/g,"</span>").split(/<br.*?>/g),d=b.childNodes,e=/style="([^"]+)"/,f=/href="([^"]+)"/,g=B(b,"x"),h=a.styles,i=h&&A(h.width),j=h&&h.lineHeight,k,h=d.length,l=[];h--;)b.removeChild(d[h]);i&&!a.added&&this.box.appendChild(b);
c[c.length-1]===""&&c.pop();n(c,function(c,d){var h,ea=0,q,c=c.replace(/<span/g,"|||<span").replace(/<\/span>/g,"</span>|||");h=c.split("|||");n(h,function(c){if(c!==""||h.length===1){var m={},p=z.createElementNS("http://www.w3.org/2000/svg","tspan");e.test(c)&&B(p,"style",c.match(e)[1].replace(/(;| |^)color([ :])/,"$1fill$2"));f.test(c)&&(B(p,"onclick",'location.href="'+c.match(f)[1]+'"'),G(p,{cursor:"pointer"}));c=(c.replace(/<(.|\n)*?>/g,"")||" ").replace(/&lt;/g,"<").replace(/&gt;/g,">");p.appendChild(z.createTextNode(c));
ea?m.dx=3:m.x=g;if(!ea){if(d){!fa&&a.renderer.forExport&&G(p,{display:"block"});q=L.getComputedStyle&&A(L.getComputedStyle(k,null).getPropertyValue("line-height"));if(!q||isNaN(q)){var n;if(!(n=j))if(!(n=k.offsetHeight))l[d]=b.getBBox?b.getBBox().height:a.renderer.fontMetrics(b.style.fontSize).h,n=t(l[d]-(l[d-1]||0))||18;q=n}B(p,"dy",q)}k=p}B(p,m);b.appendChild(p);ea++;if(i)for(var c=c.replace(/-/g,"- ").split(" "),I=[];c.length||I.length;)delete a.bBox,n=a.getBBox().width,m=n>i,!m||c.length===1?
(c=I,I=[],c.length&&(p=z.createElementNS("http://www.w3.org/2000/svg","tspan"),B(p,{dy:j||16,x:g}),b.appendChild(p),n>i&&(i=n))):(p.removeChild(p.firstChild),I.unshift(c.pop())),c.length&&p.appendChild(z.createTextNode(c.join(" ").replace(/- /g,"-")))}})})},button:function(a,b,c,d,e,f,g){var h=this.label(a,b,c),i=0,j,k,l,m,o,a={x1:0,y1:0,x2:0,y2:1},e=C(la("stroke-width",1,"stroke","#999","fill",la("linearGradient",a,"stops",[[0,"#FFF"],[1,"#DDD"]]),"r",3,"padding",3,"style",la("color","black")),e);
l=e.style;delete e.style;f=C(e,la("stroke","#68A","fill",la("linearGradient",a,"stops",[[0,"#FFF"],[1,"#ACF"]])),f);m=f.style;delete f.style;g=C(e,la("stroke","#68A","fill",la("linearGradient",a,"stops",[[0,"#9BD"],[1,"#CDF"]])),g);o=g.style;delete g.style;H(h.element,"mouseenter",function(){h.attr(f).css(m)});H(h.element,"mouseleave",function(){j=[e,f,g][i];k=[l,m,o][i];h.attr(j).css(k)});h.setState=function(a){(i=a)?a===2&&h.attr(g).css(o):h.attr(e).css(l)};return h.on("click",function(){d.call(h)}).attr(e).css(s({cursor:"default"},
l))},crispLine:function(a,b){a[1]===a[4]&&(a[1]=a[4]=t(a[1])-b%2/2);a[2]===a[5]&&(a[2]=a[5]=t(a[2])+b%2/2);return a},path:function(a){var b={fill:T};Fa(a)?b.d=a:Z(a)&&s(b,a);return this.createElement("path").attr(b)},circle:function(a,b,c){a=Z(a)?a:{x:a,y:b,r:c};return this.createElement("circle").attr(a)},arc:function(a,b,c,d,e,f){if(Z(a))b=a.y,c=a.r,d=a.innerR,e=a.start,f=a.end,a=a.x;return this.symbol("arc",a||0,b||0,c||0,c||0,{innerR:d||0,start:e||0,end:f||0})},rect:function(a,b,c,d,e,f){e=Z(a)?
a.r:e;e=this.createElement("rect").attr({rx:e,ry:e,fill:T});return e.attr(Z(a)?a:e.crisp(f,a,b,v(c,0),v(d,0)))},setSize:function(a,b,c){var d=this.alignedObjects,e=d.length;this.width=a;this.height=b;for(this.boxWrapper[p(c,!0)?"animate":"attr"]({width:a,height:b});e--;)d[e].align()},g:function(a){var b=this.createElement("g");return u(a)?b.attr({"class":"highcharts-"+a}):b},image:function(a,b,c,d,e){var f={preserveAspectRatio:T};arguments.length>1&&s(f,{x:b,y:c,width:d,height:e});f=this.createElement("image").attr(f);
f.element.setAttributeNS?f.element.setAttributeNS("http://www.w3.org/1999/xlink","href",a):f.element.setAttribute("hc-svg-href",a);return f},symbol:function(a,b,c,d,e,f){var g,h=this.symbols[a],h=h&&h(t(b),t(c),d,e,f),i=/^url\((.*?)\)$/,j,k;h?(g=this.path(h),s(g,{symbolName:a,x:b,y:c,width:d,height:e}),f&&s(g,f)):i.test(a)&&(k=function(a,b){a.attr({width:b[0],height:b[1]});a.alignByTranslate||a.translate(-t(b[0]/2),-t(b[1]/2))},j=a.match(i)[1],a=Jb[j],g=this.image(j).attr({x:b,y:c}),a?k(g,a):(g.attr({width:0,
height:0}),S("img",{onload:function(){k(g,Jb[j]=[this.width,this.height])},src:j})));return g},symbols:{circle:function(a,b,c,d){var e=0.166*c;return["M",a+c/2,b,"C",a+c+e,b,a+c+e,b+d,a+c/2,b+d,"C",a-e,b+d,a-e,b,a+c/2,b,"Z"]},square:function(a,b,c,d){return["M",a,b,"L",a+c,b,a+c,b+d,a,b+d,"Z"]},triangle:function(a,b,c,d){return["M",a+c/2,b,"L",a+c,b+d,a,b+d,"Z"]},"triangle-down":function(a,b,c,d){return["M",a,b,"L",a+c,b,a+c/2,b+d,"Z"]},diamond:function(a,b,c,d){return["M",a+c/2,b,"L",a+c,b+d/2,a+
c/2,b+d,a,b+d/2,"Z"]},arc:function(a,b,c,d,e){var f=e.start,c=e.r||c||d,g=e.end-1.0E-6,d=e.innerR,h=e.open,i=W(f),j=aa(f),k=W(g),g=aa(g),e=e.end-f<xa?0:1;return["M",a+c*i,b+c*j,"A",c,c,0,e,1,a+c*k,b+c*g,h?"M":"L",a+d*k,b+d*g,"A",d,d,0,e,0,a+d*i,b+d*j,h?"":"Z"]}},clipRect:function(a,b,c,d){var e="highcharts-"+ub++,f=this.createElement("clipPath").attr({id:e}).add(this.defs),a=this.rect(a,b,c,d,0).add(f);a.id=e;a.clipPath=f;return a},color:function(a,b,c){var d=this,e,f=/^rgba/,g;a&&a.linearGradient?
g="linearGradient":a&&a.radialGradient&&(g="radialGradient");if(g){var c=a[g],h=d.gradients,i,j,k,b=b.radialReference;if(!c.id||!h[c.id])Fa(c)&&(a[g]=c={x1:c[0],y1:c[1],x2:c[2],y2:c[3],gradientUnits:"userSpaceOnUse"}),g==="radialGradient"&&b&&!u(c.gradientUnits)&&s(c,{cx:b[0]-b[2]/2+c.cx*b[2],cy:b[1]-b[2]/2+c.cy*b[2],r:c.r*b[2],gradientUnits:"userSpaceOnUse"}),c.id="highcharts-"+ub++,h[c.id]=i=d.createElement(g).attr(c).add(d.defs),i.stops=[],n(a.stops,function(a){f.test(a[1])?(e=qa(a[1]),j=e.get("rgb"),
k=e.get("a")):(j=a[1],k=1);a=d.createElement("stop").attr({offset:a[0],"stop-color":j,"stop-opacity":k}).add(i);i.stops.push(a)});return"url("+d.url+"#"+c.id+")"}else return f.test(a)?(e=qa(a),B(b,c+"-opacity",e.get("a")),e.get("rgb")):(b.removeAttribute(c+"-opacity"),a)},text:function(a,b,c,d){var e=O.chart.style;if(d&&!this.forExport)return this.html(a,b,c);b=t(p(b,0));c=t(p(c,0));a=this.createElement("text").attr({x:b,y:c,text:a}).css({fontFamily:e.fontFamily,fontSize:e.fontSize});!fa&&this.forExport&&
a.css({position:"absolute"});a.x=b;a.y=c;return a},html:function(a,b,c){var d=O.chart.style,e=this.createElement("span"),f=e.attrSetters,g=e.element,h=e.renderer;f.text=function(a){a!==g.innerHTML&&delete this.bBox;g.innerHTML=a;return!1};f.x=f.y=f.align=function(a,b){b==="align"&&(b="textAlign");e[b]=a;e.htmlUpdateTransform();return!1};e.attr({text:a,x:t(b),y:t(c)}).css({position:"absolute",whiteSpace:"nowrap",fontFamily:d.fontFamily,fontSize:d.fontSize});e.css=e.htmlCss;if(h.isSVG)e.add=function(a){var b,
c=h.box.parentNode,d=[];if(a){if(b=a.div,!b){for(;a;)d.push(a),a=a.parentGroup;n(d.reverse(),function(a){var d;b=a.div=a.div||S(ia,{className:B(a.element,"class")},{position:"absolute",left:(a.translateX||0)+"px",top:(a.translateY||0)+"px"},b||c);d=b.style;s(a.attrSetters,{translateX:function(a){d.left=a+"px"},translateY:function(a){d.top=a+"px"},visibility:function(a,b){d[b]=a}})})}}else b=c;b.appendChild(g);e.added=!0;e.alignOnAdd&&e.htmlUpdateTransform();return e};return e},fontMetrics:function(a){var a=
A(a||11),a=a<24?a+4:t(a*1.2),b=t(a*0.8);return{h:a,b:b}},label:function(a,b,c,d,e,f,g,h,i){function j(){var a=o.styles,a=a&&a.textAlign,b=M*(1-y),c;c=h?0:Ea;if(u(Da)&&(a==="center"||a==="right"))b+={center:0.5,right:1}[a]*(Da-q.width);(b!==r.x||c!==r.y)&&r.attr({x:b,y:c});r.x=b;r.y=c}function k(a,b){p?p.attr(a,b):fb[a]=b}function l(){r.add(o);o.attr({text:a,x:b,y:c});u(e)&&o.attr({anchorX:e,anchorY:f})}var m=this,o=m.g(i),r=m.text("",0,0,g).attr({zIndex:1}),p,q,y=0,M=3,Da,w,I,J,Q=0,fb={},Ea,g=o.attrSetters;
H(o,"add",l);g.width=function(a){Da=a;return!1};g.height=function(a){w=a;return!1};g.padding=function(a){u(a)&&a!==M&&(M=a,j());return!1};g.align=function(a){y={left:0,center:0.5,right:1}[a];return!1};g.text=function(a,b){r.attr(b,a);var c;c=r.element.style;q=(Da===void 0||w===void 0||o.styles.textAlign)&&r.getBBox();o.width=(Da||q.width||0)+2*M;o.height=(w||q.height||0)+2*M;Ea=M+m.fontMetrics(c&&c.fontSize).b;if(!p)c=h?-Ea:0,o.box=p=d?m.symbol(d,-y*M,c,o.width,o.height):m.rect(-y*M,c,o.width,o.height,
0,fb["stroke-width"]),p.add(o);p.attr(C({width:o.width,height:o.height},fb));fb=null;j();return!1};g["stroke-width"]=function(a,b){Q=a%2/2;k(b,a);return!1};g.stroke=g.fill=g.r=function(a,b){k(b,a);return!1};g.anchorX=function(a,b){e=a;k(b,a+Q-I);return!1};g.anchorY=function(a,b){f=a;k(b,a-J);return!1};g.x=function(a){o.x=a;a-=y*((Da||q.width)+M);I=t(a);o.attr("translateX",I);return!1};g.y=function(a){J=o.y=t(a);o.attr("translateY",a);return!1};var v=o.css;return s(o,{css:function(a){if(a){var b={},
a=C({},a);n("fontSize,fontWeight,fontFamily,color,lineHeight,width".split(","),function(c){a[c]!==x&&(b[c]=a[c],delete a[c])});r.css(b)}return v.call(o,a)},getBBox:function(){return p.getBBox()},shadow:function(a){p.shadow(a);return o},destroy:function(){U(o,"add",l);U(o.element,"mouseenter");U(o.element,"mouseleave");r&&(r=r.destroy());va.prototype.destroy.call(o)}})}};Ra=ra;var ka;if(!fa&&!$){ka={init:function(a,b){var c=["<",b,' filled="f" stroked="f"'],d=["position: ","absolute",";"];(b==="shape"||
b===ia)&&d.push("left:0;top:0;width:1px;height:1px;");Qa&&d.push("visibility: ",b===ia?"hidden":"visible");c.push(' style="',d.join(""),'"/>');if(b)c=b===ia||b==="span"||b==="img"?c.join(""):a.prepVML(c),this.element=S(c);this.renderer=a;this.attrSetters={}},add:function(a){var b=this.renderer,c=this.element,d=b.box,d=a?a.element||a:d;a&&a.inverted&&b.invertChild(c,d);d.appendChild(c);this.added=!0;this.alignOnAdd&&!this.deferUpdateTransform&&this.updateTransform();E(this,"add");return this},updateTransform:va.prototype.htmlUpdateTransform,
attr:function(a,b){var c,d,e,f=this.element||{},g=f.style,h=f.nodeName,i=this.renderer,j=this.symbolName,k,l=this.shadows,m,o=this.attrSetters,r=this;ma(a)&&u(b)&&(c=a,a={},a[c]=b);if(ma(a))c=a,r=c==="strokeWidth"||c==="stroke-width"?this.strokeweight:this[c];else for(c in a)if(d=a[c],m=!1,e=o[c]&&o[c].call(this,d,c),e!==!1&&d!==null){e!==x&&(d=e);if(j&&/^(x|y|r|start|end|width|height|innerR|anchorX|anchorY)/.test(c))k||(this.symbolAttr(a),k=!0),m=!0;else if(c==="d"){d=d||[];this.d=d.join(" ");e=
d.length;for(m=[];e--;)m[e]=Ga(d[e])?t(d[e]*10)-5:d[e]==="Z"?"x":d[e];d=m.join(" ")||"x";f.path=d;if(l)for(e=l.length;e--;)l[e].path=l[e].cutOff?this.cutOffPath(d,l[e].cutOff):d;m=!0}else if(c==="visibility"){if(l)for(e=l.length;e--;)l[e].style[c]=d;h==="DIV"&&(d=d==="hidden"?"-999em":0,c="top");g[c]=d;m=!0}else if(c==="zIndex")d&&(g[c]=d),m=!0;else if(c==="width"||c==="height")d=v(0,d),this[c]=d,this.updateClipping?(this[c]=d,this.updateClipping()):g[c]=d,m=!0;else if(c==="x"||c==="y")this[c]=d,
g[{x:"left",y:"top"}[c]]=d;else if(c==="class")f.className=d;else if(c==="stroke")d=i.color(d,f,c),c="strokecolor";else if(c==="stroke-width"||c==="strokeWidth")f.stroked=d?!0:!1,c="strokeweight",this[c]=d,Ga(d)&&(d+="px");else if(c==="dashstyle")(f.getElementsByTagName("stroke")[0]||S(i.prepVML(["<stroke/>"]),null,null,f))[c]=d||"solid",this.dashstyle=d,m=!0;else if(c==="fill")h==="SPAN"?g.color=d:(f.filled=d!==T?!0:!1,d=i.color(d,f,c,this),c="fillcolor");else if(h==="shape"&&c==="rotation")this[c]=
d,f.style.left=-t(aa(d*ab)+1)+"px",f.style.top=t(W(d*ab))+"px";else if(c==="translateX"||c==="translateY"||c==="rotation")this[c]=d,this.updateTransform(),m=!0;else if(c==="text")this.bBox=null,f.innerHTML=d,m=!0;m||(Qa?f[c]=d:B(f,c,d))}return r},clip:function(a){var b=this,c,d=b.element,e=d.parentNode;a?(c=a.members,c.push(b),b.destroyClip=function(){ya(c,b)},e&&e.className==="highcharts-tracker"&&!Qa&&G(d,{visibility:"hidden"}),a=a.getCSS(b)):(b.destroyClip&&b.destroyClip(),a={clip:Qa?"inherit":
"rect(auto)"});return b.css(a)},css:va.prototype.htmlCss,safeRemoveChild:function(a){a.parentNode&&Na(a)},destroy:function(){this.destroyClip&&this.destroyClip();return va.prototype.destroy.apply(this)},empty:function(){for(var a=this.element.childNodes,b=a.length,c;b--;)c=a[b],c.parentNode.removeChild(c)},on:function(a,b){this.element["on"+a]=function(){var a=L.event;a.target=a.srcElement;b(a)};return this},cutOffPath:function(a,b){var c,a=a.split(/[ ,]/);c=a.length;if(c===9||c===11)a[c-4]=a[c-2]=
A(a[c-2])-10*b;return a.join(" ")},shadow:function(a,b,c){var d=[],e,f=this.element,g=this.renderer,h,i=f.style,j,k=f.path,l,m,o,r;k&&typeof k.value!=="string"&&(k="x");m=k;if(a){o=p(a.width,3);r=(a.opacity||0.15)/o;for(e=1;e<=3;e++){l=o*2+1-2*e;c&&(m=this.cutOffPath(k.value,l+0.5));j=['<shape isShadow="true" strokeweight="',l,'" filled="false" path="',m,'" coordsize="10 10" style="',f.style.cssText,'" />'];h=S(g.prepVML(j),null,{left:A(i.left)+(a.offsetX||1),top:A(i.top)+(a.offsetY||1)});if(c)h.cutOff=
l+1;j=['<stroke color="',a.color||"black",'" opacity="',r*e,'"/>'];S(g.prepVML(j),null,null,h);b?b.element.appendChild(h):f.parentNode.insertBefore(h,f);d.push(h)}this.shadows=d}return this}};ka=da(va,ka);var ha={Element:ka,isIE8:Ba.indexOf("MSIE 8.0")>-1,init:function(a,b,c){var d,e;this.alignedObjects=[];d=this.createElement(ia);e=d.element;e.style.position="relative";a.appendChild(d.element);this.box=e;this.boxWrapper=d;this.setSize(b,c,!1);if(!z.namespaces.hcv)z.namespaces.add("hcv","urn:schemas-microsoft-com:vml"),
z.createStyleSheet().cssText="hcv\\:fill, hcv\\:path, hcv\\:shape, hcv\\:stroke{ behavior:url(#default#VML); display: inline-block; } "},isHidden:function(){return!this.box.offsetWidth},clipRect:function(a,b,c,d){var e=this.createElement(),f=Z(a);return s(e,{members:[],left:f?a.x:a,top:f?a.y:b,width:f?a.width:c,height:f?a.height:d,getCSS:function(a){var b=a.inverted,c=this.top,d=this.left,e=d+this.width,f=c+this.height,c={clip:"rect("+t(b?d:c)+"px,"+t(b?f:e)+"px,"+t(b?e:f)+"px,"+t(b?c:d)+"px)"};!b&&
Qa&&a.element.nodeName!=="IMG"&&s(c,{width:e+"px",height:f+"px"});return c},updateClipping:function(){n(e.members,function(a){a.css(e.getCSS(a))})}})},color:function(a,b,c,d){var e=this,f,g=/^rgba/,h,i,j=T;a&&a.linearGradient?i="gradient":a&&a.radialGradient&&(i="pattern");if(i){var k,l,m=a.linearGradient||a.radialGradient,o,r,p,q,y,M="",a=a.stops,u,w=[],I=function(){h=['<fill colors="'+w.join(",")+'" opacity="',p,'" o:opacity2="',r,'" type="',i,'" ',M,'focus="100%" method="any" />'];S(e.prepVML(h),
null,null,b)};o=a[0];u=a[a.length-1];o[0]>0&&a.unshift([0,o[1]]);u[0]<1&&a.push([1,u[1]]);n(a,function(a,b){g.test(a[1])?(f=qa(a[1]),k=f.get("rgb"),l=f.get("a")):(k=a[1],l=1);w.push(a[0]*100+"% "+k);b?(p=l,q=k):(r=l,y=k)});if(c==="fill")if(i==="gradient")c=m.x1||m[0]||0,a=m.y1||m[1]||0,o=m.x2||m[2]||0,m=m.y2||m[3]||0,M='angle="'+(90-K.atan((m-a)/(o-c))*180/xa)+'"',I();else{var j=m.r,J=j*2,Q=j*2,t=m.cx,s=m.cy,v=b.radialReference,x,j=function(){v&&(x=d.getBBox(),t+=(v[0]-x.x)/x.width-0.5,s+=(v[1]-x.y)/
x.height-0.5,J*=v[2]/x.width,Q*=v[2]/x.height);M='src="'+O.global.VMLRadialGradientURL+'" size="'+J+","+Q+'" origin="0.5,0.5" position="'+t+","+s+'" color2="'+y+'" ';I()};d.added?j():H(d,"add",j);j=q}else j=k}else if(g.test(a)&&b.tagName!=="IMG")f=qa(a),h=["<",c,' opacity="',f.get("a"),'"/>'],S(this.prepVML(h),null,null,b),j=f.get("rgb");else{j=b.getElementsByTagName(c);if(j.length)j[0].opacity=1;j=a}return j},prepVML:function(a){var b=this.isIE8,a=a.join("");b?(a=a.replace("/>",' xmlns="urn:schemas-microsoft-com:vml" />'),
a=a.indexOf('style="')===-1?a.replace("/>",' style="display:inline-block;behavior:url(#default#VML);" />'):a.replace('style="','style="display:inline-block;behavior:url(#default#VML);')):a=a.replace("<","<hcv:");return a},text:ra.prototype.html,path:function(a){var b={coordsize:"10 10"};Fa(a)?b.d=a:Z(a)&&s(b,a);return this.createElement("shape").attr(b)},circle:function(a,b,c){return this.symbol("circle").attr({x:a-c,y:b-c,width:2*c,height:2*c})},g:function(a){var b;a&&(b={className:"highcharts-"+
a,"class":"highcharts-"+a});return this.createElement(ia).attr(b)},image:function(a,b,c,d,e){var f=this.createElement("img").attr({src:a});arguments.length>1&&f.css({left:b,top:c,width:d,height:e});return f},rect:function(a,b,c,d,e,f){if(Z(a))b=a.y,c=a.width,d=a.height,f=a.strokeWidth,a=a.x;var g=this.symbol("rect");g.r=e;return g.attr(g.crisp(f,a,b,v(c,0),v(d,0)))},invertChild:function(a,b){var c=b.style;G(a,{flip:"x",left:A(c.width)-1,top:A(c.height)-1,rotation:-90})},symbols:{arc:function(a,b,
c,d,e){var f=e.start,g=e.end,h=e.r||c||d,c=W(f),d=aa(f),i=W(g),j=aa(g),k=e.innerR,l=0.08/h,m=k&&0.1/k||0;if(g-f===0)return["x"];else 2*xa-g+f<l?i=-l:g-f<m&&(i=W(f+m));f=["wa",a-h,b-h,a+h,b+h,a+h*c,b+h*d,a+h*i,b+h*j];e.open&&!k&&f.push("e","M",a,b);f.push("at",a-k,b-k,a+k,b+k,a+k*i,b+k*j,a+k*c,b+k*d,"x","e");return f},circle:function(a,b,c,d){return["wa",a,b,a+c,b+d,a+c,b+d/2,a+c,b+d/2,"e"]},rect:function(a,b,c,d,e){var f=a+c,g=b+d,h;!u(e)||!e.r?f=ra.prototype.symbols.square.apply(0,arguments):(h=
P(e.r,c,d),f=["M",a+h,b,"L",f-h,b,"wa",f-2*h,b,f,b+2*h,f-h,b,f,b+h,"L",f,g-h,"wa",f-2*h,g-2*h,f,g,f,g-h,f-h,g,"L",a+h,g,"wa",a,g-2*h,a+2*h,g,a+h,g,a,g-h,"L",a,b+h,"wa",a,b,a+2*h,b+2*h,a,b+h,a+h,b,"x","e"]);return f}}};ka=function(){this.init.apply(this,arguments)};ka.prototype=C(ra.prototype,ha);Ra=ka}var gb,Mb;if($)gb=function(){},gb.prototype.symbols={},Mb=function(){function a(){var a=b.length,d;for(d=0;d<a;d++)b[d]();b=[]}var b=[];return{push:function(c,d){b.length===0&&Qb(d,a);b.push(c)}}}();
Ra=ka||gb||ra;Pa.prototype={addLabel:function(){var a=this.axis,b=a.options,c=a.chart,d=a.horiz,e=a.categories,f=this.pos,g=b.labels,h=a.tickPositions,d=e&&d&&e.length&&!g.step&&!g.staggerLines&&!g.rotation&&c.plotWidth/h.length||!d&&c.plotWidth/2,i=f===h[0],j=f===h[h.length-1],k=e&&u(e[f])?e[f]:f,e=this.label,h=h.info,l;a.isDatetimeAxis&&h&&(l=b.dateTimeLabelFormats[h.higherRanks[f]||h.unitName]);this.isFirst=i;this.isLast=j;b=a.labelFormatter.call({axis:a,chart:c,isFirst:i,isLast:j,dateTimeLabelFormat:l,
value:a.isLog?ja(ca(k)):k});f=d&&{width:v(1,t(d-2*(g.padding||10)))+"px"};f=s(f,g.style);if(u(e))e&&e.attr({text:b}).css(f);else{d={align:g.align};if(Ga(g.rotation))d.rotation=g.rotation;this.label=u(b)&&g.enabled?c.renderer.text(b,0,0,g.useHTML).attr(d).css(f).add(a.labelGroup):null}},getLabelSize:function(){var a=this.label,b=this.axis;return a?(this.labelBBox=a.getBBox())[b.horiz?"height":"width"]:0},getLabelSides:function(){var a=this.axis.options.labels,b=this.labelBBox.width,a=b*{left:0,center:0.5,
right:1}[a.align]-a.x;return[-a,b-a]},handleOverflow:function(a,b){var c=!0,d=this.axis,e=d.chart,f=this.isFirst,g=this.isLast,h=b.x,i=d.reversed,j=d.tickPositions;if(f||g){var k=this.getLabelSides(),l=k[0],k=k[1],e=e.plotLeft,m=e+d.len,j=(d=d.ticks[j[a+(f?1:-1)]])&&d.label.xy&&d.label.xy.x+d.getLabelSides()[f?0:1];f&&!i||g&&i?h+l<e&&(h=e-l,d&&h+k>j&&(c=!1)):h+k>m&&(h=m-k,d&&h+l<j&&(c=!1));b.x=h}return c},getPosition:function(a,b,c,d){var e=this.axis,f=e.chart,g=d&&f.oldChartHeight||f.chartHeight;
return{x:a?e.translate(b+c,null,null,d)+e.transB:e.left+e.offset+(e.opposite?(d&&f.oldChartWidth||f.chartWidth)-e.right-e.left:0),y:a?g-e.bottom+e.offset-(e.opposite?e.height:0):g-e.translate(b+c,null,null,d)-e.transB}},getLabelPosition:function(a,b,c,d,e,f,g,h){var i=this.axis,j=i.transA,k=i.reversed,i=i.staggerLines,a=a+e.x-(f&&d?f*j*(k?-1:1):0),b=b+e.y-(f&&!d?f*j*(k?1:-1):0);u(e.y)||(b+=A(c.styles.lineHeight)*0.9-c.getBBox().height/2);i&&(b+=g/(h||1)%i*16);return{x:a,y:b}},getMarkPath:function(a,
b,c,d,e,f){return f.crispLine(["M",a,b,"L",a+(e?0:-c),b+(e?c:0)],d)},render:function(a,b){var c=this.axis,d=c.options,e=c.chart.renderer,f=c.horiz,g=this.type,h=this.label,i=this.pos,j=d.labels,k=this.gridLine,l=g?g+"Grid":"grid",m=g?g+"Tick":"tick",o=d[l+"LineWidth"],r=d[l+"LineColor"],n=d[l+"LineDashStyle"],q=d[m+"Length"],l=d[m+"Width"]||0,y=d[m+"Color"],u=d[m+"Position"],m=this.mark,t=j.step,w=!0,I=c.tickmarkOffset,J=this.getPosition(f,i,I,b),Q=J.x,J=J.y,v=c.staggerLines;if(o){i=c.getPlotLinePath(i+
I,o,b);if(k===x){k={stroke:r,"stroke-width":o};if(n)k.dashstyle=n;if(!g)k.zIndex=1;this.gridLine=k=o?e.path(i).attr(k).add(c.gridGroup):null}if(!b&&k&&i)k[this.isNew?"attr":"animate"]({d:i})}if(l&&q)u==="inside"&&(q=-q),c.opposite&&(q=-q),g=this.getMarkPath(Q,J,q,l,f,e),m?m.animate({d:g}):this.mark=e.path(g).attr({stroke:y,"stroke-width":l}).add(c.axisGroup);if(h&&!isNaN(Q))h.xy=J=this.getLabelPosition(Q,J,h,f,j,I,a,t),this.isFirst&&!p(d.showFirstLabel,1)||this.isLast&&!p(d.showLastLabel,1)?w=!1:
!v&&f&&j.overflow==="justify"&&!this.handleOverflow(a,J)&&(w=!1),t&&a%t&&(w=!1),w?(h[this.isNew?"attr":"animate"](J),h.show(),this.isNew=!1):h.hide()},destroy:function(){Aa(this,this.axis)}};nb.prototype={render:function(){var a=this,b=a.axis,c=b.horiz,d=(b.pointRange||0)/2,e=a.options,f=e.label,g=a.label,h=e.width,i=e.to,j=e.from,k=u(j)&&u(i),l=e.value,m=e.dashStyle,o=a.svgElem,r=[],n,q=e.color,y=e.zIndex,M=e.events,t=b.chart.renderer;b.isLog&&(j=na(j),i=na(i),l=na(l));if(h){if(r=b.getPlotLinePath(l,
h),d={stroke:q,"stroke-width":h},m)d.dashstyle=m}else if(k){if(j=v(j,b.min-d),i=P(i,b.max+d),r=b.getPlotBandPath(j,i,e),d={fill:q},e.borderWidth)d.stroke=e.borderColor,d["stroke-width"]=e.borderWidth}else return;if(u(y))d.zIndex=y;if(o)r?o.animate({d:r},null,o.onGetPath):(o.hide(),o.onGetPath=function(){o.show()});else if(r&&r.length&&(a.svgElem=o=t.path(r).attr(d).add(),M))for(n in e=function(b){o.on(b,function(c){M[b].apply(a,[c])})},M)e(n);if(f&&u(f.text)&&r&&r.length&&b.width>0&&b.height>0){f=
C({align:c&&k&&"center",x:c?!k&&4:10,verticalAlign:!c&&k&&"middle",y:c?k?16:10:k?6:-4,rotation:c&&!k&&90},f);if(!g)a.label=g=t.text(f.text,0,0).attr({align:f.textAlign||f.align,rotation:f.rotation,zIndex:y}).css(f.style).add();b=[r[1],r[4],p(r[6],r[1])];r=[r[2],r[5],p(r[7],r[2])];c=Ma(b);k=Ma(r);g.align(f,!1,{x:c,y:k,width:za(b)-c,height:za(r)-k});g.show()}else g&&g.hide();return a},destroy:function(){ya(this.axis.plotLinesAndBands,this);Aa(this,this.axis)}};Hb.prototype={destroy:function(){Aa(this,
this.axis)},setTotal:function(a){this.cum=this.total=a},render:function(a){var b=this.options.formatter.call(this);this.label?this.label.attr({text:b,visibility:"hidden"}):this.label=this.axis.chart.renderer.text(b,0,0).css(this.options.style).attr({align:this.textAlign,rotation:this.options.rotation,visibility:"hidden"}).add(a)},setOffset:function(a,b){var c=this.axis,d=c.chart,e=d.inverted,f=this.isNegative,g=c.translate(this.total,0,0,0,1),c=c.translate(0),c=N(g-c),h=d.xAxis[0].translate(this.x)+
a,d=d.plotHeight,e={x:e?f?g:g-c:h,y:e?d-h-b:f?d-g-c:d-g,width:e?c:b,height:e?b:c};this.label&&this.label.align(this.alignOptions,null,e).attr({visibility:"visible"})}};ob.prototype={defaultOptions:{dateTimeLabelFormats:{millisecond:"%H:%M:%S.%L",second:"%H:%M:%S",minute:"%H:%M",hour:"%H:%M",day:"%e. %b",week:"%e. %b",month:"%b '%y",year:"%Y"},endOnTick:!1,gridLineColor:"#C0C0C0",labels:F,lineColor:"#C0D0E0",lineWidth:1,minPadding:0.01,maxPadding:0.01,minorGridLineColor:"#E0E0E0",minorGridLineWidth:1,
minorTickColor:"#A0A0A0",minorTickLength:2,minorTickPosition:"outside",startOfWeek:1,startOnTick:!1,tickColor:"#C0D0E0",tickLength:5,tickmarkPlacement:"between",tickPixelInterval:100,tickPosition:"outside",tickWidth:1,title:{align:"middle",style:{color:"#6D869F",fontWeight:"bold"}},type:"linear"},defaultYAxisOptions:{endOnTick:!0,gridLineWidth:1,tickPixelInterval:72,showLastLabel:!0,labels:{align:"right",x:-8,y:3},lineWidth:0,maxPadding:0.05,minPadding:0.05,startOnTick:!0,tickWidth:0,title:{rotation:270,
text:"Y-values"},stackLabels:{enabled:!1,formatter:function(){return this.total},style:F.style}},defaultLeftAxisOptions:{labels:{align:"right",x:-8,y:null},title:{rotation:270}},defaultRightAxisOptions:{labels:{align:"left",x:8,y:null},title:{rotation:90}},defaultBottomAxisOptions:{labels:{align:"center",x:0,y:14},title:{rotation:0}},defaultTopAxisOptions:{labels:{align:"center",x:0,y:-5},title:{rotation:0}},init:function(a,b){var c=b.isX;this.horiz=a.inverted?!c:c;this.xOrY=(this.isXAxis=c)?"x":
"y";this.opposite=b.opposite;this.side=this.horiz?this.opposite?0:2:this.opposite?1:3;this.setOptions(b);var d=this.options,e=d.type,f=e==="datetime";this.labelFormatter=d.labels.formatter||this.defaultLabelFormatter;this.staggerLines=this.horiz&&d.labels.staggerLines;this.userOptions=b;this.minPixelPadding=0;this.chart=a;this.reversed=d.reversed;this.categories=d.categories;this.isLog=e==="logarithmic";this.isLinked=u(d.linkedTo);this.isDatetimeAxis=f;this.tickmarkOffset=d.categories&&d.tickmarkPlacement===
"between"?0.5:0;this.ticks={};this.minorTicks={};this.plotLinesAndBands=[];this.alternateBands={};this.len=0;this.minRange=this.userMinRange=d.minRange||d.maxZoom;this.range=d.range;this.offset=d.offset||0;this.stacks={};this.min=this.max=null;var g,d=this.options.events;a.axes.push(this);a[c?"xAxis":"yAxis"].push(this);this.series=[];if(a.inverted&&c&&this.reversed===x)this.reversed=!0;this.removePlotLine=this.removePlotBand=this.removePlotBandOrLine;this.addPlotLine=this.addPlotBand=this.addPlotBandOrLine;
for(g in d)H(this,g,d[g]);if(this.isLog)this.val2lin=na,this.lin2val=ca},setOptions:function(a){this.options=C(this.defaultOptions,this.isXAxis?{}:this.defaultYAxisOptions,[this.defaultTopAxisOptions,this.defaultRightAxisOptions,this.defaultBottomAxisOptions,this.defaultLeftAxisOptions][this.side],C(O[this.isXAxis?"xAxis":"yAxis"],a))},defaultLabelFormatter:function(){var a=this.axis,b=this.value,c=this.dateTimeLabelFormat,d=O.lang.numericSymbols,e=d&&d.length,f,g=a.isLog?b:a.tickInterval;if(a.categories)f=
b;else if(c)f=cb(c,b);else if(e&&g>=1E3)for(;e--&&f===x;)a=Math.pow(1E3,e+1),g>=a&&d[e]!==null&&(f=Ia(b/a,-1)+d[e]);f===x&&(f=b>=1E3?Ia(b,0):Ia(b,-1));return f},getSeriesExtremes:function(){var a=this,b=a.chart,c=a.stacks,d=[],e=[],f;a.hasVisibleSeries=!1;a.dataMin=a.dataMax=null;n(a.series,function(g){if(g.visible||!b.options.chart.ignoreHiddenSeries){var h=g.options,i,j,k,l,m,o,r,n,q,y=h.threshold,t,s=[],w=0;a.hasVisibleSeries=!0;if(a.isLog&&y<=0)y=h.threshold=null;if(a.isXAxis){if(h=g.xData,h.length)a.dataMin=
P(p(a.dataMin,h[0]),Ma(h)),a.dataMax=v(p(a.dataMax,h[0]),za(h))}else{var I,J,Q,C=g.cropped,Ea=g.xAxis.getExtremes(),A=!!g.modifyValue;i=h.stacking;a.usePercentage=i==="percent";if(i)m=h.stack,l=g.type+p(m,""),o="-"+l,g.stackKey=l,j=d[l]||[],d[l]=j,k=e[o]||[],e[o]=k;if(a.usePercentage)a.dataMin=0,a.dataMax=99;h=g.processedXData;r=g.processedYData;t=r.length;for(f=0;f<t;f++)if(n=h[f],q=r[f],q!==null&&q!==x&&(i?(J=(I=q<y)?k:j,Q=I?o:l,q=J[n]=u(J[n])?J[n]+q:q,c[Q]||(c[Q]={}),c[Q][n]||(c[Q][n]=new Hb(a,
a.options.stackLabels,I,n,m)),c[Q][n].setTotal(q)):A&&(q=g.modifyValue(q)),C||(h[f+1]||n)>=Ea.min&&(h[f-1]||n)<=Ea.max))if(n=q.length)for(;n--;)q[n]!==null&&(s[w++]=q[n]);else s[w++]=q;if(!a.usePercentage&&s.length)a.dataMin=P(p(a.dataMin,s[0]),Ma(s)),a.dataMax=v(p(a.dataMax,s[0]),za(s));if(u(y))if(a.dataMin>=y)a.dataMin=y,a.ignoreMinPadding=!0;else if(a.dataMax<y)a.dataMax=y,a.ignoreMaxPadding=!0}}})},translate:function(a,b,c,d,e,f){var g=this.len,h=1,i=0,j=d?this.oldTransA:this.transA,d=d?this.oldMin:
this.min,e=this.options.ordinal||this.isLog&&e;if(!j)j=this.transA;c&&(h*=-1,i=g);this.reversed&&(h*=-1,i-=h*g);b?(this.reversed&&(a=g-a),a=a/j+d,e&&(a=this.lin2val(a))):(e&&(a=this.val2lin(a)),a=h*(a-d)*j+i+h*this.minPixelPadding+(f?j*this.pointRange/2:0));return a},getPlotLinePath:function(a,b,c){var d=this.chart,e=this.left,f=this.top,g,h,i,a=this.translate(a,null,null,c),j=c&&d.oldChartHeight||d.chartHeight,k=c&&d.oldChartWidth||d.chartWidth,l;g=this.transB;c=h=t(a+g);g=i=t(j-a-g);if(isNaN(a))l=
!0;else if(this.horiz){if(g=f,i=j-this.bottom,c<e||c>e+this.width)l=!0}else if(c=e,h=k-this.right,g<f||g>f+this.height)l=!0;return l?null:d.renderer.crispLine(["M",c,g,"L",h,i],b||0)},getPlotBandPath:function(a,b){var c=this.getPlotLinePath(b),d=this.getPlotLinePath(a);d&&c?d.push(c[4],c[5],c[1],c[2]):d=null;return d},getLinearTickPositions:function(a,b,c){for(var d,b=ja(V(b/a)*a),c=ja(wa(c/a)*a),e=[];b<=c;){e.push(b);b=ja(b+a);if(b===d)break;d=b}return e},getLogTickPositions:function(a,b,c,d){var e=
this.options,f=this.len,g=[];if(!d)this._minorAutoInterval=null;if(a>=0.5)a=t(a),g=this.getLinearTickPositions(a,b,c);else if(a>=0.08)for(var f=V(b),h,i,j,k,l,e=a>0.3?[1,2,4]:a>0.15?[1,2,4,6,8]:[1,2,3,4,5,6,7,8,9];f<c+1&&!l;f++){i=e.length;for(h=0;h<i&&!l;h++)j=na(ca(f)*e[h]),j>b&&g.push(k),k>c&&(l=!0),k=j}else if(b=ca(b),c=ca(c),a=e[d?"minorTickInterval":"tickInterval"],a=p(a==="auto"?null:a,this._minorAutoInterval,(c-b)*(e.tickPixelInterval/(d?5:1))/((d?f/this.tickPositions.length:f)||1)),a=hb(a,
null,K.pow(10,V(K.log(a)/K.LN10))),g=Sa(this.getLinearTickPositions(a,b,c),na),!d)this._minorAutoInterval=a/5;if(!d)this.tickInterval=a;return g},getMinorTickPositions:function(){var a=this.tickPositions,b=this.minorTickInterval,c=[],d,e;if(this.isLog){e=a.length;for(d=1;d<e;d++)c=c.concat(this.getLogTickPositions(b,a[d-1],a[d],!0))}else for(a=this.min+(a[0]-this.min)%b;a<=this.max;a+=b)c.push(a);return c},adjustForMinRange:function(){var a=this.options,b=this.min,c=this.max,d,e=this.dataMax-this.dataMin>=
this.minRange,f,g,h,i,j;if(this.isXAxis&&this.minRange===x&&!this.isLog)u(a.min)||u(a.max)?this.minRange=null:(n(this.series,function(a){i=a.xData;for(g=j=a.xIncrement?1:i.length-1;g>0;g--)if(h=i[g]-i[g-1],f===x||h<f)f=h}),this.minRange=P(f*5,this.dataMax-this.dataMin));if(c-b<this.minRange){var k=this.minRange;d=(k-c+b)/2;d=[b-d,p(a.min,b-d)];if(e)d[2]=this.dataMin;b=za(d);c=[b+k,p(a.max,b+k)];if(e)c[2]=this.dataMax;c=Ma(c);c-b<k&&(d[0]=c-k,d[1]=p(a.min,c-k),b=za(d))}this.min=b;this.max=c},setAxisTranslation:function(){var a=
this.max-this.min,b=0,c,d=0,e=0,f=this.transA;if(this.isXAxis)this.isLinked?d=this.linkedParent.minPointOffset:n(this.series,function(a){var f=a.pointRange,i=a.options.pointPlacement,j=a.closestPointRange;b=v(b,f);d=v(d,i?0:f/2);e=v(e,i==="on"?0:f);!a.noSharedTooltip&&u(j)&&(c=u(c)?P(c,j):j)}),this.minPointOffset=d,this.pointRange=b,this.closestPointRange=c;this.oldTransA=f;this.translationSlope=this.transA=f=this.len/(a+e||1);this.transB=this.horiz?this.left:this.bottom;this.minPixelPadding=f*d},
setTickPositions:function(a){var b=this,c=b.chart,d=b.options,e=b.isLog,f=b.isDatetimeAxis,g=b.isXAxis,h=b.isLinked,i=b.options.tickPositioner,j=d.maxPadding,k=d.minPadding,l=d.tickInterval,m=d.minTickInterval,o=d.tickPixelInterval,r=b.categories;h?(b.linkedParent=c[g?"xAxis":"yAxis"][d.linkedTo],c=b.linkedParent.getExtremes(),b.min=p(c.min,c.dataMin),b.max=p(c.max,c.dataMax),d.type!==b.linkedParent.options.type&&$a(11,1)):(b.min=p(b.userMin,d.min,b.dataMin),b.max=p(b.userMax,d.max,b.dataMax));if(e)!a&&
P(b.min,p(b.dataMin,b.min))<=0&&$a(10,1),b.min=ja(na(b.min)),b.max=ja(na(b.max));if(b.range&&(b.userMin=b.min=v(b.min,b.max-b.range),b.userMax=b.max,a))b.range=null;b.adjustForMinRange();if(!r&&!b.usePercentage&&!h&&u(b.min)&&u(b.max)){c=b.max-b.min||1;if(!u(d.min)&&!u(b.userMin)&&k&&(b.dataMin<0||!b.ignoreMinPadding))b.min-=c*k;if(!u(d.max)&&!u(b.userMax)&&j&&(b.dataMax>0||!b.ignoreMaxPadding))b.max+=c*j}b.tickInterval=b.min===b.max||b.min===void 0||b.max===void 0?1:h&&!l&&o===b.linkedParent.options.tickPixelInterval?
b.linkedParent.tickInterval:p(l,r?1:(b.max-b.min)*o/(b.len||1));g&&!a&&n(b.series,function(a){a.processData(b.min!==b.oldMin||b.max!==b.oldMax)});b.setAxisTranslation(a);b.beforeSetTickPositions&&b.beforeSetTickPositions();if(b.postProcessTickInterval)b.tickInterval=b.postProcessTickInterval(b.tickInterval);if(!l&&b.tickInterval<m)b.tickInterval=m;if(!f&&!e&&(a=K.pow(10,V(K.log(b.tickInterval)/K.LN10)),!l))b.tickInterval=hb(b.tickInterval,null,a,d);b.minorTickInterval=d.minorTickInterval==="auto"&&
b.tickInterval?b.tickInterval/5:d.minorTickInterval;b.tickPositions=i=d.tickPositions||i&&i.apply(b,[b.min,b.max]);if(!i)i=f?(b.getNonLinearTimeTicks||Ob)(Nb(b.tickInterval,d.units),b.min,b.max,d.startOfWeek,b.ordinalPositions,b.closestPointRange,!0):e?b.getLogTickPositions(b.tickInterval,b.min,b.max):b.getLinearTickPositions(b.tickInterval,b.min,b.max),b.tickPositions=i;if(!h)e=i[0],f=i[i.length-1],h=b.minPointOffset||0,d.startOnTick?b.min=e:b.min-h>e&&i.shift(),d.endOnTick?b.max=f:b.max+h<f&&i.pop()},
setMaxTicks:function(){var a=this.chart,b=a.maxTicks,c=this.tickPositions,d=this.xOrY;b||(b={x:0,y:0});if(!this.isLinked&&!this.isDatetimeAxis&&c.length>b[d]&&this.options.alignTicks!==!1)b[d]=c.length;a.maxTicks=b},adjustTickAmount:function(){var a=this.xOrY,b=this.tickPositions,c=this.chart.maxTicks;if(c&&c[a]&&!this.isDatetimeAxis&&!this.categories&&!this.isLinked&&this.options.alignTicks!==!1){var d=this.tickAmount,e=b.length;this.tickAmount=a=c[a];if(e<a){for(;b.length<a;)b.push(ja(b[b.length-
1]+this.tickInterval));this.transA*=(e-1)/(a-1);this.max=b[b.length-1]}if(u(d)&&a!==d)this.isDirty=!0}},setScale:function(){var a=this.stacks,b,c,d,e;this.oldMin=this.min;this.oldMax=this.max;this.oldAxisLength=this.len;this.setAxisSize();e=this.len!==this.oldAxisLength;n(this.series,function(a){if(a.isDirtyData||a.isDirty||a.xAxis.isDirty)d=!0});if(e||d||this.isLinked||this.userMin!==this.oldUserMin||this.userMax!==this.oldUserMax)if(this.getSeriesExtremes(),this.setTickPositions(),this.oldUserMin=
this.userMin,this.oldUserMax=this.userMax,!this.isDirty)this.isDirty=e||this.min!==this.oldMin||this.max!==this.oldMax;if(!this.isXAxis)for(b in a)for(c in a[b])a[b][c].cum=a[b][c].total;this.setMaxTicks()},setExtremes:function(a,b,c,d,e){var f=this,g=f.chart,c=p(c,!0),e=s(e,{min:a,max:b});E(f,"setExtremes",e,function(){f.userMin=a;f.userMax=b;f.isDirtyExtremes=!0;c&&g.redraw(d)})},zoom:function(a,b){this.setExtremes(a,b,!1,x,{trigger:"zoom"});return!0},setAxisSize:function(){var a=this.chart,b=this.options,
c=b.offsetLeft||0,d=b.offsetRight||0;this.left=p(b.left,a.plotLeft+c);this.top=p(b.top,a.plotTop);this.width=p(b.width,a.plotWidth-c+d);this.height=p(b.height,a.plotHeight);this.bottom=a.chartHeight-this.height-this.top;this.right=a.chartWidth-this.width-this.left;this.len=v(this.horiz?this.width:this.height,0)},getExtremes:function(){var a=this.isLog;return{min:a?ja(ca(this.min)):this.min,max:a?ja(ca(this.max)):this.max,dataMin:this.dataMin,dataMax:this.dataMax,userMin:this.userMin,userMax:this.userMax}},
getThreshold:function(a){var b=this.isLog,c=b?ca(this.min):this.min,b=b?ca(this.max):this.max;c>a||a===null?a=c:b<a&&(a=b);return this.translate(a,0,1,0,1)},addPlotBandOrLine:function(a){a=(new nb(this,a)).render();this.plotLinesAndBands.push(a);return a},getOffset:function(){var a=this,b=a.chart,c=b.renderer,d=a.options,e=a.tickPositions,f=a.ticks,g=a.horiz,h=a.side,i,j=0,k,l=0,m=d.title,o=d.labels,r=0,ea=b.axisOffset,q=[-1,1,1,-1][h],y;a.hasData=b=a.hasVisibleSeries||u(a.min)&&u(a.max)&&!!e;a.showAxis=
i=b||p(d.showEmpty,!0);if(!a.axisGroup)a.gridGroup=c.g("grid").attr({zIndex:d.gridZIndex||1}).add(),a.axisGroup=c.g("axis").attr({zIndex:d.zIndex||2}).add(),a.labelGroup=c.g("axis-labels").attr({zIndex:o.zIndex||7}).add();if(b||a.isLinked)n(e,function(b){f[b]?f[b].addLabel():f[b]=new Pa(a,b)}),n(e,function(a){if(h===0||h===2||{1:"left",3:"right"}[h]===o.align)r=v(f[a].getLabelSize(),r)}),a.staggerLines&&(r+=(a.staggerLines-1)*16);else for(y in f)f[y].destroy(),delete f[y];if(m&&m.text){if(!a.axisTitle)a.axisTitle=
c.text(m.text,0,0,m.useHTML).attr({zIndex:7,rotation:m.rotation||0,align:m.textAlign||{low:"left",middle:"center",high:"right"}[m.align]}).css(m.style).add(a.axisGroup),a.axisTitle.isNew=!0;if(i)j=a.axisTitle.getBBox()[g?"height":"width"],l=p(m.margin,g?5:10),k=m.offset;a.axisTitle[i?"show":"hide"]()}a.offset=q*p(d.offset,ea[h]);a.axisTitleMargin=p(k,r+l+(h!==2&&r&&q*d.labels[g?"y":"x"]));ea[h]=v(ea[h],a.axisTitleMargin+j+q*a.offset)},getLinePath:function(a){var b=this.chart,c=this.opposite,d=this.offset,
e=this.horiz,f=this.left+(c?this.width:0)+d;this.lineTop=c=b.chartHeight-this.bottom-(c?this.height:0)+d;return b.renderer.crispLine(["M",e?this.left:f,e?c:this.top,"L",e?b.chartWidth-this.right:f,e?c:b.chartHeight-this.bottom],a)},getTitlePosition:function(){var a=this.horiz,b=this.left,c=this.top,d=this.len,e=this.options.title,f=a?b:c,g=this.opposite,h=this.offset,i=A(e.style.fontSize||12),d={low:f+(a?0:d),middle:f+d/2,high:f+(a?d:0)}[e.align],b=(a?c+this.height:b)+(a?1:-1)*(g?-1:1)*this.axisTitleMargin+
(this.side===2?i:0);return{x:a?d:b+(g?this.width:0)+h+(e.x||0),y:a?b-(g?this.height:0)+h:d+(e.y||0)}},render:function(){var a=this,b=a.chart,c=b.renderer,d=a.options,e=a.isLog,f=a.isLinked,g=a.tickPositions,h=a.axisTitle,i=a.stacks,j=a.ticks,k=a.minorTicks,l=a.alternateBands,m=d.stackLabels,o=d.alternateGridColor,r=a.tickmarkOffset,p=d.lineWidth,q,y=b.hasRendered&&u(a.oldMin)&&!isNaN(a.oldMin),t=a.showAxis,s,w;if(a.hasData||f)if(a.minorTickInterval&&!a.categories&&n(a.getMinorTickPositions(),function(b){k[b]||
(k[b]=new Pa(a,b,"minor"));y&&k[b].isNew&&k[b].render(null,!0);k[b].isActive=!0;k[b].render()}),n(g.slice(1).concat([g[0]]),function(b,c){c=c===g.length-1?0:c+1;if(!f||b>=a.min&&b<=a.max)j[b]||(j[b]=new Pa(a,b)),y&&j[b].isNew&&j[b].render(c,!0),j[b].isActive=!0,j[b].render(c)}),o&&n(g,function(b,c){if(c%2===0&&b<a.max)l[b]||(l[b]=new nb(a)),s=b+r,w=g[c+1]!==x?g[c+1]+r:a.max,l[b].options={from:e?ca(s):s,to:e?ca(w):w,color:o},l[b].render(),l[b].isActive=!0}),!a._addedPlotLB)n((d.plotLines||[]).concat(d.plotBands||
[]),function(b){a.addPlotBandOrLine(b)}),a._addedPlotLB=!0;n([j,k,l],function(a){for(var b in a)a[b].isActive?a[b].isActive=!1:(a[b].destroy(),delete a[b])});if(p)q=a.getLinePath(p),a.axisLine?a.axisLine.animate({d:q}):a.axisLine=c.path(q).attr({stroke:d.lineColor,"stroke-width":p,zIndex:7}).add(a.axisGroup),a.axisLine[t?"show":"hide"]();if(h&&t)h[h.isNew?"attr":"animate"](a.getTitlePosition()),h.isNew=!1;if(m&&m.enabled){var I,J,d=a.stackTotalGroup;if(!d)a.stackTotalGroup=d=c.g("stack-labels").attr({visibility:"visible",
zIndex:6}).add();d.translate(b.plotLeft,b.plotTop);for(I in i)for(J in b=i[I],b)b[J].render(d)}a.isDirty=!1},removePlotBandOrLine:function(a){for(var b=this.plotLinesAndBands,c=b.length;c--;)b[c].id===a&&b[c].destroy()},setTitle:function(a,b){var c=this.chart,d=this.options,e=this.axisTitle;d.title=C(d.title,a);this.axisTitle=e&&e.destroy();this.isDirty=!0;p(b,!0)&&c.redraw()},redraw:function(){var a=this.chart;a.tracker.resetTracker&&a.tracker.resetTracker(!0);this.render();n(this.plotLinesAndBands,
function(a){a.render()});n(this.series,function(a){a.isDirty=!0})},setCategories:function(a,b){var c=this.chart;this.categories=this.userOptions.categories=a;n(this.series,function(a){a.translate();a.setTooltipPoints(!0)});this.isDirty=!0;p(b,!0)&&c.redraw()},destroy:function(){var a=this,b=a.stacks,c;U(a);for(c in b)Aa(b[c]),b[c]=null;n([a.ticks,a.minorTicks,a.alternateBands,a.plotLinesAndBands],function(a){Aa(a)});n("stackTotalGroup,axisLine,axisGroup,gridGroup,labelGroup,axisTitle".split(","),
function(b){a[b]&&(a[b]=a[b].destroy())})}};pb.prototype={destroy:function(){n(this.crosshairs,function(a){a&&a.destroy()});if(this.label)this.label=this.label.destroy()},move:function(a,b,c,d){var e=this,f=e.now,g=e.options.animation!==!1&&!e.isHidden;s(f,{x:g?(2*f.x+a)/3:a,y:g?(f.y+b)/2:b,anchorX:g?(2*f.anchorX+c)/3:c,anchorY:g?(f.anchorY+d)/2:d});e.label.attr(f);e.tooltipTick=g&&(N(a-f.x)>1||N(b-f.y)>1)?function(){e.move(a,b,c,d)}:null},hide:function(){if(!this.isHidden){var a=this.chart.hoverPoints;
this.label.hide();a&&n(a,function(a){a.setState()});this.chart.hoverPoints=null;this.isHidden=!0}},hideCrosshairs:function(){n(this.crosshairs,function(a){a&&a.hide()})},getAnchor:function(a,b){var c,d=this.chart,e=d.inverted,f=0,g=0,h,a=oa(a);c=a[0].tooltipPos;c||(n(a,function(a){h=a.series.yAxis;f+=a.plotX;g+=(a.plotLow?(a.plotLow+a.plotHigh)/2:a.plotY)+(!e&&h?h.top-d.plotTop:0)}),f/=a.length,g/=a.length,c=[e?d.plotWidth-g:f,this.shared&&!e&&a.length>1&&b?b.chartY-d.plotTop:e?d.plotHeight-f:g]);
return Sa(c,t)},getPosition:function(a,b,c){var d=this.chart,e=d.plotLeft,f=d.plotTop,g=d.plotWidth,h=d.plotHeight,i=p(this.options.distance,12),j=c.plotX,c=c.plotY,d=j+e+(d.inverted?i:-a-i),k=c-b+f+15,l;d<7&&(d=e+j+i);d+a>e+g&&(d-=d+a-(e+g),k=c-b+f-i,l=!0);k<f+5&&(k=f+5,l&&c>=k&&c<=k+b&&(k=c+f+i));k+b>f+h&&(k=v(f,f+h-b-i));return{x:d,y:k}},refresh:function(a,b){function c(){var a=this.points||oa(this),b=a[0].series,c;c=[b.tooltipHeaderFormatter(a[0].key)];n(a,function(a){b=a.series;c.push(b.tooltipFormatter&&
b.tooltipFormatter(a)||a.point.tooltipFormatter(b.tooltipOptions.pointFormat))});c.push(f.footerFormat||"");return c.join("")}var d=this.chart,e=this.label,f=this.options,g,h,i,j={},k,l=[];k=f.formatter||c;var j=d.hoverPoints,m,o=f.crosshairs;i=this.shared;h=this.getAnchor(a,b);g=h[0];h=h[1];i&&(!a.series||!a.series.noSharedTooltip)?(d.hoverPoints=a,j&&n(j,function(a){a.setState()}),n(a,function(a){a.setState("hover");l.push(a.getLabelConfig())}),j={x:a[0].category,y:a[0].y},j.points=l,a=a[0]):j=
a.getLabelConfig();k=k.call(j);j=a.series;i=i||!j.isCartesian||j.tooltipOutsidePlot||d.isInsidePlot(g,h);k===!1||!i?this.hide():(this.isHidden&&e.show(),e.attr({text:k}),m=f.borderColor||a.color||j.color||"#606060",e.attr({stroke:m}),e=(f.positioner||this.getPosition).call(this,e.width,e.height,{plotX:g,plotY:h}),this.move(t(e.x),t(e.y),g+d.plotLeft,h+d.plotTop),this.isHidden=!1);if(o){o=oa(o);for(e=o.length;e--;)if(i=a.series[e?"yAxis":"xAxis"],o[e]&&i)if(i=i.getPlotLinePath(e?p(a.stackY,a.y):a.x,
1),this.crosshairs[e])this.crosshairs[e].attr({d:i,visibility:"visible"});else{j={"stroke-width":o[e].width||1,stroke:o[e].color||"#C0C0C0",zIndex:o[e].zIndex||2};if(o[e].dashStyle)j.dashstyle=o[e].dashStyle;this.crosshairs[e]=d.renderer.path(i).attr(j).add()}}E(d,"tooltipRefresh",{text:k,x:g+d.plotLeft,y:h+d.plotTop,borderColor:m})},tick:function(){this.tooltipTick&&this.tooltipTick()}};qb.prototype={normalizeMouseEvent:function(a){var b,c,d,a=a||L.event;if(!a.target)a.target=a.srcElement;a=Lb(a);
d=a.touches?a.touches.item(0):a;this.chartPosition=b=Sb(this.chart.container);d.pageX===x?(c=a.x,b=a.y):(c=d.pageX-b.left,b=d.pageY-b.top);return s(a,{chartX:t(c),chartY:t(b)})},getMouseCoordinates:function(a){var b={xAxis:[],yAxis:[]},c=this.chart;n(c.axes,function(d){var e=d.isXAxis;b[e?"xAxis":"yAxis"].push({axis:d,value:d.translate(((c.inverted?!e:e)?a.chartX-c.plotLeft:d.top+d.len-a.chartY)-d.minPixelPadding,!0)})});return b},getIndex:function(a){var b=this.chart;return b.inverted?b.plotHeight+
b.plotTop-a.chartY:a.chartX-b.plotLeft},onmousemove:function(a){var b=this.chart,c=b.series,d=b.tooltip,e,f=b.hoverPoint,g=b.hoverSeries,h,i,j=b.chartWidth,k=this.getIndex(a);if(d&&this.options.tooltip.shared&&(!g||!g.noSharedTooltip)){e=[];h=c.length;for(i=0;i<h;i++)if(c[i].visible&&c[i].options.enableMouseTracking!==!1&&!c[i].noSharedTooltip&&c[i].tooltipPoints.length)b=c[i].tooltipPoints[k],b._dist=N(k-b[c[i].xAxis.tooltipPosName||"plotX"]),j=P(j,b._dist),e.push(b);for(h=e.length;h--;)e[h]._dist>
j&&e.splice(h,1);if(e.length&&e[0].plotX!==this.hoverX)d.refresh(e,a),this.hoverX=e[0].plotX}if(g&&g.tracker&&(b=g.tooltipPoints[k])&&b!==f)b.onMouseOver()},resetTracker:function(a){var b=this.chart,c=b.hoverSeries,d=b.hoverPoint,e=b.tooltip,b=e&&e.shared?b.hoverPoints:d;(a=a&&e&&b)&&oa(b)[0].plotX===x&&(a=!1);if(a)e.refresh(b);else{if(d)d.onMouseOut();if(c)c.onMouseOut();e&&(e.hide(),e.hideCrosshairs());this.hoverX=null}},setDOMEvents:function(){function a(){if(b.selectionMarker){var f={xAxis:[],
yAxis:[]},g=b.selectionMarker.getBBox(),h=g.x-c.plotLeft,l=g.y-c.plotTop,m;e&&(n(c.axes,function(a){if(a.options.zoomEnabled!==!1){var b=a.isXAxis,d=c.inverted?!b:b,e=a.translate(d?h:c.plotHeight-l-g.height,!0,0,0,1),d=a.translate((d?h+g.width:c.plotHeight-l)-2*a.minPixelPadding,!0,0,0,1);!isNaN(e)&&!isNaN(d)&&(f[b?"xAxis":"yAxis"].push({axis:a,min:P(e,d),max:v(e,d)}),m=!0)}}),m&&E(c,"selection",f,function(a){c.zoom(a)}));b.selectionMarker=b.selectionMarker.destroy()}if(c)G(d,{cursor:"auto"}),c.cancelClick=
e,c.mouseIsDown=e=!1;U(z,ga?"touchend":"mouseup",a)}var b=this,c=b.chart,d=c.container,e,f=b.zoomX&&!c.inverted||b.zoomY&&c.inverted,g=b.zoomY&&!c.inverted||b.zoomX&&c.inverted;b.hideTooltipOnMouseMove=function(a){a=Lb(a);b.chartPosition&&c.hoverSeries&&c.hoverSeries.isCartesian&&!c.isInsidePlot(a.pageX-b.chartPosition.left-c.plotLeft,a.pageY-b.chartPosition.top-c.plotTop)&&b.resetTracker()};b.hideTooltipOnMouseLeave=function(){b.resetTracker();b.chartPosition=null};d.onmousedown=function(d){d=b.normalizeMouseEvent(d);
!ga&&d.preventDefault&&d.preventDefault();c.mouseIsDown=!0;c.cancelClick=!1;c.mouseDownX=b.mouseDownX=d.chartX;b.mouseDownY=d.chartY;H(z,ga?"touchend":"mouseup",a)};var h=function(a){if(!a||!(a.touches&&a.touches.length>1)){a=b.normalizeMouseEvent(a);if(!ga)a.returnValue=!1;var d=a.chartX,h=a.chartY,l=!c.isInsidePlot(d-c.plotLeft,h-c.plotTop);ga&&a.type==="touchstart"&&(B(a.target,"isTracker")?c.runTrackerClick||a.preventDefault():!c.runChartClick&&!l&&a.preventDefault());if(l)d<c.plotLeft?d=c.plotLeft:
d>c.plotLeft+c.plotWidth&&(d=c.plotLeft+c.plotWidth),h<c.plotTop?h=c.plotTop:h>c.plotTop+c.plotHeight&&(h=c.plotTop+c.plotHeight);if(c.mouseIsDown&&a.type!=="touchstart"&&(e=Math.sqrt(Math.pow(b.mouseDownX-d,2)+Math.pow(b.mouseDownY-h,2)),e>10)){var m=c.isInsidePlot(b.mouseDownX-c.plotLeft,b.mouseDownY-c.plotTop);if(c.hasCartesianSeries&&(b.zoomX||b.zoomY)&&m&&!b.selectionMarker)b.selectionMarker=c.renderer.rect(c.plotLeft,c.plotTop,f?1:c.plotWidth,g?1:c.plotHeight,0).attr({fill:b.options.chart.selectionMarkerFill||
"rgba(69,114,167,0.25)",zIndex:7}).add();if(b.selectionMarker&&f){var o=d-b.mouseDownX;b.selectionMarker.attr({width:N(o),x:(o>0?0:o)+b.mouseDownX})}b.selectionMarker&&g&&(h-=b.mouseDownY,b.selectionMarker.attr({height:N(h),y:(h>0?0:h)+b.mouseDownY}));m&&!b.selectionMarker&&b.options.chart.panning&&c.pan(d)}if(!l)b.onmousemove(a);return l||!c.hasCartesianSeries}};d.onmousemove=h;H(d,"mouseleave",b.hideTooltipOnMouseLeave);H(z,"mousemove",b.hideTooltipOnMouseMove);d.ontouchstart=function(a){if(b.zoomX||
b.zoomY)d.onmousedown(a);h(a)};d.ontouchmove=h;d.ontouchend=function(){e&&b.resetTracker()};d.onclick=function(a){var d=c.hoverPoint,e,f,a=b.normalizeMouseEvent(a);a.cancelBubble=!0;if(!c.cancelClick)d&&(B(a.target,"isTracker")||B(a.target.parentNode,"isTracker"))?(e=d.plotX,f=d.plotY,s(d,{pageX:b.chartPosition.left+c.plotLeft+(c.inverted?c.plotWidth-f:e),pageY:b.chartPosition.top+c.plotTop+(c.inverted?c.plotHeight-e:f)}),E(d.series,"click",s(a,{point:d})),d.firePointEvent("click",a)):(s(a,b.getMouseCoordinates(a)),
c.isInsidePlot(a.chartX-c.plotLeft,a.chartY-c.plotTop)&&E(c,"click",a))}},destroy:function(){var a=this.chart,b=a.container;if(a.trackerGroup)a.trackerGroup=a.trackerGroup.destroy();U(b,"mouseleave",this.hideTooltipOnMouseLeave);U(z,"mousemove",this.hideTooltipOnMouseMove);b.onclick=b.onmousedown=b.onmousemove=b.ontouchstart=b.ontouchend=b.ontouchmove=null;clearInterval(this.tooltipInterval)},init:function(a,b){if(!a.trackerGroup)a.trackerGroup=a.renderer.g("tracker").attr({zIndex:9}).add();if(b.enabled)a.tooltip=
new pb(a,b),this.tooltipInterval=setInterval(function(){a&&a.tooltip&&a.tooltip.tick()},32);this.setDOMEvents()}};rb.prototype={init:function(a){var b=this,c=b.options=a.options.legend;if(c.enabled){var d=c.itemStyle,e=p(c.padding,8),f=c.itemMarginTop||0;b.baseline=A(d.fontSize)+3+f;b.itemStyle=d;b.itemHiddenStyle=C(d,c.itemHiddenStyle);b.itemMarginTop=f;b.padding=e;b.initialItemX=e;b.initialItemY=e-5;b.maxItemWidth=0;b.chart=a;b.itemHeight=0;b.lastLineHeight=0;b.render();H(b.chart,"endResize",function(){b.positionCheckboxes()})}},
colorizeItem:function(a,b){var c=this.options,d=a.legendItem,e=a.legendLine,f=a.legendSymbol,g=this.itemHiddenStyle.color,c=b?c.itemStyle.color:g,g=b?a.color:g;d&&d.css({fill:c});e&&e.attr({stroke:g});f&&f.attr({stroke:g,fill:g})},positionItem:function(a){var b=this.options,c=b.symbolPadding,b=!b.rtl,d=a._legendItemPos,e=d[0],d=d[1],f=a.checkbox;a.legendGroup&&a.legendGroup.translate(b?e:this.legendWidth-e-2*c-4,d);if(f)f.x=e,f.y=d},destroyItem:function(a){var b=a.checkbox;n(["legendItem","legendLine",
"legendSymbol","legendGroup"],function(b){a[b]&&a[b].destroy()});b&&Na(a.checkbox)},destroy:function(){var a=this.group,b=this.box;if(b)this.box=b.destroy();if(a)this.group=a.destroy()},positionCheckboxes:function(){var a=this;n(a.allItems,function(b){var c=b.checkbox,d=a.group.alignAttr;c&&G(c,{left:d.translateX+b.legendItemWidth+c.x-20+"px",top:d.translateY+c.y+3+"px"})})},renderItem:function(a){var q;var b=this,c=b.chart,d=c.renderer,e=b.options,f=e.layout==="horizontal",g=e.symbolWidth,h=e.symbolPadding,
i=b.itemStyle,j=b.itemHiddenStyle,k=b.padding,l=!e.rtl,m=e.width,o=e.itemMarginBottom||0,r=b.itemMarginTop,p=b.initialItemX,n=a.legendItem,y=a.series||a,u=y.options,t=u.showCheckbox;if(!n&&(a.legendGroup=d.g("legend-item").attr({zIndex:1}).add(b.scrollGroup),y.drawLegendSymbol(b,a),a.legendItem=n=d.text(e.labelFormatter.call(a),l?g+h:-h,b.baseline,e.useHTML).css(C(a.visible?i:j)).attr({align:l?"left":"right",zIndex:2}).add(a.legendGroup),a.legendGroup.on("mouseover",function(){a.setState("hover");
n.css(b.options.itemHoverStyle)}).on("mouseout",function(){n.css(a.visible?i:j);a.setState()}).on("click",function(b){var c=function(){a.setVisible()},b={browserEvent:b};a.firePointEvent?a.firePointEvent("legendItemClick",b,c):E(a,"legendItemClick",b,c)}),b.colorizeItem(a,a.visible),u&&t))a.checkbox=S("input",{type:"checkbox",checked:a.selected,defaultChecked:a.selected},e.itemCheckboxStyle,c.container),H(a.checkbox,"click",function(b){E(a,"checkboxClick",{checked:b.target.checked},function(){a.select()})});
d=n.getBBox();q=a.legendItemWidth=e.itemWidth||g+h+d.width+k+(t?20:0),e=q;b.itemHeight=g=d.height;if(f&&b.itemX-p+e>(m||c.chartWidth-2*k-p))b.itemX=p,b.itemY+=r+b.lastLineHeight+o,b.lastLineHeight=0;b.maxItemWidth=v(b.maxItemWidth,e);b.lastItemY=r+b.itemY+o;b.lastLineHeight=v(g,b.lastLineHeight);a._legendItemPos=[b.itemX,b.itemY];f?b.itemX+=e:(b.itemY+=r+g+o,b.lastLineHeight=g);b.offsetWidth=m||v(f?b.itemX-p:e,b.offsetWidth)},render:function(){var a=this,b=a.chart,c=b.renderer,d=a.group,e,f,g,h,i=
a.box,j=a.options,k=a.padding,l=j.borderWidth,m=j.backgroundColor;a.itemX=a.initialItemX;a.itemY=a.initialItemY;a.offsetWidth=0;a.lastItemY=0;if(!d)a.group=d=c.g("legend").attr({zIndex:7}).add(),a.contentGroup=c.g().attr({zIndex:1}).add(d),a.scrollGroup=c.g().add(a.contentGroup),a.clipRect=c.clipRect(0,0,9999,b.chartHeight),a.contentGroup.clip(a.clipRect);e=[];n(b.series,function(a){var b=a.options;b.showInLegend&&(e=e.concat(a.legendItems||(b.legendType==="point"?a.data:a)))});Fb(e,function(a,b){return(a.options&&
a.options.legendIndex||0)-(b.options&&b.options.legendIndex||0)});j.reversed&&e.reverse();a.allItems=e;a.display=f=!!e.length;n(e,function(b){a.renderItem(b)});g=j.width||a.offsetWidth;h=a.lastItemY+a.lastLineHeight;h=a.handleOverflow(h);if(l||m){g+=k;h+=k;if(i){if(g>0&&h>0)i[i.isNew?"attr":"animate"](i.crisp(null,null,null,g,h)),i.isNew=!1}else a.box=i=c.rect(0,0,g,h,j.borderRadius,l||0).attr({stroke:j.borderColor,"stroke-width":l||0,fill:m||T}).add(d).shadow(j.shadow),i.isNew=!0;i[f?"show":"hide"]()}a.legendWidth=
g;a.legendHeight=h;n(e,function(b){a.positionItem(b)});f&&d.align(s({width:g,height:h},j),!0,b.spacingBox);b.isResizing||this.positionCheckboxes()},handleOverflow:function(a){var b=this,c=this.chart,d=c.renderer,e=this.options,f=e.y,f=c.spacingBox.height+(e.verticalAlign==="top"?-f:f)-this.padding,g=e.maxHeight,h=this.clipRect,i=e.navigation,j=p(i.animation,!0),k=i.arrowSize||12,l=this.nav;e.layout==="horizontal"&&(f/=2);g&&(f=P(f,g));if(a>f){this.clipHeight=c=f-20;this.pageCount=wa(a/c);this.currentPage=
p(this.currentPage,1);this.fullHeight=a;h.attr({height:c});if(!l)this.nav=l=d.g().attr({zIndex:1}).add(this.group),this.up=d.symbol("triangle",0,0,k,k).on("click",function(){b.scroll(-1,j)}).add(l),this.pager=d.text("",15,10).css(i.style).add(l),this.down=d.symbol("triangle-down",0,0,k,k).on("click",function(){b.scroll(1,j)}).add(l);b.scroll(0);a=f}else l&&(h.attr({height:c.chartHeight}),l.hide(),this.scrollGroup.attr({translateY:1}));return a},scroll:function(a,b){var c=this.pageCount,d=this.currentPage+
a,e=this.clipHeight,f=this.options.navigation,g=f.activeColor,f=f.inactiveColor,h=this.pager,i=this.padding;d>c&&(d=c);if(d>0)b!==x&&ua(b,this.chart),this.nav.attr({translateX:i,translateY:e+7,visibility:"visible"}),this.up.attr({fill:d===1?f:g}).css({cursor:d===1?"default":"pointer"}),h.attr({text:d+"/"+this.pageCount}),this.down.attr({x:18+this.pager.getBBox().width,fill:d===c?f:g}).css({cursor:d===c?"default":"pointer"}),this.scrollGroup.animate({translateY:-P(e*(d-1),this.fullHeight-e+i)+1}),
h.attr({text:d+"/"+c}),this.currentPage=d}};sb.prototype={initSeries:function(a){var b=this.options.chart,b=new ba[a.type||b.type||b.defaultSeriesType];b.init(this,a);return b},addSeries:function(a,b,c){var d,e=this;a&&(ua(c,e),b=p(b,!0),E(e,"addSeries",{options:a},function(){d=e.initSeries(a);e.isDirtyLegend=!0;b&&e.redraw()}));return d},isInsidePlot:function(a,b,c){var d=c?b:a,a=c?a:b;return d>=0&&d<=this.plotWidth&&a>=0&&a<=this.plotHeight},adjustTickAmounts:function(){this.options.chart.alignTicks!==
!1&&n(this.axes,function(a){a.adjustTickAmount()});this.maxTicks=null},redraw:function(a){var b=this.axes,c=this.series,d=this.tracker,e=this.legend,f=this.isDirtyLegend,g,h=this.isDirtyBox,i=c.length,j=i,k=this.renderer,l=k.isHidden();ua(a,this);for(l&&this.cloneRenderTo();j--;)if(a=c[j],a.isDirty&&a.options.stacking){g=!0;break}if(g)for(j=i;j--;)if(a=c[j],a.options.stacking)a.isDirty=!0;n(c,function(a){a.isDirty&&a.options.legendType==="point"&&(f=!0)});if(f&&e.options.enabled)e.render(),this.isDirtyLegend=
!1;if(this.hasCartesianSeries){if(!this.isResizing)this.maxTicks=null,n(b,function(a){a.setScale()});this.adjustTickAmounts();this.getMargins();n(b,function(a){if(a.isDirtyExtremes)a.isDirtyExtremes=!1,E(a,"afterSetExtremes",a.getExtremes());if(a.isDirty||h||g)a.redraw(),h=!0})}h&&this.drawChartBox();n(c,function(a){a.isDirty&&a.visible&&(!a.isCartesian||a.xAxis)&&a.redraw()});d&&d.resetTracker&&d.resetTracker(!0);k.draw();E(this,"redraw");l&&this.cloneRenderTo(!0)},showLoading:function(a){var b=
this.options,c=this.loadingDiv,d=b.loading;if(!c)this.loadingDiv=c=S(ia,{className:"highcharts-loading"},s(d.style,{left:this.plotLeft+"px",top:this.plotTop+"px",width:this.plotWidth+"px",height:this.plotHeight+"px",zIndex:10,display:T}),this.container),this.loadingSpan=S("span",null,d.labelStyle,c);this.loadingSpan.innerHTML=a||b.lang.loading;if(!this.loadingShown)G(c,{opacity:0,display:""}),xb(c,{opacity:d.style.opacity},{duration:d.showDuration||0}),this.loadingShown=!0},hideLoading:function(){var a=
this.options,b=this.loadingDiv;b&&xb(b,{opacity:0},{duration:a.loading.hideDuration||100,complete:function(){G(b,{display:T})}});this.loadingShown=!1},get:function(a){var b=this.axes,c=this.series,d,e;for(d=0;d<b.length;d++)if(b[d].options.id===a)return b[d];for(d=0;d<c.length;d++)if(c[d].options.id===a)return c[d];for(d=0;d<c.length;d++){e=c[d].points||[];for(b=0;b<e.length;b++)if(e[b].id===a)return e[b]}return null},getAxes:function(){var a=this,b=this.options,c=b.xAxis||{},b=b.yAxis||{},c=oa(c);
n(c,function(a,b){a.index=b;a.isX=!0});b=oa(b);n(b,function(a,b){a.index=b});c=c.concat(b);n(c,function(b){new ob(a,b)});a.adjustTickAmounts()},getSelectedPoints:function(){var a=[];n(this.series,function(b){a=a.concat(Kb(b.points,function(a){return a.selected}))});return a},getSelectedSeries:function(){return Kb(this.series,function(a){return a.selected})},showResetZoom:function(){var a=this,b=O.lang,c=a.options.chart.resetZoomButton,d=c.theme,e=d.states,f=c.relativeTo==="chart"?null:"plotBox";this.resetZoomButton=
a.renderer.button(b.resetZoom,null,null,function(){a.zoomOut()},d,e&&e.hover).attr({align:c.position.align,title:b.resetZoomTitle}).add().align(c.position,!1,a[f]);this.resetZoomButton.alignTo=f},zoomOut:function(){var a=this,b=a.resetZoomButton;E(a,"selection",{resetSelection:!0},function(){a.zoom()});if(b)a.resetZoomButton=b.destroy()},zoom:function(a){var b=this,c;!a||a.resetSelection?n(b.axes,function(a){c=a.zoom()}):n(a.xAxis.concat(a.yAxis),function(a){var e=a.axis;if(b.tracker[e.isXAxis?"zoomX":
"zoomY"])c=e.zoom(a.min,a.max)});b.resetZoomButton||b.showResetZoom();c&&b.redraw(p(b.options.chart.animation,b.pointCount<100))},pan:function(a){var b=this.xAxis[0],c=this.mouseDownX,d=b.pointRange/2,e=b.getExtremes(),f=b.translate(c-a,!0)+d,c=b.translate(c+this.plotWidth-a,!0)-d;(d=this.hoverPoints)&&n(d,function(a){a.setState()});b.series.length&&f>P(e.dataMin,e.min)&&c<v(e.dataMax,e.max)&&b.setExtremes(f,c,!0,!1,{trigger:"pan"});this.mouseDownX=a;G(this.container,{cursor:"move"})},setTitle:function(a,
b){var c=this,d=c.options,e;c.chartTitleOptions=e=C(d.title,a);c.chartSubtitleOptions=d=C(d.subtitle,b);n([["title",a,e],["subtitle",b,d]],function(a){var b=a[0],d=c[b],e=a[1],a=a[2];d&&e&&(c[b]=d=d.destroy());a&&a.text&&!d&&(c[b]=c.renderer.text(a.text,0,0,a.useHTML).attr({align:a.align,"class":"highcharts-"+b,zIndex:a.zIndex||4}).css(a.style).add().align(a,!1,c.spacingBox))})},getChartSize:function(){var a=this.options.chart,b=this.renderToClone||this.renderTo;this.containerWidth=db(b,"width");
this.containerHeight=db(b,"height");this.chartWidth=a.width||this.containerWidth||600;this.chartHeight=a.height||(this.containerHeight>19?this.containerHeight:400)},cloneRenderTo:function(a){var b=this.renderToClone,c=this.container;a?b&&(this.renderTo.appendChild(c),Na(b),delete this.renderToClone):(c&&this.renderTo.removeChild(c),this.renderToClone=b=this.renderTo.cloneNode(0),G(b,{position:"absolute",top:"-9999px",display:"block"}),z.body.appendChild(b),c&&b.appendChild(c))},getContainer:function(){var a,
b=this.options.chart,c,d,e;this.renderTo=a=b.renderTo;e="highcharts-"+ub++;if(ma(a))this.renderTo=a=z.getElementById(a);a||$a(13,!0);a.innerHTML="";a.offsetWidth||this.cloneRenderTo();this.getChartSize();c=this.chartWidth;d=this.chartHeight;this.container=a=S(ia,{className:"highcharts-container"+(b.className?" "+b.className:""),id:e},s({position:"relative",overflow:"hidden",width:c+"px",height:d+"px",textAlign:"left",lineHeight:"normal",zIndex:0},b.style),this.renderToClone||a);this.renderer=b.forExport?
new ra(a,c,d,!0):new Ra(a,c,d);$&&this.renderer.create(this,a,c,d)},getMargins:function(){var a=this.options.chart,b=a.spacingTop,c=a.spacingRight,d=a.spacingBottom,a=a.spacingLeft,e,f=this.legend,g=this.optionsMarginTop,h=this.optionsMarginLeft,i=this.optionsMarginRight,j=this.optionsMarginBottom,k=this.chartTitleOptions,l=this.chartSubtitleOptions,m=this.options.legend,o=p(m.margin,10),r=m.x,t=m.y,q=m.align,y=m.verticalAlign;this.resetMargins();e=this.axisOffset;if((this.title||this.subtitle)&&
!u(this.optionsMarginTop))if(l=v(this.title&&!k.floating&&!k.verticalAlign&&k.y||0,this.subtitle&&!l.floating&&!l.verticalAlign&&l.y||0))this.plotTop=v(this.plotTop,l+p(k.margin,15)+b);if(f.display&&!m.floating)if(q==="right"){if(!u(i))this.marginRight=v(this.marginRight,f.legendWidth-r+o+c)}else if(q==="left"){if(!u(h))this.plotLeft=v(this.plotLeft,f.legendWidth+r+o+a)}else if(y==="top"){if(!u(g))this.plotTop=v(this.plotTop,f.legendHeight+t+o+b)}else if(y==="bottom"&&!u(j))this.marginBottom=v(this.marginBottom,
f.legendHeight-t+o+d);this.extraBottomMargin&&(this.marginBottom+=this.extraBottomMargin);this.extraTopMargin&&(this.plotTop+=this.extraTopMargin);this.hasCartesianSeries&&n(this.axes,function(a){a.getOffset()});u(h)||(this.plotLeft+=e[3]);u(g)||(this.plotTop+=e[0]);u(j)||(this.marginBottom+=e[2]);u(i)||(this.marginRight+=e[1]);this.setChartSize()},initReflow:function(){function a(a){var g=c.width||db(d,"width"),h=c.height||db(d,"height"),a=a?a.target:L;if(g&&h&&(a===L||a===z)){if(g!==b.containerWidth||
h!==b.containerHeight)clearTimeout(e),e=setTimeout(function(){b.resize(g,h,!1)},100);b.containerWidth=g;b.containerHeight=h}}var b=this,c=b.options.chart,d=b.renderTo,e;H(L,"resize",a);H(b,"destroy",function(){U(L,"resize",a)})},resize:function(a,b,c){var d=this,e,f,g=d.resetZoomButton,h=d.title,i=d.subtitle,j;d.isResizing+=1;j=function(){d&&E(d,"endResize",null,function(){d.isResizing-=1})};ua(c,d);d.oldChartHeight=d.chartHeight;d.oldChartWidth=d.chartWidth;if(u(a))d.chartWidth=e=t(a);if(u(b))d.chartHeight=
f=t(b);G(d.container,{width:e+"px",height:f+"px"});d.renderer.setSize(e,f,c);d.plotWidth=e-d.plotLeft-d.marginRight;d.plotHeight=f-d.plotTop-d.marginBottom;d.maxTicks=null;n(d.axes,function(a){a.isDirty=!0;a.setScale()});n(d.series,function(a){a.isDirty=!0});d.isDirtyLegend=!0;d.isDirtyBox=!0;d.getMargins();a=d.spacingBox;h&&h.align(null,null,a);i&&i.align(null,null,a);g&&g.align(null,null,d[g.alignTo]);d.redraw(c);d.oldChartHeight=null;E(d,"resize");Oa===!1?j():setTimeout(j,Oa&&Oa.duration||500)},
setChartSize:function(){var a=this.inverted,b=this.chartWidth,c=this.chartHeight,d=this.options.chart,e=d.spacingTop,f=d.spacingRight,g=d.spacingBottom,h=d.spacingLeft,i,j,k,l;this.plotLeft=i=t(this.plotLeft);this.plotTop=j=t(this.plotTop);this.plotWidth=k=t(b-i-this.marginRight);this.plotHeight=l=t(c-j-this.marginBottom);this.plotSizeX=a?l:k;this.plotSizeY=a?k:l;this.plotBorderWidth=a=d.plotBorderWidth||0;this.spacingBox={x:h,y:e,width:b-h-f,height:c-e-g};this.plotBox={x:i,y:j,width:k,height:l};
this.clipBox={x:a/2,y:a/2,width:this.plotSizeX-a,height:this.plotSizeY-a};n(this.axes,function(a){a.setAxisSize();a.setAxisTranslation()})},resetMargins:function(){var a=this.options.chart,b=a.spacingRight,c=a.spacingBottom,d=a.spacingLeft;this.plotTop=p(this.optionsMarginTop,a.spacingTop);this.marginRight=p(this.optionsMarginRight,b);this.marginBottom=p(this.optionsMarginBottom,c);this.plotLeft=p(this.optionsMarginLeft,d);this.axisOffset=[0,0,0,0]},drawChartBox:function(){var a=this.options.chart,
b=this.renderer,c=this.chartWidth,d=this.chartHeight,e=this.chartBackground,f=this.plotBackground,g=this.plotBorder,h=this.plotBGImage,i=a.borderWidth||0,j=a.backgroundColor,k=a.plotBackgroundColor,l=a.plotBackgroundImage,m=a.plotBorderWidth||0,o,p=this.plotLeft,n=this.plotTop,q=this.plotWidth,y=this.plotHeight,t=this.plotBox,u=this.clipRect,w=this.clipBox;o=i+(a.shadow?8:0);if(i||j)if(e)e.animate(e.crisp(null,null,null,c-o,d-o));else{e={fill:j||T};if(i)e.stroke=a.borderColor,e["stroke-width"]=i;
this.chartBackground=b.rect(o/2,o/2,c-o,d-o,a.borderRadius,i).attr(e).add().shadow(a.shadow)}if(k)f?f.animate(t):this.plotBackground=b.rect(p,n,q,y,0).attr({fill:k}).add().shadow(a.plotShadow);if(l)h?h.animate(t):this.plotBGImage=b.image(l,p,n,q,y).add();u?u.animate({width:w.width,height:w.height}):this.clipRect=b.clipRect(w);if(m)g?g.animate(g.crisp(null,p,n,q,y)):this.plotBorder=b.rect(p,n,q,y,0,m).attr({stroke:a.plotBorderColor,"stroke-width":m,zIndex:1}).add();this.isDirtyBox=!1},propFromSeries:function(){var a=
this,b=a.options.chart,c,d=a.options.series,e,f;n(["inverted","angular","polar"],function(g){c=ba[b.type||b.defaultSeriesType];f=a[g]||b[g]||c&&c.prototype[g];for(e=d&&d.length;!f&&e--;)(c=ba[d[e].type])&&c.prototype[g]&&(f=!0);a[g]=f})},render:function(){var a=this,b=a.axes,c=a.renderer,d=a.options,e=d.labels,d=d.credits,f;a.setTitle();a.legend=new rb(a);n(b,function(a){a.setScale()});a.getMargins();a.maxTicks=null;n(b,function(a){a.setTickPositions(!0);a.setMaxTicks()});a.adjustTickAmounts();a.getMargins();
a.drawChartBox();a.hasCartesianSeries&&n(b,function(a){a.render()});if(!a.seriesGroup)a.seriesGroup=c.g("series-group").attr({zIndex:3}).add();n(a.series,function(a){a.translate();a.setTooltipPoints();a.render()});e.items&&n(e.items,function(b){var d=s(e.style,b.style),f=A(d.left)+a.plotLeft,j=A(d.top)+a.plotTop+12;delete d.left;delete d.top;c.text(b.html,f,j).attr({zIndex:2}).css(d).add()});if(d.enabled&&!a.credits)f=d.href,a.credits=c.text(d.text,0,0).on("click",function(){if(f)location.href=f}).attr({align:d.position.align,
zIndex:8}).css(d.style).add().align(d.position);a.hasRendered=!0},destroy:function(){var a=this,b=a.axes,c=a.series,d=a.container,e,f=d&&d.parentNode;if(a!==null){E(a,"destroy");U(a);for(e=b.length;e--;)b[e]=b[e].destroy();for(e=c.length;e--;)c[e]=c[e].destroy();n("title,subtitle,chartBackground,plotBackground,plotBGImage,plotBorder,seriesGroup,clipRect,credits,tracker,scroller,rangeSelector,legend,resetZoomButton,tooltip,renderer".split(","),function(b){var c=a[b];c&&(a[b]=c.destroy())});if(d)d.innerHTML=
"",U(d),f&&Na(d),d=null;for(e in a)delete a[e];a=a.options=null}},firstRender:function(){var a=this,b=a.options,c=a.callback;if(!fa&&L==L.top&&z.readyState!=="complete"||$&&!L.canvg)$?Mb.push(function(){a.firstRender()},b.global.canvasToolsURL):z.attachEvent("onreadystatechange",function(){z.detachEvent("onreadystatechange",a.firstRender);z.readyState==="complete"&&a.firstRender()});else{a.getContainer();E(a,"init");if(Highcharts.RangeSelector&&b.rangeSelector.enabled)a.rangeSelector=new Highcharts.RangeSelector(a);
a.resetMargins();a.setChartSize();a.propFromSeries();a.getAxes();n(b.series||[],function(b){a.initSeries(b)});if(Highcharts.Scroller&&(b.navigator.enabled||b.scrollbar.enabled))a.scroller=new Highcharts.Scroller(a);a.tracker=new qb(a,b);a.render();a.renderer.draw();c&&c.apply(a,[a]);n(a.callbacks,function(b){b.apply(a,[a])});a.cloneRenderTo(!0);E(a,"load")}},init:function(a){var b=this.options.chart,c;b.reflow!==!1&&H(this,"load",this.initReflow);if(a)for(c in a)H(this,c,a[c]);this.xAxis=[];this.yAxis=
[];this.animation=$?!1:p(b.animation,!0);this.setSize=this.resize;this.pointCount=0;this.counters=new Eb;this.firstRender()}};sb.prototype.callbacks=[];var Ta=function(){};Ta.prototype={init:function(a,b,c){var d=a.chart.counters;this.series=a;this.applyOptions(b,c);this.pointAttr={};if(a.options.colorByPoint)b=a.chart.options.colors,this.color=this.color||b[d.color++],d.wrapColor(b.length);a.chart.pointCount++;return this},applyOptions:function(a,b){var c=this.series,d=typeof a;this.config=a;if(d===
"number"||a===null)this.y=a;else if(typeof a[0]==="number")this.x=a[0],this.y=a[1];else if(d==="object"&&typeof a.length!=="number"){s(this,a);this.options=a;if(a.dataLabels)c._hasPointLabels=!0;if(a.marker)c._hasPointMarkers=!0}else if(typeof a[0]==="string")this.name=a[0],this.y=a[1];if(this.x===x)this.x=b===x?c.autoIncrement():b},destroy:function(){var a=this.series.chart,b=a.hoverPoints,c;a.pointCount--;if(b&&(this.setState(),ya(b,this),!b.length))a.hoverPoints=null;if(this===a.hoverPoint)this.onMouseOut();
if(this.graphic||this.dataLabel)U(this),this.destroyElements();this.legendItem&&a.legend.destroyItem(this);for(c in this)this[c]=null},destroyElements:function(){for(var a="graphic,tracker,dataLabel,group,connector,shadowGroup".split(","),b,c=6;c--;)b=a[c],this[b]&&(this[b]=this[b].destroy())},getLabelConfig:function(){return{x:this.category,y:this.y,key:this.name||this.category,series:this.series,point:this,percentage:this.percentage,total:this.total||this.stackTotal}},select:function(a,b){var c=
this,d=c.series.chart,a=p(a,!c.selected);c.firePointEvent(a?"select":"unselect",{accumulate:b},function(){c.selected=a;c.setState(a&&"select");b||n(d.getSelectedPoints(),function(a){if(a.selected&&a!==c)a.selected=!1,a.setState(""),a.firePointEvent("unselect")})})},onMouseOver:function(){var a=this.series,b=a.chart,c=b.tooltip,d=b.hoverPoint;if(d&&d!==this)d.onMouseOut();this.firePointEvent("mouseOver");c&&(!c.shared||a.noSharedTooltip)&&c.refresh(this);this.setState("hover");b.hoverPoint=this},onMouseOut:function(){var a=
this.series.chart,b=a.hoverPoints;if(!b||Rb(this,b)===-1)this.firePointEvent("mouseOut"),this.setState(),a.hoverPoint=null},tooltipFormatter:function(a){var b=this.series,c=b.tooltipOptions,d=a.match(/\{(series|point)\.[a-zA-Z]+\}/g),e=/[{\.}]/,f,g,h,i,j={y:0,open:0,high:0,low:0,close:0,percentage:1,total:1};c.valuePrefix=c.valuePrefix||c.yPrefix;c.valueDecimals=c.valueDecimals||c.yDecimals;c.valueSuffix=c.valueSuffix||c.ySuffix;for(i in d)g=d[i],ma(g)&&g!==a&&(h=(" "+g).split(e),f={point:this,series:b}[h[1]],
h=h[2],f===this&&j.hasOwnProperty(h)?(f=j[h]?h:"value",f=(c[f+"Prefix"]||"")+Ia(this[h],p(c[f+"Decimals"],-1))+(c[f+"Suffix"]||"")):f=f[h],a=a.replace(g,f));return a},update:function(a,b,c){var d=this,e=d.series,f=d.graphic,g,h=e.data,i=h.length,j=e.chart,b=p(b,!0);d.firePointEvent("update",{options:a},function(){d.applyOptions(a);Z(a)&&(e.getAttribs(),f&&f.attr(d.pointAttr[e.state]));for(g=0;g<i;g++)if(h[g]===d){e.xData[g]=d.x;e.yData[g]=d.y;e.options.data[g]=a;break}e.isDirty=!0;e.isDirtyData=!0;
b&&j.redraw(c)})},remove:function(a,b){var c=this,d=c.series,e=d.chart,f,g=d.data,h=g.length;ua(b,e);a=p(a,!0);c.firePointEvent("remove",null,function(){for(f=0;f<h;f++)if(g[f]===c){g.splice(f,1);d.options.data.splice(f,1);d.xData.splice(f,1);d.yData.splice(f,1);break}c.destroy();d.isDirty=!0;d.isDirtyData=!0;a&&e.redraw()})},firePointEvent:function(a,b,c){var d=this,e=this.series.options;(e.point.events[a]||d.options&&d.options.events&&d.options.events[a])&&this.importEvents();a==="click"&&e.allowPointSelect&&
(c=function(a){d.select(null,a.ctrlKey||a.metaKey||a.shiftKey)});E(this,a,b,c)},importEvents:function(){if(!this.hasImportedEvents){var a=C(this.series.options.point,this.options).events,b;this.events=a;for(b in a)H(this,b,a[b]);this.hasImportedEvents=!0}},setState:function(a){var b=this.plotX,c=this.plotY,d=this.series,e=d.options.states,f=Y[d.type].marker&&d.options.marker,g=f&&!f.enabled,h=f&&f.states[a],i=h&&h.enabled===!1,j=d.stateMarkerGraphic,k=d.chart,l=this.pointAttr,a=a||"";if(!(a===this.state||
this.selected&&a!=="select"||e[a]&&e[a].enabled===!1||a&&(i||g&&!h.enabled))){if(this.graphic)e=f&&this.graphic.symbolName&&l[a].r,this.graphic.attr(C(l[a],e?{x:b-e,y:c-e,width:2*e,height:2*e}:{}));else{if(a&&h)e=h.radius,j?j.attr({x:b-e,y:c-e}):d.stateMarkerGraphic=j=k.renderer.symbol(d.symbol,b-e,c-e,2*e,2*e).attr(l[a]).add(d.markerGroup);if(j)j[a&&k.isInsidePlot(b,c)?"show":"hide"]()}this.state=a}}};var R=function(){};R.prototype={isCartesian:!0,type:"line",pointClass:Ta,sorted:!0,pointAttrToOptions:{stroke:"lineColor",
"stroke-width":"lineWidth",fill:"fillColor",r:"radius"},init:function(a,b){var c,d;this.chart=a;this.options=b=this.setOptions(b);this.bindAxes();s(this,{name:b.name,state:"",pointAttr:{},visible:b.visible!==!1,selected:b.selected===!0});if($)b.animation=!1;d=b.events;for(c in d)H(this,c,d[c]);if(d&&d.click||b.point&&b.point.events&&b.point.events.click||b.allowPointSelect)a.runTrackerClick=!0;this.getColor();this.getSymbol();this.setData(b.data,!1);if(this.isCartesian)a.hasCartesianSeries=!0;a.series.push(this);
Fb(a.series,function(a,b){return(a.options.index||0)-(b.options.index||0)});n(a.series,function(a,b){a.index=b;a.name=a.name||"Series "+(b+1)})},bindAxes:function(){var a=this,b=a.options,c=a.chart,d;a.isCartesian&&n(["xAxis","yAxis"],function(e){n(c[e],function(c){d=c.options;if(b[e]===d.index||b[e]===x&&d.index===0)c.series.push(a),a[e]=c,c.isDirty=!0})})},autoIncrement:function(){var a=this.options,b=this.xIncrement,b=p(b,a.pointStart,0);this.pointInterval=p(this.pointInterval,a.pointInterval,
1);this.xIncrement=b+this.pointInterval;return b},getSegments:function(){var a=-1,b=[],c,d=this.points,e=d.length;if(e)if(this.options.connectNulls){for(c=e;c--;)d[c].y===null&&d.splice(c,1);d.length&&(b=[d])}else n(d,function(c,g){c.y===null?(g>a+1&&b.push(d.slice(a+1,g)),a=g):g===e-1&&b.push(d.slice(a+1,g+1))});this.segments=b},setOptions:function(a){var b=this.chart.options,c=b.plotOptions,d=c[this.type],e=a.data;a.data=null;c=C(d,c.series,a);c.data=a.data=e;this.tooltipOptions=C(b.tooltip,c.tooltip);
d.marker===null&&delete c.marker;return c},getColor:function(){var a=this.options,b=this.chart.options.colors,c=this.chart.counters;this.color=a.color||!a.colorByPoint&&b[c.color++]||"gray";c.wrapColor(b.length)},getSymbol:function(){var a=this.options.marker,b=this.chart,c=b.options.symbols,b=b.counters;this.symbol=a.symbol||c[b.symbol++];if(/^url/.test(this.symbol))a.radius=0;b.wrapSymbol(c.length)},drawLegendSymbol:function(a){var b=this.options,c=b.marker,d=a.options.symbolWidth,e=this.chart.renderer,
f=this.legendGroup,a=a.baseline,g;if(b.lineWidth){g={"stroke-width":b.lineWidth};if(b.dashStyle)g.dashstyle=b.dashStyle;this.legendLine=e.path(["M",0,a-4,"L",d,a-4]).attr(g).add(f)}if(c&&c.enabled)b=c.radius,this.legendSymbol=e.symbol(this.symbol,d/2-b,a-4-b,2*b,2*b).attr(this.pointAttr[""]).add(f)},addPoint:function(a,b,c,d){var e=this.data,f=this.graph,g=this.area,h=this.chart,i=this.xData,j=this.yData,k=f&&f.shift||0,l=this.options.data,m=this.pointClass.prototype;ua(d,h);if(f&&c)f.shift=k+1;if(g){if(c)g.shift=
k+1;g.isArea=!0}b=p(b,!0);d={series:this};m.applyOptions.apply(d,[a]);i.push(d.x);j.push(m.toYData?m.toYData.call(d):d.y);l.push(a);c&&(e[0]&&e[0].remove?e[0].remove(!1):(e.shift(),i.shift(),j.shift(),l.shift()));this.getAttribs();this.isDirtyData=this.isDirty=!0;b&&h.redraw()},setData:function(a,b){var c=this.points,d=this.options,e=this.initialColor,f=this.chart,g=null,h=this.xAxis,i,j=this.pointClass.prototype;this.xIncrement=null;this.pointRange=h&&h.categories?1:d.pointRange;if(u(e))f.counters.color=
e;var e=[],k=[],l=a?a.length:[],m=(i=this.pointArrayMap)&&i.length;if(l>(d.turboThreshold||1E3)){for(i=0;g===null&&i<l;)g=a[i],i++;if(Ga(g)){j=p(d.pointStart,0);d=p(d.pointInterval,1);for(i=0;i<l;i++)e[i]=j,k[i]=a[i],j+=d;this.xIncrement=j}else if(Fa(g))if(m)for(i=0;i<l;i++)d=a[i],e[i]=d[0],k[i]=d.slice(1,m+1);else for(i=0;i<l;i++)d=a[i],e[i]=d[0],k[i]=d[1]}else for(i=0;i<l;i++)d={series:this},j.applyOptions.apply(d,[a[i]]),e[i]=d.x,k[i]=j.toYData?j.toYData.call(d):d.y;ma(k[0])&&$a(14,!0);this.data=
[];this.options.data=a;this.xData=e;this.yData=k;for(i=c&&c.length||0;i--;)c[i]&&c[i].destroy&&c[i].destroy();if(h)h.minRange=h.userMinRange;this.isDirty=this.isDirtyData=f.isDirtyBox=!0;p(b,!0)&&f.redraw(!1)},remove:function(a,b){var c=this,d=c.chart,a=p(a,!0);if(!c.isRemoving)c.isRemoving=!0,E(c,"remove",null,function(){c.destroy();d.isDirtyLegend=d.isDirtyBox=!0;a&&d.redraw(b)});c.isRemoving=!1},processData:function(a){var b=this.xData,c=this.yData,d=b.length,e=0,f=d,g,h,i=this.xAxis,j=this.options,
k=j.cropThreshold,l=this.isCartesian;if(l&&!this.isDirty&&!i.isDirty&&!this.yAxis.isDirty&&!a)return!1;if(l&&this.sorted&&(!k||d>k||this.forceCrop))if(a=i.getExtremes(),i=a.min,k=a.max,b[d-1]<i||b[0]>k)b=[],c=[];else if(b[0]<i||b[d-1]>k){for(a=0;a<d;a++)if(b[a]>=i){e=v(0,a-1);break}for(;a<d;a++)if(b[a]>k){f=a+1;break}b=b.slice(e,f);c=c.slice(e,f);g=!0}for(a=b.length-1;a>0;a--)if(d=b[a]-b[a-1],d>0&&(h===x||d<h))h=d;this.cropped=g;this.cropStart=e;this.processedXData=b;this.processedYData=c;if(j.pointRange===
null)this.pointRange=h||1;this.closestPointRange=h},generatePoints:function(){var a=this.options.data,b=this.data,c,d=this.processedXData,e=this.processedYData,f=this.pointClass,g=d.length,h=this.cropStart||0,i,j=this.hasGroupedData,k,l=[],m;if(!b&&!j)b=[],b.length=a.length,b=this.data=b;for(m=0;m<g;m++)i=h+m,j?l[m]=(new f).init(this,[d[m]].concat(oa(e[m]))):(b[i]?k=b[i]:a[i]!==x&&(b[i]=k=(new f).init(this,a[i],d[m])),l[m]=k);if(b&&(g!==(c=b.length)||j))for(m=0;m<c;m++)if(m===h&&!j&&(m+=g),b[m])b[m].destroyElements(),
b[m].plotX=x;this.data=b;this.points=l},translate:function(){this.processedXData||this.processData();this.generatePoints();for(var a=this.chart,b=this.options,c=b.stacking,d=this.xAxis,e=d.categories,f=this.yAxis,g=this.points,h=g.length,i=!!this.modifyValue,j,k=f.series,l=k.length,m=b.pointPlacement==="between";l--;)if(k[l].visible){k[l]===this&&(j=!0);break}for(l=0;l<h;l++){var k=g[l],o=k.x,n=k.y,s=k.low,q=f.stacks[(n<b.threshold?"-":"")+this.stackKey];k.plotX=d.translate(o,0,0,0,1,m);if(c&&this.visible&&
q&&q[o])s=q[o],o=s.total,s.cum=s=s.cum-n,n=s+n,j&&(s=p(b.threshold,f.isLog?null:f.min)),c==="percent"&&(s=o?s*100/o:0,n=o?n*100/o:0),k.percentage=o?k.y*100/o:0,k.total=k.stackTotal=o,k.stackY=n;k.yBottom=u(s)?f.translate(s,0,1,0,1):null;i&&(n=this.modifyValue(n,k));k.plotY=typeof n==="number"?t(f.translate(n,0,1,0,1)*10)/10:x;k.clientX=a.inverted?a.plotHeight-k.plotX:k.plotX;k.category=e&&e[k.x]!==x?e[k.x]:k.x}this.getSegments()},setTooltipPoints:function(a){var b=[],c,d,e=(c=this.xAxis)?c.tooltipLen||
c.len:this.chart.plotSizeX,f=c&&c.tooltipPosName||"plotX",g,h,i=[];if(this.options.enableMouseTracking!==!1){if(a)this.tooltipPoints=null;n(this.segments||this.points,function(a){b=b.concat(a)});c&&c.reversed&&(b=b.reverse());a=b.length;for(h=0;h<a;h++){g=b[h];c=b[h-1]?d+1:0;for(d=b[h+1]?v(0,V((g[f]+(b[h+1]?b[h+1][f]:e))/2)):e;c>=0&&c<=d;)i[c++]=g}this.tooltipPoints=i}},tooltipHeaderFormatter:function(a){var b=this.tooltipOptions,c=b.xDateFormat,d=this.xAxis,e=d&&d.options.type==="datetime",f;if(e&&
!c)for(f in D)if(D[f]>=d.closestPointRange){c=b.dateTimeLabelFormats[f];break}return b.headerFormat.replace("{point.key}",e?cb(c,a):a).replace("{series.name}",this.name).replace("{series.color}",this.color)},onMouseOver:function(){var a=this.chart,b=a.hoverSeries;if(b&&b!==this)b.onMouseOut();this.options.events.mouseOver&&E(this,"mouseOver");this.setState("hover");a.hoverSeries=this},onMouseOut:function(){var a=this.options,b=this.chart,c=b.tooltip,d=b.hoverPoint;if(d)d.onMouseOut();this&&a.events.mouseOut&&
E(this,"mouseOut");c&&!a.stickyTracking&&!c.shared&&c.hide();this.setState();b.hoverSeries=null},animate:function(a){var b=this,c=b.chart,d=c.renderer,e;e=b.options.animation;var f=c.clipBox,g=c.inverted,h;if(e&&!Z(e))e=Y[b.type].animation;h="_sharedClip"+e.duration+e.easing;if(a)a=c[h],e=c[h+"m"],a||(c[h]=a=d.clipRect(s(f,{width:0})),c[h+"m"]=e=d.clipRect(-99,g?-c.plotLeft:-c.plotTop,99,g?c.chartWidth:c.chartHeight)),b.group.clip(a),b.markerGroup.clip(e),b.sharedClipKey=h;else{if(a=c[h])a.animate({width:c.plotSizeX},
e),c[h+"m"].animate({width:c.plotSizeX+99},e);b.animate=null;b.animationTimeout=setTimeout(function(){b.afterAnimate()},e.duration)}},afterAnimate:function(){var a=this.chart,b=this.sharedClipKey,c=this.group;c&&this.options.clip!==!1&&(c.clip(a.clipRect),this.markerGroup.clip());setTimeout(function(){b&&a[b]&&(a[b]=a[b].destroy(),a[b+"m"]=a[b+"m"].destroy())},100)},drawPoints:function(){var a,b=this.points,c=this.chart,d,e,f,g,h,i,j,k,l=this.options.marker,m,o=this.markerGroup;if(l.enabled||this._hasPointMarkers)for(f=
b.length;f--;)if(g=b[f],d=g.plotX,e=g.plotY,k=g.graphic,i=g.marker||{},a=l.enabled&&i.enabled===x||i.enabled,m=c.isInsidePlot(d,e,c.inverted),a&&e!==x&&!isNaN(e))if(a=g.pointAttr[g.selected?"select":""],h=a.r,i=p(i.symbol,this.symbol),j=i.indexOf("url")===0,k)k.attr({visibility:m?fa?"inherit":"visible":"hidden"}).animate(s({x:d-h,y:e-h},k.symbolName?{width:2*h,height:2*h}:{}));else if(m&&(h>0||j))g.graphic=c.renderer.symbol(i,d-h,e-h,2*h,2*h).attr(a).add(o)},convertAttribs:function(a,b,c,d){var e=
this.pointAttrToOptions,f,g,h={},a=a||{},b=b||{},c=c||{},d=d||{};for(f in e)g=e[f],h[f]=p(a[g],b[f],c[f],d[f]);return h},getAttribs:function(){var a=this,b=Y[a.type].marker?a.options.marker:a.options,c=b.states,d=c.hover,e,f=a.color,g={stroke:f,fill:f},h=a.points||[],i=[],j,k=a.pointAttrToOptions,l;a.options.marker?(d.radius=d.radius||b.radius+2,d.lineWidth=d.lineWidth||b.lineWidth+1):d.color=d.color||qa(d.color||f).brighten(d.brightness).get();i[""]=a.convertAttribs(b,g);n(["hover","select"],function(b){i[b]=
a.convertAttribs(c[b],i[""])});a.pointAttr=i;for(f=h.length;f--;){g=h[f];if((b=g.options&&g.options.marker||g.options)&&b.enabled===!1)b.radius=0;e=a.options.colorByPoint;if(g.options)for(l in k)u(b[k[l]])&&(e=!0);if(e){b=b||{};j=[];c=b.states||{};e=c.hover=c.hover||{};if(!a.options.marker)e.color=qa(e.color||g.color).brighten(e.brightness||d.brightness).get();j[""]=a.convertAttribs(s({color:g.color},b),i[""]);j.hover=a.convertAttribs(c.hover,i.hover,j[""]);j.select=a.convertAttribs(c.select,i.select,
j[""])}else j=i;g.pointAttr=j}},destroy:function(){var a=this,b=a.chart,c=/AppleWebKit\/533/.test(Ba),d,e,f=a.data||[],g,h,i;E(a,"destroy");U(a);n(["xAxis","yAxis"],function(b){if(i=a[b])ya(i.series,a),i.isDirty=!0});a.legendItem&&a.chart.legend.destroyItem(a);for(e=f.length;e--;)(g=f[e])&&g.destroy&&g.destroy();a.points=null;clearTimeout(a.animationTimeout);n("area,graph,dataLabelsGroup,group,markerGroup,tracker,trackerGroup".split(","),function(b){a[b]&&(d=c&&b==="group"?"hide":"destroy",a[b][d]())});
if(b.hoverSeries===a)b.hoverSeries=null;ya(b.series,a);for(h in a)delete a[h]},drawDataLabels:function(){var a=this,b=a.options,c=b.dataLabels;if(c.enabled||a._hasPointLabels){var d,e,f=a.points,g,h,i,j,k=a.chart,l=k.renderer,m=k.inverted,o=a.type,r=b.stacking,s=o==="column"||o==="bar",q=c.verticalAlign===null,y=c.y===null,v=l.fontMetrics(c.style.fontSize),A=v.h,w=v.b;s&&(v={top:w,middle:w-A/2,bottom:-A+w},r?(q&&(c=C(c,{verticalAlign:"middle"})),y&&(c=C(c,{y:v[c.verticalAlign]}))):q?c=C(c,{verticalAlign:"top"}):
y&&(c=C(c,{y:v[c.verticalAlign]})));j=a.plotGroup("dataLabelsGroup","data-labels",a.visible?"visible":"hidden",6);h=c;n(f,function(f){var n,q,y,v,B=f.dataLabel;c=h;(g=f.options)&&g.dataLabels&&(c=C(c,g.dataLabels));if(v=c.enabled)n=f.barX&&f.barX+f.barW/2||p(f.plotX,-999),q=p(f.plotY,-999),y=c.y===null?f.y>=b.threshold?-A+w:w:c.y,d=(m?k.plotWidth-q:n)+c.x,e=t((m?k.plotHeight-n:q)+y);a.isCartesian&&!k.isInsidePlot(d-c.x,e)&&(v=!1);if(B&&!v)f.dataLabel=B.destroy();else if(v){n=c.align;var z;i=c.formatter.call(f.getLabelConfig(),
c);o==="column"&&(d+={left:-1,right:1}[n]*f.barW/2||0);!r&&m&&f.y<0&&(n="right",d-=10);c.style.color=p(c.color,c.style.color,a.color,"black");if(B)B.attr({text:i}).animate({x:d,y:e});else if(u(i)){B={align:n,fill:c.backgroundColor,stroke:c.borderColor,"stroke-width":c.borderWidth,r:c.borderRadius||0,rotation:c.rotation,padding:c.padding,zIndex:1};for(z in B)B[z]===x&&delete B[z];B=f.dataLabel=l[c.rotation?"text":"label"](i,d,e,null,null,null,c.useHTML,!0).attr(B).css(c.style).add(j).shadow(c.shadow)}if(s&&
b.stacking&&B)z=f.barX,n=f.barY,q=f.barW,f=f.barH,B.align(c,null,{x:m?k.plotWidth-n-f:z,y:m?k.plotHeight-z-q:n,width:m?f:q,height:m?q:f})}})}},getSegmentPath:function(a){var b=this,c=[];n(a,function(d,e){b.getPointSpline?c.push.apply(c,b.getPointSpline(a,d,e)):(c.push(e?"L":"M"),e&&b.options.step&&c.push(d.plotX,a[e-1].plotY),c.push(d.plotX,d.plotY))});return c},getGraphPath:function(){var a=this,b=[],c,d=[];n(a.segments,function(e){c=a.getSegmentPath(e);e.length>1?b=b.concat(c):d.push(e[0])});a.singlePoints=
d;return a.graphPath=b},drawGraph:function(){var a=this.options,b=this.graph,c=this.group,d=a.lineColor||this.color,e=a.lineWidth,f=a.dashStyle,g=this.getGraphPath();if(b)eb(b),b.animate({d:g});else if(e){b={stroke:d,"stroke-width":e,zIndex:1};if(f)b.dashstyle=f;this.graph=this.chart.renderer.path(g).attr(b).add(c).shadow(a.shadow)}},invertGroups:function(){function a(){var a={width:b.yAxis.len,height:b.xAxis.len};n(["group","trackerGroup","markerGroup"],function(c){b[c]&&b[c].attr(a).invert()})}
var b=this,c=b.chart;H(c,"resize",a);H(b,"destroy",function(){U(c,"resize",a)});a();b.invertGroups=a},plotGroup:function(a,b,c,d,e){var f=this[a],g=this.chart,h=this.xAxis,i=this.yAxis;f||(this[a]=f=g.renderer.g(b).attr({visibility:c,zIndex:d||0.1}).add(e));f.translate(h?h.left:g.plotLeft,i?i.top:g.plotTop);return f},render:function(){var a=this.chart,b,c=this.options,d=c.animation&&!!this.animate,e=this.visible?"visible":"hidden",f=c.zIndex,g=this.hasRendered,h=a.seriesGroup;b=this.plotGroup("group",
"series",e,f,h);this.markerGroup=this.plotGroup("markerGroup","markers",e,f,h);this.drawDataLabels();d&&this.animate(!0);this.getAttribs();b.inverted=a.inverted;this.drawGraph&&this.drawGraph();this.drawPoints();this.options.enableMouseTracking!==!1&&this.drawTracker();a.inverted&&this.invertGroups();c.clip!==!1&&!this.sharedClipKey&&!g&&(b.clip(a.clipRect),this.trackerGroup&&this.trackerGroup.clip(a.clipRect));d?this.animate():g||this.afterAnimate();this.isDirty=this.isDirtyData=!1;this.hasRendered=
!0},redraw:function(){var a=this.chart,b=this.isDirtyData,c=this.group;c&&(a.inverted&&c.attr({width:a.plotWidth,height:a.plotHeight}),c.animate({translateX:this.xAxis.left,translateY:this.yAxis.top}));this.translate();this.setTooltipPoints(!0);this.render();b&&E(this,"updatedData")},setState:function(a){var b=this.options,c=this.graph,d=b.states,b=b.lineWidth,a=a||"";if(this.state!==a)this.state=a,d[a]&&d[a].enabled===!1||(a&&(b=d[a].lineWidth||b+1),c&&!c.dashstyle&&c.attr({"stroke-width":b},a?0:
500))},setVisible:function(a,b){var c=this.chart,d=this.legendItem,e=this.group,f=this.tracker,g=this.dataLabelsGroup,h=this.markerGroup,i,j=this.points,k=c.options.chart.ignoreHiddenSeries;i=this.visible;i=(this.visible=a=a===x?!i:a)?"show":"hide";if(e)e[i]();if(h)h[i]();if(f)f[i]();else if(j)for(e=j.length;e--;)if(f=j[e],f.tracker)f.tracker[i]();if(g)g[i]();d&&c.legend.colorizeItem(this,a);this.isDirty=!0;this.options.stacking&&n(c.series,function(a){if(a.options.stacking&&a.visible)a.isDirty=!0});
if(k)c.isDirtyBox=!0;b!==!1&&c.redraw();E(this,i)},show:function(){this.setVisible(!0)},hide:function(){this.setVisible(!1)},select:function(a){this.selected=a=a===x?!this.selected:a;if(this.checkbox)this.checkbox.checked=a;E(this,a?"select":"unselect")},drawTracker:function(){var a=this,b=a.options,c=b.trackByArea,d=[].concat(c?a.areaPath:a.graphPath),e=d.length,f=a.chart,g=f.renderer,h=f.options.tooltip.snap,i=a.tracker,j=b.cursor,j=j&&{cursor:j},k=a.singlePoints,l=this.isCartesian&&this.plotGroup("trackerGroup",
null,"visible",b.zIndex||1,f.trackerGroup),m;if(e&&!c)for(m=e+1;m--;)d[m]==="M"&&d.splice(m+1,0,d[m+1]-h,d[m+2],"L"),(m&&d[m]==="M"||m===e)&&d.splice(m,0,"L",d[m-2]+h,d[m-1]);for(m=0;m<k.length;m++)e=k[m],d.push("M",e.plotX-h,e.plotY,"L",e.plotX+h,e.plotY);i?i.attr({d:d}):a.tracker=g.path(d).attr({isTracker:!0,"stroke-linejoin":"bevel",visibility:a.visible?"visible":"hidden",stroke:wb,fill:c?wb:T,"stroke-width":b.lineWidth+(c?0:2*h)}).on(ga?"touchstart":"mouseover",function(){if(f.hoverSeries!==a)a.onMouseOver()}).on("mouseout",
function(){if(!b.stickyTracking)a.onMouseOut()}).css(j).add(l)}};F=da(R);ba.line=F;Y.area=C(X,{threshold:0});F=da(R,{type:"area",getSegmentPath:function(a){var b=R.prototype.getSegmentPath.call(this,a),c=[].concat(b),d,e=this.options;b.length===3&&c.push("L",b[1],b[2]);if(e.stacking&&!this.closedStacks)for(d=a.length-1;d>=0;d--)d<a.length-1&&e.step&&c.push(a[d+1].plotX,a[d].yBottom),c.push(a[d].plotX,a[d].yBottom);else this.closeSegment(c,a);this.areaPath=this.areaPath.concat(c);return b},closeSegment:function(a,
b){var c=this.yAxis.getThreshold(this.options.threshold);a.push("L",b[b.length-1].plotX,c,"L",b[0].plotX,c)},drawGraph:function(){this.areaPath=[];R.prototype.drawGraph.apply(this);var a=this.areaPath,b=this.options,c=this.area;c?c.animate({d:a}):this.area=this.chart.renderer.path(a).attr({fill:p(b.fillColor,qa(this.color).setOpacity(b.fillOpacity||0.75).get()),zIndex:0}).add(this.group)},drawLegendSymbol:function(a,b){b.legendSymbol=this.chart.renderer.rect(0,a.baseline-11,a.options.symbolWidth,
12,2).attr({zIndex:3}).add(b.legendGroup)}});ba.area=F;Y.spline=C(X);ha=da(R,{type:"spline",getPointSpline:function(a,b,c){var d=b.plotX,e=b.plotY,f=a[c-1],g=a[c+1],h,i,j,k;if(f&&g){a=f.plotY;j=g.plotX;var g=g.plotY,l;h=(1.5*d+f.plotX)/2.5;i=(1.5*e+a)/2.5;j=(1.5*d+j)/2.5;k=(1.5*e+g)/2.5;l=(k-i)*(j-d)/(j-h)+e-k;i+=l;k+=l;i>a&&i>e?(i=v(a,e),k=2*e-i):i<a&&i<e&&(i=P(a,e),k=2*e-i);k>g&&k>e?(k=v(g,e),i=2*e-k):k<g&&k<e&&(k=P(g,e),i=2*e-k);b.rightContX=j;b.rightContY=k}c?(b=["C",f.rightContX||f.plotX,f.rightContY||
f.plotY,h||d,i||e,d,e],f.rightContX=f.rightContY=null):b=["M",d,e];return b}});ba.spline=ha;Y.areaspline=C(Y.area);var yb=F.prototype,ha=da(ha,{type:"areaspline",closedStacks:!0,getSegmentPath:yb.getSegmentPath,closeSegment:yb.closeSegment,drawGraph:yb.drawGraph});ba.areaspline=ha;Y.column=C(X,{borderColor:"#FFFFFF",borderWidth:1,borderRadius:0,groupPadding:0.2,marker:null,pointPadding:0.1,minPointLength:0,cropThreshold:50,pointRange:null,states:{hover:{brightness:0.1,shadow:!1},select:{color:"#C0C0C0",
borderColor:"#000000",shadow:!1}},dataLabels:{y:null,verticalAlign:null},threshold:0});Ca=da(R,{type:"column",tooltipOutsidePlot:!0,pointAttrToOptions:{stroke:"borderColor","stroke-width":"borderWidth",fill:"color",r:"borderRadius"},init:function(){R.prototype.init.apply(this,arguments);var a=this,b=a.chart;b.hasRendered&&n(b.series,function(b){if(b.type===a.type)b.isDirty=!0})},translate:function(){var a=this,b=a.chart,c=a.options,d=c.stacking,e=c.borderWidth,f=0,g=a.xAxis,h=g.reversed,i={},j,k;
R.prototype.translate.apply(a);c.grouping===!1?f=1:n(b.series,function(b){var c=b.options;if(b.type===a.type&&b.visible&&a.options.group===c.group)c.stacking?(j=b.stackKey,i[j]===x&&(i[j]=f++),k=i[j]):c.grouping!==!1&&(k=f++),b.columnIndex=k});var l=a.points,g=N(g.transA)*(g.ordinalSlope||c.pointRange||g.closestPointRange||1),m=g*c.groupPadding,o=(g-2*m)/f,r=c.pointWidth,t=u(r)?(o-r)/2:o*c.pointPadding,q=p(r,o-2*t),y=wa(v(q,1+2*e)),B=t+(m+((h?f-a.columnIndex:a.columnIndex)||0)*o-g/2)*(h?-1:1),A=a.yAxis.getThreshold(c.threshold),
w=p(c.minPointLength,5);n(l,function(c){var f=c.plotY,g=p(c.yBottom,A),h=c.plotX+B,i=wa(P(f,g)),j=wa(v(f,g)-i),k=a.yAxis.stacks[(c.y<0?"-":"")+a.stackKey];d&&a.visible&&k&&k[c.x]&&k[c.x].setOffset(B,y);N(j)<w&&w&&(j=w,i=N(i-A)>w?g-w:A-(f<=A?w:0));s(c,{barX:h,barY:i,barW:y,barH:j,pointWidth:q});c.shapeType="rect";c.shapeArgs=f=b.renderer.Element.prototype.crisp.call(0,e,h,i,y,j);e%2&&(f.y-=1,f.height+=1);c.trackerArgs=N(j)<3&&C(c.shapeArgs,{height:6,y:i-3})})},getSymbol:Ca,drawLegendSymbol:F.prototype.drawLegendSymbol,
drawGraph:Ca,drawPoints:function(){var a=this,b=a.options,c=a.chart.renderer,d,e;n(a.points,function(f){var g=f.plotY;if(g!==x&&!isNaN(g)&&f.y!==null)d=f.graphic,e=f.shapeArgs,d?(eb(d),d.animate(C(e))):f.graphic=d=c[f.shapeType](e).attr(f.pointAttr[f.selected?"select":""]).add(a.group).shadow(b.shadow,null,b.stacking&&!b.borderRadius)})},drawTracker:function(){var a=this,b=a.chart,c=b.renderer,d,e,f=+new Date,g=a.options,h=g.cursor,i=h&&{cursor:h},j=a.isCartesian&&a.plotGroup("trackerGroup",null,
"visible",g.zIndex||1,b.trackerGroup),k,l,m;n(a.points,function(h){e=h.tracker;d=h.trackerArgs||h.shapeArgs;l=h.plotY;m=!a.isCartesian||l!==x&&!isNaN(l);delete d.strokeWidth;if(h.y!==null&&m)e?e.attr(d):h.tracker=c[h.shapeType](d).attr({isTracker:f,fill:wb,visibility:a.visible?"visible":"hidden"}).on(ga?"touchstart":"mouseover",function(c){k=c.relatedTarget||c.fromElement;if(b.hoverSeries!==a&&B(k,"isTracker")!==f)a.onMouseOver();h.onMouseOver()}).on("mouseout",function(b){if(!g.stickyTracking&&(k=
b.relatedTarget||b.toElement,B(k,"isTracker")!==f))a.onMouseOut()}).css(i).add(h.group||j)})},animate:function(a){var b=this,c=b.points,d=b.options;if(!a)n(c,function(a){var c=a.graphic,a=a.shapeArgs,g=b.yAxis,h=d.threshold;c&&(c.attr({height:0,y:u(h)?g.getThreshold(h):g.translate(g.getExtremes().min,0,1,0,1)}),c.animate({height:a.height,y:a.y},d.animation))}),b.animate=null},remove:function(){var a=this,b=a.chart;b.hasRendered&&n(b.series,function(b){if(b.type===a.type)b.isDirty=!0});R.prototype.remove.apply(a,
arguments)}});ba.column=Ca;Y.bar=C(Y.column,{dataLabels:{align:"left",x:5,y:null,verticalAlign:"middle"}});ha=da(Ca,{type:"bar",inverted:!0});ba.bar=ha;Y.scatter=C(X,{lineWidth:0,states:{hover:{lineWidth:0}},tooltip:{headerFormat:'<span style="font-size: 10px; color:{series.color}">{series.name}</span><br/>',pointFormat:"x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>"}});ha=da(R,{type:"scatter",sorted:!1,translate:function(){var a=this;R.prototype.translate.apply(a);n(a.points,function(b){b.shapeType=
"circle";b.shapeArgs={x:b.plotX,y:b.plotY,r:a.chart.options.tooltip.snap}})},drawTracker:function(){for(var a=this,b=a.options.cursor,b=b&&{cursor:b},c=a.points,d=c.length,e;d--;)if(e=c[d].graphic)e.element._i=d;a._hasTracking?a._hasTracking=!0:a.markerGroup.attr({isTracker:!0}).on(ga?"touchstart":"mouseover",function(b){a.onMouseOver();if(b.target._i!==x)c[b.target._i].onMouseOver()}).on("mouseout",function(){if(!a.options.stickyTracking)a.onMouseOut()}).css(b)}});ba.scatter=ha;Y.pie=C(X,{borderColor:"#FFFFFF",
borderWidth:1,center:["50%","50%"],colorByPoint:!0,dataLabels:{distance:30,enabled:!0,formatter:function(){return this.point.name},y:5},legendType:"point",marker:null,size:"75%",showInLegend:!1,slicedOffset:10,states:{hover:{brightness:0.1,shadow:!1}}});X={type:"pie",isCartesian:!1,pointClass:da(Ta,{init:function(){Ta.prototype.init.apply(this,arguments);var a=this,b;s(a,{visible:a.visible!==!1,name:p(a.name,"Slice")});b=function(){a.slice()};H(a,"select",b);H(a,"unselect",b);return a},setVisible:function(a){var b=
this.series,c=b.chart,d=this.tracker,e=this.dataLabel,f=this.connector,g=this.shadowGroup,h;h=(this.visible=a=a===x?!this.visible:a)?"show":"hide";this.group[h]();if(d)d[h]();if(e)e[h]();if(f)f[h]();if(g)g[h]();this.legendItem&&c.legend.colorizeItem(this,a);if(!b.isDirty&&b.options.ignoreHiddenPoint)b.isDirty=!0,c.redraw()},slice:function(a,b,c){var d=this.series.chart,e=this.slicedTranslation;ua(c,d);p(b,!0);a=this.sliced=u(a)?a:!this.sliced;a={translateX:a?e[0]:d.plotLeft,translateY:a?e[1]:d.plotTop};
this.group.animate(a);this.shadowGroup&&this.shadowGroup.animate(a)}}),pointAttrToOptions:{stroke:"borderColor","stroke-width":"borderWidth",fill:"color"},getColor:function(){this.initialColor=this.chart.counters.color},animate:function(){var a=this;n(a.points,function(b){var c=b.graphic,b=b.shapeArgs,d=-xa/2;c&&(c.attr({r:0,start:d,end:d}),c.animate({r:b.r,start:b.start,end:b.end},a.options.animation))});a.animate=null},setData:function(a,b){R.prototype.setData.call(this,a,!1);this.processData();
this.generatePoints();p(b,!0)&&this.chart.redraw()},getCenter:function(){var a=this.options,b=this.chart,c=b.plotWidth,d=b.plotHeight,a=a.center.concat([a.size,a.innerSize||0]),e=P(c,d),f;return Sa(a,function(a,b){return(f=/%$/.test(a))?[c,d,e,e][b]*A(a)/100:a})},translate:function(){this.generatePoints();var a=0,b=-0.25,c=this.options,d=c.slicedOffset,e=d+c.borderWidth,f,g=this.chart,h,i,j,k=this.points,l=2*xa,m,o,p,s=c.dataLabels.distance,q=c.ignoreHiddenPoint;this.center=f=this.getCenter();this.getX=
function(a,b){j=K.asin((a-f[1])/(f[2]/2+s));return f[0]+(b?-1:1)*W(j)*(f[2]/2+s)};n(k,function(b){a+=q&&!b.visible?0:b.y});n(k,function(c){m=a?c.y/a:0;h=t(b*l*1E3)/1E3;if(!q||c.visible)b+=m;i=t(b*l*1E3)/1E3;c.shapeType="arc";c.shapeArgs={x:f[0],y:f[1],r:f[2]/2,innerR:f[3]/2,start:h,end:i};j=(i+h)/2;c.slicedTranslation=Sa([W(j)*d+g.plotLeft,aa(j)*d+g.plotTop],t);o=W(j)*f[2]/2;p=aa(j)*f[2]/2;c.tooltipPos=[f[0]+o*0.7,f[1]+p*0.7];c.labelPos=[f[0]+o+W(j)*s,f[1]+p+aa(j)*s,f[0]+o+W(j)*e,f[1]+p+aa(j)*e,f[0]+
o,f[1]+p,s<0?"center":j<l/4?"left":"right",j];c.percentage=m*100;c.total=a});this.setTooltipPoints()},render:function(){this.getAttribs();this.drawPoints();this.options.enableMouseTracking!==!1&&this.drawTracker();this.drawDataLabels();this.options.animation&&this.animate&&this.animate();this.isDirty=!1},drawPoints:function(){var a=this,b=a.chart,c=b.renderer,d,e,f,g=a.options.shadow,h,i;n(a.points,function(j){e=j.graphic;i=j.shapeArgs;f=j.group;h=j.shadowGroup;if(g&&!h)h=j.shadowGroup=c.g("shadow").attr({zIndex:4}).add();
if(!f)f=j.group=c.g("point").attr({zIndex:5}).add();d=j.sliced?j.slicedTranslation:[b.plotLeft,b.plotTop];f.translate(d[0],d[1]);h&&h.translate(d[0],d[1]);e?e.animate(i):j.graphic=e=c.arc(i).setRadialReference(a.center).attr(s(j.pointAttr[""],{"stroke-linejoin":"round"})).add(j.group).shadow(g,h);j.visible===!1&&j.setVisible(!1)})},drawDataLabels:function(){var a=this.data,b,c=this.chart,d=this.options.dataLabels,e=p(d.connectorPadding,10),f=p(d.connectorWidth,1),g,h,i=p(d.softConnector,!0),j=d.distance,
k=this.center,l=k[2]/2,m=k[1],o=j>0,r=[[],[]],s,q,t,u,v=2,w;if(d.enabled||this._hasPointLabels){R.prototype.drawDataLabels.apply(this);n(a,function(a){a.dataLabel&&r[a.labelPos[7]<xa/2?0:1].push(a)});r[1].reverse();u=function(a,b){return b.y-a.y};for(a=r[0][0]&&r[0][0].dataLabel&&(r[0][0].dataLabel.getBBox().height||21);v--;){var x=[],B=[],A=r[v],C=A.length,z;if(j>0){for(w=m-l-j;w<=m+l+j;w+=a)x.push(w);t=x.length;if(C>t){h=[].concat(A);h.sort(u);for(w=C;w--;)h[w].rank=w;for(w=C;w--;)A[w].rank>=t&&
A.splice(w,1);C=A.length}for(w=0;w<C;w++){b=A[w];h=b.labelPos;b=9999;for(q=0;q<t;q++)g=N(x[q]-h[1]),g<b&&(b=g,z=q);if(z<w&&x[w]!==null)z=w;else for(t<C-w+z&&x[w]!==null&&(z=t-C+w);x[z]===null;)z++;B.push({i:z,y:x[z]});x[z]=null}B.sort(u)}for(w=0;w<C;w++){b=A[w];h=b.labelPos;g=b.dataLabel;t=b.visible===!1?"hidden":"visible";s=h[1];if(j>0){if(q=B.pop(),z=q.i,q=q.y,s>q&&x[z+1]!==null||s<q&&x[z-1]!==null)q=s}else q=s;s=d.justify?k[0]+(v?-1:1)*(l+j):this.getX(z===0||z===x.length-1?s:q,v);g.attr({visibility:t,
align:h[6]})[g.moved?"animate":"attr"]({x:s+d.x+({left:e,right:-e}[h[6]]||0),y:q+d.y});g.moved=!0;if(o&&f)g=b.connector,h=i?["M",s+(h[6]==="left"?5:-5),q,"C",s,q,2*h[2]-h[4],2*h[3]-h[5],h[2],h[3],"L",h[4],h[5]]:["M",s+(h[6]==="left"?5:-5),q,"L",h[2],h[3],"L",h[4],h[5]],g?(g.animate({d:h}),g.attr("visibility",t)):b.connector=g=this.chart.renderer.path(h).attr({"stroke-width":f,stroke:d.connectorColor||b.color||"#606060",visibility:t,zIndex:3}).translate(c.plotLeft,c.plotTop).add()}}}},drawTracker:Ca.prototype.drawTracker,
drawLegendSymbol:F.prototype.drawLegendSymbol,getSymbol:function(){}};X=da(R,X);ba.pie=X;s(Highcharts,{Axis:ob,CanVGRenderer:gb,Chart:sb,Color:qa,Legend:rb,MouseTracker:qb,Point:Ta,Tick:Pa,Tooltip:pb,Renderer:Ra,Series:R,SVGRenderer:ra,VMLRenderer:ka,dateFormat:cb,pathAnim:vb,getOptions:function(){return O},hasBidiBug:Pb,numberFormat:Ia,seriesTypes:ba,setOptions:function(a){O=C(O,a);Gb();return O},addEvent:H,removeEvent:U,createElement:S,discardElement:Na,css:G,each:n,extend:s,map:Sa,merge:C,pick:p,
splat:oa,extendClass:da,pInt:A,wrap:function(a,b,c){var d=a[b];a[b]=function(){var a=Array.prototype.slice.call(arguments);a.unshift(d);return c.apply(this,a)}},svg:fa,canvas:$,vml:!fa&&!$,product:"Highcharts",version:"2.3.2"})})();
/*
 Highcharts JS v2.3.2 (2012-08-31)
 Exporting module

 (c) 2010-2011 Torstein Hønsi

 License: www.highcharts.com/license
*/
(function(){function x(a){for(var b=a.length;b--;)typeof a[b]==="number"&&(a[b]=Math.round(a[b])-0.5);return a}var g=Highcharts,y=g.Chart,z=g.addEvent,B=g.removeEvent,r=g.createElement,u=g.discardElement,t=g.css,s=g.merge,k=g.each,n=g.extend,C=Math.max,h=document,D=window,A=h.documentElement.ontouchstart!==void 0,v=g.getOptions();n(v.lang,{downloadPNG:"Download PNG image",downloadJPEG:"Download JPEG image",downloadPDF:"Download PDF document",downloadSVG:"Download SVG vector image",exportButtonTitle:"Export to raster or vector image",
printButtonTitle:"Print the chart"});v.navigation={menuStyle:{border:"1px solid #A0A0A0",background:"#FFFFFF"},menuItemStyle:{padding:"0 5px",background:"none",color:"#303030",fontSize:A?"14px":"11px"},menuItemHoverStyle:{background:"#4572A5",color:"#FFFFFF"},buttonOptions:{align:"right",backgroundColor:{linearGradient:[0,0,0,20],stops:[[0.4,"#F7F7F7"],[0.6,"#E3E3E3"]]},borderColor:"#B0B0B0",borderRadius:3,borderWidth:1,height:20,hoverBorderColor:"#909090",hoverSymbolFill:"#81A7CF",hoverSymbolStroke:"#4572A5",
symbolFill:"#E0E0E0",symbolStroke:"#A0A0A0",symbolX:11.5,symbolY:10.5,verticalAlign:"top",width:24,y:10}};v.exporting={type:"image/png",url:"http://export.highcharts.com/",width:800,buttons:{exportButton:{symbol:"exportIcon",x:-10,symbolFill:"#A8BF77",hoverSymbolFill:"#768F3E",_id:"exportButton",_titleKey:"exportButtonTitle",menuItems:[{textKey:"downloadPNG",onclick:function(){this.exportChart()}},{textKey:"downloadJPEG",onclick:function(){this.exportChart({type:"image/jpeg"})}},{textKey:"downloadPDF",
onclick:function(){this.exportChart({type:"application/pdf"})}},{textKey:"downloadSVG",onclick:function(){this.exportChart({type:"image/svg+xml"})}}]},printButton:{symbol:"printIcon",x:-36,symbolFill:"#B5C9DF",hoverSymbolFill:"#779ABF",_id:"printButton",_titleKey:"printButtonTitle",onclick:function(){this.print()}}}};n(y.prototype,{getSVG:function(a){var b=this,c,d,e,f=s(b.options,a);if(!h.createElementNS)h.createElementNS=function(a,b){return h.createElement(b)};a=r("div",null,{position:"absolute",
top:"-9999em",width:b.chartWidth+"px",height:b.chartHeight+"px"},h.body);n(f.chart,{renderTo:a,forExport:!0});f.exporting.enabled=!1;f.chart.plotBackgroundImage=null;f.series=[];k(b.series,function(a){e=s(a.options,{animation:!1,showCheckbox:!1,visible:a.visible});if(!e.isInternal){if(e&&e.marker&&/^url\(/.test(e.marker.symbol))e.marker.symbol="circle";f.series.push(e)}});c=new Highcharts.Chart(f);k(["xAxis","yAxis"],function(a){k(b[a],function(b,d){var e=c[a][d],f=b.getExtremes(),g=f.userMin,f=f.userMax;
(g!==void 0||f!==void 0)&&e.setExtremes(g,f,!0,!1)})});d=c.container.innerHTML;f=null;c.destroy();u(a);d=d.replace(/zIndex="[^"]+"/g,"").replace(/isShadow="[^"]+"/g,"").replace(/symbolName="[^"]+"/g,"").replace(/jQuery[0-9]+="[^"]+"/g,"").replace(/isTracker="[^"]+"/g,"").replace(/url\([^#]+#/g,"url(#").replace(/<svg /,'<svg xmlns:xlink="http://www.w3.org/1999/xlink" ').replace(/ href=/g," xlink:href=").replace(/\n/," ").replace(/<\/svg>.*?$/,"</svg>").replace(/&nbsp;/g," ").replace(/&shy;/g,"­").replace(/<IMG /g,
"<image ").replace(/height=([^" ]+)/g,'height="$1"').replace(/width=([^" ]+)/g,'width="$1"').replace(/hc-svg-href="([^"]+)">/g,'xlink:href="$1"/>').replace(/id=([^" >]+)/g,'id="$1"').replace(/class=([^" ]+)/g,'class="$1"').replace(/ transform /g," ").replace(/:(path|rect)/g,"$1").replace(/style="([^"]+)"/g,function(a){return a.toLowerCase()});d=d.replace(/(url\(#highcharts-[0-9]+)&quot;/g,"$1").replace(/&quot;/g,"'");d.match(/ xmlns="/g).length===2&&(d=d.replace(/xmlns="[^"]+"/,""));return d},exportChart:function(a,
b){var c,d=this.getSVG(s(this.options.exporting.chartOptions,b)),a=s(this.options.exporting,a);c=r("form",{method:"post",action:a.url,enctype:"multipart/form-data"},{display:"none"},h.body);k(["filename","type","width","svg"],function(b){r("input",{type:"hidden",name:b,value:{filename:a.filename||"chart",type:a.type,width:a.width,svg:d}[b]},null,c)});c.submit();u(c)},print:function(){var a=this,b=a.container,c=[],d=b.parentNode,e=h.body,f=e.childNodes;if(!a.isPrinting)a.isPrinting=!0,k(f,function(a,
b){if(a.nodeType===1)c[b]=a.style.display,a.style.display="none"}),e.appendChild(b),D.print(),setTimeout(function(){d.appendChild(b);k(f,function(a,b){if(a.nodeType===1)a.style.display=c[b]});a.isPrinting=!1},1E3)},contextMenu:function(a,b,c,d,e,f){var i=this,g=i.options.navigation,h=g.menuItemStyle,o=i.chartWidth,p=i.chartHeight,q="cache-"+a,j=i[q],l=C(e,f),m,w;if(!j)i[q]=j=r("div",{className:"highcharts-"+a},{position:"absolute",zIndex:1E3,padding:l+"px"},i.container),m=r("div",null,n({MozBoxShadow:"3px 3px 10px #888",
WebkitBoxShadow:"3px 3px 10px #888",boxShadow:"3px 3px 10px #888"},g.menuStyle),j),w=function(){t(j,{display:"none"})},z(j,"mouseleave",w),k(b,function(a){if(a){var b=r("div",{onmouseover:function(){t(this,g.menuItemHoverStyle)},onmouseout:function(){t(this,h)},innerHTML:a.text||i.options.lang[a.textKey]},n({cursor:"pointer"},h),m);b[A?"ontouchstart":"onclick"]=function(){w();a.onclick.apply(i,arguments)};i.exportDivElements.push(b)}}),i.exportDivElements.push(m,j),i.exportMenuWidth=j.offsetWidth,
i.exportMenuHeight=j.offsetHeight;a={display:"block"};c+i.exportMenuWidth>o?a.right=o-c-e-l+"px":a.left=c-l+"px";d+f+i.exportMenuHeight>p?a.bottom=p-d-l+"px":a.top=d+f-l+"px";t(j,a)},addButton:function(a){function b(){p.attr(l);o.attr(j)}var c=this,d=c.renderer,e=s(c.options.navigation.buttonOptions,a),f=e.onclick,g=e.menuItems,h=e.width,k=e.height,o,p,q,a=e.borderWidth,j={stroke:e.borderColor},l={stroke:e.symbolStroke,fill:e.symbolFill},m=e.symbolSize||12;if(!c.exportDivElements)c.exportDivElements=
[],c.exportSVGElements=[];e.enabled!==!1&&(o=d.rect(0,0,h,k,e.borderRadius,a).align(e,!0).attr(n({fill:e.backgroundColor,"stroke-width":a,zIndex:19},j)).add(),q=d.rect(0,0,h,k,0).align(e).attr({id:e._id,fill:"rgba(255, 255, 255, 0.001)",title:c.options.lang[e._titleKey],zIndex:21}).css({cursor:"pointer"}).on("mouseover",function(){p.attr({stroke:e.hoverSymbolStroke,fill:e.hoverSymbolFill});o.attr({stroke:e.hoverBorderColor})}).on("mouseout",b).on("click",b).add(),g&&(f=function(){b();var a=q.getBBox();
c.contextMenu("export-menu",g,a.x,a.y,h,k)}),q.on("click",function(){f.apply(c,arguments)}),p=d.symbol(e.symbol,e.symbolX-m/2,e.symbolY-m/2,m,m).align(e,!0).attr(n(l,{"stroke-width":e.symbolStrokeWidth||1,zIndex:20})).add(),c.exportSVGElements.push(o,q,p))},destroyExport:function(){var a,b;for(a=0;a<this.exportSVGElements.length;a++)b=this.exportSVGElements[a],b.onclick=b.ontouchstart=null,this.exportSVGElements[a]=b.destroy();for(a=0;a<this.exportDivElements.length;a++)b=this.exportDivElements[a],
B(b,"mouseleave"),this.exportDivElements[a]=b.onmouseout=b.onmouseover=b.ontouchstart=b.onclick=null,u(b)}});g.Renderer.prototype.symbols.exportIcon=function(a,b,c,d){return x(["M",a,b+c,"L",a+c,b+d,a+c,b+d*0.8,a,b+d*0.8,"Z","M",a+c*0.5,b+d*0.8,"L",a+c*0.8,b+d*0.4,a+c*0.4,b+d*0.4,a+c*0.4,b,a+c*0.6,b,a+c*0.6,b+d*0.4,a+c*0.2,b+d*0.4,"Z"])};g.Renderer.prototype.symbols.printIcon=function(a,b,c,d){return x(["M",a,b+d*0.7,"L",a+c,b+d*0.7,a+c,b+d*0.4,a,b+d*0.4,"Z","M",a+c*0.2,b+d*0.4,"L",a+c*0.2,b,a+c*
0.8,b,a+c*0.8,b+d*0.4,"Z","M",a+c*0.2,b+d*0.7,"L",a,b+d,a+c,b+d,a+c*0.8,b+d*0.7,"Z"])};y.prototype.callbacks.push(function(a){var b,c=a.options.exporting,d=c.buttons;if(c.enabled!==!1){for(b in d)a.addButton(d[b]);z(a,"destroy",a.destroyExport)}})})();
(function(a){var m={},h={},d=a.each,c=function(b){var e=function(g,k,l){if(typeof g==="object")a.each(g,function(n,o){e(n,o,l)});else if(l===undefined||l===true){b[g]||(b[g]=[]);b[g].push(k)}};return e},f=a.isArray,j=function(b,e,g){a.dform.hasSubscription(b)&&this.each(function(){var k=a(this);d(m[b],function(l,n){n.call(k,e,g)})});return this},i=function(b){var e=b.type,g=this;this.dform("run","[pre]",b,e);d(b,function(k,l){g.dform("run",k,l,e)});this.dform("run","[post]",b,e);return this};a.extend(a,
{keyset:function(b){return a.map(b,function(e,g){return g})},withKeys:function(b,e){var g={};d(e,function(k,l){if(b[l])g[l]=b[l]});return g},withoutKeys:function(b,e){var g={};d(b,function(k,l){~a.inArray(k,e)||(g[k]=l)});return g},dform:{options:{prefix:"ui-dform-"},defaultType:function(b){return a("<"+b.type+">").dform("attr",b)},types:function(b){return b?h[b]:h},addType:c(h),subscribers:function(b){return b?m[b]:m},subscribe:c(m),hasSubscription:function(b){return m[b]?true:false},createElement:function(b){if(!b.type)throw"No element type given! Must always exist.";
var e=b.type,g=null,k=a.withoutKeys(b,["type"]);if(h[e])d(h[e],function(l,n){g=n.call(g,k)});else g=a.dform.defaultType(b);return a(g)},methods:{run:function(b,e,g){if(typeof b!=="string")return i.call(this,b);return j.call(this,b,e,g)},append:function(b,e){if(e&&a.dform.converters&&a.isFunction(a.dform.converters[e]))b=a.dform.converters[e](b);e=a.dform.createElement(b);this.append(e);e.dform("run",b)},attr:function(b,e){var g=a.keyset(m);f(e)&&a.merge(g,e);this.attr(a.withoutKeys(b,g))},ajax:function(b,
e,g){g={error:g,url:b};var k=this;typeof b!=="string"&&a.extend(g,b);g.success=function(l){k.dform(l);e&&e.call(k,l)};a.ajax(g)},init:function(b,e){b=b.type?b:a.extend({type:"form"},b);if(e&&a.dform.converters&&a.isFunction(a.dform.converters[e]))b=a.dform.converters[e](b);if(this.is(b.type)){this.dform("attr",b);this.dform("run",b)}else this.dform("append",b)}}}});a.fn.dform=function(b,e,g){var k=a(this);if(a.dform.methods[b])a.dform.methods[b].apply(k,Array.prototype.slice.call(arguments,1));else typeof b===
"string"?a.dform.methods.ajax.call(k,{url:b,dataType:"json"},e,g):a.dform.methods.init.apply(k,arguments);return this}})(jQuery);
(function(a){var m=a.each,h=function(c,f){return function(j){return a(c).dform("attr",j,f)}},d=function(c){var f=this;if(a.isPlainObject(c))f.dform("append",c);else a.isArray(c)?m(c,function(j,i){f.dform("append",i)}):f.html(c)};a.dform.addType({container:h("<div>"),text:h('<input type="text" />'),password:h('<input type="password" />'),submit:h('<input type="submit" />'),reset:h('<input type="reset" />'),hidden:h('<input type="hidden" />'),radio:h('<input type="radio" />'),checkbox:h('<input type="checkbox" />'),
file:h('<input type="file" />'),number:h('<input type="number" />'),url:h('<input type="url" />'),tel:h('<input type="tel" />'),email:h('<input type="email" />'),checkboxes:h("<div>",["name"]),radiobuttons:h("<div>",["name"])});a.dform.subscribe({"class":function(c){this.addClass(c)},html:d,elements:d,value:function(c){this.val(c)},css:function(c){this.css(c)},options:function(c,f){var j=this;if((f==="select"||f==="optgroup")&&typeof c!=="string")m(c,function(i,b){i={type:"option",value:i};if(typeof b===
"string")i.html=b;if(typeof b==="object")i=a.extend(i,b);j.dform("append",i)});else if(f==="checkboxes"||f==="radiobuttons")m(c,function(i,b){var e=f==="radiobuttons"?{type:"radio"}:{type:"checkbox"};if(typeof b==="string")e.caption=b;else a.extend(e,b);e.value=i;j.dform("append",e)})},caption:function(c,f){var j={};if(typeof c==="string")j.html=c;else a.extend(j,c);if(f=="fieldset"){j.type="legend";this.dform("append",j)}else{j.type="label";if(this.attr("id"))j["for"]=this.attr("id");c=a(a.dform.createElement(j));
f==="checkbox"||f==="radio"?this.parent().append(a(c)):c.insertBefore(this);c.dform("run",j)}},type:function(c,f){a.dform.options.prefix&&this.addClass(a.dform.options.prefix+f)},url:function(){},"[post]":function(c,f){if(f==="checkboxes"||f==="radiobuttons")this.children("[type="+(f==="checkboxes"?"checkbox":"radio")+"]").each(function(){a(this).attr("name",c.name)})}})})(jQuery);
(function(a){var m=function(d,c){return a.withKeys(c,a.keyset(a.ui[d].prototype.options))},h=function(d,c){c=c;for(var f=0;f<d.length;f++){c=c[d[f]];if(!c)return null}return c};a.dform.addType("progressbar",function(d){return a("<div>").dform("attr",d).progressbar(m("progressbar",d))},a.isFunction(a.fn.progressbar));a.dform.addType("slider",function(d){return a("<div>").dform("attr",d).slider(m("slider",d))},a.isFunction(a.fn.slider));a.dform.addType("accordion",function(d){return a("<div>").dform("attr",
d)},a.isFunction(a.fn.accordion));a.dform.addType("tabs",function(d){return a("<div>").dform("attr",d)},a.isFunction(a.fn.tabs));a.dform.subscribe("entries",function(d,c){if(c=="accordion"){var f=this;a.each(d,function(j,i){j=a.extend({type:"div"},i);a(f).dform("append",j);if(i.caption){i=a(f).children("div:last").prev();i.replaceWith('<h3><a href="#">'+i.html()+"</a></h3>")}})}},a.isFunction(a.fn.accordion));a.dform.subscribe("entries",function(d,c){if(c=="tabs"){var f=this;this.append("<ul>");var j=
a(f).children("ul:first");a.each(d,function(i,b){i=b.id?b.id:i;a.extend(b,{type:"container",id:i});a(f).dform("append",b);b=a(f).children("div:last").prev();a(b).wrapInner(a("<a>").attr("href","#"+i));a(j).append(a("<li>").wrapInner(b))})}},a.isFunction(a.fn.tabs));a.dform.subscribe("dialog",function(d){this.dialog(d)},a.isFunction(a.fn.dialog));a.dform.subscribe("resizable",function(d){this.resizable(d)},a.isFunction(a.fn.resizable));a.dform.subscribe("datepicker",function(d,c){c=="text"&&this.datepicker(d)},
a.isFunction(a.fn.datepicker));a.dform.subscribe("autocomplete",function(d,c){c=="text"&&this.autocomplete(d)},a.isFunction(a.fn.autocomplete));a.dform.subscribe("[post]",function(d,c){if(this.parents("form").hasClass("ui-widget")){if((c==="button"||c==="submit")&&a.isFunction(a.fn.button))this.button();~a.inArray(c,["text","textarea","password","fieldset"])&&this.addClass("ui-widget-content ui-corner-all")}if(c==="accordion"||c==="tabs")this[c](m(c,d))});a.dform.subscribe("[pre]",function(d,c){if(c==
"form"){c={};if(this.hasClass("ui-widget"))c={highlight:function(f){a(f).addClass("ui-state-highlight")},unhighlight:function(f){a(f).removeClass("ui-state-highlight")}};typeof d.validate=="object"&&a.extend(c,d.validate);this.validate(c)}},a.isFunction(a.fn.validate));a.dform.subscribe("validate",function(d,c){c!="form"&&this.rules("add",d)},a.isFunction(a.fn.validate));a.dform.subscribe("ajax",function(d,c){c==="form"&&this.ajaxForm(d)},a.isFunction(a.fn.ajaxForm));a.dform.subscribe("html",function(d){if(typeof d===
"string"){d=d.split(".");var c=Globalize.localize(d.shift());if(c=h(d,c))a(this).html(c)}},typeof Globalize!=="undefined"&&a.isFunction(Globalize.localize));a.dform.subscribe("options",function(d,c){if(c==="select"&&typeof d==="string"){a(this).html("");d=d.split(".");var f=Globalize.localize(d.shift());if(f=h(d,f))a(this).dform("run","options",f,c)}},typeof Globalize!=="undefined"&&a.isFunction(Globalize.localize))})(jQuery);
(function($){
/*
 * jqGrid methods without support. Use as you wish
 * Tony Tomov tony@trirand.com
 * http://trirand.com/blog/
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
 *
 * This list of deprecated methods.
 * If you instead want to use them, please include this file after the grid main file.
 * Some methods will be then overwritten.
 *
 */
/*global jQuery, $ */

$.jgrid.extend({
// This is the ols search Filter method used in navigator.
	searchGrid : function (p) {
		p = $.extend({
			recreateFilter: false,
			drag: true,
			sField:'searchField',
			sValue:'searchString',
			sOper: 'searchOper',
			sFilter: 'filters',
            loadDefaults: true, // this options activates loading of default filters from grid's postData for Multipe Search only.
			beforeShowSearch: null,
			afterShowSearch : null,
			onInitializeSearch: null,
			closeAfterSearch : false,
			closeAfterReset: false,
			closeOnEscape : false,
			multipleSearch : false,
			cloneSearchRowOnAdd: true,
			// translation
			// if you want to change or remove the order change it in sopt
			// ['bw','eq','ne','lt','le','gt','ge','ew','cn']
			sopt: null,
			// Note: stringResult is intentionally declared "undefined by default".
			//  you are velcome to define stringResult expressly in the options you pass to searchGrid()
			//  stringResult is a "safeguard" measure to insure we post sensible data when communicated as form-encoded
			//  see http://github.com/tonytomov/jqGrid/issues/#issue/36
			//
			//  If this value is not expressly defined in the incoming options,
			// lower in the code we will infer the value based on value of multipleSearch
			stringResult: undefined,
			onClose : null,
			// useDataProxy allows ADD, EDIT and DEL code to bypass calling $.ajax
			// directly when grid's 'dataProxy' property (grid.p.dataProxy) is a function.
			// Used for "editGridRow" and "delGridRow" below and automatically flipped to TRUE
			// when ajax setting's 'url' (grid's 'editurl') property is undefined.
			// When 'useDataProxy' is true, instead of calling $.ajax.call(gridDOMobj, o, i) we call
			// gridDOMobj.p.dataProxy.call(gridDOMobj, o, i)
			//
			// Behavior is extremely similar to when 'datatype' is a function, but arguments are slightly different.
			// Normally the following is fed to datatype.call(a, b, c):
			//   a = Pointer to grid's table DOM element, b = grid.p.postdata, c = "load_"+grid's ID
			// In cases of "edit" and "del" the following is fed:
			//   a = Pointer to grid's table DOM element (same),
			//   b = extended Ajax Options including postdata in "data" property. (different object type)
			//   c = "set_"+grid's ID in case of "edit" and "del_"+grid's ID in case of "del" (same type, different content)
			// The major difference is that complete ajax options object, with attached "complete" and "error"
			// callback functions is fed instead of only post data.
			// This allows you to emulate a $.ajax call (including calling "complete"/"error"),
			// while retrieving the data locally in the browser.
			useDataProxy: false,
			overlay : true
		}, $.jgrid.search, p || {});
		return this.each(function() {
			var $t = this;
			if(!$t.grid) {return;}
			var fid = "fbox_"+$t.p.id,
			showFrm = true;
            function applyDefaultFilters(gridDOMobj, filterSettings) {
				/*
                gridDOMobj = ointer to grid DOM object ( $(#list)[0] )
                What we need from gridDOMobj:
                gridDOMobj.SearchFilter is the pointer to the Search box, once it's created.
                gridDOMobj.p.postData - dictionary of post settings. These can be overriden at grid creation to
                contain default filter settings. We will parse these and will populate the search with defaults.
                filterSettings - same settings object you (would) pass to $().jqGrid('searchGrid', filterSettings);
                */

                // Pulling default filter settings out of postData property of grid's properties.:
                var defaultFilters = gridDOMobj.p.postData[filterSettings.sFilter];
                // example of what we might get: {"groupOp":"and","rules":[{"field":"amount","op":"eq","data":"100"}]}
				// suppose we have imported this with grid import, the this is a string.
				if(typeof(defaultFilters) == "string") {
					defaultFilters = $.jgrid.parse(defaultFilters);
				}
                if (defaultFilters) {
                    if (defaultFilters.groupOp) {
                        gridDOMobj.SearchFilter.setGroupOp(defaultFilters.groupOp);
                    }
                    if (defaultFilters.rules) {
                        var f, i = 0, li = defaultFilters.rules.length, success = false;
                        for (; i < li; i++) {
                            f = defaultFilters.rules[i];
                            // we are not trying to counter all issues with filter declaration here. Just the basics to avoid lookup exceptions.
                            if (f.field !== undefined && f.op !== undefined && f.data !== undefined) {
                                success = gridDOMobj.SearchFilter.setFilter({
                                    'sfref':gridDOMobj.SearchFilter.$.find(".sf:last"),
                                    'filter':$.extend({},f)
                                });
								if (success) { gridDOMobj.SearchFilter.add(); }
                            }
                        }
                    }
				}
            } // end of applyDefaultFilters
			function hideFilter(selector) {
				if(p.onClose){
					var fclm = p.onClose(selector);
					if(typeof fclm == 'boolean' && !fclm) { return; }
				}
				selector.hide();
				if(p.overlay === true) {
					$(".jqgrid-overlay:first","#gbox_"+$t.p.id).hide();
				}
			}
			function showFilter(){
				var fl = $(".ui-searchFilter").length;
				if(fl > 1) {
					var zI = $("#"+fid).css("zIndex");
					$("#"+fid).css({zIndex:parseInt(zI,10)+fl});
				}
				$("#"+fid).show();
				if(p.overlay === true) {
					$(".jqgrid-overlay:first","#gbox_"+$t.p.id).show();
				}
				try{$(':input:visible',"#"+fid)[0].focus();}catch(_){}
			}
			function searchFilters(filters) {
				var hasFilters = (filters !== undefined),
				grid = $("#"+$t.p.id),
				sdata={};
				if(p.multipleSearch===false) {
					sdata[p.sField] = filters.rules[0].field;
					sdata[p.sValue] = filters.rules[0].data;
					sdata[p.sOper] = filters.rules[0].op;
					if(sdata.hasOwnProperty(p.sFilter) ) {
						delete sdata[p.sFilter];
					}
				} else {
					sdata[p.sFilter] = filters;
					$.each([p.sField, p.sValue, p.sOper], function(i, n){
						if(sdata.hasOwnProperty(n)) { delete sdata[n];}
					});
				}
				grid[0].p.search = hasFilters;
				$.extend(grid[0].p.postData,sdata);
				grid.trigger("reloadGrid",[{page:1}]);
				if(p.closeAfterSearch) { hideFilter($("#"+fid)); }
			}
			function resetFilters(op) {
				var reload = op && op.hasOwnProperty("reload") ? op.reload : true,
				grid = $("#"+$t.p.id),
				sdata={};
				grid[0].p.search = false;
				if(p.multipleSearch===false) {
					sdata[p.sField] = sdata[p.sValue] = sdata[p.sOper] = "";
				} else {
					sdata[p.sFilter] = "";
				}
				$.extend(grid[0].p.postData,sdata);
				if(reload) {
					grid.trigger("reloadGrid",[{page:1}]);
				}
				if(p.closeAfterReset) { hideFilter($("#"+fid)); }
			}
			if($.fn.searchFilter) {
				if(p.recreateFilter===true) {$("#"+fid).remove();}
				if( $("#"+fid).html() !== null ) {
					if ( $.isFunction(p.beforeShowSearch) ) {
						showFrm = p.beforeShowSearch($("#"+fid));
						if(typeof(showFrm) == "undefined") {
							showFrm = true;
						}
					}
					if(showFrm === false) { return; }
					showFilter();
					if( $.isFunction(p.afterShowSearch) ) { p.afterShowSearch($("#"+fid)); }
				} else {
					var fields = [],
					colNames = $("#"+$t.p.id).jqGrid("getGridParam","colNames"),
					colModel = $("#"+$t.p.id).jqGrid("getGridParam","colModel"),
					stempl = ['eq','ne','lt','le','gt','ge','bw','bn','in','ni','ew','en','cn','nc'],
					j,pos,k,oprtr=[];
					if (p.sopt !==null) {
						k=0;
						for(j=0;j<p.sopt.length;j++) {
							if( (pos= $.inArray(p.sopt[j],stempl)) != -1 ){
								oprtr[k] = {op:p.sopt[j],text: p.odata[pos]};
								k++;
							}
						}
					} else {
						for(j=0;j<stempl.length;j++) {
							oprtr[j] = {op:stempl[j],text: p.odata[j]};
						}
					}
				    $.each(colModel, function(i, v) {
				        var searchable = (typeof v.search === 'undefined') ?  true: v.search ,
				        hidden = (v.hidden === true),
						soptions = $.extend({}, {text: colNames[i], itemval: v.index || v.name}, this.searchoptions),
						ignoreHiding = (soptions.searchhidden === true);
						if(typeof soptions.sopt !== 'undefined') {
							k=0;
							soptions.ops =[];
							if(soptions.sopt.length>0) {
								for(j=0;j<soptions.sopt.length;j++) {
									if( (pos= $.inArray(soptions.sopt[j],stempl)) != -1 ){
										soptions.ops[k] = {op:soptions.sopt[j],text: p.odata[pos]};
										k++;
									}
								}
							}
						}
						if(typeof(this.stype) === 'undefined') { this.stype='text'; }
						if(this.stype == 'select') {
							if ( soptions.dataUrl !== undefined) {}
							else {
								var eov;
								if(soptions.value) {
									eov = soptions.value;
								} else if(this.editoptions) {
									eov = this.editoptions.value;
								}
								if(eov) {
									soptions.dataValues =[];
									if(typeof(eov) === 'string') {
										var so = eov.split(";"),sv;
										for(j=0;j<so.length;j++) {
											sv = so[j].split(":");
											soptions.dataValues[j] ={value:sv[0],text:sv[1]};
										}
									} else if (typeof(eov) === 'object') {
										j=0;
										for (var key in eov) {
											if(eov.hasOwnProperty(key)) {
												soptions.dataValues[j] ={value:key,text:eov[key]};
												j++;
											}
										}
									}
								}
							}
						}
				        if ((ignoreHiding && searchable) || (searchable && !hidden)) {
							fields.push(soptions);
						}
					});
					if(fields.length>0){
						$("<div id='"+fid+"' role='dialog' tabindex='-1'></div>").insertBefore("#gview_"+$t.p.id);
						// Before we create searchFilter we need to decide if we want to get back a string or a JS object.
						//  see http://github.com/tonytomov/jqGrid/issues/#issue/36 for background on the issue.
						// If p.stringResult is defined, it was explisitly passed to us by user. Honor the choice, whatever it is.
						if (p.stringResult===undefined) {
							// to provide backward compatibility, inferring stringResult value from multipleSearch
							p.stringResult = p.multipleSearch;
						}
						// we preserve the return value here to retain access to .add() and other good methods of search form.
						$t.SearchFilter = $("#"+fid).searchFilter(fields, { groupOps: p.groupOps, operators: oprtr, onClose:hideFilter, resetText: p.Reset, searchText: p.Find, windowTitle: p.caption,  rulesText:p.rulesText, matchText:p.matchText, onSearch: searchFilters, onReset: resetFilters,stringResult:p.stringResult, ajaxSelectOptions: $.extend({},$.jgrid.ajaxOptions,$t.p.ajaxSelectOptions ||{}), clone: p.cloneSearchRowOnAdd });
						$(".ui-widget-overlay","#"+fid).remove();
						if($t.p.direction=="rtl") { $(".ui-closer","#"+fid).css("float","left"); }
						if (p.drag===true) {
							$("#"+fid+" table thead tr:first td:first").css('cursor','move');
							if(jQuery.fn.jqDrag) {
								$("#"+fid).jqDrag($("#"+fid+" table thead tr:first td:first"));
							} else {
								try {
									$("#"+fid).draggable({handle: $("#"+fid+" table thead tr:first td:first")});
								} catch (e) {}
							}
						}
						if(p.multipleSearch === false) {
							$(".ui-del, .ui-add, .ui-del, .ui-add-last, .matchText, .rulesText", "#"+fid).hide();
							$("select[name='groupOp']","#"+fid).hide();
						}
                        if (p.multipleSearch === true && p.loadDefaults === true) {
                            applyDefaultFilters($t, p);
                        }
						if ( $.isFunction(p.onInitializeSearch) ) { p.onInitializeSearch( $("#"+fid) ); }
						if ( $.isFunction(p.beforeShowSearch) ) {
							showFrm = p.beforeShowSearch($("#"+fid));
							if(typeof(showFrm) == "undefined") {
								showFrm = true;
							}
						}
						if(showFrm === false) { return; }
						showFilter();
						if( $.isFunction(p.afterShowSearch) ) { p.afterShowSearch($("#"+fid)); }
						if(p.closeOnEscape===true){
							$("#"+fid).keydown( function( e ) {
								if( e.which == 27 ) {
									hideFilter($("#"+fid));
								}
								if (e.which == 13) {
									$(".ui-search", this).click();
								}
							});
						}
					}
				}
			}
		});
	},
	// methods taken from grid.custom.
	updateGridRows : function (data, rowidname, jsonreader) {
		var nm, success=false, title;
		this.each(function(){
			var t = this, vl, ind, srow, sid;
			if(!t.grid) {return false;}
			if(!rowidname) { rowidname = "id"; }
			if( data  && data.length >0 ) {
				$(data).each(function(j){
					srow = this;
					ind = t.rows.namedItem(srow[rowidname]);
					if(ind) {
						sid = srow[rowidname];
						if(jsonreader === true){
							if(t.p.jsonReader.repeatitems === true) {
								if(t.p.jsonReader.cell) {srow = srow[t.p.jsonReader.cell];}
								for (var k=0;k<srow.length;k++) {
									vl = t.formatter( sid, srow[k], k, srow, 'edit');
									title = t.p.colModel[k].title ? {"title":$.jgrid.stripHtml(vl)} : {};
									if(t.p.treeGrid===true && nm == t.p.ExpandColumn) {
										$("td:eq("+k+") > span:first",ind).html(vl).attr(title);
									} else {
										$("td:eq("+k+")",ind).html(vl).attr(title);
									}
								}
								success = true;
								return true;
							}
						}
						$(t.p.colModel).each(function(i){
							nm = jsonreader===true ? this.jsonmap || this.name :this.name;
							if( srow[nm] !== undefined) {
								vl = t.formatter( sid, srow[nm], i, srow, 'edit');
								title = this.title ? {"title":$.jgrid.stripHtml(vl)} : {};
								if(t.p.treeGrid===true && nm == t.p.ExpandColumn) {
									$("td:eq("+i+") > span:first",ind).html(vl).attr(title);
								} else {
									$("td:eq("+i+")",ind).html(vl).attr(title);
								}
								success = true;
							}
						});
					}
				});
			}
		});
		return success;
	},
	// Form search - sorry for this method. Instead use ne jqFilter method.
	filterGrid : function(gridid,p){
		p = $.extend({
			gridModel : false,
			gridNames : false,
			gridToolbar : false,
			filterModel: [], // label/name/stype/defval/surl/sopt
			formtype : "horizontal", // horizontal/vertical
			autosearch: true, // if set to false a serch button should be enabled.
			formclass: "filterform",
			tableclass: "filtertable",
			buttonclass: "filterbutton",
			searchButton: "Search",
			clearButton: "Clear",
			enableSearch : false,
			enableClear: false,
			beforeSearch: null,
			afterSearch: null,
			beforeClear: null,
			afterClear: null,
			url : '',
			marksearched: true
		},p  || {});
		return this.each(function(){
			var self = this;
			this.p = p;
			if(this.p.filterModel.length === 0 && this.p.gridModel===false) { alert("No filter is set"); return;}
			if( !gridid) {alert("No target grid is set!"); return;}
			this.p.gridid = gridid.indexOf("#") != -1 ? gridid : "#"+gridid;
			var gcolMod = $(this.p.gridid).jqGrid("getGridParam",'colModel');
			if(gcolMod) {
				if( this.p.gridModel === true) {
					var thegrid = $(this.p.gridid)[0];
					var sh;
					// we should use the options search, edittype, editoptions
					// additionally surl and defval can be added in grid colModel
					$.each(gcolMod, function (i,n) {
						var tmpFil = [];
						this.search = this.search === false ? false : true;
						if(this.editrules && this.editrules.searchhidden === true) {
							sh = true;
						} else {
							if(this.hidden === true ) {
								sh = false;
							} else {
								sh = true;
							}
						}
						if( this.search === true && sh === true) {
							if(self.p.gridNames===true) {
								tmpFil.label = thegrid.p.colNames[i];
							} else {
								tmpFil.label = '';
							}
							tmpFil.name = this.name;
							tmpFil.index = this.index || this.name;
							// we support only text and selects, so all other to text
							tmpFil.stype = this.edittype || 'text';
							if(tmpFil.stype != 'select' ) {
								tmpFil.stype = 'text';
							}
							tmpFil.defval = this.defval || '';
							tmpFil.surl = this.surl || '';
							tmpFil.sopt = this.editoptions || {};
							tmpFil.width = this.width;
							self.p.filterModel.push(tmpFil);
						}
					});
				} else {
					$.each(self.p.filterModel,function(i,n) {
						for(var j=0;j<gcolMod.length;j++) {
							if(this.name == gcolMod[j].name) {
								this.index = gcolMod[j].index || this.name;
								break;
							}
						}
						if(!this.index) {
							this.index = this.name;
						}
					});
				}
			} else {
				alert("Could not get grid colModel"); return;
			}
			var triggerSearch = function() {
				var sdata={}, j=0, v;
				var gr = $(self.p.gridid)[0], nm;
                gr.p.searchdata = {};
				if($.isFunction(self.p.beforeSearch)){self.p.beforeSearch();}
				$.each(self.p.filterModel,function(i,n){
                    nm = this.index;
					if(this.stype === 'select') {
						v = $("select[name="+nm+"]",self).val();
						if(v) {
							sdata[nm] = v;
							if(self.p.marksearched){
								$("#jqgh_"+this.name,gr.grid.hDiv).addClass("dirty-cell");
							}
							j++;
						} else {
							if(self.p.marksearched){
								$("#jqgh_"+this.name,gr.grid.hDiv).removeClass("dirty-cell");
							}
                               try {
                                   delete gr.p.postData[this.index];
                               } catch (e) {}
						}
					} else {
						v = $("input[name="+nm+"]",self).val();
						if(v) {
							sdata[nm] = v;
							if(self.p.marksearched){
								$("#jqgh_"+this.name,gr.grid.hDiv).addClass("dirty-cell");
							}
							j++;
						} else {
							if(self.p.marksearched){
								$("#jqgh_"+this.name,gr.grid.hDiv).removeClass("dirty-cell");
							}
								try {
									delete gr.p.postData[this.index];
                            } catch(x) {}
						}
					}
				});
				var sd =  j>0 ? true : false;
                $.extend(gr.p.postData,sdata);
				var saveurl;
				if(self.p.url) {
					saveurl = $(gr).jqGrid("getGridParam",'url');
					$(gr).jqGrid("setGridParam",{url:self.p.url});
				}
			    $(gr).jqGrid("setGridParam",{search:sd}).trigger("reloadGrid",[{page:1}]);
				if(saveurl) {$(gr).jqGrid("setGridParam",{url:saveurl});}
				if($.isFunction(self.p.afterSearch)){self.p.afterSearch();}
			};
			var clearSearch = function(){
				var sdata={}, v, j=0;
				var gr = $(self.p.gridid)[0], nm;
				if($.isFunction(self.p.beforeClear)){self.p.beforeClear();}
				$.each(self.p.filterModel,function(i,n){
                    nm = this.index;
					v = (this.defval) ? this.defval : "";
					if(!this.stype){this.stype='text';}
					switch (this.stype) {
						case 'select' :
							var v1;
							$("select[name="+nm+"] option",self).each(function (i){
                                if(i===0) { this.selected = true; }
								if ($(this).text() == v) {
									this.selected = true;
									v1 = $(this).val();
									return false;
								}
							});
							if(v1) {
								// post the key and not the text
								sdata[nm] = v1;
								if(self.p.marksearched){
									$("#jqgh_"+this.name,gr.grid.hDiv).addClass("dirty-cell");
								}
								j++;
							} else {
								if(self.p.marksearched){
									$("#jqgh_"+this.name,gr.grid.hDiv).removeClass("dirty-cell");
								}
                                try {
                                    delete gr.p.postData[this.index];
                                } catch (e) {}
							}
							break;
						case 'text':
							$("input[name="+nm+"]",self).val(v);
							if(v) {
								sdata[nm] = v;
								if(self.p.marksearched){
									$("#jqgh_"+this.name,gr.grid.hDiv).addClass("dirty-cell");
								}
								j++;
							} else {
								if(self.p.marksearched){
									$("#jqgh_"+this.name,gr.grid.hDiv).removeClass("dirty-cell");
								}
                                try {
                                    delete gr.p.postData[this.index];
                                } catch (k) {}
							}
                            break;
					}
				});
				var sd =  j>0 ? true : false;
                $.extend(gr.p.postData,sdata);
				var saveurl;
				if(self.p.url) {
					saveurl = $(gr).jqGrid("getGridParam",'url');
					$(gr).jqGrid("setGridParam",{url:self.p.url});
				}
				$(gr).jqGrid("setGridParam",{search:sd}).trigger("reloadGrid",[{page:1}]);
				if(saveurl) {$(gr).jqGrid("setGridParam",{url:saveurl});}
				if($.isFunction(self.p.afterClear)){self.p.afterClear();}
			};
			var tbl;
			var formFill = function(){
				var tr = document.createElement("tr");
				var tr1, sb, cb,tl,td;
				if(self.p.formtype=='horizontal'){
					$(tbl).append(tr);
				}
				$.each(self.p.filterModel,function(i,n){
					tl = document.createElement("td");
					$(tl).append("<label for='"+this.name+"'>"+this.label+"</label>");
					td = document.createElement("td");
					var $t=this;
					if(!this.stype) { this.stype='text';}
					switch (this.stype)
					{
					case "select":
						if(this.surl) {
							// data returned should have already constructed html select
							$(td).load(this.surl,function(){
								if($t.defval) { $("select",this).val($t.defval); }
								$("select",this).attr({name:$t.index || $t.name, id: "sg_"+$t.name});
								if($t.sopt) { $("select",this).attr($t.sopt); }
								if(self.p.gridToolbar===true && $t.width) {
									$("select",this).width($t.width);
								}
								if(self.p.autosearch===true){
									$("select",this).change(function(e){
										triggerSearch();
										return false;
									});
								}
							});
						} else {
							// sopt to construct the values
							if($t.sopt.value) {
								var oSv = $t.sopt.value;
								var elem = document.createElement("select");
								$(elem).attr({name:$t.index || $t.name, id: "sg_"+$t.name}).attr($t.sopt);
								var so, sv, ov;
								if(typeof oSv === "string") {
									so = oSv.split(";");
									for(var k=0; k<so.length;k++){
										sv = so[k].split(":");
										ov = document.createElement("option");
										ov.value = sv[0]; ov.innerHTML = sv[1];
										if (sv[1]==$t.defval) { ov.selected ="selected"; }
										elem.appendChild(ov);
									}
								} else if(typeof oSv === "object" ) {
									for ( var key in oSv) {
										if(oSv.hasOwnProperty(key)) {
											i++;
											ov = document.createElement("option");
											ov.value = key; ov.innerHTML = oSv[key];
											if (oSv[key]==$t.defval) { ov.selected ="selected"; }
											elem.appendChild(ov);
										}
									}
								}
								if(self.p.gridToolbar===true && $t.width) {
									$(elem).width($t.width);
								}
								$(td).append(elem);
								if(self.p.autosearch===true){
									$(elem).change(function(e){
										triggerSearch();
										return false;
									});
								}
							}
						}
						break;
					case 'text':
						var df = this.defval ? this.defval: "";
						$(td).append("<input type='text' name='"+(this.index || this.name)+"' id='sg_"+this.name+"' value='"+df+"'/>");
						if($t.sopt) { $("input",td).attr($t.sopt); }
						if(self.p.gridToolbar===true && $t.width) {
							if($.browser.msie) {
								$("input",td).width($t.width-4);
							} else {
								$("input",td).width($t.width-2);
							}
						}
						if(self.p.autosearch===true){
							$("input",td).keypress(function(e){
								var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
								if(key == 13){
									triggerSearch();
									return false;
								}
								return this;
							});
						}
						break;
					}
					if(self.p.formtype=='horizontal'){
						if(self.p.gridToolbar===true && self.p.gridNames===false) {
							$(tr).append(td);
						} else {
							$(tr).append(tl).append(td);
						}
						$(tr).append(td);
					} else {
						tr1 = document.createElement("tr");
						$(tr1).append(tl).append(td);
						$(tbl).append(tr1);
					}
				});
				td = document.createElement("td");
				if(self.p.enableSearch === true){
					sb = "<input type='button' id='sButton' class='"+self.p.buttonclass+"' value='"+self.p.searchButton+"'/>";
					$(td).append(sb);
					$("input#sButton",td).click(function(){
						triggerSearch();
						return false;
					});
				}
				if(self.p.enableClear === true) {
					cb = "<input type='button' id='cButton' class='"+self.p.buttonclass+"' value='"+self.p.clearButton+"'/>";
					$(td).append(cb);
					$("input#cButton",td).click(function(){
						clearSearch();
						return false;
					});
				}
				if(self.p.enableClear === true || self.p.enableSearch === true) {
					if(self.p.formtype=='horizontal') {
						$(tr).append(td);
					} else {
						tr1 = document.createElement("tr");
						$(tr1).append("<td>&#160;</td>").append(td);
						$(tbl).append(tr1);
					}
				}
			};
			var frm = $("<form name='SearchForm' style=display:inline;' class='"+this.p.formclass+"'></form>");
			tbl =$("<table class='"+this.p.tableclass+"' cellspacing='0' cellpading='0' border='0'><tbody></tbody></table>");
			$(frm).append(tbl);
			formFill();
			$(this).append(frm);
			this.triggerSearch = triggerSearch;
			this.clearSearch = clearSearch;
		});
	}

});
})(jQuery);
;(function($){
/**
 * jqGrid extension
 * Paul Tiseo ptiseo@wasteconsultants.com
 * 
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
**/ 
$.jgrid.extend({
	getPostData : function(){
		var $t = this[0];
		if(!$t.grid) { return; }
		return $t.p.postData;
	},
	setPostData : function( newdata ) {
		var $t = this[0];
		if(!$t.grid) { return; }
		// check if newdata is correct type
		if ( typeof(newdata) === 'object' ) {
			$t.p.postData = newdata;
		}
		else {
			alert("Error: cannot add a non-object postData value. postData unchanged.");
		}
	},
	appendPostData : function( newdata ) { 
		var $t = this[0];
		if(!$t.grid) { return; }
		// check if newdata is correct type
		if ( typeof(newdata) === 'object' ) {
			$.extend($t.p.postData, newdata);
		}
		else {
			alert("Error: cannot append a non-object postData value. postData unchanged.");
		}
	},
	setPostDataItem : function( key, val ) {
		var $t = this[0];
		if(!$t.grid) { return; }
		$t.p.postData[key] = val;
	},
	getPostDataItem : function( key ) {
		var $t = this[0];
		if(!$t.grid) { return; }
		return $t.p.postData[key];
	},
	removePostDataItem : function( key ) {
		var $t = this[0];
		if(!$t.grid) { return; }
		delete $t.p.postData[key];
	},
	getUserData : function(){
		var $t = this[0];
		if(!$t.grid) { return; }
		return $t.p.userData;
	},
	getUserDataItem : function( key ) {
		var $t = this[0];
		if(!$t.grid) { return; }
		return $t.p.userData[key];
	}
});
})(jQuery);;(function($){
/**
 * jqGrid extension for manipulating columns properties
 * Piotr Roznicki roznicki@o2.pl
 * http://www.roznicki.prv.pl
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
**/
$.jgrid.extend({
	setColumns : function(p) {
		p = $.extend({
			top : 0,
			left: 0,
			width: 200,
			height: 'auto',
			dataheight: 'auto',
			modal: false,
			drag: true,
			beforeShowForm: null,
			afterShowForm: null,
			afterSubmitForm: null,
			closeOnEscape : true,
			ShrinkToFit : false,
			jqModal : false,
			saveicon: [true,"left","ui-icon-disk"],
			closeicon: [true,"left","ui-icon-close"],
			onClose : null,
			colnameview : true,
			closeAfterSubmit : true,
			updateAfterCheck : false,
			recreateForm : false
		}, $.jgrid.col, p ||{});
		return this.each(function(){
			var $t = this;
			if (!$t.grid ) { return; }
			var onBeforeShow = typeof p.beforeShowForm === 'function' ? true: false;
			var onAfterShow = typeof p.afterShowForm === 'function' ? true: false;
			var onAfterSubmit = typeof p.afterSubmitForm === 'function' ? true: false;			
			var gID = $t.p.id,
			dtbl = "ColTbl_"+gID,
			IDs = {themodal:'colmod'+gID,modalhead:'colhd'+gID,modalcontent:'colcnt'+gID, scrollelm: dtbl};
			if(p.recreateForm===true && $("#"+IDs.themodal).html() != null) {
				$("#"+IDs.themodal).remove();
			}
			if ( $("#"+IDs.themodal).html() != null ) {
				if(onBeforeShow) { p.beforeShowForm($("#"+dtbl)); }
				$.jgrid.viewModal("#"+IDs.themodal,{gbox:"#gbox_"+gID,jqm:p.jqModal, jqM:false, modal:p.modal});
				if(onAfterShow) { p.afterShowForm($("#"+dtbl)); }
			} else {
				var dh = isNaN(p.dataheight) ? p.dataheight : p.dataheight+"px";
				var formdata = "<div id='"+dtbl+"' class='formdata' style='width:100%;overflow:auto;position:relative;height:"+dh+";'>";
				formdata += "<table class='ColTable' cellspacing='1' cellpading='2' border='0'><tbody>";
				for(i=0;i<this.p.colNames.length;i++){
					if(!$t.p.colModel[i].hidedlg) { // added from T. Tomov
						formdata += "<tr><td style='white-space: pre;'><input type='checkbox' style='margin-right:5px;' id='col_" + this.p.colModel[i].name + "' class='cbox' value='T' " + 
						((this.p.colModel[i].hidden===false)?"checked":"") + "/>" +  "<label for='col_" + this.p.colModel[i].name + "'>" + this.p.colNames[i] + ((p.colnameview) ? " (" + this.p.colModel[i].name + ")" : "" )+ "</label></td></tr>";
					}
				}
				formdata += "</tbody></table></div>"
				var bS  = !p.updateAfterCheck ? "<a href='javascript:void(0)' id='dData' class='fm-button ui-state-default ui-corner-all'>"+p.bSubmit+"</a>" : "",
				bC  ="<a href='javascript:void(0)' id='eData' class='fm-button ui-state-default ui-corner-all'>"+p.bCancel+"</a>";
				formdata += "<table border='0' class='EditTable' id='"+dtbl+"_2'><tbody><tr style='display:block;height:3px;'><td></td></tr><tr><td class='DataTD ui-widget-content'></td></tr><tr><td class='ColButton EditButton'>"+bS+"&#160;"+bC+"</td></tr></tbody></table>";
				p.gbox = "#gbox_"+gID;
				$.jgrid.createModal(IDs,formdata,p,"#gview_"+$t.p.id,$("#gview_"+$t.p.id)[0]);
				if(p.saveicon[0]==true) {
					$("#dData","#"+dtbl+"_2").addClass(p.saveicon[1] == "right" ? 'fm-button-icon-right' : 'fm-button-icon-left')
					.append("<span class='ui-icon "+p.saveicon[2]+"'></span>");
				}
				if(p.closeicon[0]==true) {
					$("#eData","#"+dtbl+"_2").addClass(p.closeicon[1] == "right" ? 'fm-button-icon-right' : 'fm-button-icon-left')
					.append("<span class='ui-icon "+p.closeicon[2]+"'></span>");
				}
				if(!p.updateAfterCheck) {
					$("#dData","#"+dtbl+"_2").click(function(e){
						for(i=0;i<$t.p.colModel.length;i++){
							if(!$t.p.colModel[i].hidedlg) { // added from T. Tomov
								var nm = $t.p.colModel[i].name.replace(/\./g, "\\.");
								if($("#col_" + nm,"#"+dtbl).attr("checked")) {
									$($t).jqGrid("showCol",$t.p.colModel[i].name);
									$("#col_" + nm,"#"+dtbl).attr("defaultChecked",true); // Added from T. Tomov IE BUG
								} else {
									$($t).jqGrid("hideCol",$t.p.colModel[i].name);
									$("#col_" + nm,"#"+dtbl).attr("defaultChecked",""); // Added from T. Tomov IE BUG
								}
							}
						}
						if(p.ShrinkToFit===true) {
							$($t).jqGrid("setGridWidth",$t.grid.width-0.001,true);
						}
						if(p.closeAfterSubmit) $.jgrid.hideModal("#"+IDs.themodal,{gb:"#gbox_"+gID,jqm:p.jqModal, onClose: p.onClose});
						if (onAfterSubmit) { p.afterSubmitForm($("#"+dtbl)); }
						return false;
					});
				} else {
					$(":input","#"+dtbl).click(function(e){
						var cn = this.id.substr(4);
						if(cn){
							if(this.checked) {
								$($t).jqGrid("showCol",cn);
							} else {
								$($t).jqGrid("hideCol",cn);
							}
							if(p.ShrinkToFit===true) {
								$($t).jqGrid("setGridWidth",$t.grid.width-0.001,true);
							}
						}
						return this;
					});
				}
				$("#eData", "#"+dtbl+"_2").click(function(e){
					$.jgrid.hideModal("#"+IDs.themodal,{gb:"#gbox_"+gID,jqm:p.jqModal, onClose: p.onClose});
					return false;
				});
				$("#dData, #eData","#"+dtbl+"_2").hover(
				   function(){$(this).addClass('ui-state-hover');}, 
				   function(){$(this).removeClass('ui-state-hover');}
				);				
				if(onBeforeShow) { p.beforeShowForm($("#"+dtbl)); }
				$.jgrid.viewModal("#"+IDs.themodal,{gbox:"#gbox_"+gID,jqm:p.jqModal, jqM: true, modal:p.modal});
				if(onAfterShow) { p.afterShowForm($("#"+dtbl)); }
			}
		});
	}
});
})(jQuery);/*
 * ContextMenu - jQuery plugin for right-click context menus
 *
 * Author: Chris Domigan
 * Contributors: Dan G. Switzer, II
 * Parts of this plugin are inspired by Joern Zaefferer's Tooltip plugin
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 *
 * Version: r2
 * Date: 16 July 2007
 *
 * For documentation visit http://www.trendskitchens.co.nz/jquery/contextmenu/
 *
 */

(function($) {

 	var menu, shadow, content, hash, currentTarget;
  var defaults = {
    menuStyle: {
      listStyle: 'none',
      padding: '1px',
      margin: '0px',
      backgroundColor: '#fff',
      border: '1px solid #999',
      width: '100px'
    },
    itemStyle: {
      margin: '0px',
      color: '#000',
      display: 'block',
      cursor: 'default',
      padding: '3px',
      border: '1px solid #fff',
      backgroundColor: 'transparent'
    },
    itemHoverStyle: {
      border: '1px solid #0a246a',
      backgroundColor: '#b6bdd2'
    },
    eventPosX: 'pageX',
    eventPosY: 'pageY',
    shadow : true,
    onContextMenu: null,
    onShowMenu: null
 	};

  $.fn.contextMenu = function(id, options) {
    if (!menu) {                                      // Create singleton menu
      menu = $('<div id="jqContextMenu"></div>')
               .hide()
               .css({position:'absolute', zIndex:'500'})
               .appendTo('body')
               .bind('click', function(e) {
                 e.stopPropagation();
               });
    }
    if (!shadow) {
      shadow = $('<div></div>')
                 .css({backgroundColor:'#000',position:'absolute',opacity:0.2,zIndex:499})
                 .appendTo('body')
                 .hide();
    }
    hash = hash || [];
    hash.push({
      id : id,
      menuStyle: $.extend({}, defaults.menuStyle, options.menuStyle || {}),
      itemStyle: $.extend({}, defaults.itemStyle, options.itemStyle || {}),
      itemHoverStyle: $.extend({}, defaults.itemHoverStyle, options.itemHoverStyle || {}),
      bindings: options.bindings || {},
      shadow: options.shadow || options.shadow === false ? options.shadow : defaults.shadow,
      onContextMenu: options.onContextMenu || defaults.onContextMenu,
      onShowMenu: options.onShowMenu || defaults.onShowMenu,
      eventPosX: options.eventPosX || defaults.eventPosX,
      eventPosY: options.eventPosY || defaults.eventPosY
    });

    var index = hash.length - 1;
    $(this).bind('contextmenu', function(e) {
      // Check if onContextMenu() defined
      var bShowContext = (!!hash[index].onContextMenu) ? hash[index].onContextMenu(e) : true;
	  currentTarget = e.target;
      if (bShowContext) {
		display(index, this, e );
		return false;
	  }
    });
    return this;
  };

  function display(index, trigger, e ) {
    var cur = hash[index];
    content = $('#'+cur.id).find('ul:first').clone(true);
    content.css(cur.menuStyle).find('li').css(cur.itemStyle).hover(
      function() {
        $(this).css(cur.itemHoverStyle);
      },
      function(){
        $(this).css(cur.itemStyle);
      }
    ).find('img').css({verticalAlign:'middle',paddingRight:'2px'});

    // Send the content to the menu
    menu.html(content);

    // if there's an onShowMenu, run it now -- must run after content has been added
		// if you try to alter the content variable before the menu.html(), IE6 has issues
		// updating the content
    if (!!cur.onShowMenu) menu = cur.onShowMenu(e, menu);

    $.each(cur.bindings, function(id, func) {
      $('#'+id, menu).bind('click', function() {
        hide();
        func(trigger, currentTarget);
      });
    });

    menu.css({'left':e[cur.eventPosX],'top':e[cur.eventPosY]}).show();
    if (cur.shadow) shadow.css({width:menu.width(),height:menu.height(),left:e.pageX+2,top:e.pageY+2}).show();
    $(document).one('click', hide);
  }

  function hide() {
    menu.hide();
    shadow.hide();
  }

  // Apply defaults
  $.contextMenu = {
    defaults : function(userDefaults) {
      $.each(userDefaults, function(i, val) {
        if (typeof val == 'object' && defaults[i]) {
          $.extend(defaults[i], val);
        }
        else defaults[i] = val;
      });
    }
  };

})(jQuery);

$(function() {
  $('div.contextMenu').hide();
});/* Plugin:      searchFilter v1.2.9
 * Author:      Kasey Speakman (kasey@cornerspeed.com)
 * License:     Dual Licensed, MIT and GPL v2 (http://www.gnu.org/licenses/gpl-2.0.html)
 *
 * REQUIREMENTS:
 *    jQuery 1.3+           (http://jquery.com/)
 *    A Themeroller Theme   (http://jqueryui.com/themeroller/)
 *
 * SECURITY WARNING
 *    You should always implement server-side checking to ensure that
 *    the query will fail when forged/invalid data is received.
 *    Clever users can send any value they want through JavaScript and HTTP POST/GET.
 *
 * THEMES
 *    Simply include the CSS file for your Themeroller theme.
 *
 * DESCRIPTION
 *     This plugin creates a new searchFilter object in the specified container
 *
 * INPUT TYPE
 *     fields:  an array of field objects. each object has the following properties:
 *              text: a string containing the display name of the field (e.g. "Field 1")
 *              itemval: a string containing the actual field name (e.g. "field1")
 *              optional properties:
 *                  ops: an array of operators in the same format as jQuery.fn.searchFilter.defaults.operators
 *                       that is: [ { op: 'gt', text: 'greater than'}, { op:'lt', text: 'less than'}, ... ]
 *                       if not specified, the passed-in options used, and failting that, jQuery.fn.searchFilter.defaults.operators will be used
 *                  *** NOTE ***
 *                  Specifying a dataUrl or dataValues property means that a <select ...> (drop-down-list) will be generated
 *                  instead of a text input <input type='text'.../> where the user would normally type in their search data
 *                  ************
 *                  dataUrl: a url that will return the html select for this field, this url will only be called once for this field
 *                  dataValues: the possible values for this field in the form [ { text: 'Data Display Text', value: 'data_actual_value' }, { ... } ]
 *                  dataInit: a function that you can use to initialize the data field. this function is passed the jQuery-fied data element
 *                  dataEvents: list of events to apply to the data element. uses $("#id").bind(type, [data], fn) to bind events to data element
 *              *** JSON of this object could look like this: ***
 *               var fields = [
 *                 {
 *                   text: 'Field Display Name',
 *                   itemval: 'field_actual_name',
 *                   // below this are optional values
 *                   ops: [ // this format is the same as jQuery.fn.searchFilter.defaults.operators
 *                     { op: 'gt', text: 'greater than' },
 *                     { op: 'lt', text: 'less than' }
 *                   ],
 *                   dataUrl: 'http://server/path/script.php?propName=propValue', // using this creates a select for the data input instead of an input type='text'
 *                   dataValues: [ // using this creates a select for the data input instead of an input type='text'
 *                     { text: 'Data Value Display Name', value: 'data_actual_value' },
 *                     { ... }
 *                   ],
 *                   dataInit: function(jElem) { jElem.datepicker(options); },
 *                   dataEvents: [ // these are the same options that you pass to $("#id").bind(type, [data], fn)
 *                     { type: 'click', data: { i: 7 }, fn: function(e) { console.log(e.data.i); } },
 *                     { type: 'keypress', fn: function(e) { console.log('keypress'); } }
 *                   ]
 *                 },
 *                 { ... }
 *               ]
 *     options: name:value properties containing various creation options
 *              see jQuery.fn.searchFilter.defaults for the overridable options
 *
 * RETURN TYPE: This plugin returns a SearchFilter object, which has additional SearchFilter methods:
 *     Methods
 *         add:    Adds a filter. added to the end of the list unless a jQuery event object or valid row number is passed.
 *         del:    Removes a filter. removed from the end of the list unless a jQuery event object or valid row number is passed.
 *         reset:  resets filters back to original state (only one blank filter), and calls onReset
 *         search: puts the search rules into an object and calls onSearch with it
 *         close:  calls the onClose event handler
 *
 * USAGE
 *     HTML
 *         <head>
 *             ...
 *             <script src="path/to/jquery.min.js" type="text/javascript"></script>
 *             <link href="path/to/themeroller.css" rel="Stylesheet" type="text/css" />
 *             <script src="path/to/jquery.searchFilter.js" type="text/javascript"></script>
 *             <link href="path/to/jquery.searchFilter.css" rel="Stylesheet" type="text/css" />
 *             ...
 *         </head>
 *         <body>
 *             ...
 *             <div id='mySearch'></div>
 *             ...
 *         </body>
 *     JQUERY
 *         Methods
 *             initializing: $("#mySearch").searchFilter([{text: "Field 1", value: "field1"},{text: "Field 2", value: "field2"}], {onSearch: myFilterRuleReceiverFn, onReset: myFilterResetFn });
 *         Manual Methods (there's no need to call these methods unless you are trying to manipulate searchFilter with script)
 *             add:          $("#mySearch").searchFilter().add();     // appends a blank filter
 *                           $("#mySearch").searchFilter().add(0);    // copies the first filter as second
 *             del:          $("#mySearch").searchFilter().del();     // removes the bottom filter
 *                           $("#mySearch").searchFilter().del(1);    // removes the second filter
 *             search:       $("#mySearch").searchFilter().search();  // invokes onSearch, passing it a ruleGroup object
 *             reset:        $("#mySearch").searchFilter().reset();   // resets rules and invokes onReset
 *             close:        $("#mySearch").searchFilter().close();   // without an onClose handler, equivalent to $("#mySearch").hide();
 * 
 * NOTE: You can get the jQuery object back from the SearchFilter object by chaining .$
 *     Example
 *         $("#mySearch").searchFilter().add().add().reset().$.hide();
 *     Verbose Example
 *         $("#mySearch")      // gets jQuery object for the HTML element with id="mySearch"
 *             .searchFilter() // gets the SearchFilter object for an existing search filter
 *             .add()          // adds a new filter to the end of the list
 *             .add()          // adds another new filter to the end of the list
 *             .reset()        // resets filters back to original state, triggers onReset
 *             .$              // returns jQuery object for $("#mySearch")
 *             .hide();        // equivalent to $("#mySearch").hide();
 */

jQuery.fn.searchFilter = function(fields, options) {

    function SearchFilter(jQ, fields, options) {


        //---------------------------------------------------------------
        // PUBLIC VARS
        //---------------------------------------------------------------

        this.$ = jQ; // makes the jQuery object available as .$ from the return value


        //---------------------------------------------------------------
        // PUBLIC FUNCTIONS
        //---------------------------------------------------------------

        this.add = function(i) {
            if (i == null) jQ.find(".ui-add-last").click();
            else jQ.find(".sf:eq(" + i + ") .ui-add").click();
            return this;
        };

        this.del = function(i) {
            if (i == null) jQ.find(".sf:last .ui-del").click();
            else jQ.find(".sf:eq(" + i + ") .ui-del").click();
            return this;
        };

        this.search = function(e) {
            jQ.find(".ui-search").click();
            return this;
        };

        this.reset = function(o) {
            if(o===undefined) o = false;
            jQ.find(".ui-reset").trigger('click',[o]);
            return this;
        };

        this.close = function() {
            jQ.find(".ui-closer").click();
            return this;
        };



        //---------------------------------------------------------------
        // "CONSTRUCTOR" (in air quotes)
        //---------------------------------------------------------------

        if (fields != null) { // type coercion matches undefined as well as null


            //---------------------------------------------------------------
            // UTILITY FUNCTIONS
            //---------------------------------------------------------------

            function hover() {
                jQuery(this).toggleClass("ui-state-hover");
                return false;
            }

            function active(e) {
                jQuery(this).toggleClass("ui-state-active", (e.type == "mousedown"));
                return false;
            }

            function buildOpt(value, text) {
                return "<option value='" + value + "'>" + text + "</option>";
            }

            function buildSel(className, options, isHidden) {
                return "<select class='" + className + "'" + (isHidden ? " style='display:none;'" : "") + ">" + options + "</select>";
            }

            function initData(selector, fn) {
                var jElem = jQ.find("tr.sf td.data " + selector);
                if (jElem[0] != null)
                    fn(jElem);
            }

            function bindDataEvents(selector, events) {
                var jElem = jQ.find("tr.sf td.data " + selector);
                if (jElem[0] != null) {
                    jQuery.each(events, function() {
                        if (this.data != null)
                            jElem.bind(this.type, this.data, this.fn);
                        else
                            jElem.bind(this.type, this.fn);
                    });
                }
            }


            //---------------------------------------------------------------
            // SUPER IMPORTANT PRIVATE VARS
            //---------------------------------------------------------------

            // copies jQuery.fn.searchFilter.defaults.options properties onto an empty object, then options onto that
            var opts = jQuery.extend({}, jQuery.fn.searchFilter.defaults, options);

            // this is keeps track of the last asynchronous setup
            var highest_late_setup = -1;


            //---------------------------------------------------------------
            // CREATION PROCESS STARTS
            //---------------------------------------------------------------

            // generate the global ops
            var gOps_html = "";
            jQuery.each(opts.groupOps, function() { gOps_html += buildOpt(this.op, this.text); });
            gOps_html = "<select name='groupOp'>" + gOps_html + "</select>";

            /* original content - doesn't minify very well
            jQ
            .html("") // clear any old content
            .addClass("ui-searchFilter") // add classes
            .append( // add content
            "\
            <div class='ui-widget-overlay' style='z-index: -1'>&nbsp;</div>\
            <table class='ui-widget-content ui-corner-all'>\
            <thead>\
            <tr>\
            <td colspan='5' class='ui-widget-header ui-corner-all' style='line-height: 18px;'>\
            <div class='ui-closer ui-state-default ui-corner-all ui-helper-clearfix' style='float: right;'>\
            <span class='ui-icon ui-icon-close'></span>\
            </div>\
            " + opts.windowTitle + "\
            </td>\
            </tr>\
            </thead>\
            <tbody>\
            <tr class='sf'>\
            <td class='fields'></td>\
            <td class='ops'></td>\
            <td class='data'></td>\
            <td><div class='ui-del ui-state-default ui-corner-all'><span class='ui-icon ui-icon-minus'></span></div></td>\
            <td><div class='ui-add ui-state-default ui-corner-all'><span class='ui-icon ui-icon-plus'></span></div></td>\
            </tr>\
            <tr>\
            <td colspan='5' class='divider'><div>&nbsp;</div></td>\
            </tr>\
            </tbody>\
            <tfoot>\
            <tr>\
            <td colspan='3'>\
            <span class='ui-reset ui-state-default ui-corner-all' style='display: inline-block; float: left;'><span class='ui-icon ui-icon-arrowreturnthick-1-w' style='float: left;'></span><span style='line-height: 18px; padding: 0 7px 0 3px;'>" + opts.resetText + "</span></span>\
            <span class='ui-search ui-state-default ui-corner-all' style='display: inline-block; float: right;'><span class='ui-icon ui-icon-search' style='float: left;'></span><span style='line-height: 18px; padding: 0 7px 0 3px;'>" + opts.searchText + "</span></span>\
            <span class='matchText'>" + opts.matchText + "</span> \
            " + gOps_html + " \
            <span class='rulesText'>" + opts.rulesText + "</span>\
            </td>\
            <td>&nbsp;</td>\
            <td><div class='ui-add-last ui-state-default ui-corner-all'><span class='ui-icon ui-icon-plusthick'></span></div></td>\
            </tr>\
            </tfoot>\
            </table>\
            ");
            /* end hard-to-minify code */
            /* begin easier to minify code */
            jQ.html("").addClass("ui-searchFilter").append("<div class='ui-widget-overlay' style='z-index: -1'>&#160;</div><table class='ui-widget-content ui-corner-all'><thead><tr><td colspan='5' class='ui-widget-header ui-corner-all' style='line-height: 18px;'><div class='ui-closer ui-state-default ui-corner-all ui-helper-clearfix' style='float: right;'><span class='ui-icon ui-icon-close'></span></div>" + opts.windowTitle + "</td></tr></thead><tbody><tr class='sf'><td class='fields'></td><td class='ops'></td><td class='data'></td><td><div class='ui-del ui-state-default ui-corner-all'><span class='ui-icon ui-icon-minus'></span></div></td><td><div class='ui-add ui-state-default ui-corner-all'><span class='ui-icon ui-icon-plus'></span></div></td></tr><tr><td colspan='5' class='divider'><hr class='ui-widget-content' style='margin:1px'/></td></tr></tbody><tfoot><tr><td colspan='3'><span class='ui-reset ui-state-default ui-corner-all' style='display: inline-block; float: left;'><span class='ui-icon ui-icon-arrowreturnthick-1-w' style='float: left;'></span><span style='line-height: 18px; padding: 0 7px 0 3px;'>" + opts.resetText + "</span></span><span class='ui-search ui-state-default ui-corner-all' style='display: inline-block; float: right;'><span class='ui-icon ui-icon-search' style='float: left;'></span><span style='line-height: 18px; padding: 0 7px 0 3px;'>" + opts.searchText + "</span></span><span class='matchText'>" + opts.matchText + "</span> " + gOps_html + " <span class='rulesText'>" + opts.rulesText + "</span></td><td>&#160;</td><td><div class='ui-add-last ui-state-default ui-corner-all'><span class='ui-icon ui-icon-plusthick'></span></div></td></tr></tfoot></table>");
            /* end easier-to-minify code */

            var jRow = jQ.find("tr.sf");
            var jFields = jRow.find("td.fields");
            var jOps = jRow.find("td.ops");
            var jData = jRow.find("td.data");

            // generate the defaults
            var default_ops_html = "";
            jQuery.each(opts.operators, function() { default_ops_html += buildOpt(this.op, this.text); });
            default_ops_html = buildSel("default", default_ops_html, true);
            jOps.append(default_ops_html);
            var default_data_html = "<input type='text' class='default' style='display:none;' />";
            jData.append(default_data_html);

            // generate the field list as a string
            var fields_html = "";
            var has_custom_ops = false;
            var has_custom_data = false;
            jQuery.each(fields, function(i) {
                var field_num = i;
                fields_html += buildOpt(this.itemval, this.text);
                // add custom ops if they exist
                if (this.ops != null) {
                    has_custom_ops = true;
                    var custom_ops = "";
                    jQuery.each(this.ops, function() { custom_ops += buildOpt(this.op, this.text); });
                    custom_ops = buildSel("field" + field_num, custom_ops, true);
                    jOps.append(custom_ops);
                }
                // add custom data if it is given
                if (this.dataUrl != null) {
                    if (i > highest_late_setup) highest_late_setup = i;
                    has_custom_data = true;
                    var dEvents = this.dataEvents;
                    var iEvent = this.dataInit;
                    var bs = this.buildSelect;
                    jQuery.ajax(jQuery.extend({
                        url : this.dataUrl,
                        complete: function(data) {
                            var $d;
                            if(bs != null) $d =jQuery("<div />").append(bs(data));
                            else $d = jQuery("<div />").append(data.responseText);
                            $d.find("select").addClass("field" + field_num).hide();
                            jData.append($d.html());
                            if (iEvent) initData(".field" + i, iEvent);
                            if (dEvents) bindDataEvents(".field" + i, dEvents);
                            if (i == highest_late_setup) { // change should get called no more than twice when this searchFilter is constructed
                                jQ.find("tr.sf td.fields select[name='field']").change();
                            }
                        }
                    },opts.ajaxSelectOptions));
                } else if (this.dataValues != null) {
                    has_custom_data = true;
                    var custom_data = "";
                    jQuery.each(this.dataValues, function() { custom_data += buildOpt(this.value, this.text); });
                    custom_data = buildSel("field" + field_num, custom_data, true);
                    jData.append(custom_data);
                } else if (this.dataEvents != null || this.dataInit != null) {
                    has_custom_data = true;
                    var custom_data = "<input type='text' class='field" + field_num + "' />";
                    jData.append(custom_data);
                }
                // attach events to data if they exist
                if (this.dataInit != null && i != highest_late_setup)
                    initData(".field" + i, this.dataInit);
                if (this.dataEvents != null && i != highest_late_setup)
                    bindDataEvents(".field" + i, this.dataEvents);
            });
            fields_html = "<select name='field'>" + fields_html + "</select>";
            jFields.append(fields_html);

            // setup the field select with an on-change event if there are custom ops or data
            var jFSelect = jFields.find("select[name='field']");
            if (has_custom_ops) jFSelect.change(function(e) {
                var index = e.target.selectedIndex;
                var td = jQuery(e.target).parents("tr.sf").find("td.ops");
                td.find("select").removeAttr("name").hide(); // disown and hide all elements
                var jElem = td.find(".field" + index);
                if (jElem[0] == null) jElem = td.find(".default"); // if there's not an element for that field, use the default one
                jElem.attr("name", "op").show();
                return false;
            });
            else jOps.find(".default").attr("name", "op").show();
            if (has_custom_data) jFSelect.change(function(e) {
                var index = e.target.selectedIndex;
                var td = jQuery(e.target).parents("tr.sf").find("td.data");
                td.find("select,input").removeClass("vdata").hide(); // disown and hide all elements
                var jElem = td.find(".field" + index);
                if (jElem[0] == null) jElem = td.find(".default"); // if there's not an element for that field, use the default one
                jElem.show().addClass("vdata");
                return false;
            });
            else jData.find(".default").show().addClass("vdata");
            // go ahead and call the change event and setup the ops and data values
            if (has_custom_ops || has_custom_data) jFSelect.change();

            // bind events
            jQ.find(".ui-state-default").hover(hover, hover).mousedown(active).mouseup(active); // add hover/active effects to all buttons
            jQ.find(".ui-closer").click(function(e) {
                opts.onClose(jQuery(jQ.selector));
                return false;
            });
            jQ.find(".ui-del").click(function(e) {
                var row = jQuery(e.target).parents(".sf");
                if (row.siblings(".sf").length > 0) { // doesn't remove if there's only one filter left
                    if (opts.datepickerFix === true && jQuery.fn.datepicker !== undefined)
                        row.find(".hasDatepicker").datepicker("destroy"); // clean up datepicker's $.data mess
                    row.remove(); // also unbinds
                } else { // resets the filter if it's the last one
                    row.find("select[name='field']")[0].selectedIndex = 0;
                    row.find("select[name='op']")[0].selectedIndex = 0;
                    row.find(".data input").val(""); // blank all input values
                    row.find(".data select").each(function() { this.selectedIndex = 0; }); // select first option on all selects
                    row.find("select[name='field']").change(function(event){event.stopPropagation();}); // trigger any change events
                }
                return false;
            });
            jQ.find(".ui-add").click(function(e) {
                var row = jQuery(e.target).parents(".sf");
                var newRow = row.clone(true).insertAfter(row);
                newRow.find(".ui-state-default").removeClass("ui-state-hover ui-state-active");
                if (opts.clone) {
                    newRow.find("select[name='field']")[0].selectedIndex = row.find("select[name='field']")[0].selectedIndex;
                    var stupid_browser = (newRow.find("select[name='op']")[0] == null); // true for IE6
                    if (!stupid_browser)
                        newRow.find("select[name='op']").focus()[0].selectedIndex = row.find("select[name='op']")[0].selectedIndex;
                    var jElem = newRow.find("select.vdata");
                    if (jElem[0] != null) // select doesn't copy it's selected index when cloned
                        jElem[0].selectedIndex = row.find("select.vdata")[0].selectedIndex;
                } else {
                    newRow.find(".data input").val(""); // blank all input values
                    newRow.find("select[name='field']").focus();
                }
                if (opts.datepickerFix === true && jQuery.fn.datepicker !== undefined) { // using $.data to associate data with document elements is Not Good
                    row.find(".hasDatepicker").each(function() {
                        var settings = jQuery.data(this, "datepicker").settings;
                        newRow.find("#" + this.id).unbind().removeAttr("id").removeClass("hasDatepicker").datepicker(settings);
                    });
                }
                newRow.find("select[name='field']").change(function(event){event.stopPropagation();} );
                return false;
            });
            jQ.find(".ui-search").click(function(e) {
                var ui = jQuery(jQ.selector); // pointer to search box wrapper element
                var ruleGroup;
                var group_op = ui.find("select[name='groupOp'] :selected").val(); // puls "AND" or "OR"
                if (!opts.stringResult) {
                    ruleGroup = {
                        groupOp: group_op,
                        rules: []
                    };
                } else {
                    ruleGroup = "{\"groupOp\":\"" + group_op + "\",\"rules\":[";
                }
                ui.find(".sf").each(function(i) {
                    var tField = jQuery(this).find("select[name='field'] :selected").val();
                    var tOp = jQuery(this).find("select[name='op'] :selected").val();
                    var tData = jQuery(this).find("input.vdata,select.vdata :selected").val();
                    tData += "";
                    if (!opts.stringResult) {
                        ruleGroup.rules.push({
                            field: tField,
                            op: tOp,
                            data: tData
                        });
                    } else {
						tData = tData.replace(/\\/g,'\\\\').replace(/\"/g,'\\"');
                        if (i > 0) ruleGroup += ",";
                        ruleGroup += "{\"field\":\"" + tField + "\",";
                        ruleGroup += "\"op\":\"" + tOp + "\",";
                        ruleGroup += "\"data\":\"" + tData + "\"}";
                    }
                });
                if (opts.stringResult) ruleGroup += "]}";
                opts.onSearch(ruleGroup);
                return false;
            });
            jQ.find(".ui-reset").click(function(e,op) {
                var ui = jQuery(jQ.selector);
                ui.find(".ui-del").click(); // removes all filters, resets the last one
                ui.find("select[name='groupOp']")[0].selectedIndex = 0; // changes the op back to the default one
                opts.onReset(op);
                return false;
            });
            jQ.find(".ui-add-last").click(function() {
                var row = jQuery(jQ.selector + " .sf:last");
                var newRow = row.clone(true).insertAfter(row);
                newRow.find(".ui-state-default").removeClass("ui-state-hover ui-state-active");
                newRow.find(".data input").val(""); // blank all input values
                newRow.find("select[name='field']").focus();
                if (opts.datepickerFix === true && jQuery.fn.datepicker !== undefined) { // using $.data to associate data with document elements is Not Good
                    row.find(".hasDatepicker").each(function() {
                        var settings = jQuery.data(this, "datepicker").settings;
                        newRow.find("#" + this.id).unbind().removeAttr("id").removeClass("hasDatepicker").datepicker(settings);
                    });
                }
                newRow.find("select[name='field']").change(function(event){event.stopPropagation();});
                return false;
            });

            this.setGroupOp = function(setting) {
                /* a "setter" for groupping argument.
                 *  ("AND" or "OR")
                 *
                 * Inputs:
                 *  setting - a string
                 *
                 * Returns:
                 *  Does not return anything. May add success / failure reporting in future versions.
                 *
                 *  author: Daniel Dotsenko (dotsa@hotmail.com)
                 */
                selDOMobj = jQ.find("select[name='groupOp']")[0];
                var indexmap = {}, l = selDOMobj.options.length, i;
                for (i=0; i<l; i++) {
                    indexmap[selDOMobj.options[i].value] = i;
                }
                selDOMobj.selectedIndex = indexmap[setting];
                jQuery(selDOMobj).change(function(event){event.stopPropagation();});
            };

            this.setFilter = function(settings) {
                /* a "setter" for an arbitrary SearchFilter's filter line.
                 * designed to abstract the DOM manipulations required to infer
                 * a particular filter is a fit to the search box.
                 *
                 * Inputs:
                 *  settings - an "object" (dictionary)
                 *   index (optional*) (to be implemented in the future) : signed integer index (from top to bottom per DOM) of the filter line to fill.
                 *           Negative integers (rooted in -1 and lower) denote position of the line from the bottom.
                 *   sfref (optional*) : DOM object referencing individual '.sf' (normally a TR element) to be populated. (optional)
                 *   filter (mandatory) : object (dictionary) of form {'field':'field_value','op':'op_value','data':'data value'}
                 *
                 * * It is mandatory to have either index or sfref defined.
                 *
                 * Returns:
                 *  Does not return anything. May add success / failure reporting in future versions.
                 *
                 *  author: Daniel Dotsenko (dotsa@hotmail.com)
                 */

                var o = settings['sfref'], filter = settings['filter'];
                
                // setting up valueindexmap that we will need to manipulate SELECT elements.
                var fields = [], i, j , l, lj, li,
                    valueindexmap = {};
                    // example of valueindexmap:
                    // {'field1':{'index':0,'ops':{'eq':0,'ne':1}},'fieldX':{'index':1,'ops':{'eq':0,'ne':1},'data':{'true':0,'false':1}}},
                    // if data is undefined it's a INPUT field. If defined, it's SELECT
                selDOMobj = o.find("select[name='field']")[0];
                for (i=0, l=selDOMobj.options.length; i<l; i++) {
                    valueindexmap[selDOMobj.options[i].value] = {'index':i,'ops':{}};
                    fields.push(selDOMobj.options[i].value);
                }
                for (i=0, li=fields.length; i < li; i++) {
                    selDOMobj = o.find(".ops > select[class='field"+i+"']")[0];
                    if (selDOMobj) {
                        for (j=0, lj=selDOMobj.options.length; j<lj; j++) {
                            valueindexmap[fields[i]]['ops'][selDOMobj.options[j].value] = j;
                        }
                    }
                    selDOMobj = o.find(".data > select[class='field"+i+"']")[0];
                    if (selDOMobj) {
                        valueindexmap[fields[i]]['data'] = {}; // this setting is the flag that 'data' is contained in a SELECT
                        for (j=0, lj=selDOMobj.options.length; j<lj; j++) {
                            valueindexmap[fields[i]]['data'][selDOMobj.options[j].value] = j;
                        }
                    }
                } // done populating valueindexmap

                // preparsing the index values for SELECT elements.
                var fieldvalue, fieldindex, opindex, datavalue, dataindex;
                fieldvalue = filter['field'];
				if (valueindexmap[fieldvalue]) {
					fieldindex = valueindexmap[fieldvalue]['index'];
				}
                if (fieldindex != null) {
                    opindex = valueindexmap[fieldvalue]['ops'][filter['op']];
                    if(opindex === undefined) {
                        for(i=0,li=options.operators.length; i<li;i++) {
                            if(options.operators[i].op == filter.op ){
                                opindex = i;
                                break;
                            }
                        }
                    }
                    datavalue = filter['data'];
                    if (valueindexmap[fieldvalue]['data'] == null) {
                        dataindex = -1; // 'data' is not SELECT, Making the var 'defined'
                    } else {
                        dataindex = valueindexmap[fieldvalue]['data'][datavalue]; // 'undefined' may come from here.
                    }
                }
                // only if values for 'field' and 'op' and 'data' are 'found' in mapping...
                if (fieldindex != null && opindex != null && dataindex != null) {
                    o.find("select[name='field']")[0].selectedIndex = fieldindex;
                    o.find("select[name='field']").change();
                    o.find("select[name='op']")[0].selectedIndex = opindex;
                    o.find("input.vdata").val(datavalue); // if jquery does not find any INPUT, it does not set any. This means we deal with SELECT
                    o = o.find("select.vdata")[0];
                    if (o) {
                        o.selectedIndex = dataindex;
                    }
					return true
                } else {
					return false
				}
            }; // end of this.setFilter fn
        } // end of if fields != null
    }
    return new SearchFilter(this, fields, options);
};

jQuery.fn.searchFilter.version = '1.2.9';

/* This property contains the default options */
jQuery.fn.searchFilter.defaults = {

    /*
     * PROPERTY
     * TYPE:        boolean 
     * DESCRIPTION: clone a row if it is added from an existing row
     *              when false, any new added rows will be blank.
     */
    clone: true,

    /*
     * PROPERTY
     * TYPE:        boolean 
     * DESCRIPTION: current version of datepicker uses a data store,
     *              which is incompatible with $().clone(true)
     */
    datepickerFix: true,

    /*
     * FUNCTION
     * DESCRIPTION: the function that will be called when the user clicks Reset
     * INPUT TYPE:  JS object if stringResult is false, otherwise is JSON string
     */
    onReset: function(data) { alert("Reset Clicked. Data Returned: " + data) },

    /*
     * FUNCTION
     * DESCRIPTION: the function that will be called when the user clicks Search
     * INPUT TYPE:  JS object if stringResult is false, otherwise is JSON string
     */
    onSearch: function(data) { alert("Search Clicked. Data Returned: " + data) },

    /*
     * FUNCTION
     * DESCRIPTION: the function that will be called when the user clicks the Closer icon
     *              or the close() function is called
     *              if left null, it simply does a .hide() on the searchFilter
     * INPUT TYPE:  a jQuery object for the searchFilter
     */
    onClose: function(jElem) { jElem.hide(); },

    /* 
     * PROPERTY
     * TYPE:        array of objects, each object has the properties op and text 
     * DESCRIPTION: the selectable operators that are applied between rules
     *              e.g. for {op:"AND", text:"all"}
     *                  the search filter box will say: match all rules
     *                  the server should interpret this as putting the AND op between each rule:
     *                      rule1 AND rule2 AND rule3
     *              text will be the option text, and op will be the option value
     */
    groupOps: [
        { op: "AND", text: "all" },
        { op: "OR",  text: "any" }
    ],


    /* 
     * PROPERTY
     * TYPE:        array of objects, each object has the properties op and text 
     * DESCRIPTION: the operators that will appear as drop-down options
     *              text will be the option text, and op will be the option value
     */
    operators: [
        { op: "eq", text: "is equal to" },
        { op: "ne", text: "is not equal to" },
        { op: "lt", text: "is less than" },
        { op: "le", text: "is less or equal to" },
        { op: "gt", text: "is greater than" },
        { op: "ge", text: "is greater or equal to" },
        { op: "in", text: "is in" },
        { op: "ni", text: "is not in" },
        { op: "bw", text: "begins with" },
        { op: "bn", text: "does not begin with" },
        { op: "ew", text: "ends with" },
        { op: "en", text: "does not end with" },
        { op: "cn", text: "contains" },
        { op: "nc", text: "does not contain" }
    ],

    /*
     * PROPERTY
     * TYPE:        string
     * DESCRIPTION: part of the phrase: _match_ ANY/ALL rules
     */
    matchText: "match",

    /*
     * PROPERTY
     * TYPE:        string
     * DESCRIPTION: part of the phrase: match ANY/ALL _rules_
     */
    rulesText: "rules",

    /*
     * PROPERTY
     * TYPE:        string
     * DESCRIPTION: the text that will be displayed in the reset button
     */
    resetText: "Reset",
    
    /*
     * PROPERTY
     * TYPE:        string
     * DESCRIPTION: the text that will be displayed in the search button
     */
    searchText: "Search",
    
    /*
     * PROPERTY
     * TYPE:        boolean
     * DESCRIPTION: a flag that, when set, will make the onSearch and onReset return strings instead of objects
     */
    stringResult: true,    
    
    /*
     * PROPERTY
     * TYPE:        string
     * DESCRIPTION: the title of the searchFilter window
     */
    windowTitle: "Search Rules",
    /*
     * PROPERTY
     * TYPE:        object
     * DESCRIPTION: options to extend the ajax request
     */
    ajaxSelectOptions : {}
}; /* end of searchFilter *//**
 * TableDnD plug-in for JQuery, allows you to drag and drop table rows
 * You can set up various options to control how the system will work
 * Copyright (c) Denis Howlett <denish@isocra.com>
 * Licensed like jQuery, see http://docs.jquery.com/License.
 *
 * Configuration options:
 * 
 * onDragStyle
 *     This is the style that is assigned to the row during drag. There are limitations to the styles that can be
 *     associated with a row (such as you can't assign a border--well you can, but it won't be
 *     displayed). (So instead consider using onDragClass.) The CSS style to apply is specified as
 *     a map (as used in the jQuery css(...) function).
 * onDropStyle
 *     This is the style that is assigned to the row when it is dropped. As for onDragStyle, there are limitations
 *     to what you can do. Also this replaces the original style, so again consider using onDragClass which
 *     is simply added and then removed on drop.
 * onDragClass
 *     This class is added for the duration of the drag and then removed when the row is dropped. It is more
 *     flexible than using onDragStyle since it can be inherited by the row cells and other content. The default
 *     is class is tDnD_whileDrag. So to use the default, simply customise this CSS class in your
 *     stylesheet.
 * onDrop
 *     Pass a function that will be called when the row is dropped. The function takes 2 parameters: the table
 *     and the row that was dropped. You can work out the new order of the rows by using
 *     table.rows.
 * onDragStart
 *     Pass a function that will be called when the user starts dragging. The function takes 2 parameters: the
 *     table and the row which the user has started to drag.
 * onAllowDrop
 *     Pass a function that will be called as a row is over another row. If the function returns true, allow 
 *     dropping on that row, otherwise not. The function takes 2 parameters: the dragged row and the row under
 *     the cursor. It returns a boolean: true allows the drop, false doesn't allow it.
 * scrollAmount
 *     This is the number of pixels to scroll if the user moves the mouse cursor to the top or bottom of the
 *     window. The page should automatically scroll up or down as appropriate (tested in IE6, IE7, Safari, FF2,
 *     FF3 beta
 * dragHandle
 *     This is the name of a class that you assign to one or more cells in each row that is draggable. If you
 *     specify this class, then you are responsible for setting cursor: move in the CSS and only these cells
 *     will have the drag behaviour. If you do not specify a dragHandle, then you get the old behaviour where
 *     the whole row is draggable.
 * 
 * Other ways to control behaviour:
 *
 * Add class="nodrop" to any rows for which you don't want to allow dropping, and class="nodrag" to any rows
 * that you don't want to be draggable.
 *
 * Inside the onDrop method you can also call $.tableDnD.serialize() this returns a string of the form
 * <tableID>[]=<rowID1>&<tableID>[]=<rowID2> so that you can send this back to the server. The table must have
 * an ID as must all the rows.
 *
 * Other methods:
 *
 * $("...").tableDnDUpdate() 
 * Will update all the matching tables, that is it will reapply the mousedown method to the rows (or handle cells).
 * This is useful if you have updated the table rows using Ajax and you want to make the table draggable again.
 * The table maintains the original configuration (so you don't have to specify it again).
 *
 * $("...").tableDnDSerialize()
 * Will serialize and return the serialized string as above, but for each of the matching tables--so it can be
 * called from anywhere and isn't dependent on the currentTable being set up correctly before calling
 *
 * Known problems:
 * - Auto-scoll has some problems with IE7  (it scrolls even when it shouldn't), work-around: set scrollAmount to 0
 * 
 * Version 0.2: 2008-02-20 First public version
 * Version 0.3: 2008-02-07 Added onDragStart option
 *                         Made the scroll amount configurable (default is 5 as before)
 * Version 0.4: 2008-03-15 Changed the noDrag/noDrop attributes to nodrag/nodrop classes
 *                         Added onAllowDrop to control dropping
 *                         Fixed a bug which meant that you couldn't set the scroll amount in both directions
 *                         Added serialize method
 * Version 0.5: 2008-05-16 Changed so that if you specify a dragHandle class it doesn't make the whole row
 *                         draggable
 *                         Improved the serialize method to use a default (and settable) regular expression.
 *                         Added tableDnDupate() and tableDnDSerialize() to be called when you are outside the table
 */
jQuery.tableDnD = {
    /** Keep hold of the current table being dragged */
    currentTable : null,
    /** Keep hold of the current drag object if any */
    dragObject: null,
    /** The current mouse offset */
    mouseOffset: null,
    /** Remember the old value of Y so that we don't do too much processing */
    oldY: 0,

    /** Actually build the structure */
    build: function(options) {
        // Set up the defaults if any

        this.each(function() {
            // This is bound to each matching table, set up the defaults and override with user options
            this.tableDnDConfig = jQuery.extend({
                onDragStyle: null,
                onDropStyle: null,
				// Add in the default class for whileDragging
				onDragClass: "tDnD_whileDrag",
                onDrop: null,
                onDragStart: null,
                scrollAmount: 5,
				serializeRegexp: /[^\-]*$/, // The regular expression to use to trim row IDs
				serializeParamName: null, // If you want to specify another parameter name instead of the table ID
                dragHandle: null // If you give the name of a class here, then only Cells with this class will be draggable
            }, options || {});
            // Now make the rows draggable
            jQuery.tableDnD.makeDraggable(this);
        });

        // Now we need to capture the mouse up and mouse move event
        // We can use bind so that we don't interfere with other event handlers
        jQuery(document)
            .bind('mousemove', jQuery.tableDnD.mousemove)
            .bind('mouseup', jQuery.tableDnD.mouseup);

        // Don't break the chain
        return this;
    },

    /** This function makes all the rows on the table draggable apart from those marked as "NoDrag" */
    makeDraggable: function(table) {
        var config = table.tableDnDConfig;
		if (table.tableDnDConfig.dragHandle) {
			// We only need to add the event to the specified cells
			var cells = jQuery("td."+table.tableDnDConfig.dragHandle, table);
			cells.each(function() {
				// The cell is bound to "this"
                jQuery(this).mousedown(function(ev) {
                    jQuery.tableDnD.dragObject = this.parentNode;
                    jQuery.tableDnD.currentTable = table;
                    jQuery.tableDnD.mouseOffset = jQuery.tableDnD.getMouseOffset(this, ev);
                    if (config.onDragStart) {
                        // Call the onDrop method if there is one
                        config.onDragStart(table, this);
                    }
                    return false;
                });
			})
		} else {
			// For backwards compatibility, we add the event to the whole row
	        var rows = jQuery("tr", table); // get all the rows as a wrapped set
	        rows.each(function() {
				// Iterate through each row, the row is bound to "this"
				var row = jQuery(this);
				if (! row.hasClass("nodrag")) {
	                row.mousedown(function(ev) {
	                    if (ev.target.tagName == "TD") {
	                        jQuery.tableDnD.dragObject = this;
	                        jQuery.tableDnD.currentTable = table;
	                        jQuery.tableDnD.mouseOffset = jQuery.tableDnD.getMouseOffset(this, ev);
	                        if (config.onDragStart) {
	                            // Call the onDrop method if there is one
	                            config.onDragStart(table, this);
	                        }
	                        return false;
	                    }
	                }).css("cursor", "move"); // Store the tableDnD object
				}
			});
		}
	},

	updateTables: function() {
		this.each(function() {
			// this is now bound to each matching table
			if (this.tableDnDConfig) {
				jQuery.tableDnD.makeDraggable(this);
			}
		})
	},

    /** Get the mouse coordinates from the event (allowing for browser differences) */
    mouseCoords: function(ev){
        if(ev.pageX || ev.pageY){
            return {x:ev.pageX, y:ev.pageY};
        }
        return {
            x:ev.clientX + document.body.scrollLeft - document.body.clientLeft,
            y:ev.clientY + document.body.scrollTop  - document.body.clientTop
        };
    },

    /** Given a target element and a mouse event, get the mouse offset from that element.
        To do this we need the element's position and the mouse position */
    getMouseOffset: function(target, ev) {
        ev = ev || window.event;

        var docPos    = this.getPosition(target);
        var mousePos  = this.mouseCoords(ev);
        return {x:mousePos.x - docPos.x, y:mousePos.y - docPos.y};
    },

    /** Get the position of an element by going up the DOM tree and adding up all the offsets */
    getPosition: function(e){
        var left = 0;
        var top  = 0;
        /** Safari fix -- thanks to Luis Chato for this! */
        if (e.offsetHeight == 0) {
            /** Safari 2 doesn't correctly grab the offsetTop of a table row
            this is detailed here:
            http://jacob.peargrove.com/blog/2006/technical/table-row-offsettop-bug-in-safari/
            the solution is likewise noted there, grab the offset of a table cell in the row - the firstChild.
            note that firefox will return a text node as a first child, so designing a more thorough
            solution may need to take that into account, for now this seems to work in firefox, safari, ie */
            e = e.firstChild; // a table cell
        }
		if (e && e.offsetParent) {
        	while (e.offsetParent){
            	left += e.offsetLeft;
            	top  += e.offsetTop;
            	e     = e.offsetParent;
        	}

        	left += e.offsetLeft;
        	top  += e.offsetTop;
        }

        return {x:left, y:top};
    },

    mousemove: function(ev) {
        if (jQuery.tableDnD.dragObject == null) {
            return;
        }

        var dragObj = jQuery(jQuery.tableDnD.dragObject);
        var config = jQuery.tableDnD.currentTable.tableDnDConfig;
        var mousePos = jQuery.tableDnD.mouseCoords(ev);
        var y = mousePos.y - jQuery.tableDnD.mouseOffset.y;
        //auto scroll the window
	    var yOffset = window.pageYOffset;
	 	if (document.all) {
	        // Windows version
	        //yOffset=document.body.scrollTop;
	        if (typeof document.compatMode != 'undefined' &&
	             document.compatMode != 'BackCompat') {
	           yOffset = document.documentElement.scrollTop;
	        }
	        else if (typeof document.body != 'undefined') {
	           yOffset=document.body.scrollTop;
	        }

	    }
		    
		if (mousePos.y-yOffset < config.scrollAmount) {
	    	window.scrollBy(0, -config.scrollAmount);
	    } else {
            var windowHeight = window.innerHeight ? window.innerHeight
                    : document.documentElement.clientHeight ? document.documentElement.clientHeight : document.body.clientHeight;
            if (windowHeight-(mousePos.y-yOffset) < config.scrollAmount) {
                window.scrollBy(0, config.scrollAmount);
            }
        }


        if (y != jQuery.tableDnD.oldY) {
            // work out if we're going up or down...
            var movingDown = y > jQuery.tableDnD.oldY;
            // update the old value
            jQuery.tableDnD.oldY = y;
            // update the style to show we're dragging
			if (config.onDragClass) {
				dragObj.addClass(config.onDragClass);
			} else {
	            dragObj.css(config.onDragStyle);
			}
            // If we're over a row then move the dragged row to there so that the user sees the
            // effect dynamically
            var currentRow = jQuery.tableDnD.findDropTargetRow(dragObj, y);
            if (currentRow) {
                // TODO worry about what happens when there are multiple TBODIES
                if (movingDown && jQuery.tableDnD.dragObject != currentRow) {
                    jQuery.tableDnD.dragObject.parentNode.insertBefore(jQuery.tableDnD.dragObject, currentRow.nextSibling);
                } else if (! movingDown && jQuery.tableDnD.dragObject != currentRow) {
                    jQuery.tableDnD.dragObject.parentNode.insertBefore(jQuery.tableDnD.dragObject, currentRow);
                }
            }
        }

        return false;
    },

    /** We're only worried about the y position really, because we can only move rows up and down */
    findDropTargetRow: function(draggedRow, y) {
        var rows = jQuery.tableDnD.currentTable.rows;
        for (var i=0; i<rows.length; i++) {
            var row = rows[i];
            var rowY    = this.getPosition(row).y;
            var rowHeight = parseInt(row.offsetHeight)/2;
            if (row.offsetHeight == 0) {
                rowY = this.getPosition(row.firstChild).y;
                rowHeight = parseInt(row.firstChild.offsetHeight)/2;
            }
            // Because we always have to insert before, we need to offset the height a bit
            if ((y > rowY - rowHeight) && (y < (rowY + rowHeight))) {
                // that's the row we're over
				// If it's the same as the current row, ignore it
				if (row == draggedRow) {return null;}
                var config = jQuery.tableDnD.currentTable.tableDnDConfig;
                if (config.onAllowDrop) {
                    if (config.onAllowDrop(draggedRow, row)) {
                        return row;
                    } else {
                        return null;
                    }
                } else {
					// If a row has nodrop class, then don't allow dropping (inspired by John Tarr and Famic)
                    var nodrop = jQuery(row).hasClass("nodrop");
                    if (! nodrop) {
                        return row;
                    } else {
                        return null;
                    }
                }
                return row;
            }
        }
        return null;
    },

    mouseup: function(e) {
        if (jQuery.tableDnD.currentTable && jQuery.tableDnD.dragObject) {
            var droppedRow = jQuery.tableDnD.dragObject;
            var config = jQuery.tableDnD.currentTable.tableDnDConfig;
            // If we have a dragObject, then we need to release it,
            // The row will already have been moved to the right place so we just reset stuff
			if (config.onDragClass) {
	            jQuery(droppedRow).removeClass(config.onDragClass);
			} else {
	            jQuery(droppedRow).css(config.onDropStyle);
			}
            jQuery.tableDnD.dragObject   = null;
            if (config.onDrop) {
                // Call the onDrop method if there is one
                config.onDrop(jQuery.tableDnD.currentTable, droppedRow);
            }
            jQuery.tableDnD.currentTable = null; // let go of the table too
        }
    },

    serialize: function() {
        if (jQuery.tableDnD.currentTable) {
            return jQuery.tableDnD.serializeTable(jQuery.tableDnD.currentTable);
        } else {
            return "Error: No Table id set, you need to set an id on your table and every row";
        }
    },

	serializeTable: function(table) {
        var result = "";
        var tableId = table.id;
        var rows = table.rows;
        for (var i=0; i<rows.length; i++) {
            if (result.length > 0) result += "&";
            var rowId = rows[i].id;
            if (rowId && rowId && table.tableDnDConfig && table.tableDnDConfig.serializeRegexp) {
                rowId = rowId.match(table.tableDnDConfig.serializeRegexp)[0];
            }

            result += tableId + '[]=' + rowId;
        }
        return result;
	},

	serializeTables: function() {
        var result = "";
        this.each(function() {
			// this is now bound to each matching table
			result += jQuery.tableDnD.serializeTable(this);
		});
        return result;
    }

}

jQuery.fn.extend(
	{
		tableDnD : jQuery.tableDnD.build,
		tableDnDUpdate : jQuery.tableDnD.updateTables,
		tableDnDSerialize: jQuery.tableDnD.serializeTables
	}
);// Chosen, a Select Box Enhancer for jQuery and Protoype
// by Patrick Filler for Harvest, http://getharvest.com
// 
// Version 0.9.11
// Full source at https://github.com/harvesthq/chosen
// Copyright (c) 2011 Harvest http://getharvest.com

// MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
// This file is generated by `cake build`, do not edit it by hand.
(function(){var e;e=function(){function e(){this.options_index=0,this.parsed=[]}return e.prototype.add_node=function(e){return e.nodeName.toUpperCase()==="OPTGROUP"?this.add_group(e):this.add_option(e)},e.prototype.add_group=function(e){var t,n,r,i,s,o;t=this.parsed.length,this.parsed.push({array_index:t,group:!0,label:e.label,children:0,disabled:e.disabled}),s=e.childNodes,o=[];for(r=0,i=s.length;r<i;r++)n=s[r],o.push(this.add_option(n,t,e.disabled));return o},e.prototype.add_option=function(e,t,n){if(e.nodeName.toUpperCase()==="OPTION")return e.text!==""?(t!=null&&(this.parsed[t].children+=1),this.parsed.push({array_index:this.parsed.length,options_index:this.options_index,value:e.value,text:e.text,html:e.innerHTML,selected:e.selected,disabled:n===!0?n:e.disabled,group_array_index:t,classes:e.className,style:e.style.cssText})):this.parsed.push({array_index:this.parsed.length,options_index:this.options_index,empty:!0}),this.options_index+=1},e}(),e.select_to_array=function(t){var n,r,i,s,o;r=new e,o=t.childNodes;for(i=0,s=o.length;i<s;i++)n=o[i],r.add_node(n);return r.parsed},this.SelectParser=e}).call(this),function(){var e,t;t=this,e=function(){function e(e,t){this.form_field=e,this.options=t!=null?t:{},this.is_multiple=this.form_field.multiple,this.set_default_text(),this.set_default_values(),this.setup(),this.set_up_html(),this.register_observers(),this.finish_setup()}return e.prototype.set_default_values=function(){var e=this;return this.click_test_action=function(t){return e.test_active_click(t)},this.activate_action=function(t){return e.activate_field(t)},this.active_field=!1,this.mouse_on_container=!1,this.results_showing=!1,this.result_highlighted=null,this.result_single_selected=null,this.allow_single_deselect=this.options.allow_single_deselect!=null&&this.form_field.options[0]!=null&&this.form_field.options[0].text===""?this.options.allow_single_deselect:!1,this.disable_search_threshold=this.options.disable_search_threshold||0,this.disable_search=this.options.disable_search||!1,this.enable_split_word_search=this.options.enable_split_word_search!=null?this.options.enable_split_word_search:!0,this.search_contains=this.options.search_contains||!1,this.choices=0,this.single_backstroke_delete=this.options.single_backstroke_delete||!1,this.max_selected_options=this.options.max_selected_options||Infinity,this.inherit_select_classes=this.options.inherit_select_classes||!1},e.prototype.set_default_text=function(){return this.form_field.getAttribute("data-placeholder")?this.default_text=this.form_field.getAttribute("data-placeholder"):this.is_multiple?this.default_text=this.options.placeholder_text_multiple||this.options.placeholder_text||"Select Some Options":this.default_text=this.options.placeholder_text_single||this.options.placeholder_text||"Select an Option",this.results_none_found=this.form_field.getAttribute("data-no_results_text")||this.options.no_results_text||"No results match"},e.prototype.mouse_enter=function(){return this.mouse_on_container=!0},e.prototype.mouse_leave=function(){return this.mouse_on_container=!1},e.prototype.input_focus=function(e){var t=this;if(this.is_multiple){if(!this.active_field)return setTimeout(function(){return t.container_mousedown()},50)}else if(!this.active_field)return this.activate_field()},e.prototype.input_blur=function(e){var t=this;if(!this.mouse_on_container)return this.active_field=!1,setTimeout(function(){return t.blur_test()},100)},e.prototype.result_add_option=function(e){var t,n;return e.disabled?"":(e.dom_id=this.container_id+"_o_"+e.array_index,t=e.selected&&this.is_multiple?[]:["active-result"],e.selected&&t.push("result-selected"),e.group_array_index!=null&&t.push("group-option"),e.classes!==""&&t.push(e.classes),n=e.style.cssText!==""?' style="'+e.style+'"':"",'<li id="'+e.dom_id+'" class="'+t.join(" ")+'"'+n+">"+e.html+"</li>")},e.prototype.results_update_field=function(){return this.is_multiple||this.results_reset_cleanup(),this.result_clear_highlight(),this.result_single_selected=null,this.results_build()},e.prototype.results_toggle=function(){return this.results_showing?this.results_hide():this.results_show()},e.prototype.results_search=function(e){return this.results_showing?this.winnow_results():this.results_show()},e.prototype.keyup_checker=function(e){var t,n;t=(n=e.which)!=null?n:e.keyCode,this.search_field_scale();switch(t){case 8:if(this.is_multiple&&this.backstroke_length<1&&this.choices>0)return this.keydown_backstroke();if(!this.pending_backstroke)return this.result_clear_highlight(),this.results_search();break;case 13:e.preventDefault();if(this.results_showing)return this.result_select(e);break;case 27:return this.results_showing&&this.results_hide(),!0;case 9:case 38:case 40:case 16:case 91:case 17:break;default:return this.results_search()}},e.prototype.generate_field_id=function(){var e;return e=this.generate_random_id(),this.form_field.id=e,e},e.prototype.generate_random_char=function(){var e,t,n;return e="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",n=Math.floor(Math.random()*e.length),t=e.substring(n,n+1)},e}(),t.AbstractChosen=e}.call(this),function(){var e,t,n,r,i={}.hasOwnProperty,s=function(e,t){function r(){this.constructor=e}for(var n in t)i.call(t,n)&&(e[n]=t[n]);return r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype,e};r=this,e=jQuery,e.fn.extend({chosen:function(n){var r,i,s;return s=navigator.userAgent.toLowerCase(),i=/(msie) ([\w.]+)/.exec(s)||[],r={name:i[1]||"",version:i[2]||"0"},r.name==="msie"&&(r.version==="6.0"||r.version==="7.0"&&document.documentMode===7)?this:this.each(function(r){var i;i=e(this);if(!i.hasClass("chzn-done"))return i.data("chosen",new t(this,n))})}}),t=function(t){function i(){return i.__super__.constructor.apply(this,arguments)}return s(i,t),i.prototype.setup=function(){return this.form_field_jq=e(this.form_field),this.current_value=this.form_field_jq.val(),this.is_rtl=this.form_field_jq.hasClass("chzn-rtl")},i.prototype.finish_setup=function(){return this.form_field_jq.addClass("chzn-done")},i.prototype.set_up_html=function(){var t,r,i,s,o,u;return this.container_id=this.form_field.id.length?this.form_field.id.replace(/[^\w]/g,"_"):this.generate_field_id(),this.container_id+="_chzn",t=["chzn-container"],t.push("chzn-container-"+(this.is_multiple?"multi":"single")),this.inherit_select_classes&&this.form_field.className&&t.push(this.form_field.className),this.is_rtl&&t.push("chzn-rtl"),this.f_width=this.form_field_jq.outerWidth(),i={id:this.container_id,"class":t.join(" "),style:"width: "+this.f_width+"px;",title:this.form_field.title},r=e("<div />",i),this.is_multiple?r.html('<ul class="chzn-choices"><li class="search-field"><input type="text" value="'+this.default_text+'" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chzn-drop" style="left:-9000px;"><ul class="chzn-results"></ul></div>'):r.html('<a href="javascript:void(0)" class="chzn-single chzn-default" tabindex="-1"><span>'+this.default_text+'</span><div><b></b></div></a><div class="chzn-drop" style="left:-9000px;"><div class="chzn-search"><input type="text" autocomplete="off" /></div><ul class="chzn-results"></ul></div>'),this.form_field_jq.hide().after(r),this.container=e("#"+this.container_id),this.dropdown=this.container.find("div.chzn-drop").first(),s=this.container.height(),o=this.f_width-n(this.dropdown),this.dropdown.css({width:o+"px",top:s+"px"}),this.search_field=this.container.find("input").first(),this.search_results=this.container.find("ul.chzn-results").first(),this.search_field_scale(),this.search_no_results=this.container.find("li.no-results").first(),this.is_multiple?(this.search_choices=this.container.find("ul.chzn-choices").first(),this.search_container=this.container.find("li.search-field").first()):(this.search_container=this.container.find("div.chzn-search").first(),this.selected_item=this.container.find(".chzn-single").first(),u=o-n(this.search_container)-n(this.search_field),this.search_field.css({width:u+"px"})),this.results_build(),this.set_tab_index(),this.form_field_jq.trigger("liszt:ready",{chosen:this})},i.prototype.register_observers=function(){var e=this;return this.container.mousedown(function(t){return e.container_mousedown(t)}),this.container.mouseup(function(t){return e.container_mouseup(t)}),this.container.mouseenter(function(t){return e.mouse_enter(t)}),this.container.mouseleave(function(t){return e.mouse_leave(t)}),this.search_results.mouseup(function(t){return e.search_results_mouseup(t)}),this.search_results.mouseover(function(t){return e.search_results_mouseover(t)}),this.search_results.mouseout(function(t){return e.search_results_mouseout(t)}),this.form_field_jq.bind("liszt:updated",function(t){return e.results_update_field(t)}),this.form_field_jq.bind("liszt:activate",function(t){return e.activate_field(t)}),this.form_field_jq.bind("liszt:open",function(t){return e.container_mousedown(t)}),this.search_field.blur(function(t){return e.input_blur(t)}),this.search_field.keyup(function(t){return e.keyup_checker(t)}),this.search_field.keydown(function(t){return e.keydown_checker(t)}),this.search_field.focus(function(t){return e.input_focus(t)}),this.is_multiple?this.search_choices.click(function(t){return e.choices_click(t)}):this.container.click(function(e){return e.preventDefault()})},i.prototype.search_field_disabled=function(){this.is_disabled=this.form_field_jq[0].disabled;if(this.is_disabled)return this.container.addClass("chzn-disabled"),this.search_field[0].disabled=!0,this.is_multiple||this.selected_item.unbind("focus",this.activate_action),this.close_field();this.container.removeClass("chzn-disabled"),this.search_field[0].disabled=!1;if(!this.is_multiple)return this.selected_item.bind("focus",this.activate_action)},i.prototype.container_mousedown=function(t){var n;if(!this.is_disabled)return n=t!=null?e(t.target).hasClass("search-choice-close"):!1,t&&t.type==="mousedown"&&!this.results_showing&&t.preventDefault(),!this.pending_destroy_click&&!n?(this.active_field?!this.is_multiple&&t&&(e(t.target)[0]===this.selected_item[0]||e(t.target).parents("a.chzn-single").length)&&(t.preventDefault(),this.results_toggle()):(this.is_multiple&&this.search_field.val(""),e(document).click(this.click_test_action),this.results_show()),this.activate_field()):this.pending_destroy_click=!1},i.prototype.container_mouseup=function(e){if(e.target.nodeName==="ABBR"&&!this.is_disabled)return this.results_reset(e)},i.prototype.blur_test=function(e){if(!this.active_field&&this.container.hasClass("chzn-container-active"))return this.close_field()},i.prototype.close_field=function(){return e(document).unbind("click",this.click_test_action),this.active_field=!1,this.results_hide(),this.container.removeClass("chzn-container-active"),this.winnow_results_clear(),this.clear_backstroke(),this.show_search_field_default(),this.search_field_scale()},i.prototype.activate_field=function(){return this.container.addClass("chzn-container-active"),this.active_field=!0,this.search_field.val(this.search_field.val()),this.search_field.focus()},i.prototype.test_active_click=function(t){return e(t.target).parents("#"+this.container_id).length?this.active_field=!0:this.close_field()},i.prototype.results_build=function(){var e,t,n,i,s;this.parsing=!0,this.results_data=r.SelectParser.select_to_array(this.form_field),this.is_multiple&&this.choices>0?(this.search_choices.find("li.search-choice").remove(),this.choices=0):this.is_multiple||(this.selected_item.addClass("chzn-default").find("span").text(this.default_text),this.disable_search||this.form_field.options.length<=this.disable_search_threshold?this.container.addClass("chzn-container-single-nosearch"):this.container.removeClass("chzn-container-single-nosearch")),e="",s=this.results_data;for(n=0,i=s.length;n<i;n++)t=s[n],t.group?e+=this.result_add_group(t):t.empty||(e+=this.result_add_option(t),t.selected&&this.is_multiple?this.choice_build(t):t.selected&&!this.is_multiple&&(this.selected_item.removeClass("chzn-default").find("span").text(t.text),this.allow_single_deselect&&this.single_deselect_control_build()));return this.search_field_disabled(),this.show_search_field_default(),this.search_field_scale(),this.search_results.html(e),this.parsing=!1},i.prototype.result_add_group=function(t){return t.disabled?"":(t.dom_id=this.container_id+"_g_"+t.array_index,'<li id="'+t.dom_id+'" class="group-result">'+e("<div />").text(t.label).html()+"</li>")},i.prototype.result_do_highlight=function(e){var t,n,r,i,s;if(e.length){this.result_clear_highlight(),this.result_highlight=e,this.result_highlight.addClass("highlighted"),r=parseInt(this.search_results.css("maxHeight"),10),s=this.search_results.scrollTop(),i=r+s,n=this.result_highlight.position().top+this.search_results.scrollTop(),t=n+this.result_highlight.outerHeight();if(t>=i)return this.search_results.scrollTop(t-r>0?t-r:0);if(n<s)return this.search_results.scrollTop(n)}},i.prototype.result_clear_highlight=function(){return this.result_highlight&&this.result_highlight.removeClass("highlighted"),this.result_highlight=null},i.prototype.results_show=function(){var e;if(!this.is_multiple)this.selected_item.addClass("chzn-single-with-drop"),this.result_single_selected&&this.result_do_highlight(this.result_single_selected);else if(this.max_selected_options<=this.choices)return this.form_field_jq.trigger("liszt:maxselected",{chosen:this}),!1;return e=this.is_multiple?this.container.height():this.container.height()-1,this.form_field_jq.trigger("liszt:showing_dropdown",{chosen:this}),this.dropdown.css({top:e+"px",left:0}),this.results_showing=!0,this.search_field.focus(),this.search_field.val(this.search_field.val()),this.winnow_results()},i.prototype.results_hide=function(){return this.is_multiple||this.selected_item.removeClass("chzn-single-with-drop"),this.result_clear_highlight(),this.form_field_jq.trigger("liszt:hiding_dropdown",{chosen:this}),this.dropdown.css({left:"-9000px"}),this.results_showing=!1},i.prototype.set_tab_index=function(e){var t;if(this.form_field_jq.attr("tabindex"))return t=this.form_field_jq.attr("tabindex"),this.form_field_jq.attr("tabindex",-1),this.search_field.attr("tabindex",t)},i.prototype.show_search_field_default=function(){return this.is_multiple&&this.choices<1&&!this.active_field?(this.search_field.val(this.default_text),this.search_field.addClass("default")):(this.search_field.val(""),this.search_field.removeClass("default"))},i.prototype.search_results_mouseup=function(t){var n;n=e(t.target).hasClass("active-result")?e(t.target):e(t.target).parents(".active-result").first();if(n.length)return this.result_highlight=n,this.result_select(t),this.search_field.focus()},i.prototype.search_results_mouseover=function(t){var n;n=e(t.target).hasClass("active-result")?e(t.target):e(t.target).parents(".active-result").first();if(n)return this.result_do_highlight(n)},i.prototype.search_results_mouseout=function(t){if(e(t.target).hasClass("active-result"))return this.result_clear_highlight()},i.prototype.choices_click=function(t){t.preventDefault();if(this.active_field&&!e(t.target).hasClass("search-choice")&&!this.results_showing)return this.results_show()},i.prototype.choice_build=function(t){var n,r,i,s=this;return this.is_multiple&&this.max_selected_options<=this.choices?(this.form_field_jq.trigger("liszt:maxselected",{chosen:this}),!1):(n=this.container_id+"_c_"+t.array_index,this.choices+=1,t.disabled?r='<li class="search-choice search-choice-disabled" id="'+n+'"><span>'+t.html+"</span></li>":r='<li class="search-choice" id="'+n+'"><span>'+t.html+'</span><a href="javascript:void(0)" class="search-choice-close" rel="'+t.array_index+'"></a></li>',this.search_container.before(r),i=e("#"+n).find("a").first(),i.click(function(e){return s.choice_destroy_link_click(e)}))},i.prototype.choice_destroy_link_click=function(t){return t.preventDefault(),this.is_disabled?t.stopPropagation:(this.pending_destroy_click=!0,this.choice_destroy(e(t.target)))},i.prototype.choice_destroy=function(e){if(this.result_deselect(e.attr("rel")))return this.choices-=1,this.show_search_field_default(),this.is_multiple&&this.choices>0&&this.search_field.val().length<1&&this.results_hide(),e.parents("li").first().remove(),this.search_field_scale()},i.prototype.results_reset=function(){this.form_field.options[0].selected=!0,this.selected_item.find("span").text(this.default_text),this.is_multiple||this.selected_item.addClass("chzn-default"),this.show_search_field_default(),this.results_reset_cleanup(),this.form_field_jq.trigger("change");if(this.active_field)return this.results_hide()},i.prototype.results_reset_cleanup=function(){return this.current_value=this.form_field_jq.val(),this.selected_item.find("abbr").remove()},i.prototype.result_select=function(e){var t,n,r,i;if(this.result_highlight)return t=this.result_highlight,n=t.attr("id"),this.result_clear_highlight(),this.is_multiple?this.result_deactivate(t):(this.search_results.find(".result-selected").removeClass("result-selected"),this.result_single_selected=t,this.selected_item.removeClass("chzn-default")),t.addClass("result-selected"),i=n.substr(n.lastIndexOf("_")+1),r=this.results_data[i],r.selected=!0,this.form_field.options[r.options_index].selected=!0,this.is_multiple?this.choice_build(r):(this.selected_item.find("span").first().text(r.text),this.allow_single_deselect&&this.single_deselect_control_build()),(!e.metaKey&&!e.ctrlKey||!this.is_multiple)&&this.results_hide(),this.search_field.val(""),(this.is_multiple||this.form_field_jq.val()!==this.current_value)&&this.form_field_jq.trigger("change",{selected:this.form_field.options[r.options_index].value}),this.current_value=this.form_field_jq.val(),this.search_field_scale()},i.prototype.result_activate=function(e){return e.addClass("active-result")},i.prototype.result_deactivate=function(e){return e.removeClass("active-result")},i.prototype.result_deselect=function(t){var n,r;return r=this.results_data[t],this.form_field.options[r.options_index].disabled?!1:(r.selected=!1,this.form_field.options[r.options_index].selected=!1,n=e("#"+this.container_id+"_o_"+t),n.removeClass("result-selected").addClass("active-result").show(),this.result_clear_highlight(),this.winnow_results(),this.form_field_jq.trigger("change",{deselected:this.form_field.options[r.options_index].value}),this.search_field_scale(),!0)},i.prototype.single_deselect_control_build=function(){if(this.allow_single_deselect&&this.selected_item.find("abbr").length<1)return this.selected_item.find("span").first().after('<abbr class="search-choice-close"></abbr>')},i.prototype.winnow_results=function(){var t,n,r,i,s,o,u,a,f,l,c,h,p,d,v,m,g,y;this.no_results_clear(),f=0,l=this.search_field.val()===this.default_text?"":e("<div/>").text(e.trim(this.search_field.val())).html(),o=this.search_contains?"":"^",s=new RegExp(o+l.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),"i"),p=new RegExp(l.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),"i"),y=this.results_data;for(d=0,m=y.length;d<m;d++){n=y[d];if(!n.disabled&&!n.empty)if(n.group)e("#"+n.dom_id).css("display","none");else if(!this.is_multiple||!n.selected){t=!1,a=n.dom_id,u=e("#"+a);if(s.test(n.html))t=!0,f+=1;else if(this.enable_split_word_search&&(n.html.indexOf(" ")>=0||n.html.indexOf("[")===0)){i=n.html.replace(/\[|\]/g,"").split(" ");if(i.length)for(v=0,g=i.length;v<g;v++)r=i[v],s.test(r)&&(t=!0,f+=1)}t?(l.length?(c=n.html.search(p),h=n.html.substr(0,c+l.length)+"</em>"+n.html.substr(c+l.length),h=h.substr(0,c)+"<em>"+h.substr(c)):h=n.html,u.html(h),this.result_activate(u),n.group_array_index!=null&&e("#"+this.results_data[n.group_array_index].dom_id).css("display","list-item")):(this.result_highlight&&a===this.result_highlight.attr("id")&&this.result_clear_highlight(),this.result_deactivate(u))}}return f<1&&l.length?this.no_results(l):this.winnow_results_set_highlight()},i.prototype.winnow_results_clear=function(){var t,n,r,i,s;this.search_field.val(""),n=this.search_results.find("li"),s=[];for(r=0,i=n.length;r<i;r++)t=n[r],t=e(t),t.hasClass("group-result")?s.push(t.css("display","auto")):!this.is_multiple||!t.hasClass("result-selected")?s.push(this.result_activate(t)):s.push(void 0);return s},i.prototype.winnow_results_set_highlight=function(){var e,t;if(!this.result_highlight){t=this.is_multiple?[]:this.search_results.find(".result-selected.active-result"),e=t.length?t.first():this.search_results.find(".active-result").first();if(e!=null)return this.result_do_highlight(e)}},i.prototype.no_results=function(t){var n;return n=e('<li class="no-results">'+this.results_none_found+' "<span></span>"</li>'),n.find("span").first().html(t),this.search_results.append(n)},i.prototype.no_results_clear=function(){return this.search_results.find(".no-results").remove()},i.prototype.keydown_arrow=function(){var t,n;this.result_highlight?this.results_showing&&(n=this.result_highlight.nextAll("li.active-result").first(),n&&this.result_do_highlight(n)):(t=this.search_results.find("li.active-result").first(),t&&this.result_do_highlight(e(t)));if(!this.results_showing)return this.results_show()},i.prototype.keyup_arrow=function(){var e;if(!this.results_showing&&!this.is_multiple)return this.results_show();if(this.result_highlight)return e=this.result_highlight.prevAll("li.active-result"),e.length?this.result_do_highlight(e.first()):(this.choices>0&&this.results_hide(),this.result_clear_highlight())},i.prototype.keydown_backstroke=function(){var e;if(this.pending_backstroke)return this.choice_destroy(this.pending_backstroke.find("a").first()),this.clear_backstroke();e=this.search_container.siblings("li.search-choice").last();if(e.length&&!e.hasClass("search-choice-disabled"))return this.pending_backstroke=e,this.single_backstroke_delete?this.keydown_backstroke():this.pending_backstroke.addClass("search-choice-focus")},i.prototype.clear_backstroke=function(){return this.pending_backstroke&&this.pending_backstroke.removeClass("search-choice-focus"),this.pending_backstroke=null},i.prototype.keydown_checker=function(e){var t,n;t=(n=e.which)!=null?n:e.keyCode,this.search_field_scale(),t!==8&&this.pending_backstroke&&this.clear_backstroke();switch(t){case 8:this.backstroke_length=this.search_field.val().length;break;case 9:this.results_showing&&!this.is_multiple&&this.result_select(e),this.mouse_on_container=!1;break;case 13:e.preventDefault();break;case 38:e.preventDefault(),this.keyup_arrow();break;case 40:this.keydown_arrow()}},i.prototype.search_field_scale=function(){var t,n,r,i,s,o,u,a,f;if(this.is_multiple){r=0,u=0,s="position:absolute; left: -1000px; top: -1000px; display:none;",o=["font-size","font-style","font-weight","font-family","line-height","text-transform","letter-spacing"];for(a=0,f=o.length;a<f;a++)i=o[a],s+=i+":"+this.search_field.css(i)+";";return n=e("<div />",{style:s}),n.text(this.search_field.val()),e("body").append(n),u=n.width()+25,n.remove(),u>this.f_width-10&&(u=this.f_width-10),this.search_field.css({width:u+"px"}),t=this.container.height(),this.dropdown.css({top:t+"px"})}},i.prototype.generate_random_id=function(){var t;t="sel"+this.generate_random_char()+this.generate_random_char()+this.generate_random_char();while(e("#"+t).length>0)t+=this.generate_random_char();return t},i}(AbstractChosen),r.Chosen=t,n=function(e){var t;return t=e.outerWidth()-e.width()},r.get_side_border_padding=n}.call(this);

/*
 * jQuery UI Multiselect
 *
 * Authors:
 *  Michael Aufreiter (quasipartikel.at)
 *  Yanick Rochon (yanick.rochon[at]gmail[dot]com)
 * 
 * Dual licensed under the MIT (MIT-LICENSE.txt)
 * and GPL (GPL-LICENSE.txt) licenses.
 * 
 * http://www.quasipartikel.at/multiselect/
 *
 * 
 * Depends:
 *	ui.core.js
 *	ui.sortable.js
 *
 * Optional:
 * localization (http://plugins.jquery.com/project/localisation)
 * scrollTo (http://plugins.jquery.com/project/ScrollTo)
 * 
 * Todo:
 *  Make batch actions faster
 *  Implement dynamic insertion through remote calls
 */


(function($) {

$.widget("ui.multiselect", {
	_init: function() {
		this.element.hide();
		this.id = this.element.attr("id");
		this.container = $('<div class="ui-multiselect ui-helper-clearfix ui-widget"></div>').insertAfter(this.element);
		this.count = 0; // number of currently selected options
		this.selectedContainer = $('<div class="selected"></div>').appendTo(this.container);
		this.availableContainer = $('<div class="available"></div>').appendTo(this.container);
		this.selectedActions = $('<div class="actions ui-widget-header ui-helper-clearfix"><span class="count">0 '+$.ui.multiselect.locale.itemsCount+'</span><a href="#" class="remove-all">'+$.ui.multiselect.locale.removeAll+'</a></div>').appendTo(this.selectedContainer);
		this.availableActions = $('<div class="actions ui-widget-header ui-helper-clearfix"><input type="text" class="search empty ui-widget-content ui-corner-all"/><a href="#" class="add-all">'+$.ui.multiselect.locale.addAll+'</a></div>').appendTo(this.availableContainer);
		this.selectedList = $('<ul class="selected connected-list"><li class="ui-helper-hidden-accessible"></li></ul>').bind('selectstart', function(){return false;}).appendTo(this.selectedContainer);
		this.availableList = $('<ul class="available connected-list"><li class="ui-helper-hidden-accessible"></li></ul>').bind('selectstart', function(){return false;}).appendTo(this.availableContainer);
		
		var that = this;

		// set dimensions
		this.container.width(this.element.width()+1);
		this.selectedContainer.width(Math.floor(this.element.width()*this.options.dividerLocation));
		this.availableContainer.width(Math.floor(this.element.width()*(1-this.options.dividerLocation)));

		// fix list height to match <option> depending on their individual header's heights
		this.selectedList.height(Math.max(this.element.height()-this.selectedActions.height(),1));
		this.availableList.height(Math.max(this.element.height()-this.availableActions.height(),1));
		
		if ( !this.options.animated ) {
			this.options.show = 'show';
			this.options.hide = 'hide';
		}
		
		// init lists
		this._populateLists(this.element.find('option'));
		
		// make selection sortable
		if (this.options.sortable) {
			$("ul.selected").sortable({
				placeholder: 'ui-state-highlight',
				axis: 'y',
				update: function(event, ui) {
					// apply the new sort order to the original selectbox
					that.selectedList.find('li').each(function() {
						if ($(this).data('optionLink'))
							$(this).data('optionLink').remove().appendTo(that.element);
					});
				},
				receive: function(event, ui) {
					ui.item.data('optionLink').attr('selected', true);
					// increment count
					that.count += 1;
					that._updateCount();
					// workaround, because there's no way to reference 
					// the new element, see http://dev.jqueryui.com/ticket/4303
					that.selectedList.children('.ui-draggable').each(function() {
						$(this).removeClass('ui-draggable');
						$(this).data('optionLink', ui.item.data('optionLink'));
						$(this).data('idx', ui.item.data('idx'));
						that._applyItemState($(this), true);
					});
			
					// workaround according to http://dev.jqueryui.com/ticket/4088
					setTimeout(function() { ui.item.remove(); }, 1);
				}
			});
		}
		
		// set up livesearch
		if (this.options.searchable) {
			this._registerSearchEvents(this.availableContainer.find('input.search'));
		} else {
			$('.search').hide();
		}
		
		// batch actions
		$(".remove-all").click(function() {
			that._populateLists(that.element.find('option').removeAttr('selected'));
			return false;
		});
		$(".add-all").click(function() {
			that._populateLists(that.element.find('option').attr('selected', 'selected'));
			return false;
		});
	},
	destroy: function() {
		this.element.show();
		this.container.remove();

		$.widget.prototype.destroy.apply(this, arguments);
	},
	_populateLists: function(options) {
		this.selectedList.children('.ui-element').remove();
		this.availableList.children('.ui-element').remove();
		this.count = 0;

		var that = this;
		var items = $(options.map(function(i) {
	      var item = that._getOptionNode(this).appendTo(this.selected ? that.selectedList : that.availableList).show();

			if (this.selected) that.count += 1;
			that._applyItemState(item, this.selected);
			item.data('idx', i);
			return item[0];
    }));
		
		// update count
		this._updateCount();
  },
	_updateCount: function() {
		this.selectedContainer.find('span.count').text(this.count+" "+$.ui.multiselect.locale.itemsCount);
	},
	_getOptionNode: function(option) {
		option = $(option);
		var node = $('<li class="ui-state-default ui-element" title="'+option.text()+'"><span class="ui-icon"/>'+option.text()+'<a href="#" class="action"><span class="ui-corner-all ui-icon"/></a></li>').hide();
		node.data('optionLink', option);
		return node;
	},
	// clones an item with associated data
	// didn't find a smarter away around this
	_cloneWithData: function(clonee) {
		var clone = clonee.clone();
		clone.data('optionLink', clonee.data('optionLink'));
		clone.data('idx', clonee.data('idx'));
		return clone;
	},
	_setSelected: function(item, selected) {
		item.data('optionLink').attr('selected', selected);

		if (selected) {
			var selectedItem = this._cloneWithData(item);
			item[this.options.hide](this.options.animated, function() { $(this).remove(); });
			selectedItem.appendTo(this.selectedList).hide()[this.options.show](this.options.animated);
			
			this._applyItemState(selectedItem, true);
			return selectedItem;
		} else {
			
			// look for successor based on initial option index
			var items = this.availableList.find('li'), comparator = this.options.nodeComparator;
			var succ = null, i = item.data('idx'), direction = comparator(item, $(items[i]));

			// TODO: test needed for dynamic list populating
			if ( direction ) {
				while (i>=0 && i<items.length) {
					direction > 0 ? i++ : i--;
					if ( direction != comparator(item, $(items[i])) ) {
						// going up, go back one item down, otherwise leave as is
						succ = items[direction > 0 ? i : i+1];
						break;
					}
				}
			} else {
				succ = items[i];
			}
			
			var availableItem = this._cloneWithData(item);
			succ ? availableItem.insertBefore($(succ)) : availableItem.appendTo(this.availableList);
			item[this.options.hide](this.options.animated, function() { $(this).remove(); });
			availableItem.hide()[this.options.show](this.options.animated);
			
			this._applyItemState(availableItem, false);
			return availableItem;
		}
	},
	_applyItemState: function(item, selected) {
		if (selected) {
			if (this.options.sortable)
				item.children('span').addClass('ui-icon-arrowthick-2-n-s').removeClass('ui-helper-hidden').addClass('ui-icon');
			else
				item.children('span').removeClass('ui-icon-arrowthick-2-n-s').addClass('ui-helper-hidden').removeClass('ui-icon');
			item.find('a.action span').addClass('ui-icon-minus').removeClass('ui-icon-plus');
			this._registerRemoveEvents(item.find('a.action'));
			
		} else {
			item.children('span').removeClass('ui-icon-arrowthick-2-n-s').addClass('ui-helper-hidden').removeClass('ui-icon');
			item.find('a.action span').addClass('ui-icon-plus').removeClass('ui-icon-minus');
			this._registerAddEvents(item.find('a.action'));
		}
		
		this._registerHoverEvents(item);
	},
	// taken from John Resig's liveUpdate script
	_filter: function(list) {
		var input = $(this);
		var rows = list.children('li'),
			cache = rows.map(function(){
				
				return $(this).text().toLowerCase();
			});
		
		var term = $.trim(input.val().toLowerCase()), scores = [];
		
		if (!term) {
			rows.show();
		} else {
			rows.hide();

			cache.each(function(i) {
				if (this.indexOf(term)>-1) { scores.push(i); }
			});

			$.each(scores, function() {
				$(rows[this]).show();
			});
		}
	},
	_registerHoverEvents: function(elements) {
		elements.removeClass('ui-state-hover');
		elements.mouseover(function() {
			$(this).addClass('ui-state-hover');
		});
		elements.mouseout(function() {
			$(this).removeClass('ui-state-hover');
		});
	},
	_registerAddEvents: function(elements) {
		var that = this;
		elements.click(function() {
			var item = that._setSelected($(this).parent(), true);
			that.count += 1;
			that._updateCount();
			return false;
		})
		// make draggable
		.each(function() {
			$(this).parent().draggable({
	      connectToSortable: 'ul.selected',
				helper: function() {
					var selectedItem = that._cloneWithData($(this)).width($(this).width() - 50);
					selectedItem.width($(this).width());
					return selectedItem;
				},
				appendTo: '.ui-multiselect',
				containment: '.ui-multiselect',
				revert: 'invalid'
	    });
		});
	},
	_registerRemoveEvents: function(elements) {
		var that = this;
		elements.click(function() {
			that._setSelected($(this).parent(), false);
			that.count -= 1;
			that._updateCount();
			return false;
		});
 	},
	_registerSearchEvents: function(input) {
		var that = this;

		input.focus(function() {
			$(this).addClass('ui-state-active');
		})
		.blur(function() {
			$(this).removeClass('ui-state-active');
		})
		.keypress(function(e) {
			if (e.keyCode == 13)
				return false;
		})
		.keyup(function() {
			that._filter.apply(this, [that.availableList]);
		});
	}
});
		
$.extend($.ui.multiselect, {
	defaults: {
		sortable: true,
		searchable: true,
		animated: 'fast',
		show: 'slideDown',
		hide: 'slideUp',
		dividerLocation: 0.6,
		nodeComparator: function(node1,node2) {
			var text1 = node1.text(),
			    text2 = node2.text();
			return text1 == text2 ? 0 : (text1 < text2 ? -1 : 1);
		}
	},
	locale: {
		addAll:'Add all',
		removeAll:'Remove all',
		itemsCount:'items selected'
	}
});

})(jQuery);
/**
 * jQuery Theme Switcher plugin
 *
 * Copyright (c) 2011 Dave Hoff (davehoff.com)
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 */
 
(function( $ ){
	
	$.fn.themeswitcher = function( options ) {
		var switcherDiv = this, switcherOptions = {};
		var settings = {
			loadtheme : "",
			height: 200,
			width: 175,
			rounded: true,
			imgpath: "",
			themepath: "https://code.jquery.com/ui/",
			jqueryuiversion: "1.11.0-beta.2",
			initialtext: "Switch Theme",
			buttonpretext: "Theme:",
			closeonselect: true,
			buttonheight: 14,
			cookiename: "jquery-ui-theme",
			themes: [],
			additionalthemes: [],
			onopen: null,
			onclose: null,
			onselect: null,
            cookieexpires: 365,
            cookiepath: '/'
    	};
    	
    	if(options) {
	    	//lowercase all options passed in
	    	$.each(options, function(k,v){
	    		switcherOptions[k.toLowerCase()] = v;
	    	});
	    	
			$.extend( settings, switcherOptions );
    	}
    	
    	if( ! settings.themes.length ){
    		var themes = [
    			{
    				title: "Black Tie",
    				name: "black-tie",
    				icon: "theme_90_black_tie.png"
    			},
    			{
    				title: "Blitzer",
    				name: "blitzer",
    				icon: "theme_90_blitzer.png"
    			},
    			{
    				title: "Cupertino",
    				name: "cupertino",
    				icon: "theme_90_cupertino.png"
    			},
    			{
    				title: "Dark Hive",
    				name: "dark-hive",
    				icon: "theme_90_dark_hive.png"
    			},
    			{
    				title: "Dot Luv",
    				name: "dot-luv",
    				icon: "theme_90_dot_luv.png"
    			},
    			{
    				title: "Eggplant",
    				name: "eggplant",
    				icon: "theme_90_eggplant.png"
    			},
    			{
    				title: "Excite Bike",
    				name: "excite-bike",
    				icon: "theme_90_excite_bike.png"
    			},
    			{
    				title: "Flick",
    				name: "flick",
    				icon: "theme_90_flick.png"
    			},
    			{
    				title: "Hot Sneaks",
    				name: "hot-sneaks",
    				icon: "theme_90_hot_sneaks.png"
    			},
    			{
    				title: "Humanity",
    				name: "humanity",
    				icon: "theme_90_humanity.png"
    			},
    			{
    				title: "Le Frog",
    				name: "le-frog",
    				icon: "theme_90_le_frog.png"
    			},
    			{
    				title: "Mint Choc",
    				name: "mint-choc",
    				icon: "theme_90_mint_choco.png"
    			},
    			{
    				title: "Overcast",
    				name: "overcast",
    				icon: "theme_90_overcast.png"
    			},
    			{
    				title: "Pepper Grinder",
    				name: "pepper-grinder",
    				icon: "theme_90_pepper_grinder.png"
    			},
    			{
    				title: "Redmond",
    				name: "redmond",
    				icon: "theme_90_windoze.png"
    			},
    			{
    				title: "Smoothness",
    				name: "smoothness",
    				icon: "theme_90_smoothness.png"
    			},
    			{
    				title: "South Street",
    				name: "south-street",
    				icon: "theme_90_south_street.png"
    			},
    			{
    				title: "Start",
    				name: "start",
    				icon: "theme_90_start_menu.png"
    			},
    			{
    				title: "Sunny",
    				name: "sunny",
    				icon: "theme_90_sunny.png"
    			},
    			{
    				title: "Swanky Purse",
    				name: "swanky-purse",
    				icon: "theme_90_swanky_purse.png"
    			},
    			{
    				title: "Trontastic",
    				name: "trontastic",
    				icon: "theme_90_trontastic.png"
    			},
    			{
    				title: "UI Darkness",
    				name: "ui-darkness",
    				icon: "theme_90_ui_dark.png"
    			},
    			{
    				title: "UI Lightness",
    				name: "ui-lightness",
    				icon: "theme_90_ui_light.png"
    			},
    			{
    				title: "Vader",
    				name: "vader",
    				icon: "theme_90_black_matte.png"
    			}
    		]
    	}else{
    		var themes = settings.themes;
    	}
    	
    	if( settings.additionalthemes.length ){
    		$.extend( themes, settings.additionalthemes );
    	}
    	
    	// Switcher link
    	var switcherLinkStyle = {
    		"cursor": "pointer",
    		"font-family": "'Trebuchet MS', Verdana, sans-serif",
    		"font-size": "11px",
    		"color": "#666",
    		"background": "#eee url("+settings.imgpath+"buttonbg.png) repeat-x 50% 50%",
    		"border": "1px solid #CCC",
    		"text-decoration": "none",
    		"padding": "3px 3px 3px 8px",
    		"width": settings.width+"px",
    		"display": "block",
    		"height": settings.buttonheight+"px",
    		"outline": "0px" ,
    		"line-height": settings.buttonheight+"px"
    	}
    	
    	if( settings.rounded ){
    		switcherLinkStyle['border-radius'] = "6px";
    		switcherLinkStyle['-moz-border-radius'] = "6px";
    		switcherLinkStyle['-webkit-border-radius'] = "6px";
    	}
    	
    	var switcherLink = $("<a/>")
    		.addClass("jquery-ui-switcher-link")
    		.css(switcherLinkStyle)
    		.bind({
    			mouseenter: function(){
    				$(this).css({
    					"background": "#eee"
    				})
    			},
    			mouseleave: function(){
    				if( ! switcherDiv.find(".jquery-ui-switcher-list-hldr").is(":visible") ){
    					$(this).css({
    						"background":"#eee url("+settings.imgpath+"buttonbg.png) repeat-x 50% 50%"
    					})
    				}
    			},
    			click: function(){
    				(!switcherDiv.find(".jquery-ui-switcher-list-hldr").is(":visible")) ? openSwitcher() : closeSwitcher();
    			}
    		});
    	
    	// Title & Icon for switcher link	
    	var switcherTitle = $("<span/>").addClass("jquery-ui-switcher-title").appendTo(switcherLink);
    	$("<span/>").addClass("jquery-ui-switcher-arrow")
    		.css({
    			"float": "right",
    			"width": "16px",
    			"height": "16px",
    			"background": "url("+settings.imgpath+"icon_color_arrow.gif) no-repeat 50% 50%"
    		})
    		.appendTo(switcherLink);
    		
    	// load the default theme or the theme stored in the cookie
    	if( $.cookie(settings.cookiename) ){
    		updateTheme( findTheme($.cookie(settings.cookiename)) );
    		
    	}else if( settings.loadtheme.length ){
    		updateTheme( findTheme(settings.loadtheme) );
    		
    	}else{
    		switcherTitle.text(settings.initialtext);
    	}
    	
    	var switcherListHldr = $("<div/>")
    		.addClass("jquery-ui-switcher-list-hldr")
    		.css({
    			"width": eval(settings.width+8)+"px",
    			"background": "#000",
    			"color": "#FFF",
    			"font-family": "'Trebuchet MS', Verdana, sans-serif",
    			"font-size": "12px",
    			"border": "1px solid #CCC",
    			"border-top": "none",
    			"z-index": "999999",
    			"position": "absolute",
    			"top": eval(settings.buttonheight+3)+"px",
    			"left": "0px",
    			"padding": "3px 3px 3px 0",
    			"display": "none"
    		})
    		.bind({
    			mouseleave: function(){
    				closeSwitcher();
    			}
    		});
    		
    		if( settings.rounded ){
    			switcherListHldr.css("border-radius","0 0 6px 6px");
    			switcherListHldr.css("-moz-border-radius","0 0 6px 6px");
    			switcherListHldr.css("-webkit-border-radius","0 0 6px 6px");
    		}
    		
    	var switcherList = $("<ul/>")
    		.css({
    			"list-style": "none",
    			"margin": "0",
    			"padding": "0",
    			"overflow-y": "auto",
    			"overflow-x": "hidden",
    			"height": settings.height+"px"
    		})
    		.appendTo(switcherListHldr);
    	
    	// Iterate over themes and build links
    	$.each(themes, function(k,v){
    		var listItem = $("<li>")
    			.css("height","90px")
    			.appendTo(switcherList);
    			
    		var listLink = $("<a>")
    			.css({
    				"display": "block",
    				"padding": "5px 3px 5px 5px",
					"text-decoration": "none",
					"float": "left",
					"width": "100%",
					"clear": "left"
    			})
    			.bind({
    				mouseenter: function(){
    					listLink.css("background","url("+settings.imgpath+"menuhoverbg.png) repeat-x 50% 50%");
    				},
    				mouseleave: function(){
    					listLink.css("background","none");
    				},
    				click: function(e){
    					updateTheme($(this).data());
    					e.preventDefault();
    				}
    			})
    			.attr("href","#")
    			.data(v)
    			.appendTo(listItem);
    			
    		var linkImg = $("<img>")
    			.attr("src", settings.imgpath + v.icon)
    			.attr("title",v.title)
    			.css({
    				"float": "left",
    				"margin-right": "5px",
    				"border": "1px solid #333"
    			})
    			.appendTo(listLink);
    		
    		var linkText = $("<span>")
    			.css({
    				"float": "left",
    				"padding-top": "5px",
    				"color": "#AAA"
    			})
    			.text(v.title)
    			.appendTo(listLink);
    	});
    	
    	function updateTheme(data){
    		if( settings.onselect !== null )
    			settings.onselect();
    		
    		switcherTitle.text(settings.buttonpretext +" "+ data.title);
    		
   			
		var currentStyle = [];
		var url = data.url;

		if (!url) {
		    var urlPrefix = settings.themepath + settings.jqueryuiversion + "/themes/";
		    url = urlPrefix + data.name + "/jquery-ui.css";
		    currentStyle = $('link[href^="' + urlPrefix + '"]').first();
		}

		if (currentStyle.length) {
			currentStyle[0].href = url;
		} else {
			var style = $("<link/>")
				.attr("type","text/css")
				.attr("rel","stylesheet")
				.attr("href", url);
	 
			style.appendTo("head");
		}
    		
    		$.cookie(settings.cookiename, data.name, 
                { expires: settings.cookieexpires, path: settings.cookiepath }
            );
            
    		switcherDiv.find(".jquery-ui-switcher-title").text(settings.buttonpretext + " " + data.title);
    		
    		if( settings.closeonselect )
    			closeSwitcher();
    	}
    	
    	// Finds a theme[] based on a valid name or title
    	function findTheme(theme){
    		var result = null;
    		$.each(themes, function(k,v){
    			if( v.name.toLowerCase() === theme.toLowerCase() || v.title.toLowerCase() === theme.toLowerCase() ){
    				result = v;
    				return false;
    			}
    		});
    		
    		if( !result ){
    			return themes[0];
    		}
    		return result;
    	}
    	
    	function openSwitcher(){
    		if( settings.onopen !== null )
    			settings.onopen();
    			
    		switcherDiv.find(".jquery-ui-switcher-link").css({
    			"color": "#AAA",
    		    "background": "#000"
    		});
    		switcherDiv.find(".jquery-ui-switcher-list-hldr").slideDown("fast");
    	}
    	
    	function closeSwitcher(){
    		if( settings.onclose !== null )
    			settings.onclose();
    		
    		switcherDiv.find(".jquery-ui-switcher-list-hldr").slideUp("fast", function(){
    			switcherDiv.find(".jquery-ui-switcher-link").css({
    		    	"color":"#666",
    		    	"background": "#eee url("+settings.imgpath+"buttonbg.png) repeat-x 50% 50%"
    		    });
    		});
    	}
    		
    		
    	this.css("position","relative");
    	this.append(switcherLink);
    	this.append(switcherListHldr);
    	
    	return this;
    }
	
})( jQuery );

/*!
 * jQuery Cookie Plugin
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2011, Klaus Hartl
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.opensource.org/licenses/GPL-2.0
 */
(function($) {
    $.cookie = function(key, value, options) {

        // key and at least value given, set cookie...
        if (arguments.length > 1 && (!/Object/.test(Object.prototype.toString.call(value)) || value === null || value === undefined)) {
            options = $.extend({}, options);

            if (value === null || value === undefined) {
                options.expires = -1;
            }

            if (typeof options.expires === 'number') {
                var days = options.expires, t = options.expires = new Date();
                t.setDate(t.getDate() + days);
            }

            value = String(value);

            return (document.cookie = [
                encodeURIComponent(key), '=', options.raw ? value : encodeURIComponent(value),
                options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
                options.path    ? '; path=' + options.path : '',
                options.domain  ? '; domain=' + options.domain : '',
                options.secure  ? '; secure' : ''
            ].join(''));
        }

        // key and possibly options given, get cookie...
        options = value || {};
        var decode = options.raw ? function(s) { return s; } : decodeURIComponent;

        var pairs = document.cookie.split('; ');
        for (var i = 0, pair; pair = pairs[i] && pairs[i].split('='); i++) {
            if (decode(pair[0]) === key) return decode(pair[1] || ''); // IE saves cookies with empty string as "c; ", e.g. without "=" as opposed to EOMB, thus pair[1] may be undefined
        }
        return null;
    };
})(jQuery);

/*!
 * jQuery Color Animations v2.0pre
 * http://jquery.org/
 *
 * Copyright 2011 John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 */

(function( jQuery, undefined ){
	var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color outlineColor".split(" "),

		// plusequals test for += 100 -= 100
		rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,
		// a set of RE's that can match strings and generate color tuples.
		stringParsers = [{
				re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
				parse: function( execResult ) {
					return [
						execResult[ 1 ],
						execResult[ 2 ],
						execResult[ 3 ],
						execResult[ 4 ]
					];
				}
			}, {
				re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
				parse: function( execResult ) {
					return [
						2.55 * execResult[1],
						2.55 * execResult[2],
						2.55 * execResult[3],
						execResult[ 4 ]
					];
				}
			}, {
				re: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,
				parse: function( execResult ) {
					return [
						parseInt( execResult[ 1 ], 16 ),
						parseInt( execResult[ 2 ], 16 ),
						parseInt( execResult[ 3 ], 16 )
					];
				}
			}, {
				re: /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/,
				parse: function( execResult ) {
					return [
						parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
						parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
						parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )
					];
				}
			}, {
				re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
				space: "hsla",
				parse: function( execResult ) {
					return [
						execResult[1],
						execResult[2] / 100,
						execResult[3] / 100,
						execResult[4]
					];
				}
			}],

		// jQuery.Color( )
		color = jQuery.Color = function( color, green, blue, alpha ) {
			return new jQuery.Color.fn.parse( color, green, blue, alpha );
		},
		spaces = {
			rgba: {
				cache: "_rgba",
				props: {
					red: {
						idx: 0,
						type: "byte",
						empty: true
					},
					green: {
						idx: 1,
						type: "byte",
						empty: true
					},
					blue: {
						idx: 2,
						type: "byte",
						empty: true
					},
					alpha: {
						idx: 3,
						type: "percent",
						def: 1
					}
				}
			},
			hsla: {
				cache: "_hsla",
				props: {
					hue: {
						idx: 0,
						type: "degrees",
						empty: true
					},
					saturation: {
						idx: 1,
						type: "percent",
						empty: true
					},
					lightness: {
						idx: 2,
						type: "percent",
						empty: true
					}
				}
			}
		},
		propTypes = {
			"byte": {
				floor: true,
				min: 0,
				max: 255
			},
			"percent": {
				min: 0,
				max: 1
			},
			"degrees": {
				mod: 360,
				floor: true
			}
		},
		rgbaspace = spaces.rgba.props,
		support = color.support = {},

		// colors = jQuery.Color.names
		colors,

		// local aliases of functions called often
		each = jQuery.each;

	spaces.hsla.props.alpha = rgbaspace.alpha;

	function clamp( value, prop, alwaysAllowEmpty ) {
		var type = propTypes[ prop.type ] || {},
			allowEmpty = prop.empty || alwaysAllowEmpty;

		if ( allowEmpty && value == null ) {
			return null;
		}
		if ( prop.def && value == null ) {
			return prop.def;
		}
		if ( type.floor ) {
			value = ~~value;
		} else {
			value = parseFloat( value );
		}
		if ( value == null || isNaN( value ) ) {
			return prop.def;
		}
		if ( type.mod ) {
			value = value % type.mod;
			// -10 -> 350
			return value < 0 ? type.mod + value : value;
		}

		// for now all property types without mod have min and max
		return type.min > value ? type.min : type.max < value ? type.max : value;
	}

	function stringParse( string ) {
		var inst = color(),
			rgba = inst._rgba = [];

		string = string.toLowerCase();

		each( stringParsers, function( i, parser ) {
			var match = parser.re.exec( string ),
				values = match && parser.parse( match ),
				parsed,
				spaceName = parser.space || "rgba",
				cache = spaces[ spaceName ].cache;


			if ( values ) {
				parsed = inst[ spaceName ]( values );

				// if this was an rgba parse the assignment might happen twice
				// oh well....
				inst[ cache ] = parsed[ cache ];
				rgba = inst._rgba = parsed._rgba;

				// exit each( stringParsers ) here because we matched
				return false;
			}
		});

		// Found a stringParser that handled it
		if ( rgba.length !== 0 ) {

			// if this came from a parsed string, force "transparent" when alpha is 0
			// chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
			if ( Math.max.apply( Math, rgba ) === 0 ) {
				jQuery.extend( rgba, colors.transparent );
			}
			return inst;
		}

		// named colors / default - filter back through parse function
		if ( string = colors[ string ] ) {
			return string;
		}
	}

	color.fn = color.prototype = {
		constructor: color,
		parse: function( red, green, blue, alpha ) {
			if ( red === undefined ) {
				this._rgba = [ null, null, null, null ];
				return this;
			}
			if ( red instanceof jQuery || red.nodeType ) {
				red = red instanceof jQuery ? red.css( green ) : jQuery( red ).css( green );
				green = undefined;
			}

			var inst = this,
				type = jQuery.type( red ),
				rgba = this._rgba = [],
				source;

			// more than 1 argument specified - assume ( red, green, blue, alpha )
			if ( green !== undefined ) {
				red = [ red, green, blue, alpha ];
				type = "array";
			}

			if ( type === "string" ) {
				return this.parse( stringParse( red ) || colors._default );
			}

			if ( type === "array" ) {
				each( rgbaspace, function( key, prop ) {
					rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
				});
				return this;
			}

			if ( type === "object" ) {
				if ( red instanceof color ) {
					each( spaces, function( spaceName, space ) {
						if ( red[ space.cache ] ) {
							inst[ space.cache ] = red[ space.cache ].slice();
						}
					});
				} else {
					each( spaces, function( spaceName, space ) {
						each( space.props, function( key, prop ) {
							var cache = space.cache;

							// if the cache doesn't exist, and we know how to convert
							if ( !inst[ cache ] && space.to ) {

								// if the value was null, we don't need to copy it
								// if the key was alpha, we don't need to copy it either
								if ( red[ key ] == null || key === "alpha") {
									return;
								}
								inst[ cache ] = space.to( inst._rgba );
							}

							// this is the only case where we allow nulls for ALL properties.
							// call clamp with alwaysAllowEmpty
							inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
						});
					});
				}
				return this;
			}
		},
		is: function( compare ) {
			var is = color( compare ),
				same = true,
				myself = this;

			each( spaces, function( _, space ) {
				var isCache = is[ space.cache ],
					localCache;
				if (isCache) {
					localCache = myself[ space.cache ] || space.to && space.to( myself._rgba ) || [];
					each( space.props, function( _, prop ) {
						if ( isCache[ prop.idx ] != null ) {
							same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
							return same;
						}
					});
				}
				return same;
			});
			return same;
		},
		_space: function() {
			var used = [],
				inst = this;
			each( spaces, function( spaceName, space ) {
				if ( inst[ space.cache ] ) {
					used.push( spaceName );
				}
			});
			return used.pop();
		},
		transition: function( other, distance ) {
			var end = color( other ),
				spaceName = end._space(),
				space = spaces[ spaceName ],
				start = this[ space.cache ] || space.to( this._rgba ),
				result = start.slice();

			end = end[ space.cache ];
			each( space.props, function( key, prop ) {
				var index = prop.idx,
					startValue = start[ index ],
					endValue = end[ index ],
					type = propTypes[ prop.type ] || {};

				// if null, don't override start value
				if ( endValue === null ) {
					return;
				}
				// if null - use end
				if ( startValue === null ) {
					result[ index ] = endValue;
				} else {
					if ( type.mod ) {
						if ( endValue - startValue > type.mod / 2 ) {
							startValue += type.mod;
						} else if ( startValue - endValue > type.mod / 2 ) {
							startValue -= type.mod;
						}
					}
					result[ prop.idx ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
				}
			});
			return this[ spaceName ]( result );
		},
		blend: function( opaque ) {
			// if we are already opaque - return ourself
			if ( this._rgba[ 3 ] === 1 ) {
				return this;
			}

			var rgb = this._rgba.slice(),
				a = rgb.pop(),
				blend = color( opaque )._rgba;

			return color( jQuery.map( rgb, function( v, i ) {
				return ( 1 - a ) * blend[ i ] + a * v;
			}));
		},
		toRgbaString: function() {
			var prefix = "rgba(",
				rgba = jQuery.map( this._rgba, function( v, i ) {
					return v == null ? ( i > 2 ? 1 : 0 ) : v;
				});

			if ( rgba[ 3 ] === 1 ) {
				rgba.pop();
				prefix = "rgb(";
			}

			return prefix + rgba.join(",") + ")";
		},
		toHslaString: function() {
			var prefix = "hsla(",
				hsla = jQuery.map( this.hsla(), function( v, i ) {
					if ( v == null ) {
						v = i > 2 ? 1 : 0;
					}

					// catch 1 and 2
					if ( i && i < 3 ) {
						v = Math.round( v * 100 ) + "%";
					}
					return v;
				});

			if ( hsla[ 3 ] === 1 ) {
				hsla.pop();
				prefix = "hsl(";
			}
			return prefix + hsla.join(",") + ")";
		},
		toHexString: function( includeAlpha ) {
			var rgba = this._rgba.slice(),
				alpha = rgba.pop();

			if ( includeAlpha ) {
				rgba.push( ~~( alpha * 255 ) );
			}

			return "#" + jQuery.map( rgba, function( v, i ) {

				// default to 0 when nulls exist
				v = ( v || 0 ).toString( 16 );
				return v.length === 1 ? "0" + v : v;
			}).join("");
		},
		toString: function() {
			return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();
		}
	};
	color.fn.parse.prototype = color.fn;

	// hsla conversions adapted from:
	// http://www.google.com/codesearch/p#OAMlx_jo-ck/src/third_party/WebKit/Source/WebCore/inspector/front-end/Color.js&d=7&l=193

	function hue2rgb( p, q, h ) {
		h = ( h + 1 ) % 1;
		if ( h * 6 < 1 ) {
			return p + (q - p) * 6 * h;
		}
		if ( h * 2 < 1) {
			return q;
		}
		if ( h * 3 < 2 ) {
			return p + (q - p) * ((2/3) - h) * 6;
		}
		return p;
	}

	spaces.hsla.to = function ( rgba ) {
		if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
			return [ null, null, null, rgba[ 3 ] ];
		}
		var r = rgba[ 0 ] / 255,
			g = rgba[ 1 ] / 255,
			b = rgba[ 2 ] / 255,
			a = rgba[ 3 ],
			max = Math.max( r, g, b ),
			min = Math.min( r, g, b ),
			diff = max - min,
			add = max + min,
			l = add * 0.5,
			h, s;

		if ( min === max ) {
			h = 0;
		} else if ( r === max ) {
			h = ( 60 * ( g - b ) / diff ) + 360;
		} else if ( g === max ) {
			h = ( 60 * ( b - r ) / diff ) + 120;
		} else {
			h = ( 60 * ( r - g ) / diff ) + 240;
		}

		if ( l === 0 || l === 1 ) {
			s = l;
		} else if ( l <= 0.5 ) {
			s = diff / add;
		} else {
			s = diff / ( 2 - add );
		}
		return [ Math.round(h) % 360, s, l, a == null ? 1 : a ];
	};

	spaces.hsla.from = function ( hsla ) {
		if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
			return [ null, null, null, hsla[ 3 ] ];
		}
		var h = hsla[ 0 ] / 360,
			s = hsla[ 1 ],
			l = hsla[ 2 ],
			a = hsla[ 3 ],
			q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
			p = 2 * l - q,
			r, g, b;

		return [
			Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
			Math.round( hue2rgb( p, q, h ) * 255 ),
			Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
			a
		];
	};


	each( spaces, function( spaceName, space ) {
		var props = space.props,
			cache = space.cache,
			to = space.to,
			from = space.from;

		// makes rgba() and hsla()
		color.fn[ spaceName ] = function( value ) {

			// generate a cache for this space if it doesn't exist
			if ( to && !this[ cache ] ) {
				this[ cache ] = to( this._rgba );
			}
			if ( value === undefined ) {
				return this[ cache ].slice();
			}

			var type = jQuery.type( value ),
				arr = ( type === "array" || type === "object" ) ? value : arguments,
				local = this[ cache ].slice(),
				ret;

			each( props, function( key, prop ) {
				var val = arr[ type === "object" ? key : prop.idx ];
				if ( val == null ) {
					val = local[ prop.idx ];
				}
				local[ prop.idx ] = clamp( val, prop );
			});

			if ( from ) {
				ret = color( from( local ) );
				ret[ cache ] = local;
				return ret;
			} else {
				return color( local );
			}
		};

		// makes red() green() blue() alpha() hue() saturation() lightness()
		each( props, function( key, prop ) {
			// alpha is included in more than one space
			if ( color.fn[ key ] ) {
				return;
			}
			color.fn[ key ] = function( value ) {
				var vtype = jQuery.type( value ),
					fn = ( key === 'alpha' ? ( this._hsla ? 'hsla' : 'rgba' ) : spaceName ),
					local = this[ fn ](),
					cur = local[ prop.idx ],
					match;

				if ( vtype === "undefined" ) {
					return cur;
				}

				if ( vtype === "function" ) {
					value = value.call( this, cur );
					vtype = jQuery.type( value );
				}
				if ( value == null && prop.empty ) {
					return this;
				}
				if ( vtype === "string" ) {
					match = rplusequals.exec( value );
					if ( match ) {
						value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
					}
				}
				local[ prop.idx ] = value;
				return this[ fn ]( local );
			};
		});
	});

	// add .fx.step functions
	each( stepHooks, function( i, hook ) {
		jQuery.cssHooks[ hook ] = {
			set: function( elem, value ) {
				var parsed, backgroundColor, curElem;

				if ( jQuery.type( value ) !== 'string' || ( parsed = stringParse( value ) ) )
				{
					value = color( parsed || value );
					if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {
						curElem = hook === "backgroundColor" ? elem.parentNode : elem;
						do {
							backgroundColor = jQuery.curCSS( curElem, "backgroundColor" );
						} while (
							( backgroundColor === "" || backgroundColor === "transparent" ) &&
							( curElem = curElem.parentNode ) &&
							curElem.style
						);

						value = value.blend( backgroundColor && backgroundColor !== "transparent" ?
							backgroundColor :
							"_default" );
					}

					value = value.toRgbaString();
				}
				elem.style[ hook ] = value;
			}
		};
		jQuery.fx.step[ hook ] = function( fx ) {
			if ( !fx.colorInit ) {
				fx.start = color( fx.elem, hook );
				fx.end = color( fx.end );
				fx.colorInit = true;
			}
			jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
		};
	});

	// detect rgba support
	jQuery(function() {
		var div = document.createElement( "div" ),
			div_style = div.style;

		div_style.cssText = "background-color:rgba(1,1,1,.5)";
		support.rgba = div_style.backgroundColor.indexOf( "rgba" ) > -1;
	});

	// Some named colors to work with
	// From Interface by Stefan Petre
	// http://interface.eyecon.ro/
	colors = jQuery.Color.names = {
		aqua: "#00ffff",
		azure: "#f0ffff",
		beige: "#f5f5dc",
		black: "#000000",
		blue: "#0000ff",
		brown: "#a52a2a",
		cyan: "#00ffff",
		darkblue: "#00008b",
		darkcyan: "#008b8b",
		darkgrey: "#a9a9a9",
		darkgreen: "#006400",
		darkkhaki: "#bdb76b",
		darkmagenta: "#8b008b",
		darkolivegreen: "#556b2f",
		darkorange: "#ff8c00",
		darkorchid: "#9932cc",
		darkred: "#8b0000",
		darksalmon: "#e9967a",
		darkviolet: "#9400d3",
		fuchsia: "#ff00ff",
		gold: "#ffd700",
		green: "#008000",
		indigo: "#4b0082",
		khaki: "#f0e68c",
		lightblue: "#add8e6",
		lightcyan: "#e0ffff",
		lightgreen: "#90ee90",
		lightgrey: "#d3d3d3",
		lightpink: "#ffb6c1",
		lightyellow: "#ffffe0",
		lime: "#00ff00",
		magenta: "#ff00ff",
		maroon: "#800000",
		navy: "#000080",
		olive: "#808000",
		orange: "#ffa500",
		pink: "#ffc0cb",
		purple: "#800080",
		violet: "#800080",
		red: "#ff0000",
		silver: "#c0c0c0",
		white: "#ffffff",
		yellow: "#ffff00",
		transparent: [ null, null, null, 0 ],
		_default: "#ffffff"
	};
})( jQuery );
/**
 * jquery.Jcrop.min.js v0.9.12 (build:20130202)
 * jQuery Image Cropping Plugin - released under MIT License
 * Copyright (c) 2008-2013 Tapmodo Interactive LLC
 * https://github.com/tapmodo/Jcrop
 */
(function(a){a.Jcrop=function(b,c){function i(a){return Math.round(a)+"px"}function j(a){return d.baseClass+"-"+a}function k(){return a.fx.step.hasOwnProperty("backgroundColor")}function l(b){var c=a(b).offset();return[c.left,c.top]}function m(a){return[a.pageX-e[0],a.pageY-e[1]]}function n(b){typeof b!="object"&&(b={}),d=a.extend(d,b),a.each(["onChange","onSelect","onRelease","onDblClick"],function(a,b){typeof d[b]!="function"&&(d[b]=function(){})})}function o(a,b,c){e=l(D),bc.setCursor(a==="move"?a:a+"-resize");if(a==="move")return bc.activateHandlers(q(b),v,c);var d=_.getFixed(),f=r(a),g=_.getCorner(r(f));_.setPressed(_.getCorner(f)),_.setCurrent(g),bc.activateHandlers(p(a,d),v,c)}function p(a,b){return function(c){if(!d.aspectRatio)switch(a){case"e":c[1]=b.y2;break;case"w":c[1]=b.y2;break;case"n":c[0]=b.x2;break;case"s":c[0]=b.x2}else switch(a){case"e":c[1]=b.y+1;break;case"w":c[1]=b.y+1;break;case"n":c[0]=b.x+1;break;case"s":c[0]=b.x+1}_.setCurrent(c),bb.update()}}function q(a){var b=a;return bd.watchKeys
(),function(a){_.moveOffset([a[0]-b[0],a[1]-b[1]]),b=a,bb.update()}}function r(a){switch(a){case"n":return"sw";case"s":return"nw";case"e":return"nw";case"w":return"ne";case"ne":return"sw";case"nw":return"se";case"se":return"nw";case"sw":return"ne"}}function s(a){return function(b){return d.disabled?!1:a==="move"&&!d.allowMove?!1:(e=l(D),W=!0,o(a,m(b)),b.stopPropagation(),b.preventDefault(),!1)}}function t(a,b,c){var d=a.width(),e=a.height();d>b&&b>0&&(d=b,e=b/a.width()*a.height()),e>c&&c>0&&(e=c,d=c/a.height()*a.width()),T=a.width()/d,U=a.height()/e,a.width(d).height(e)}function u(a){return{x:a.x*T,y:a.y*U,x2:a.x2*T,y2:a.y2*U,w:a.w*T,h:a.h*U}}function v(a){var b=_.getFixed();b.w>d.minSelect[0]&&b.h>d.minSelect[1]?(bb.enableHandles(),bb.done()):bb.release(),bc.setCursor(d.allowSelect?"crosshair":"default")}function w(a){if(d.disabled)return!1;if(!d.allowSelect)return!1;W=!0,e=l(D),bb.disableHandles(),bc.setCursor("crosshair");var b=m(a);return _.setPressed(b),bb.update(),bc.activateHandlers(x,v,a.type.substring
(0,5)==="touch"),bd.watchKeys(),a.stopPropagation(),a.preventDefault(),!1}function x(a){_.setCurrent(a),bb.update()}function y(){var b=a("<div></div>").addClass(j("tracker"));return g&&b.css({opacity:0,backgroundColor:"white"}),b}function be(a){G.removeClass().addClass(j("holder")).addClass(a)}function bf(a,b){function t(){window.setTimeout(u,l)}var c=a[0]/T,e=a[1]/U,f=a[2]/T,g=a[3]/U;if(X)return;var h=_.flipCoords(c,e,f,g),i=_.getFixed(),j=[i.x,i.y,i.x2,i.y2],k=j,l=d.animationDelay,m=h[0]-j[0],n=h[1]-j[1],o=h[2]-j[2],p=h[3]-j[3],q=0,r=d.swingSpeed;c=k[0],e=k[1],f=k[2],g=k[3],bb.animMode(!0);var s,u=function(){return function(){q+=(100-q)/r,k[0]=Math.round(c+q/100*m),k[1]=Math.round(e+q/100*n),k[2]=Math.round(f+q/100*o),k[3]=Math.round(g+q/100*p),q>=99.8&&(q=100),q<100?(bh(k),t()):(bb.done(),bb.animMode(!1),typeof b=="function"&&b.call(bs))}}();t()}function bg(a){bh([a[0]/T,a[1]/U,a[2]/T,a[3]/U]),d.onSelect.call(bs,u(_.getFixed())),bb.enableHandles()}function bh(a){_.setPressed([a[0],a[1]]),_.setCurrent([a[2],
a[3]]),bb.update()}function bi(){return u(_.getFixed())}function bj(){return _.getFixed()}function bk(a){n(a),br()}function bl(){d.disabled=!0,bb.disableHandles(),bb.setCursor("default"),bc.setCursor("default")}function bm(){d.disabled=!1,br()}function bn(){bb.done(),bc.activateHandlers(null,null)}function bo(){G.remove(),A.show(),A.css("visibility","visible"),a(b).removeData("Jcrop")}function bp(a,b){bb.release(),bl();var c=new Image;c.onload=function(){var e=c.width,f=c.height,g=d.boxWidth,h=d.boxHeight;D.width(e).height(f),D.attr("src",a),H.attr("src",a),t(D,g,h),E=D.width(),F=D.height(),H.width(E).height(F),M.width(E+L*2).height(F+L*2),G.width(E).height(F),ba.resize(E,F),bm(),typeof b=="function"&&b.call(bs)},c.src=a}function bq(a,b,c){var e=b||d.bgColor;d.bgFade&&k()&&d.fadeTime&&!c?a.animate({backgroundColor:e},{queue:!1,duration:d.fadeTime}):a.css("backgroundColor",e)}function br(a){d.allowResize?a?bb.enableOnly():bb.enableHandles():bb.disableHandles(),bc.setCursor(d.allowSelect?"crosshair":"default"),bb
.setCursor(d.allowMove?"move":"default"),d.hasOwnProperty("trueSize")&&(T=d.trueSize[0]/E,U=d.trueSize[1]/F),d.hasOwnProperty("setSelect")&&(bg(d.setSelect),bb.done(),delete d.setSelect),ba.refresh(),d.bgColor!=N&&(bq(d.shade?ba.getShades():G,d.shade?d.shadeColor||d.bgColor:d.bgColor),N=d.bgColor),O!=d.bgOpacity&&(O=d.bgOpacity,d.shade?ba.refresh():bb.setBgOpacity(O)),P=d.maxSize[0]||0,Q=d.maxSize[1]||0,R=d.minSize[0]||0,S=d.minSize[1]||0,d.hasOwnProperty("outerImage")&&(D.attr("src",d.outerImage),delete d.outerImage),bb.refresh()}var d=a.extend({},a.Jcrop.defaults),e,f=navigator.userAgent.toLowerCase(),g=/msie/.test(f),h=/msie [1-6]\./.test(f);typeof b!="object"&&(b=a(b)[0]),typeof c!="object"&&(c={}),n(c);var z={border:"none",visibility:"visible",margin:0,padding:0,position:"absolute",top:0,left:0},A=a(b),B=!0;if(b.tagName=="IMG"){if(A[0].width!=0&&A[0].height!=0)A.width(A[0].width),A.height(A[0].height);else{var C=new Image;C.src=A[0].src,A.width(C.width),A.height(C.height)}var D=A.clone().removeAttr("id").
css(z).show();D.width(A.width()),D.height(A.height()),A.after(D).hide()}else D=A.css(z).show(),B=!1,d.shade===null&&(d.shade=!0);t(D,d.boxWidth,d.boxHeight);var E=D.width(),F=D.height(),G=a("<div />").width(E).height(F).addClass(j("holder")).css({position:"relative",backgroundColor:d.bgColor}).insertAfter(A).append(D);d.addClass&&G.addClass(d.addClass);var H=a("<div />"),I=a("<div />").width("100%").height("100%").css({zIndex:310,position:"absolute",overflow:"hidden"}),J=a("<div />").width("100%").height("100%").css("zIndex",320),K=a("<div />").css({position:"absolute",zIndex:600}).dblclick(function(){var a=_.getFixed();d.onDblClick.call(bs,a)}).insertBefore(D).append(I,J);B&&(H=a("<img />").attr("src",D.attr("src")).css(z).width(E).height(F),I.append(H)),h&&K.css({overflowY:"hidden"});var L=d.boundary,M=y().width(E+L*2).height(F+L*2).css({position:"absolute",top:i(-L),left:i(-L),zIndex:290}).mousedown(w),N=d.bgColor,O=d.bgOpacity,P,Q,R,S,T,U,V=!0,W,X,Y;e=l(D);var Z=function(){function a(){var a={},b=["touchstart"
,"touchmove","touchend"],c=document.createElement("div"),d;try{for(d=0;d<b.length;d++){var e=b[d];e="on"+e;var f=e in c;f||(c.setAttribute(e,"return;"),f=typeof c[e]=="function"),a[b[d]]=f}return a.touchstart&&a.touchend&&a.touchmove}catch(g){return!1}}function b(){return d.touchSupport===!0||d.touchSupport===!1?d.touchSupport:a()}return{createDragger:function(a){return function(b){return d.disabled?!1:a==="move"&&!d.allowMove?!1:(e=l(D),W=!0,o(a,m(Z.cfilter(b)),!0),b.stopPropagation(),b.preventDefault(),!1)}},newSelection:function(a){return w(Z.cfilter(a))},cfilter:function(a){return a.pageX=a.originalEvent.changedTouches[0].pageX,a.pageY=a.originalEvent.changedTouches[0].pageY,a},isSupported:a,support:b()}}(),_=function(){function h(d){d=n(d),c=a=d[0],e=b=d[1]}function i(a){a=n(a),f=a[0]-c,g=a[1]-e,c=a[0],e=a[1]}function j(){return[f,g]}function k(d){var f=d[0],g=d[1];0>a+f&&(f-=f+a),0>b+g&&(g-=g+b),F<e+g&&(g+=F-(e+g)),E<c+f&&(f+=E-(c+f)),a+=f,c+=f,b+=g,e+=g}function l(a){var b=m();switch(a){case"ne":return[
b.x2,b.y];case"nw":return[b.x,b.y];case"se":return[b.x2,b.y2];case"sw":return[b.x,b.y2]}}function m(){if(!d.aspectRatio)return p();var f=d.aspectRatio,g=d.minSize[0]/T,h=d.maxSize[0]/T,i=d.maxSize[1]/U,j=c-a,k=e-b,l=Math.abs(j),m=Math.abs(k),n=l/m,r,s,t,u;return h===0&&(h=E*10),i===0&&(i=F*10),n<f?(s=e,t=m*f,r=j<0?a-t:t+a,r<0?(r=0,u=Math.abs((r-a)/f),s=k<0?b-u:u+b):r>E&&(r=E,u=Math.abs((r-a)/f),s=k<0?b-u:u+b)):(r=c,u=l/f,s=k<0?b-u:b+u,s<0?(s=0,t=Math.abs((s-b)*f),r=j<0?a-t:t+a):s>F&&(s=F,t=Math.abs(s-b)*f,r=j<0?a-t:t+a)),r>a?(r-a<g?r=a+g:r-a>h&&(r=a+h),s>b?s=b+(r-a)/f:s=b-(r-a)/f):r<a&&(a-r<g?r=a-g:a-r>h&&(r=a-h),s>b?s=b+(a-r)/f:s=b-(a-r)/f),r<0?(a-=r,r=0):r>E&&(a-=r-E,r=E),s<0?(b-=s,s=0):s>F&&(b-=s-F,s=F),q(o(a,b,r,s))}function n(a){return a[0]<0&&(a[0]=0),a[1]<0&&(a[1]=0),a[0]>E&&(a[0]=E),a[1]>F&&(a[1]=F),[Math.round(a[0]),Math.round(a[1])]}function o(a,b,c,d){var e=a,f=c,g=b,h=d;return c<a&&(e=c,f=a),d<b&&(g=d,h=b),[e,g,f,h]}function p(){var d=c-a,f=e-b,g;return P&&Math.abs(d)>P&&(c=d>0?a+P:a-P),Q&&Math.abs
(f)>Q&&(e=f>0?b+Q:b-Q),S/U&&Math.abs(f)<S/U&&(e=f>0?b+S/U:b-S/U),R/T&&Math.abs(d)<R/T&&(c=d>0?a+R/T:a-R/T),a<0&&(c-=a,a-=a),b<0&&(e-=b,b-=b),c<0&&(a-=c,c-=c),e<0&&(b-=e,e-=e),c>E&&(g=c-E,a-=g,c-=g),e>F&&(g=e-F,b-=g,e-=g),a>E&&(g=a-F,e-=g,b-=g),b>F&&(g=b-F,e-=g,b-=g),q(o(a,b,c,e))}function q(a){return{x:a[0],y:a[1],x2:a[2],y2:a[3],w:a[2]-a[0],h:a[3]-a[1]}}var a=0,b=0,c=0,e=0,f,g;return{flipCoords:o,setPressed:h,setCurrent:i,getOffset:j,moveOffset:k,getCorner:l,getFixed:m}}(),ba=function(){function f(a,b){e.left.css({height:i(b)}),e.right.css({height:i(b)})}function g(){return h(_.getFixed())}function h(a){e.top.css({left:i(a.x),width:i(a.w),height:i(a.y)}),e.bottom.css({top:i(a.y2),left:i(a.x),width:i(a.w),height:i(F-a.y2)}),e.right.css({left:i(a.x2),width:i(E-a.x2)}),e.left.css({width:i(a.x)})}function j(){return a("<div />").css({position:"absolute",backgroundColor:d.shadeColor||d.bgColor}).appendTo(c)}function k(){b||(b=!0,c.insertBefore(D),g(),bb.setBgOpacity(1,0,1),H.hide(),l(d.shadeColor||d.bgColor,1),bb.
isAwake()?n(d.bgOpacity,1):n(1,1))}function l(a,b){bq(p(),a,b)}function m(){b&&(c.remove(),H.show(),b=!1,bb.isAwake()?bb.setBgOpacity(d.bgOpacity,1,1):(bb.setBgOpacity(1,1,1),bb.disableHandles()),bq(G,0,1))}function n(a,e){b&&(d.bgFade&&!e?c.animate({opacity:1-a},{queue:!1,duration:d.fadeTime}):c.css({opacity:1-a}))}function o(){d.shade?k():m(),bb.isAwake()&&n(d.bgOpacity)}function p(){return c.children()}var b=!1,c=a("<div />").css({position:"absolute",zIndex:240,opacity:0}),e={top:j(),left:j().height(F),right:j().height(F),bottom:j()};return{update:g,updateRaw:h,getShades:p,setBgColor:l,enable:k,disable:m,resize:f,refresh:o,opacity:n}}(),bb=function(){function k(b){var c=a("<div />").css({position:"absolute",opacity:d.borderOpacity}).addClass(j(b));return I.append(c),c}function l(b,c){var d=a("<div />").mousedown(s(b)).css({cursor:b+"-resize",position:"absolute",zIndex:c}).addClass("ord-"+b);return Z.support&&d.bind("touchstart.jcrop",Z.createDragger(b)),J.append(d),d}function m(a){var b=d.handleSize,e=l(a,c++
).css({opacity:d.handleOpacity}).addClass(j("handle"));return b&&e.width(b).height(b),e}function n(a){return l(a,c++).addClass("jcrop-dragbar")}function o(a){var b;for(b=0;b<a.length;b++)g[a[b]]=n(a[b])}function p(a){var b,c;for(c=0;c<a.length;c++){switch(a[c]){case"n":b="hline";break;case"s":b="hline bottom";break;case"e":b="vline right";break;case"w":b="vline"}e[a[c]]=k(b)}}function q(a){var b;for(b=0;b<a.length;b++)f[a[b]]=m(a[b])}function r(a,b){d.shade||H.css({top:i(-b),left:i(-a)}),K.css({top:i(b),left:i(a)})}function t(a,b){K.width(Math.round(a)).height(Math.round(b))}function v(){var a=_.getFixed();_.setPressed([a.x,a.y]),_.setCurrent([a.x2,a.y2]),w()}function w(a){if(b)return x(a)}function x(a){var c=_.getFixed();t(c.w,c.h),r(c.x,c.y),d.shade&&ba.updateRaw(c),b||A(),a?d.onSelect.call(bs,u(c)):d.onChange.call(bs,u(c))}function z(a,c,e){if(!b&&!c)return;d.bgFade&&!e?D.animate({opacity:a},{queue:!1,duration:d.fadeTime}):D.css("opacity",a)}function A(){K.show(),d.shade?ba.opacity(O):z(O,!0),b=!0}function B
(){F(),K.hide(),d.shade?ba.opacity(1):z(1),b=!1,d.onRelease.call(bs)}function C(){h&&J.show()}function E(){h=!0;if(d.allowResize)return J.show(),!0}function F(){h=!1,J.hide()}function G(a){a?(X=!0,F()):(X=!1,E())}function L(){G(!1),v()}var b,c=370,e={},f={},g={},h=!1;d.dragEdges&&a.isArray(d.createDragbars)&&o(d.createDragbars),a.isArray(d.createHandles)&&q(d.createHandles),d.drawBorders&&a.isArray(d.createBorders)&&p(d.createBorders),a(document).bind("touchstart.jcrop-ios",function(b){a(b.currentTarget).hasClass("jcrop-tracker")&&b.stopPropagation()});var M=y().mousedown(s("move")).css({cursor:"move",position:"absolute",zIndex:360});return Z.support&&M.bind("touchstart.jcrop",Z.createDragger("move")),I.append(M),F(),{updateVisible:w,update:x,release:B,refresh:v,isAwake:function(){return b},setCursor:function(a){M.css("cursor",a)},enableHandles:E,enableOnly:function(){h=!0},showHandles:C,disableHandles:F,animMode:G,setBgOpacity:z,done:L}}(),bc=function(){function f(b){M.css({zIndex:450}),b?a(document).bind("touchmove.jcrop"
,k).bind("touchend.jcrop",l):e&&a(document).bind("mousemove.jcrop",h).bind("mouseup.jcrop",i)}function g(){M.css({zIndex:290}),a(document).unbind(".jcrop")}function h(a){return b(m(a)),!1}function i(a){return a.preventDefault(),a.stopPropagation(),W&&(W=!1,c(m(a)),bb.isAwake()&&d.onSelect.call(bs,u(_.getFixed())),g(),b=function(){},c=function(){}),!1}function j(a,d,e){return W=!0,b=a,c=d,f(e),!1}function k(a){return b(m(Z.cfilter(a))),!1}function l(a){return i(Z.cfilter(a))}function n(a){M.css("cursor",a)}var b=function(){},c=function(){},e=d.trackDocument;return e||M.mousemove(h).mouseup(i).mouseout(i),D.before(M),{activateHandlers:j,setCursor:n}}(),bd=function(){function e(){d.keySupport&&(b.show(),b.focus())}function f(a){b.hide()}function g(a,b,c){d.allowMove&&(_.moveOffset([b,c]),bb.updateVisible(!0)),a.preventDefault(),a.stopPropagation()}function i(a){if(a.ctrlKey||a.metaKey)return!0;Y=a.shiftKey?!0:!1;var b=Y?10:1;switch(a.keyCode){case 37:g(a,-b,0);break;case 39:g(a,b,0);break;case 38:g(a,0,-b);break;
case 40:g(a,0,b);break;case 27:d.allowSelect&&bb.release();break;case 9:return!0}return!1}var b=a('<input type="radio" />').css({position:"fixed",left:"-120px",width:"12px"}).addClass("jcrop-keymgr"),c=a("<div />").css({position:"absolute",overflow:"hidden"}).append(b);return d.keySupport&&(b.keydown(i).blur(f),h||!d.fixedSupport?(b.css({position:"absolute",left:"-20px"}),c.append(b).insertBefore(D)):b.insertBefore(D)),{watchKeys:e}}();Z.support&&M.bind("touchstart.jcrop",Z.newSelection),J.hide(),br(!0);var bs={setImage:bp,animateTo:bf,setSelect:bg,setOptions:bk,tellSelect:bi,tellScaled:bj,setClass:be,disable:bl,enable:bm,cancel:bn,release:bb.release,destroy:bo,focus:bd.watchKeys,getBounds:function(){return[E*T,F*U]},getWidgetSize:function(){return[E,F]},getScaleFactor:function(){return[T,U]},getOptions:function(){return d},ui:{holder:G,selection:K}};return g&&G.bind("selectstart",function(){return!1}),A.data("Jcrop",bs),bs},a.fn.Jcrop=function(b,c){var d;return this.each(function(){if(a(this).data("Jcrop")){if(
b==="api")return a(this).data("Jcrop");a(this).data("Jcrop").setOptions(b)}else this.tagName=="IMG"?a.Jcrop.Loader(this,function(){a(this).css({display:"block",visibility:"hidden"}),d=a.Jcrop(this,b),a.isFunction(c)&&c.call(d)}):(a(this).css({display:"block",visibility:"hidden"}),d=a.Jcrop(this,b),a.isFunction(c)&&c.call(d))}),this},a.Jcrop.Loader=function(b,c,d){function g(){f.complete?(e.unbind(".jcloader"),a.isFunction(c)&&c.call(f)):window.setTimeout(g,50)}var e=a(b),f=e[0];e.bind("load.jcloader",g).bind("error.jcloader",function(b){e.unbind(".jcloader"),a.isFunction(d)&&d.call(f)}),f.complete&&a.isFunction(c)&&(e.unbind(".jcloader"),c.call(f))},a.Jcrop.defaults={allowSelect:!0,allowMove:!0,allowResize:!0,trackDocument:!0,baseClass:"jcrop",addClass:null,bgColor:"black",bgOpacity:.6,bgFade:!1,borderOpacity:.4,handleOpacity:.5,handleSize:null,aspectRatio:0,keySupport:!0,createHandles:["n","s","e","w","nw","ne","se","sw"],createDragbars:["n","s","e","w"],createBorders:["n","s","e","w"],drawBorders:!0,dragEdges
:!0,fixedSupport:!0,touchSupport:null,shade:null,boxWidth:0,boxHeight:0,boundary:2,fadeTime:400,animationDelay:20,swingSpeed:3,minSelect:[0,0],maxSize:[0,0],minSize:[0,0],onChange:function(){},onSelect:function(){},onDblClick:function(){},onRelease:function(){}}})(jQuery);﻿/* http://keith-wood.name/realPerson.html
   Real Person Form Submission for jQuery v1.1.1.
   Written by Keith Wood (kwood{at}iinet.com.au) June 2009.
   Available under the MIT (https://github.com/jquery/jquery/blob/master/MIT-LICENSE.txt) license. 
   Please attribute the author if you use it. */

(function($) { // Hide scope, no $ conflict

/* Real person manager. */
function RealPerson() {
	this._defaults = {
		length: 6, // Number of characters to use
		includeNumbers: false, // True to use numbers as well as letters
		regenerate: 'Click to change', // Instruction text to regenerate
		hashName: '{n}Hash' // Name of the hash value field to compare with,
			// use {n} to substitute with the original field name
	};
}

var CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
var DOTS = [
	['   *   ', '  * *  ', '  * *  ', ' *   * ', ' ***** ', '*     *', '*     *'],
	['****** ', '*     *', '*     *', '****** ', '*     *', '*     *', '****** '],
	[' ***** ', '*     *', '*      ', '*      ', '*      ', '*     *', ' ***** '],
	['****** ', '*     *', '*     *', '*     *', '*     *', '*     *', '****** '],
	['*******', '*      ', '*      ', '****   ', '*      ', '*      ', '*******'],
	['*******', '*      ', '*      ', '****   ', '*      ', '*      ', '*      '],
	[' ***** ', '*     *', '*      ', '*      ', '*   ***', '*     *', ' ***** '],
	['*     *', '*     *', '*     *', '*******', '*     *', '*     *', '*     *'],
	['*******', '   *   ', '   *   ', '   *   ', '   *   ', '   *   ', '*******'],
	['      *', '      *', '      *', '      *', '      *', '*     *', ' ***** '],
	['*     *', '*   ** ', '* **   ', '**     ', '* **   ', '*   ** ', '*     *'],
	['*      ', '*      ', '*      ', '*      ', '*      ', '*      ', '*******'],
	['*     *', '**   **', '* * * *', '*  *  *', '*     *', '*     *', '*     *'],
	['*     *', '**    *', '* *   *', '*  *  *', '*   * *', '*    **', '*     *'],
	[' ***** ', '*     *', '*     *', '*     *', '*     *', '*     *', ' ***** '],
	['****** ', '*     *', '*     *', '****** ', '*      ', '*      ', '*      '],
	[' ***** ', '*     *', '*     *', '*     *', '*   * *', '*    * ', ' **** *'],
	['****** ', '*     *', '*     *', '****** ', '*   *  ', '*    * ', '*     *'],
	[' ***** ', '*     *', '*      ', ' ***** ', '      *', '*     *', ' ***** '],
	['*******', '   *   ', '   *   ', '   *   ', '   *   ', '   *   ', '   *   '],
	['*     *', '*     *', '*     *', '*     *', '*     *', '*     *', ' ***** '],
	['*     *', '*     *', ' *   * ', ' *   * ', '  * *  ', '  * *  ', '   *   '],
	['*     *', '*     *', '*     *', '*  *  *', '* * * *', '**   **', '*     *'],
	['*     *', ' *   * ', '  * *  ', '   *   ', '  * *  ', ' *   * ', '*     *'],
	['*     *', ' *   * ', '  * *  ', '   *   ', '   *   ', '   *   ', '   *   '],
	['*******', '     * ', '    *  ', '   *   ', '  *    ', ' *     ', '*******'],
	['  ***  ', ' *   * ', '*   * *', '*  *  *', '* *   *', ' *   * ', '  ***  '],
	['   *   ', '  **   ', ' * *   ', '   *   ', '   *   ', '   *   ', '*******'],
	[' ***** ', '*     *', '      *', '     * ', '   **  ', ' **    ', '*******'],
	[' ***** ', '*     *', '      *', '    ** ', '      *', '*     *', ' ***** '],
	['    *  ', '   **  ', '  * *  ', ' *  *  ', '*******', '    *  ', '    *  '],
	['*******', '*      ', '****** ', '      *', '      *', '*     *', ' ***** '],
	['  **** ', ' *     ', '*      ', '****** ', '*     *', '*     *', ' ***** '],
	['*******', '     * ', '    *  ', '   *   ', '  *    ', ' *     ', '*      '],
	[' ***** ', '*     *', '*     *', ' ***** ', '*     *', '*     *', ' ***** '],
	[' ***** ', '*     *', '*     *', ' ******', '      *', '     * ', ' ****  ']];

$.extend(RealPerson.prototype, {
	/* Class name added to elements to indicate already configured with real person. */
	markerClassName: 'hasRealPerson',
	/* Name of the data property for instance settings. */
	propertyName: 'realperson',

	/* Override the default settings for all real person instances.
	   @param  options  (object) the new settings to use as defaults
	   @return  (RealPerson) this object */
	setDefaults: function(options) {
		$.extend(this._defaults, options || {});
		return this;
	},

	/* Attach the real person functionality to an input field.
	   @param  target   (element) the control to affect
	   @param  options  (object) the custom options for this instance */
	_attachPlugin: function(target, options) {
		target = $(target);
		if (target.hasClass(this.markerClassName)) {
			return;
		}
		var inst = {options: $.extend({}, this._defaults)};
		target.addClass(this.markerClassName).data(this.propertyName, inst);
		this._optionPlugin(target, options);
	},

	/* Retrieve or reconfigure the settings for a control.
	   @param  target   (element) the control to affect
	   @param  options  (object) the new options for this instance or
	                    (string) an individual property name
	   @param  value    (any) the individual property value (omit if options
	                    is an object or to retrieve the value of a setting)
	   @return  (any) if retrieving a value */
	_optionPlugin: function(target, options, value) {
		target = $(target);
		var inst = target.data(this.propertyName);
		if (!options || (typeof options == 'string' && value == null)) { // Get option
			var name = options;
			options = (inst || {}).options;
			return (options && name ? options[name] : options);
		}

		if (!target.hasClass(this.markerClassName)) {
			return;
		}
		options = options || {};
		if (typeof options == 'string') {
			var name = options;
			options = {};
			options[name] = value;
		}
		$.extend(inst.options, options);
		target.prevAll('.' + this.propertyName + '-challenge,.' + this.propertyName + '-hash').
			remove().end().before(this._generateHTML(target, inst));
	},

	/* Generate the additional content for this control.
	   @param  target  (jQuery) the input field
	   @param  inst    (object) the current instance settings
	   @return  (string) the additional content */
	_generateHTML: function(target, inst) {
		var text = '';
		for (var i = 0; i < inst.options.length; i++) {
			text += CHARS.charAt(Math.floor(Math.random() *
				(inst.options.includeNumbers ? 36 : 26)));
		}
		var html = '<div class="' + this.propertyName + '-challenge">' +
			'<div class="' + this.propertyName + '-text">';
		for (var i = 0; i < DOTS[0].length; i++) {
			for (var j = 0; j < text.length; j++) {
				html += DOTS[CHARS.indexOf(text.charAt(j))][i].replace(/ /g, '&nbsp;') +
					'&nbsp;&nbsp;';
			}
			html += '<br>';
		}
		html += '</div><div class="' + this.propertyName + '-regen">' + inst.options.regenerate +
			'</div></div><input type="hidden" class="' + this.propertyName + '-hash" name="' +
			inst.options.hashName.replace(/\{n\}/, target.attr('name')) +
			'" value="' + this._hash(text) + '">';
		return html;
	},

	/* Enable the plugin functionality for a control.
	   @param  target  (element) the control to affect */
	_enablePlugin: function(target) {
		target = $(target);
		if (!target.hasClass(this.markerClassName)) {
			return;
		}
		target.removeClass(this.propertyName + '-disabled').prop('disabled', false).
			prevAll('.' + this.propertyName + '-challenge').removeClass(this.propertyName + '-disabled');
	},

	/* Disable the plugin functionality for a control.
	   @param  target  (element) the control to affect */
	_disablePlugin: function(target) {
		target = $(target);
		if (!target.hasClass(this.markerClassName)) {
			return;
		}
		target.addClass(this.propertyName + '-disabled').prop('disabled', true).
			prevAll('.' + this.propertyName + '-challenge').addClass(this.propertyName + '-disabled');
	},

	/* Remove the plugin functionality from a control.
	   @param  target  (element) the control to affect */
	_destroyPlugin: function(target) {
		target = $(target);
		if (!target.hasClass(this.markerClassName)) {
			return;
		}
		target.removeClass(this.markerClassName).
			removeData(this.propertyName).
			prevAll('.' + this.propertyName + '-challenge,.' + this.propertyName + '-hash').remove();
	},

	/* Compute a hash value for the given text.
	   @param  value  (string) the text to hash
	   @return  the corresponding hash value */
	_hash: function(value) {
		var hash = 5381;
		for (var i = 0; i < value.length; i++) {
			hash = ((hash << 5) + hash) + value.charCodeAt(i);
		}
		return hash;
	}
});

// The list of commands that return values and don't permit chaining
var getters = [''];

/* Determine whether a command is a getter and doesn't permit chaining.
   @param  command    (string, optional) the command to run
   @param  otherArgs  ([], optional) any other arguments for the command
   @return  true if the command is a getter, false if not */
function isNotChained(command, otherArgs) {
	if (command == 'option' && (otherArgs.length == 0 ||
			(otherArgs.length == 1 && typeof otherArgs[0] == 'string'))) {
		return true;
	}
	return $.inArray(command, getters) > -1;
}

/* Attach the real person functionality to a jQuery selection.
   @param  options  (object) the new settings to use for these instances (optional) or
                    (string) the command to run (optional)
   @return  (jQuery) for chaining further calls or
            (any) getter value */
$.fn.realperson = function(options) {
	var otherArgs = Array.prototype.slice.call(arguments, 1);
	if (isNotChained(options, otherArgs)) {
		return plugin['_' + options + 'Plugin'].apply(plugin, [this[0]].concat(otherArgs));
	}
	return this.each(function() {
		if (typeof options == 'string') {
			if (!plugin['_' + options + 'Plugin']) {
				throw 'Unknown command: ' + options;
			}
			plugin['_' + options + 'Plugin'].apply(plugin, [this].concat(otherArgs));
		}
		else {
			plugin._attachPlugin(this, options || {});
		}
	});
};

/* Initialise the real person functionality. */
var plugin = $.realperson = new RealPerson(); // Singleton instance

$(document).on('click', 'div.' + plugin.propertyName + '-challenge', function() {
	if (!$(this).hasClass(plugin.propertyName + '-disabled')) {
		$(this).nextAll('.' + plugin.markerClassName).realperson('option', {});
	}
});

})(jQuery);
/*
 * INFORMATION
 * ---------------------------
 * Owner:     jquery.webspirited.com
 * Developer: Matthew Hailwood
 * ---------------------------
 */

(function($){

    $.fn.autoGrowInput = function(o) {
       
        o = $.extend({
            maxWidth: 1000,
            minWidth: 0,
            comfortZone: 70
        }, o);

        this.filter('input:text').each(function(){
            var minWidth = o.minWidth || $(this).width(),
                val = '',
                input = $(this),
                testSubject = $('<tester/>').css({
                    position: 'absolute',
                    top: -9999,
                    left: -9999,
                    width: 'auto',
                    fontSize: input.css('fontSize'),
                    fontFamily: input.css('fontFamily'),
                    fontWeight: input.css('fontWeight'),
                    letterSpacing: input.css('letterSpacing'),
                    whiteSpace: 'nowrap'
                }),
                check = function() {

                    if (val === (val = input.val())) {return;}

                    // Enter new content into testSubject
                    var escaped = val.replace(/&/g, '&amp;').replace(/\s/g,'&nbsp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
                    testSubject.html(escaped);

                    // Calculate new width + whether to change
                    var testerWidth = testSubject.width(),
                        newWidth = (testerWidth + o.comfortZone) >= minWidth ? testerWidth + o.comfortZone : minWidth,
                        currentWidth = input.width(),
                        isValidWidthChange = (newWidth < currentWidth && newWidth >= minWidth)
                                             || (newWidth > minWidth && newWidth < o.maxWidth);

                    // Animate width
                    if (isValidWidthChange) {
                        //input.width(newWidth);
                        //input.css('cssText', "width: " + newWidth + "px !important");
                        var styles = input.attr('style');
                        input.css('cssText', "width: " + newWidth + "px !important;"+styles);
                    }

                };

            testSubject.insertAfter(input);

            $(this).bind('keyup keydown blur update', check);

        });

        return this;

    };

})(jQuery);

(function ($) {
    $.widget( "custom.catcomplete", $.ui.autocomplete, {
        _renderMenu: function( ul, items ) {
            var that = this,
                currentCategory = "";
            $.each( items, function( index, item ) {
                if ( item.category && item.category != currentCategory ) {
                    ul.append( "<li class='ui-autocomplete-category'>" + item.category + "</li>" );
                    currentCategory = item.category;
                }
                that._renderItemData( ul, item );
            });
        }
    });
    $.widget("ui.tagit", {

        // default options
        options:{
            //Maps directly to the jQuery-ui Autocomplete option
            tagSource:[],
            //What keys should trigger the completion of a tag
            triggerKeys:['enter', 'space', 'comma', 'tab','semicolon'],
            //custom regex for splitting data
            seperatorKeys: ['comma','semicolon'],
            //array method for setting initial tags
            initialTags:[],
            defaultType: 'none', //default type for newly added tags
            //minimum length of tags
            minLength:1,
            //minimum length of typed text before triggering jQuery-ui Autocomplete
            autocompleteMinLength: 1,
            //should an html select be rendered to allow for normal form submission
            select:false,
            //if false only tags from `tagSource` are able to be entered
            allowNewTags:true,
            //should tag and Tag be treated as identical
            caseSensitive:false,
            //should tags be drag-and-drop sortable?
            //true: entire tag is draggable
            //'handle': a handle is rendered which is draggable
            sortable:false,
            editable:false,
            //color to highlight text when a duplicate tag is entered
            highlightOnExistColor:'#0F0',
            //empty search on focus
            emptySearch:true,
            //callback function for when tags are changed
            //tagValue: value of tag that was changed
            //action e.g. removed, added, sorted
            tagsChanged:function (tagValue, action, element) {
                ;
            },
            maxTags: undefined,
            //should 'paste' event trigger 'blur', thus potentially adding a new tag
            // (true for backwards compatibility)
            blurOnPaste:true
        },

        _splitAt:/\ |,/g,
        _existingAtIndex:0,
        _keys:{
            backspace:[8],
            enter:[13],
            space:[32],
            comma:[44, 188],
            tab:[9],
            semicolon:[59,186]
        },

        _sortable:{
            sorting:-1
        },

        _idEditing: false,

        //initialization function
        _create:function () {

            var self = this;
            this.tagsArray = [];
            this.timer = null;
            //add class "tagit" for theming
            this.element.addClass("tagit ui-widget ui-widget-content ui-corner-all");

            //add any initial tags added through html to the array
            this.element.children('li').each(function () {
                var tag = $(this);
                var tagValue = tag.attr('tagValue') || $(this).data('value');;
                self.options.initialTags.push({label:tag.text(), value:(tagValue ? tagValue : tag.text())});
            });

            pushRegex = function(list, key,regex){
                if ($.inArray(key, self.options.seperatorKeys) != -1){
                    regexes.push(regex);
                }
            };
            //setup split according to the trigger keys
            self._splitAt = null;
            var regexes = [];
            
            pushRegex(regexes, 'space', /\ /);
            pushRegex(regexes, 'semicolon', /;/);
            pushRegex(regexes, 'comma', /,/);
            
            var regexString = $.map(regexes,function(x){
                return x.source;
            }).join('|');
            
            self._splitAt = new RegExp(regexString,"g");

            //add the html input
            this.element.html('<li class="tagit-new"><input class="tagit-input ui-widget-content" type="text" placeholder="Add Tags"/></li>');

            this.input = this.element.find(".tagit-input");
            this.input.autoGrowInput();
            //setup click handler
            $(this.element).click(function (e) {
                if ($(e.target).hasClass('tagit-close')) {
                    // Removes a tag when the little 'x' is clicked.
                    var parent = $(e.target).parent();

                    var tag = self.tagsArray[parent.index()];

                    tag.element.remove();
                    self._popTag(tag);
                }
                else {
                    if (!self._isEditing) { //focus default input if we're not editing existing tag at the moment
                        self.input.focus();
                    }
                    if (self.options.emptySearch && $(e.target).hasClass('tagit-input') && self.input.val() == '' && self.input.catcomplete != undefined) {
                        self.input.catcomplete('search');
                    }
                    if (self.options.editable && $(e.target).hasClass('tagit-label')) {
                        self._edit(e.target);
                    }
                }
            });

            //setup autocomplete handler
            var os = this.options.select;
            var ml = this.options.minLength;
            this.options.appendTo = this.element;
            this.options.source = this.options.tagSource;
            this.options.select = function (event, ui) {
                self.input.data('autoCompleteTag', true);
            clearTimeout(self.timer);
            if (self.options.maxTags !== undefined && self.tagsArray.length == self.options.maxTags) {
                self.input.val("");
            }
            else {
                if (ui.item.label === undefined)
                    self._addTag({ label: ui.item.value});
                else
                    self._addTag({ label: ui.item.label, value: ui.item.value, type: ui.item.category});
            }

            return false;
        },

            this.options.focus = function (event, ui) {
                if (ui.item.label !== undefined && /^key/.test(event.originalEvent.type)) {
                    self.input.val(ui.item.label);
                    self.input.data('value', ui.item.value);
                    return false;
                }
            };
            this.options.autoFocus = !this.options.allowNewTags;
            this.options.minLength = this.options.autocompleteMinLength;
            this.input.catcomplete(this.options);
            this.options.minLength = ml;
            this.options.select = os;

            self.isKeyEventProcessed = false;
            this.input.keyup(function(e) {
                self.isKeyEventProcessed = false;
            });

            this.input.keydown(function (e) {
                self._processKeyEvent(e);
            });
            //setup keydown handler
            this.input.keypress(function (e) {
                self._processKeyEvent(e);
            });

            this.input.bind("paste", function (e) {
                if (self.options.blurOnPaste) {
                    var input = $(this);
                    self.timer = setTimeout(function () { input.blur(); }, 0);
                }
            });

            //setup blur handler
            this.input.blur(function (e) {
                self.currentLabel = $(this).val();
                self.currentValue = $(this).data('value');
                if (self.options.allowNewTags) {
                    self.timer = setTimeout(function () {
                        self._addTag({ label: self.currentLabel, value: self.currentValue, type: self.options.defaultType});
                        self.currentValue = '';
                        self.currentLabel = '';
                    }, 400);
                }
                $(this).val('').removeData('value');
                return false;
            });

            //define missing trim function for strings
            if (!String.prototype.trim) {
                String.prototype.trim = function () {
                    return this.replace(/^\s+|\s+$/g, '');
                };
            }

            if (this.options.select) {
                this.select = $('<select class="tagit-hiddenSelect" name="' +
                    (this.element.attr('name') || this.element.data('name')) +
                    '" multiple="multiple"></select>');
                this.element.after(this.select);
            }
            this._initialTags();

            //setup sortable handler
            if (self.options.sortable !== false) {

                var soptions = {
                    items:'.tagit-choice',
                    containment:'parent',
                    opacity: 0.6,
                    tolerance: 'pointer',
                    start:function (event, ui) {
                        self._sortable.tag = $(ui.item);
                        self._sortable.origIndex = self._sortable.tag.index();
                    },
                    update:function (event, ui) {
                        self._sortable.newIndex = self._sortable.tag.index();
                        self._moveTag(self._sortable.origIndex, self._sortable.newIndex);
                        if(self.options.tagsChanged){
                            var tag = self.tagsArray[self._sortable.newIndex];
                            self.options.tagsChanged(tag.value, 'moved', tag.element);
                        }
                    }
                };

                if (self.options.sortable == 'handle') {
                    soptions.handle = 'a.ui-icon';
                    soptions.cursor = 'move';
                }

                self.element.sortable(soptions);
            }

        },

        _processKeyEvent: function(e) {
            if (this.isKeyEventProcessed) {
                return; //don't process key events twice
            }

            var pressedKey = e.which || e.keyCode || e.charCode;
            var lastLi = this.element.children(".tagit-choice:last");

            this.isKeyEventProcessed = true;

            if (pressedKey == this._keys.backspace) {
                return this._backspace(lastLi);
            }

            if (this._isInitKey(pressedKey) && !(this._isTabKey(pressedKey) && this.value == '' && !this.input.data('autoCompleteTag'))) {
                e.preventDefault();

                this.input.data('autoCompleteTag', false);

                if (!this.options.allowNewTags || (this.options.maxTags !== undefined && this.tagsArray.length == this.options.maxTags)) {
                    this.input.val("");
                }
                else if (this.options.allowNewTags && this.input.val().length >= this.options.minLength) {
                    this._addTag({ label: this.input.val(), type: this.options.defaultType});
                }
            }

            if (this.options.maxLength !== undefined && this.input.val().length > this.options.maxLength) {
                e.preventDefault();
                this.input.val(this.input.val().substring(0, this.options.maxLength));
            }

            if (lastLi.hasClass('selected'))
                lastLi.removeClass('selected');

            this.lastKey = pressedKey;
        },

		_postEdit: function(element, editInput, initialValue) {
            var finishEditing = $.proxy(function() {
                editInput.remove();
                $(element).removeClass('hidden');
                $(element).parent().removeClass('edited');
                this._isEditing = false;
            }, this);

            return function() {
                var initialTagIndex = $(element).parent().index();
                var initialTag = this.tagsArray[initialTagIndex];
                //try to add new and if success - remove old
                var newValue = editInput.val();
                if (this._splitAt && newValue.search(this._splitAt) > 0) {
                    newValue = newValue.split(this._splitAt)[0]; //use only first value part - no splitters in edit
                }
                if (newValue == initialValue) {
                    finishEditing();
                } else if (this._addTag({ label: newValue})) {
                    //else attempt to add new tag and if succeeded - remove old element and edit box
                    initialTag.element.remove();
                    this._popTag(initialTag);
                    var lastTagIndex = this.tagsArray.length - 1;
                    if (lastTagIndex != initialTagIndex) {
                        var lastTag = this.tagsArray[lastTagIndex];
                        //visually move tag to the old place
                        lastTag.element.insertBefore(this.tagsArray[initialTagIndex].element);
                        this._moveTag(this.tagsArray.length - 1, initialTagIndex); //move element from last to old place
                        if(this.options.tagsChanged) { //fire an update
                            var tag = this.tagsArray[initialTagIndex];
                            this.options.tagsChanged(tag.value, 'moved', tag.element);
                        }
                    }
                    finishEditing();
                }
            }
        },

        _edit: function(element) {
            this._isEditing = true;
            var initialValue = $(element).text();
            var editInput = $('<input>');
            editInput.val(initialValue);
            $(element).parent().addClass('edited');
            editInput.addClass('tagit-edit');
            editInput.css('width', $(element).outerWidth());
            $(element).addClass('hidden');
            editInput.blur($.proxy(this._postEdit(element, editInput, initialValue), this));
            editInput.keypress($.proxy(function(e) {
                var pressedKey = e.which || e.keyCode || e.charCode;
                if (this._isInitKey(pressedKey)) {
                    editInput.blur();
                }
            }, this));
            $(element).before(editInput);
            editInput[0].select();
        },

        _popSelect:function (tag) {
            $('option:eq(' + tag.index + ')', this.select).remove();
            this.select.change();
        },

        _addSelect:function (tag) {
            this.select.append('<option selected="selected" value="' + tag.value + '">' + tag.label + '</option>');
            this.select.change();
        },

        _popTag:function (tag) {

            //are we removing the last tag or a specific tag?
            if (tag === undefined)
                tag = this.tagsArray.pop();
            else
                this.tagsArray.splice(tag.index, 1);


            //maintain the indexes
            for (var ind in this.tagsArray)
                this.tagsArray[ind].index = ind;

            if (this.options.select)
                this._popSelect(tag);
            if (this.options.tagsChanged)
                this.options.tagsChanged(tag? (tag.value || tag.label) : null, 'popped', tag);
            return;
        },

        _addTag:function (newTag) {
            if (newTag.label === undefined) { //set label to value to simplify possible use-cases, eg. if we send data from server where title isn't set
                newTag.label = newTag.value;
            }
            this.input.catcomplete('close').val("");

            //are we trying to add a tag that should be split?
            if (this._splitAt && newTag.label.search(this._splitAt) > 0) {
                var result = newTag.label.split(this._splitAt);
                for (var i = 0; i < result.length; i++)
                    this._addTag({ label: result[i], value: newTag.value});
                return;
            }

            newTag.label = newTag.label.replace(/,+$/, "").trim();

            if (newTag.label == "")
                return false;
            
            //escape < > and &
            newTag.label = newTag.label.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            
            var tagExists = this._exists(newTag.label, newTag.value);
            if (tagExists !== false) {
                this._highlightExisting(tagExists);
                return false;
            }

            var tag = this.tag(newTag.label, newTag.value, newTag.type);
            tag.element = $('<li class="tagit-choice ui-widget-content ui-state-default"'
                + (newTag.type !== undefined ? ' tagit-type-' + newTag.type + '"' : '"')
                + (newTag.value !== undefined ? ' tagValue="' + newTag.value + '"' : '') + '>'
                + (this.options.sortable == 'handle' ? '<a class="ui-icon ui-icon-grip-dotted-vertical" style="float:left"></a>' : '')
                + '<div class="tagit-label">' + newTag.label + '</div>' + '<a class="tagit-close ui-state-error-text">x</a></li>');
            tag.element.insertBefore(this.input.parent());
            this.tagsArray.push(tag);

            this.input.val("");

            if (this.options.select)
                this._addSelect(tag);
            if (this.options.tagsChanged)
                this.options.tagsChanged(tag.label, 'added', tag.element);
            return true;
        },

        _exists:function (label, value) {
            if (this.tagsArray.length == 0)
                return false;

            label = this._lowerIfCaseInsensitive(label);
            value = this._lowerIfCaseInsensitive(value);

            for (var ind in this.tagsArray) {
                if (this._lowerIfCaseInsensitive(this.tagsArray[ind].label) == label) {
                    if (value !== undefined) {
                        if (this._lowerIfCaseInsensitive(this.tagsArray[ind].value) == value)
                            return ind;
                    } else {
                        return ind;
                    }
                }
            }

            return false;
        },

        _highlightExisting:function (index) {
            if (this.options.highlightOnExistColor === undefined)
                return;
            var tag = this.tagsArray[index];
            tag.element.stop();

            var initialColor = tag.element.css('color');
            tag.element.animate({color:this.options.highlightOnExistColor}, 100).animate({'color':initialColor}, 800, null, function() {
                //reset style to initial
                tag.element.attr('style', '');
            });
        },

        _isInitKey:function (keyCode) {

            var keyName = "";
            for (var key in this._keys)
                if ($.inArray(keyCode, this._keys[key]) != -1)
                    keyName = key;

            if ($.inArray(keyName, this.options.triggerKeys) != -1)
                return true;
            return false;
        },

        _isTabKey:function (keyCode) {
            var tabKeys = this._keys['tab'];
            return $.inArray(keyCode, tabKeys) > -1;
        },

        _removeTag:function () {
            this._popTag();
            this.element.children(".tagit-choice:last").remove();
        },

        _backspace:function (li) {
            if (this.input.val() == "") {
                // When backspace is pressed, the last tag is deleted.
                if (this.lastKey == this._keys.backspace) {
                    this._popTag();
                    li.remove();
                    this.lastKey = null;
                } else {
                    li.removeClass('ui-state-default').addClass('selected ui-state-error');
                    this.lastKey = this._keys.backspace;
                }
            }
            return true;
        },

        _initialTags:function () {
            var input = this;
            var _temp;
            if (this.options.tagsChanged)
                _temp = this.options.tagsChanged;
            this.options.tagsChanged = null;

            if (this.options.initialTags.length != 0) {
                $(this.options.initialTags).each(function (i, element) {
                    if (typeof (element) == "object")
                        input._addTag({ label: element.label, value: element.value, type: element.type});
                    else
                        input._addTag({ label: element});
                });
            }
            this.options.tagsChanged = _temp;
            this.options.tagsChanged(null, 'tagsInited', null);
        },

        _lowerIfCaseInsensitive:function (inp) {

            if (inp === undefined || typeof(inp) != typeof("a"))
                return inp;

            if (this.options.caseSensitive)
                return inp;

            return inp.toLowerCase();

        },

        _moveTag: function (old_index, new_index) {
            this.tagsArray.splice(new_index, 0, this.tagsArray.splice(old_index, 1)[0]);
            for (var ind in this.tagsArray)
                this.tagsArray[ind].index = ind;

            if(this.options.select){
                $('option:eq(' + old_index + ')', this.select).insertBefore($('option:eq(' + new_index + ')', this.select));
            }
        },
        tags:function () {
            return this.tagsArray;
        },

        destroy:function () {
            $.Widget.prototype.destroy.apply(this, arguments); // default destroy
            clearTimeout(this.timer);
            this.tagsArray = [];
        },

        reset:function () {
            this.element.find(".tagit-choice").remove();
            this.tagsArray = [];
            if (this.options.select) {
                this.select.children().remove();
                this.select.change();
            }
            this._initialTags();
            if (this.options.tagsChanged)
                this.options.tagsChanged(null, 'reset', null);
        },

        fill:function (tags) {

            if (tags !== undefined)
                this.options.initialTags = tags;
            this.reset();
        },

        add:function (label, value) {
            if(typeof(label) == "object")
                return this._addTag({ label: label.label, value: label.value});
            else
                return this._addTag({ label: label, value: value});
        },

        autocomplete: function(){
            return this.input.data("autocomplete");
        },

        tag:function (label, value, type, element) {
            var self = this;
            return {
                label:label,
                value:(value === undefined ? label : value),
                type: type,
                element:element,
                index:self.tagsArray.length
            };
        },

        remove:function (label, value) {
            if (this.tagsArray.length == 0)
                return false;

            label = this._lowerIfCaseInsensitive(label);
            value = this._lowerIfCaseInsensitive(value);

            for (var i = 0; i < this.tagsArray.length; i++) {
                if (this._lowerIfCaseInsensitive(this.tagsArray[i].value) == value || this._lowerIfCaseInsensitive(this.tagsArray[i].label) == label) {
                    break;
                }
            }

            if (i >= 0 && i < this.tagsArray.length) {
                var tag = this.tagsArray[i];
                tag.element.remove();
                this._popTag(tag);
                return true;
            }
            return false;
        }


    });
})(jQuery);
/*
 * jsTree 1.0-rc3
 * http://jstree.com/
 *
 * Copyright (c) 2010 Ivan Bozhanov (vakata.com)
 *
 * Licensed same as jquery - under the terms of either the MIT License or the GPL Version 2 License
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 *
 * $Date: 2011-02-09 01:17:14 +0200 (ср, 09 февр 2011) $
 * $Revision: 236 $
 */

/*jslint browser: true, onevar: true, undef: true, bitwise: true, strict: true */
/*global window : false, clearInterval: false, clearTimeout: false, document: false, setInterval: false, setTimeout: false, jQuery: false, navigator: false, XSLTProcessor: false, DOMParser: false, XMLSerializer: false, ActiveXObject: false */

"use strict";

// top wrapper to prevent multiple inclusion (is this OK?)
(function () { if(jQuery && jQuery.jstree) { return; }
	var is_ie6 = false, is_ie7 = false, is_ff2 = false;

/* 
 * jsTree core
 */
(function ($) {
	// Common functions not related to jsTree 
	// decided to move them to a `vakata` "namespace"
	$.vakata = {};
	// CSS related functions
	$.vakata.css = {
		get_css : function(rule_name, delete_flag, sheet) {
			rule_name = rule_name.toLowerCase();
			var css_rules = sheet.cssRules || sheet.rules,
				j = 0;
			do {
				if(css_rules.length && j > css_rules.length + 5) { return false; }
				if(css_rules[j].selectorText && css_rules[j].selectorText.toLowerCase() == rule_name) {
					if(delete_flag === true) {
						if(sheet.removeRule) { sheet.removeRule(j); }
						if(sheet.deleteRule) { sheet.deleteRule(j); }
						return true;
					}
					else { return css_rules[j]; }
				}
			}
			while (css_rules[++j]);
			return false;
		},
		add_css : function(rule_name, sheet) {
			if($.jstree.css.get_css(rule_name, false, sheet)) { return false; }
			if(sheet.insertRule) { sheet.insertRule(rule_name + ' { }', 0); } else { sheet.addRule(rule_name, null, 0); }
			return $.vakata.css.get_css(rule_name);
		},
		remove_css : function(rule_name, sheet) { 
			return $.vakata.css.get_css(rule_name, true, sheet); 
		},
		add_sheet : function(opts) {
			var tmp = false, is_new = true;
			if(opts.str) {
				if(opts.title) { tmp = $("style[id='" + opts.title + "-stylesheet']")[0]; }
				if(tmp) { is_new = false; }
				else {
					tmp = document.createElement("style");
					tmp.setAttribute('type',"text/css");
					if(opts.title) { tmp.setAttribute("id", opts.title + "-stylesheet"); }
				}
				if(tmp.styleSheet) {
					if(is_new) { 
						document.getElementsByTagName("head")[0].appendChild(tmp); 
						tmp.styleSheet.cssText = opts.str; 
					}
					else {
						tmp.styleSheet.cssText = tmp.styleSheet.cssText + " " + opts.str; 
					}
				}
				else {
					tmp.appendChild(document.createTextNode(opts.str));
					document.getElementsByTagName("head")[0].appendChild(tmp);
				}
				return tmp.sheet || tmp.styleSheet;
			}
			if(opts.url) {
				if(document.createStyleSheet) {
					try { tmp = document.createStyleSheet(opts.url); } catch (e) { }
				}
				else {
					tmp			= document.createElement('link');
					tmp.rel		= 'stylesheet';
					tmp.type	= 'text/css';
					tmp.media	= "all";
					tmp.href	= opts.url;
					document.getElementsByTagName("head")[0].appendChild(tmp);
					return tmp.styleSheet;
				}
			}
		}
	};

	// private variables 
	var instances = [],			// instance array (used by $.jstree.reference/create/focused)
		focused_instance = -1,	// the index in the instance array of the currently focused instance
		plugins = {},			// list of included plugins
		prepared_move = {};		// for the move_node function

	// jQuery plugin wrapper (thanks to jquery UI widget function)
	$.fn.jstree = function (settings) {
		var isMethodCall = (typeof settings == 'string'), // is this a method call like $().jstree("open_node")
			args = Array.prototype.slice.call(arguments, 1), 
			returnValue = this;

		// if a method call execute the method on all selected instances
		if(isMethodCall) {
			if(settings.substring(0, 1) == '_') { return returnValue; }
			this.each(function() {
				var instance = instances[$.data(this, "jstree_instance_id")],
					methodValue = (instance && $.isFunction(instance[settings])) ? instance[settings].apply(instance, args) : instance;
					if(typeof methodValue !== "undefined" && (settings.indexOf("is_") === 0 || (methodValue !== true && methodValue !== false))) { returnValue = methodValue; return false; }
			});
		}
		else {
			this.each(function() {
				// extend settings and allow for multiple hashes and $.data
				var instance_id = $.data(this, "jstree_instance_id"),
					a = [],
					b = settings ? $.extend({}, true, settings) : {},
					c = $(this), 
					s = false, 
					t = [];
				a = a.concat(args);
				if(c.data("jstree")) { a.push(c.data("jstree")); }
				b = a.length ? $.extend.apply(null, [true, b].concat(a)) : b;

				// if an instance already exists, destroy it first
				if(typeof instance_id !== "undefined" && instances[instance_id]) { instances[instance_id].destroy(); }
				// push a new empty object to the instances array
				instance_id = parseInt(instances.push({}),10) - 1;
				// store the jstree instance id to the container element
				$.data(this, "jstree_instance_id", instance_id);
				// clean up all plugins
				b.plugins = $.isArray(b.plugins) ? b.plugins : $.jstree.defaults.plugins.slice();
				b.plugins.unshift("core");
				// only unique plugins
				b.plugins = b.plugins.sort().join(",,").replace(/(,|^)([^,]+)(,,\2)+(,|$)/g,"$1$2$4").replace(/,,+/g,",").replace(/,$/,"").split(",");

				// extend defaults with passed data
				s = $.extend(true, {}, $.jstree.defaults, b);
				s.plugins = b.plugins;
				$.each(plugins, function (i, val) { 
					if($.inArray(i, s.plugins) === -1) { s[i] = null; delete s[i]; } 
					else { t.push(i); }
				});
				s.plugins = t;

				// push the new object to the instances array (at the same time set the default classes to the container) and init
				instances[instance_id] = new $.jstree._instance(instance_id, $(this).addClass("jstree jstree-" + instance_id), s); 
				// init all activated plugins for this instance
				$.each(instances[instance_id]._get_settings().plugins, function (i, val) { instances[instance_id].data[val] = {}; });
				$.each(instances[instance_id]._get_settings().plugins, function (i, val) { if(plugins[val]) { plugins[val].__init.apply(instances[instance_id]); } });
				// initialize the instance
				setTimeout(function() { if(instances[instance_id]) { instances[instance_id].init(); } }, 0);
			});
		}
		// return the jquery selection (or if it was a method call that returned a value - the returned value)
		return returnValue;
	};
	// object to store exposed functions and objects
	$.jstree = {
		defaults : {
			plugins : []
		},
		_focused : function () { return instances[focused_instance] || null; },
		_reference : function (needle) { 
			// get by instance id
			if(instances[needle]) { return instances[needle]; }
			// get by DOM (if still no luck - return null
			var o = $(needle); 
			if(!o.length && typeof needle === "string") { o = $("#" + needle); }
			if(!o.length) { return null; }
			return instances[o.closest(".jstree").data("jstree_instance_id")] || null; 
		},
		_instance : function (index, container, settings) { 
			// for plugins to store data in
			this.data = { core : {} };
			this.get_settings	= function () { return $.extend(true, {}, settings); };
			this._get_settings	= function () { return settings; };
			this.get_index		= function () { return index; };
			this.get_container	= function () { return container; };
			this.get_container_ul = function () { return container.children("ul:eq(0)"); };
			this._set_settings	= function (s) { 
				settings = $.extend(true, {}, settings, s);
			};
		},
		_fn : { },
		plugin : function (pname, pdata) {
			pdata = $.extend({}, {
				__init		: $.noop, 
				__destroy	: $.noop,
				_fn			: {},
				defaults	: false
			}, pdata);
			plugins[pname] = pdata;

			$.jstree.defaults[pname] = pdata.defaults;
			$.each(pdata._fn, function (i, val) {
				val.plugin		= pname;
				val.old			= $.jstree._fn[i];
				$.jstree._fn[i] = function () {
					var rslt,
						func = val,
						args = Array.prototype.slice.call(arguments),
						evnt = new $.Event("before.jstree"),
						rlbk = false;

					if(this.data.core.locked === true && i !== "unlock" && i !== "is_locked") { return; }

					// Check if function belongs to the included plugins of this instance
					do {
						if(func && func.plugin && $.inArray(func.plugin, this._get_settings().plugins) !== -1) { break; }
						func = func.old;
					} while(func);
					if(!func) { return; }

					// context and function to trigger events, then finally call the function
					if(i.indexOf("_") === 0) {
						rslt = func.apply(this, args);
					}
					else {
						rslt = this.get_container().triggerHandler(evnt, { "func" : i, "inst" : this, "args" : args, "plugin" : func.plugin });
						if(rslt === false) { return; }
						if(typeof rslt !== "undefined") { args = rslt; }

						rslt = func.apply(
							$.extend({}, this, { 
								__callback : function (data) { 
									this.get_container().triggerHandler( i + '.jstree', { "inst" : this, "args" : args, "rslt" : data, "rlbk" : rlbk });
								},
								__rollback : function () { 
									rlbk = this.get_rollback();
									return rlbk;
								},
								__call_old : function (replace_arguments) {
									return func.old.apply(this, (replace_arguments ? Array.prototype.slice.call(arguments, 1) : args ) );
								}
							}), args);
					}

					// return the result
					return rslt;
				};
				$.jstree._fn[i].old = val.old;
				$.jstree._fn[i].plugin = pname;
			});
		},
		rollback : function (rb) {
			if(rb) {
				if(!$.isArray(rb)) { rb = [ rb ]; }
				$.each(rb, function (i, val) {
					instances[val.i].set_rollback(val.h, val.d);
				});
			}
		}
	};
	// set the prototype for all instances
	$.jstree._fn = $.jstree._instance.prototype = {};

	// load the css when DOM is ready
	$(function() {
		// code is copied from jQuery ($.browser is deprecated + there is a bug in IE)
		var u = navigator.userAgent.toLowerCase(),
			v = (u.match( /.+?(?:rv|it|ra|ie)[\/: ]([\d.]+)/ ) || [0,'0'])[1],
			css_string = '' + 
				'.jstree ul, .jstree li { display:block; margin:0 0 0 0; padding:0 0 0 0; list-style-type:none; } ' + 
				'.jstree li { display:block; min-height:18px; line-height:18px; white-space:nowrap; margin-left:18px; min-width:18px; } ' + 
				'.jstree-rtl li { margin-left:0; margin-right:18px; } ' + 
				'.jstree > ul > li { margin-left:0px; } ' + 
				'.jstree-rtl > ul > li { margin-right:0px; } ' + 
				'.jstree ins { display:inline-block; text-decoration:none; width:18px; height:18px; margin:0 0 0 0; padding:0; } ' + 
				'.jstree a { display:inline-block; line-height:16px; height:16px; color:black; white-space:nowrap; text-decoration:none; padding:1px 2px; margin:0; } ' + 
				'.jstree a:focus { outline: none; } ' + 
				'.jstree a > ins { height:16px; width:16px; } ' + 
				'.jstree a > .jstree-icon { margin-right:3px; } ' + 
				'.jstree-rtl a > .jstree-icon { margin-left:3px; margin-right:0; } ' + 
				'li.jstree-open > ul { display:block; } ' + 
				'li.jstree-closed > ul { display:none; } ';
		// Correct IE 6 (does not support the > CSS selector)
		if(/msie/.test(u) && parseInt(v, 10) == 6) { 
			is_ie6 = true;

			// fix image flicker and lack of caching
			try {
				document.execCommand("BackgroundImageCache", false, true);
			} catch (err) { }

			css_string += '' + 
				'.jstree li { height:18px; margin-left:0; margin-right:0; } ' + 
				'.jstree li li { margin-left:18px; } ' + 
				'.jstree-rtl li li { margin-left:0px; margin-right:18px; } ' + 
				'li.jstree-open ul { display:block; } ' + 
				'li.jstree-closed ul { display:none !important; } ' + 
				'.jstree li a { display:inline; border-width:0 !important; padding:0px 2px !important; } ' + 
				'.jstree li a ins { height:16px; width:16px; margin-right:3px; } ' + 
				'.jstree-rtl li a ins { margin-right:0px; margin-left:3px; } ';
		}
		// Correct IE 7 (shifts anchor nodes onhover)
		if(/msie/.test(u) && parseInt(v, 10) == 7) { 
			is_ie7 = true;
			css_string += '.jstree li a { border-width:0 !important; padding:0px 2px !important; } ';
		}
		// correct ff2 lack of display:inline-block
		if(!/compatible/.test(u) && /mozilla/.test(u) && parseFloat(v, 10) < 1.9) {
			is_ff2 = true;
			css_string += '' + 
				'.jstree ins { display:-moz-inline-box; } ' + 
				'.jstree li { line-height:12px; } ' + // WHY??
				'.jstree a { display:-moz-inline-box; } ' + 
				'.jstree .jstree-no-icons .jstree-checkbox { display:-moz-inline-stack !important; } ';
				/* this shouldn't be here as it is theme specific */
		}
		// the default stylesheet
		$.vakata.css.add_sheet({ str : css_string, title : "jstree" });
	});

	// core functions (open, close, create, update, delete)
	$.jstree.plugin("core", {
		__init : function () {
			this.data.core.locked = false;
			this.data.core.to_open = this.get_settings().core.initially_open;
			this.data.core.to_load = this.get_settings().core.initially_load;
		},
		defaults : { 
			html_titles	: false,
			animation	: 500,
			initially_open : [],
			initially_load : [],
			open_parents : true,
			notify_plugins : true,
			rtl			: false,
			load_open	: false,
			strings		: {
				loading		: "Loading ...",
				new_node	: "New node",
				multiple_selection : "Multiple selection"
			}
		},
		_fn : { 
			init	: function () { 
				this.set_focus(); 
				if(this._get_settings().core.rtl) {
					this.get_container().addClass("jstree-rtl").css("direction", "rtl");
				}
				this.get_container().html("<ul><li class='jstree-last jstree-leaf'><ins>&#160;</ins><a class='jstree-loading' href='#'><ins class='jstree-icon'>&#160;</ins>" + this._get_string("loading") + "</a></li></ul>");
				this.data.core.li_height = this.get_container_ul().find("li.jstree-closed, li.jstree-leaf").eq(0).height() || 18;

				this.get_container()
					.delegate("li > ins", "click.jstree", $.proxy(function (event) {
							var trgt = $(event.target);
							// if(trgt.is("ins") && event.pageY - trgt.offset().top < this.data.core.li_height) { this.toggle_node(trgt); }
							this.toggle_node(trgt);
						}, this))
					.bind("mousedown.jstree", $.proxy(function () { 
							this.set_focus(); // This used to be setTimeout(set_focus,0) - why?
						}, this))
					.bind("dblclick.jstree", function (event) { 
						var sel;
						if(document.selection && document.selection.empty) { document.selection.empty(); }
						else {
							if(window.getSelection) {
								sel = window.getSelection();
								try { 
									sel.removeAllRanges();
									sel.collapse();
								} catch (err) { }
							}
						}
					});
				if(this._get_settings().core.notify_plugins) {
					this.get_container()
						.bind("load_node.jstree", $.proxy(function (e, data) { 
								var o = this._get_node(data.rslt.obj),
									t = this;
								if(o === -1) { o = this.get_container_ul(); }
								if(!o.length) { return; }
								o.find("li").each(function () {
									var th = $(this);
									if(th.data("jstree")) {
										$.each(th.data("jstree"), function (plugin, values) {
											if(t.data[plugin] && $.isFunction(t["_" + plugin + "_notify"])) {
												t["_" + plugin + "_notify"].call(t, th, values);
											}
										});
									}
								});
							}, this));
				}
				if(this._get_settings().core.load_open) {
					this.get_container()
						.bind("load_node.jstree", $.proxy(function (e, data) { 
								var o = this._get_node(data.rslt.obj),
									t = this;
								if(o === -1) { o = this.get_container_ul(); }
								if(!o.length) { return; }
								o.find("li.jstree-open:not(:has(ul))").each(function () {
									t.load_node(this, $.noop, $.noop);
								});
							}, this));
				}
				this.__callback();
				this.load_node(-1, function () { this.loaded(); this.reload_nodes(); });
			},
			destroy	: function () { 
				var i,
					n = this.get_index(),
					s = this._get_settings(),
					_this = this;

				$.each(s.plugins, function (i, val) {
					try { plugins[val].__destroy.apply(_this); } catch(err) { }
				});
				this.__callback();
				// set focus to another instance if this one is focused
				if(this.is_focused()) { 
					for(i in instances) { 
						if(instances.hasOwnProperty(i) && i != n) { 
							instances[i].set_focus(); 
							break; 
						} 
					}
				}
				// if no other instance found
				if(n === focused_instance) { focused_instance = -1; }
				// remove all traces of jstree in the DOM (only the ones set using jstree*) and cleans all events
				this.get_container()
					.unbind(".jstree")
					.undelegate(".jstree")
					.removeData("jstree_instance_id")
					.find("[class^='jstree']")
						.addBack()
						.attr("class", function () { return this.className.replace(/jstree[^ ]*|$/ig,''); });
				$(document)
					.unbind(".jstree-" + n)
					.undelegate(".jstree-" + n);
				// remove the actual data
				instances[n] = null;
				delete instances[n];
			},

			_core_notify : function (n, data) {
				if(data.opened) {
					this.open_node(n, false, true);
				}
			},

			lock : function () {
				this.data.core.locked = true;
				this.get_container().children("ul").addClass("jstree-locked").css("opacity","0.7");
				this.__callback({});
			},
			unlock : function () {
				this.data.core.locked = false;
				this.get_container().children("ul").removeClass("jstree-locked").css("opacity","1");
				this.__callback({});
			},
			is_locked : function () { return this.data.core.locked; },
			save_opened : function () {
				var _this = this;
				this.data.core.to_open = [];
				this.get_container_ul().find("li.jstree-open").each(function () { 
					if(this.id) { _this.data.core.to_open.push("#" + this.id.toString().replace(/^#/,"").replace(/\\\//g,"/").replace(/\//g,"\\\/").replace(/\\\./g,".").replace(/\./g,"\\.").replace(/\:/g,"\\:")); }
				});
				this.__callback(_this.data.core.to_open);
			},
			save_loaded : function () { },
			reload_nodes : function (is_callback) {
				var _this = this,
					done = true,
					current = [],
					remaining = [];
				if(!is_callback) { 
					this.data.core.reopen = false; 
					this.data.core.refreshing = true; 
					this.data.core.to_open = $.map($.makeArray(this.data.core.to_open), function (n) { return "#" + n.toString().replace(/^#/,"").replace(/\\\//g,"/").replace(/\//g,"\\\/").replace(/\\\./g,".").replace(/\./g,"\\.").replace(/\:/g,"\\:"); });
					this.data.core.to_load = $.map($.makeArray(this.data.core.to_load), function (n) { return "#" + n.toString().replace(/^#/,"").replace(/\\\//g,"/").replace(/\//g,"\\\/").replace(/\\\./g,".").replace(/\./g,"\\.").replace(/\:/g,"\\:"); });
					if(this.data.core.to_open.length) {
						this.data.core.to_load = this.data.core.to_load.concat(this.data.core.to_open);
					}
				}
				if(this.data.core.to_load.length) {
					$.each(this.data.core.to_load, function (i, val) {
						if(val == "#") { return true; }
						if($(val).length) { current.push(val); }
						else { remaining.push(val); }
					});
					if(current.length) {
						this.data.core.to_load = remaining;
						$.each(current, function (i, val) { 
							if(!_this._is_loaded(val)) {
								_this.load_node(val, function () { _this.reload_nodes(true); }, function () { _this.reload_nodes(true); });
								done = false;
							}
						});
					}
				}
				if(this.data.core.to_open.length) {
					$.each(this.data.core.to_open, function (i, val) {
						_this.open_node(val, false, true); 
					});
				}
				if(done) { 
					// TODO: find a more elegant approach to syncronizing returning requests
					if(this.data.core.reopen) { clearTimeout(this.data.core.reopen); }
					this.data.core.reopen = setTimeout(function () { _this.__callback({}, _this); }, 50);
					this.data.core.refreshing = false;
					this.reopen();
				}
			},
			reopen : function () {
				var _this = this;
				if(this.data.core.to_open.length) {
					$.each(this.data.core.to_open, function (i, val) {
						_this.open_node(val, false, true); 
					});
				}
				this.__callback({});
			},
			refresh : function (obj) {
				var _this = this;
				this.save_opened();
				if(!obj) { obj = -1; }
				obj = this._get_node(obj);
				if(!obj) { obj = -1; }
				if(obj !== -1) { obj.children("UL").remove(); }
				else { this.get_container_ul().empty(); }
				this.load_node(obj, function () { _this.__callback({ "obj" : obj}); _this.reload_nodes(); });
			},
			// Dummy function to fire after the first load (so that there is a jstree.loaded event)
			loaded	: function () { 
				this.__callback(); 
			},
			// deal with focus
			set_focus	: function () { 
				if(this.is_focused()) { return; }
				var f = $.jstree._focused();
				if(f) { f.unset_focus(); }

				this.get_container().addClass("jstree-focused"); 
				focused_instance = this.get_index(); 
				this.__callback();
			},
			is_focused	: function () { 
				return focused_instance == this.get_index(); 
			},
			unset_focus	: function () {
				if(this.is_focused()) {
					this.get_container().removeClass("jstree-focused"); 
					focused_instance = -1; 
				}
				this.__callback();
			},

			// traverse
			_get_node		: function (obj) { 
				var $obj = $(obj, this.get_container()); 
				if($obj.is(".jstree") || obj == -1) { return -1; } 
				$obj = $obj.closest("li", this.get_container()); 
				return $obj.length ? $obj : false; 
			},
			_get_next		: function (obj, strict) {
				obj = this._get_node(obj);
				if(obj === -1) { return this.get_container().find("> ul > li:first-child"); }
				if(!obj.length) { return false; }
				if(strict) { return (obj.nextAll("li").size() > 0) ? obj.nextAll("li:eq(0)") : false; }

				if(obj.hasClass("jstree-open")) { return obj.find("li:eq(0)"); }
				else if(obj.nextAll("li").size() > 0) { return obj.nextAll("li:eq(0)"); }
				else { return obj.parentsUntil(".jstree","li").next("li").eq(0); }
			},
			_get_prev		: function (obj, strict) {
				obj = this._get_node(obj);
				if(obj === -1) { return this.get_container().find("> ul > li:last-child"); }
				if(!obj.length) { return false; }
				if(strict) { return (obj.prevAll("li").length > 0) ? obj.prevAll("li:eq(0)") : false; }

				if(obj.prev("li").length) {
					obj = obj.prev("li").eq(0);
					while(obj.hasClass("jstree-open")) { obj = obj.children("ul:eq(0)").children("li:last"); }
					return obj;
				}
				else { var o = obj.parentsUntil(".jstree","li:eq(0)"); return o.length ? o : false; }
			},
			_get_parent		: function (obj) {
				obj = this._get_node(obj);
				if(obj == -1 || !obj.length) { return false; }
				var o = obj.parentsUntil(".jstree", "li:eq(0)");
				return o.length ? o : -1;
			},
			_get_children	: function (obj) {
				obj = this._get_node(obj);
				if(obj === -1) { return this.get_container().children("ul:eq(0)").children("li"); }
				if(!obj.length) { return false; }
				return obj.children("ul:eq(0)").children("li");
			},
			get_path		: function (obj, id_mode) {
				var p = [],
					_this = this;
				obj = this._get_node(obj);
				if(obj === -1 || !obj || !obj.length) { return false; }
				obj.parentsUntil(".jstree", "li").each(function () {
					p.push( id_mode ? this.id : _this.get_text(this) );
				});
				p.reverse();
				p.push( id_mode ? obj.attr("id") : this.get_text(obj) );
				return p;
			},

			// string functions
			_get_string : function (key) {
				return this._get_settings().core.strings[key] || key;
			},

			is_open		: function (obj) { obj = this._get_node(obj); return obj && obj !== -1 && obj.hasClass("jstree-open"); },
			is_closed	: function (obj) { obj = this._get_node(obj); return obj && obj !== -1 && obj.hasClass("jstree-closed"); },
			is_leaf		: function (obj) { obj = this._get_node(obj); return obj && obj !== -1 && obj.hasClass("jstree-leaf"); },
			correct_state	: function (obj) {
				obj = this._get_node(obj);
				if(!obj || obj === -1) { return false; }
				obj.removeClass("jstree-closed jstree-open").addClass("jstree-leaf").children("ul").remove();
				this.__callback({ "obj" : obj });
			},
			// open/close
			open_node	: function (obj, callback, skip_animation) {
				obj = this._get_node(obj);
				if(!obj.length) { return false; }
				if(!obj.hasClass("jstree-closed")) { if(callback) { callback.call(); } return false; }
				var s = skip_animation || is_ie6 ? 0 : this._get_settings().core.animation,
					t = this;
				if(!this._is_loaded(obj)) {
					obj.children("a").addClass("jstree-loading");
					this.load_node(obj, function () { t.open_node(obj, callback, skip_animation); }, callback);
				}
				else {
					if(this._get_settings().core.open_parents) {
						obj.parentsUntil(".jstree",".jstree-closed").each(function () {
							t.open_node(this, false, true);
						});
					}
					if(s) { obj.children("ul").css("display","none"); }
					obj.removeClass("jstree-closed").addClass("jstree-open").children("a").removeClass("jstree-loading");
					if(s) { obj.children("ul").stop(true, true).slideDown(s, function () { this.style.display = ""; t.after_open(obj); }); }
					else { t.after_open(obj); }
					this.__callback({ "obj" : obj });
					if(callback) { callback.call(); }
				}
			},
			after_open	: function (obj) { this.__callback({ "obj" : obj }); },
			close_node	: function (obj, skip_animation) {
				obj = this._get_node(obj);
				var s = skip_animation || is_ie6 ? 0 : this._get_settings().core.animation,
					t = this;
				if(!obj.length || !obj.hasClass("jstree-open")) { return false; }
				if(s) { obj.children("ul").attr("style","display:block !important"); }
				obj.removeClass("jstree-open").addClass("jstree-closed");
				if(s) { obj.children("ul").stop(true, true).slideUp(s, function () { this.style.display = ""; t.after_close(obj); }); }
				else { t.after_close(obj); }
				this.__callback({ "obj" : obj });
			},
			after_close	: function (obj) { this.__callback({ "obj" : obj }); },
			toggle_node	: function (obj) {
				obj = this._get_node(obj);
				if(obj.hasClass("jstree-closed")) { return this.open_node(obj); }
				if(obj.hasClass("jstree-open")) { return this.close_node(obj); }
			},
			open_all	: function (obj, do_animation, original_obj) {
				obj = obj ? this._get_node(obj) : -1;
				if(!obj || obj === -1) { obj = this.get_container_ul(); }
				if(original_obj) { 
					obj = obj.find("li.jstree-closed");
				}
				else {
					original_obj = obj;
					if(obj.is(".jstree-closed")) { obj = obj.find("li.jstree-closed").addBack(); }
					else { obj = obj.find("li.jstree-closed"); }
				}
				var _this = this;
				obj.each(function () { 
					var __this = this; 
					if(!_this._is_loaded(this)) { _this.open_node(this, function() { _this.open_all(__this, do_animation, original_obj); }, !do_animation); }
					else { _this.open_node(this, false, !do_animation); }
				});
				// so that callback is fired AFTER all nodes are open
				if(original_obj.find('li.jstree-closed').length === 0) { this.__callback({ "obj" : original_obj }); }
			},
			close_all	: function (obj, do_animation) {
				var _this = this;
				obj = obj ? this._get_node(obj) : this.get_container();
				if(!obj || obj === -1) { obj = this.get_container_ul(); }
				obj.find("li.jstree-open").addBack().each(function () { _this.close_node(this, !do_animation); });
				this.__callback({ "obj" : obj });
			},
			clean_node	: function (obj) {
				obj = obj && obj != -1 ? $(obj) : this.get_container_ul();
				obj = obj.is("li") ? obj.find("li").addBack() : obj.find("li");
				obj.removeClass("jstree-last")
					.filter("li:last-child").addClass("jstree-last").end()
					.filter(":has(li)")
						.not(".jstree-open").removeClass("jstree-leaf").addClass("jstree-closed");
				obj.not(".jstree-open, .jstree-closed").addClass("jstree-leaf").children("ul").remove();
				this.__callback({ "obj" : obj });
			},
			// rollback
			get_rollback : function () { 
				this.__callback();
				return { i : this.get_index(), h : this.get_container().children("ul").clone(true), d : this.data }; 
			},
			set_rollback : function (html, data) {
				this.get_container().empty().append(html);
				this.data = data;
				this.__callback();
			},
			// Dummy functions to be overwritten by any datastore plugin included
			load_node	: function (obj, s_call, e_call) { this.__callback({ "obj" : obj }); },
			_is_loaded	: function (obj) { return true; },

			// Basic operations: create
			create_node	: function (obj, position, js, callback, is_loaded) {
				obj = this._get_node(obj);
				position = typeof position === "undefined" ? "last" : position;
				var d = $("<li />"),
					s = this._get_settings().core,
					tmp;

				if(obj !== -1 && !obj.length) { return false; }
				if(!is_loaded && !this._is_loaded(obj)) { this.load_node(obj, function () { this.create_node(obj, position, js, callback, true); }); return false; }

				this.__rollback();

				if(typeof js === "string") { js = { "data" : js }; }
				if(!js) { js = {}; }
				if(js.attr) { d.attr(js.attr); }
				if(js.metadata) { d.data(js.metadata); }
				if(js.state) { d.addClass("jstree-" + js.state); }
				if(!js.data) { js.data = this._get_string("new_node"); }
				if(!$.isArray(js.data)) { tmp = js.data; js.data = []; js.data.push(tmp); }
				$.each(js.data, function (i, m) {
					tmp = $("<a />");
					if($.isFunction(m)) { m = m.call(this, js); }
					if(typeof m == "string") { tmp.attr('href','#')[ s.html_titles ? "html" : "text" ](m); }
					else {
						if(!m.attr) { m.attr = {}; }
						if(!m.attr.href) { m.attr.href = '#'; }
						tmp.attr(m.attr)[ s.html_titles ? "html" : "text" ](m.title);
						if(m.language) { tmp.addClass(m.language); }
					}
					tmp.prepend("<ins class='jstree-icon'>&#160;</ins>");
					if(!m.icon && js.icon) { m.icon = js.icon; }
					if(m.icon) { 
						if(m.icon.indexOf("/") === -1) { tmp.children("ins").addClass(m.icon); }
						else { tmp.children("ins").css("background","url('" + m.icon + "') center center no-repeat"); }
					}
					d.append(tmp);
				});
				d.prepend("<ins class='jstree-icon'>&#160;</ins>");
				if(obj === -1) {
					obj = this.get_container();
					if(position === "before") { position = "first"; }
					if(position === "after") { position = "last"; }
				}
				switch(position) {
					case "before": obj.before(d); tmp = this._get_parent(obj); break;
					case "after" : obj.after(d);  tmp = this._get_parent(obj); break;
					case "inside":
					case "first" :
						if(!obj.children("ul").length) { obj.append("<ul />"); }
						obj.children("ul").prepend(d);
						tmp = obj;
						break;
					case "last":
						if(!obj.children("ul").length) { obj.append("<ul />"); }
						obj.children("ul").append(d);
						tmp = obj;
						break;
					default:
						if(!obj.children("ul").length) { obj.append("<ul />"); }
						if(!position) { position = 0; }
						tmp = obj.children("ul").children("li").eq(position);
						if(tmp.length) { tmp.before(d); }
						else { obj.children("ul").append(d); }
						tmp = obj;
						break;
				}
				if(tmp === -1 || tmp.get(0) === this.get_container().get(0)) { tmp = -1; }
				this.clean_node(tmp);
				this.__callback({ "obj" : d, "parent" : tmp });
				if(callback) { callback.call(this, d); }
				return d;
			},
			// Basic operations: rename (deal with text)
			get_text	: function (obj) {
				obj = this._get_node(obj);
				if(!obj.length) { return false; }
				var s = this._get_settings().core.html_titles;
				obj = obj.children("a:eq(0)");
				if(s) {
					obj = obj.clone();
					obj.children("INS").remove();
					return obj.html();
				}
				else {
					obj = obj.contents().filter(function() { return this.nodeType == 3; })[0];
					return obj.nodeValue;
				}
			},
			set_text	: function (obj, val) {
				obj = this._get_node(obj);
				if(!obj.length) { return false; }
				obj = obj.children("a:eq(0)");
				if(this._get_settings().core.html_titles) {
					var tmp = obj.children("INS").clone();
					obj.html(val).prepend(tmp);
					this.__callback({ "obj" : obj, "name" : val });
					return true;
				}
				else {
					obj = obj.contents().filter(function() { return this.nodeType == 3; })[0];
					this.__callback({ "obj" : obj, "name" : val });
					return (obj.nodeValue = val);
				}
			},
			rename_node : function (obj, val) {
				obj = this._get_node(obj);
				this.__rollback();
				if(obj && obj.length && this.set_text.apply(this, Array.prototype.slice.call(arguments))) { this.__callback({ "obj" : obj, "name" : val }); }
			},
			// Basic operations: deleting nodes
			delete_node : function (obj) {
				obj = this._get_node(obj);
				if(!obj.length) { return false; }
				this.__rollback();
				var p = this._get_parent(obj), prev = $([]), t = this;
				obj.each(function () {
					prev = prev.add(t._get_prev(this));
				});
				obj = obj.detach();
				if(p !== -1 && p.find("> ul > li").length === 0) {
					p.removeClass("jstree-open jstree-closed").addClass("jstree-leaf");
				}
				this.clean_node(p);
				this.__callback({ "obj" : obj, "prev" : prev, "parent" : p });
				return obj;
			},
			prepare_move : function (o, r, pos, cb, is_cb) {
				var p = {};

				p.ot = $.jstree._reference(o) || this;
				p.o = p.ot._get_node(o);
				p.r = r === - 1 ? -1 : this._get_node(r);
				p.p = (typeof pos === "undefined" || pos === false) ? "last" : pos; // TODO: move to a setting
				if(!is_cb && prepared_move.o && prepared_move.o[0] === p.o[0] && prepared_move.r[0] === p.r[0] && prepared_move.p === p.p) {
					this.__callback(prepared_move);
					if(cb) { cb.call(this, prepared_move); }
					return;
				}
				p.ot = $.jstree._reference(p.o) || this;
				p.rt = $.jstree._reference(p.r) || this; // r === -1 ? p.ot : $.jstree._reference(p.r) || this
				if(p.r === -1 || !p.r) {
					p.cr = -1;
					switch(p.p) {
						case "first":
						case "before":
						case "inside":
							p.cp = 0; 
							break;
						case "after":
						case "last":
							p.cp = p.rt.get_container().find(" > ul > li").length; 
							break;
						default:
							p.cp = p.p;
							break;
					}
				}
				else {
					if(!/^(before|after)$/.test(p.p) && !this._is_loaded(p.r)) {
						return this.load_node(p.r, function () { this.prepare_move(o, r, pos, cb, true); });
					}
					switch(p.p) {
						case "before":
							p.cp = p.r.index();
							p.cr = p.rt._get_parent(p.r);
							break;
						case "after":
							p.cp = p.r.index() + 1;
							p.cr = p.rt._get_parent(p.r);
							break;
						case "inside":
						case "first":
							p.cp = 0;
							p.cr = p.r;
							break;
						case "last":
							p.cp = p.r.find(" > ul > li").length; 
							p.cr = p.r;
							break;
						default: 
							p.cp = p.p;
							p.cr = p.r;
							break;
					}
				}
				p.np = p.cr == -1 ? p.rt.get_container() : p.cr;
				p.op = p.ot._get_parent(p.o);
				p.cop = p.o.index();
				if(p.op === -1) { p.op = p.ot ? p.ot.get_container() : this.get_container(); }
				if(!/^(before|after)$/.test(p.p) && p.op && p.np && p.op[0] === p.np[0] && p.o.index() < p.cp) { p.cp++; }
				//if(p.p === "before" && p.op && p.np && p.op[0] === p.np[0] && p.o.index() < p.cp) { p.cp--; }
				p.or = p.np.find(" > ul > li:nth-child(" + (p.cp + 1) + ")");
				prepared_move = p;
				this.__callback(prepared_move);
				if(cb) { cb.call(this, prepared_move); }
			},
			check_move : function () {
				var obj = prepared_move, ret = true, r = obj.r === -1 ? this.get_container() : obj.r;
				if(!obj || !obj.o || obj.or[0] === obj.o[0]) { return false; }
				if(!obj.cy) {
					if(obj.op && obj.np && obj.op[0] === obj.np[0] && obj.cp - 1 === obj.o.index()) { return false; }
					obj.o.each(function () { 
						if(r.parentsUntil(".jstree", "li").addBack().index(this) !== -1) { ret = false; return false; }
					});
				}
				return ret;
			},
			move_node : function (obj, ref, position, is_copy, is_prepared, skip_check) {
				if(!is_prepared) { 
					return this.prepare_move(obj, ref, position, function (p) {
						this.move_node(p, false, false, is_copy, true, skip_check);
					});
				}
				if(is_copy) { 
					prepared_move.cy = true;
				}
				if(!skip_check && !this.check_move()) { return false; }

				this.__rollback();
				var o = false;
				if(is_copy) {
					o = obj.o.clone(true);
					o.find("*[id]").addBack().each(function () {
						if(this.id) { this.id = "copy_" + this.id; }
					});
				}
				else { o = obj.o; }

				if(obj.or.length) { obj.or.before(o); }
				else { 
					if(!obj.np.children("ul").length) { $("<ul />").appendTo(obj.np); }
					obj.np.children("ul:eq(0)").append(o); 
				}

				try { 
					obj.ot.clean_node(obj.op);
					obj.rt.clean_node(obj.np);
					if(!obj.op.find("> ul > li").length) {
						obj.op.removeClass("jstree-open jstree-closed").addClass("jstree-leaf").children("ul").remove();
					}
				} catch (e) { }

				if(is_copy) { 
					prepared_move.cy = true;
					prepared_move.oc = o; 
				}
				this.__callback(prepared_move);
				return prepared_move;
			},
			_get_move : function () { return prepared_move; }
		}
	});
})(jQuery);
//*/

/* 
 * jsTree ui plugin
 * This plugins handles selecting/deselecting/hovering/dehovering nodes
 */
(function ($) {
	var scrollbar_width, e1, e2;
	$(function() {
		if (/msie/.test(navigator.userAgent.toLowerCase())) {
			e1 = $('<textarea cols="10" rows="2"></textarea>').css({ position: 'absolute', top: -1000, left: 0 }).appendTo('body');
			e2 = $('<textarea cols="10" rows="2" style="overflow: hidden;"></textarea>').css({ position: 'absolute', top: -1000, left: 0 }).appendTo('body');
			scrollbar_width = e1.width() - e2.width();
			e1.add(e2).remove();
		} 
		else {
			e1 = $('<div />').css({ width: 100, height: 100, overflow: 'auto', position: 'absolute', top: -1000, left: 0 })
					.prependTo('body').append('<div />').find('div').css({ width: '100%', height: 200 });
			scrollbar_width = 100 - e1.width();
			e1.parent().remove();
		}
	});
	$.jstree.plugin("ui", {
		__init : function () { 
			this.data.ui.selected = $(); 
			this.data.ui.last_selected = false; 
			this.data.ui.hovered = null;
			this.data.ui.to_select = this.get_settings().ui.initially_select;

			this.get_container()
				.delegate("a", "click.jstree", $.proxy(function (event) {
						event.preventDefault();
						event.currentTarget.blur();
						if(!$(event.currentTarget).hasClass("jstree-loading")) {
							this.select_node(event.currentTarget, true, event);
						}
					}, this))
				.delegate("a", "mouseenter.jstree", $.proxy(function (event) {
						if(!$(event.currentTarget).hasClass("jstree-loading")) {
							this.hover_node(event.target);
						}
					}, this))
				.delegate("a", "mouseleave.jstree", $.proxy(function (event) {
						if(!$(event.currentTarget).hasClass("jstree-loading")) {
							this.dehover_node(event.target);
						}
					}, this))
				.bind("reopen.jstree", $.proxy(function () { 
						this.reselect();
					}, this))
				.bind("get_rollback.jstree", $.proxy(function () { 
						this.dehover_node();
						this.save_selected();
					}, this))
				.bind("set_rollback.jstree", $.proxy(function () { 
						this.reselect();
					}, this))
				.bind("close_node.jstree", $.proxy(function (event, data) { 
						var s = this._get_settings().ui,
							obj = this._get_node(data.rslt.obj),
							clk = (obj && obj.length) ? obj.children("ul").find("a.jstree-clicked") : $(),
							_this = this;
						if(s.selected_parent_close === false || !clk.length) { return; }
						clk.each(function () { 
							_this.deselect_node(this);
							if(s.selected_parent_close === "select_parent") { _this.select_node(obj); }
						});
					}, this))
				.bind("delete_node.jstree", $.proxy(function (event, data) { 
						var s = this._get_settings().ui.select_prev_on_delete,
							obj = this._get_node(data.rslt.obj),
							clk = (obj && obj.length) ? obj.find("a.jstree-clicked") : [],
							_this = this;
						clk.each(function () { _this.deselect_node(this); });
						if(s && clk.length) { 
							data.rslt.prev.each(function () { 
								if(this.parentNode) { _this.select_node(this); return false; /* if return false is removed all prev nodes will be selected */}
							});
						}
					}, this))
				.bind("move_node.jstree", $.proxy(function (event, data) { 
						if(data.rslt.cy) { 
							data.rslt.oc.find("a.jstree-clicked").removeClass("jstree-clicked");
						}
					}, this));
		},
		defaults : {
			select_limit : -1, // 0, 1, 2 ... or -1 for unlimited
			select_multiple_modifier : "ctrl", // on, or ctrl, shift, alt
			select_range_modifier : "shift",
			selected_parent_close : "select_parent", // false, "deselect", "select_parent"
			selected_parent_open : true,
			select_prev_on_delete : true,
			disable_selecting_children : false,
			initially_select : []
		},
		_fn : { 
			_get_node : function (obj, allow_multiple) {
				if(typeof obj === "undefined" || obj === null) { return allow_multiple ? this.data.ui.selected : this.data.ui.last_selected; }
				var $obj = $(obj, this.get_container()); 
				if($obj.is(".jstree") || obj == -1) { return -1; } 
				$obj = $obj.closest("li", this.get_container()); 
				return $obj.length ? $obj : false; 
			},
			_ui_notify : function (n, data) {
				if(data.selected) {
					this.select_node(n, false);
				}
			},
			save_selected : function () {
				var _this = this;
				this.data.ui.to_select = [];
				this.data.ui.selected.each(function () { if(this.id) { _this.data.ui.to_select.push("#" + this.id.toString().replace(/^#/,"").replace(/\\\//g,"/").replace(/\//g,"\\\/").replace(/\\\./g,".").replace(/\./g,"\\.").replace(/\:/g,"\\:")); } });
				this.__callback(this.data.ui.to_select);
			},
			reselect : function () {
				var _this = this,
					s = this.data.ui.to_select;
				s = $.map($.makeArray(s), function (n) { return "#" + n.toString().replace(/^#/,"").replace(/\\\//g,"/").replace(/\//g,"\\\/").replace(/\\\./g,".").replace(/\./g,"\\.").replace(/\:/g,"\\:"); });
				// this.deselect_all(); WHY deselect, breaks plugin state notifier?
				$.each(s, function (i, val) { if(val && val !== "#") { _this.select_node(val); } });
				this.data.ui.selected = this.data.ui.selected.filter(function () { return this.parentNode; });
				this.__callback();
			},
			refresh : function (obj) {
				this.save_selected();
				return this.__call_old();
			},
			hover_node : function (obj) {
				obj = this._get_node(obj);
				if(!obj.length) { return false; }
				//if(this.data.ui.hovered && obj.get(0) === this.data.ui.hovered.get(0)) { return; }
				if(!obj.hasClass("jstree-hovered")) { this.dehover_node(); }
				this.data.ui.hovered = obj.children("a").addClass("jstree-hovered").parent();
				this._fix_scroll(obj);
				this.__callback({ "obj" : obj });
			},
			dehover_node : function () {
				var obj = this.data.ui.hovered, p;
				if(!obj || !obj.length) { return false; }
				p = obj.children("a").removeClass("jstree-hovered").parent();
				if(this.data.ui.hovered[0] === p[0]) { this.data.ui.hovered = null; }
				this.__callback({ "obj" : obj });
			},
			select_node : function (obj, check, e) {
				obj = this._get_node(obj);
				if(obj == -1 || !obj || !obj.length) { return false; }
				var s = this._get_settings().ui,
					is_multiple = (s.select_multiple_modifier == "on" || (s.select_multiple_modifier !== false && e && e[s.select_multiple_modifier + "Key"])),
					is_range = (s.select_range_modifier !== false && e && e[s.select_range_modifier + "Key"] && this.data.ui.last_selected && this.data.ui.last_selected[0] !== obj[0] && this.data.ui.last_selected.parent()[0] === obj.parent()[0]),
					is_selected = this.is_selected(obj),
					proceed = true,
					t = this;
				if(check) {
					if(s.disable_selecting_children && is_multiple && 
						(
							(obj.parentsUntil(".jstree","li").children("a.jstree-clicked").length) ||
							(obj.children("ul").find("a.jstree-clicked:eq(0)").length)
						)
					) {
						return false;
					}
					proceed = false;
					switch(!0) {
						case (is_range):
							this.data.ui.last_selected.addClass("jstree-last-selected");
							obj = obj[ obj.index() < this.data.ui.last_selected.index() ? "nextUntil" : "prevUntil" ](".jstree-last-selected").addBack();
							if(s.select_limit == -1 || obj.length < s.select_limit) {
								this.data.ui.last_selected.removeClass("jstree-last-selected");
								this.data.ui.selected.each(function () {
									if(this !== t.data.ui.last_selected[0]) { t.deselect_node(this); }
								});
								is_selected = false;
								proceed = true;
							}
							else {
								proceed = false;
							}
							break;
						case (is_selected && !is_multiple): 
							this.deselect_all();
							is_selected = false;
							proceed = true;
							break;
						case (!is_selected && !is_multiple): 
							if(s.select_limit == -1 || s.select_limit > 0) {
								this.deselect_all();
								proceed = true;
							}
							break;
						case (is_selected && is_multiple): 
							this.deselect_node(obj);
							break;
						case (!is_selected && is_multiple): 
							if(s.select_limit == -1 || this.data.ui.selected.length + 1 <= s.select_limit) { 
								proceed = true;
							}
							break;
					}
				}
				if(proceed && !is_selected) {
					if(!is_range) { this.data.ui.last_selected = obj; }
					obj.children("a").addClass("jstree-clicked");
					if(s.selected_parent_open) {
						obj.parents(".jstree-closed").each(function () { t.open_node(this, false, true); });
					}
					this.data.ui.selected = this.data.ui.selected.add(obj);
					this._fix_scroll(obj.eq(0));
					this.__callback({ "obj" : obj, "e" : e });
				}
			},
			_fix_scroll : function (obj) {
				var c = this.get_container()[0], t;
				if(c.scrollHeight > c.offsetHeight) {
					obj = this._get_node(obj);
					if(!obj || obj === -1 || !obj.length || !obj.is(":visible")) { return; }
					t = obj.offset().top - this.get_container().offset().top;
					if(t < 0) { 
						c.scrollTop = c.scrollTop + t - 1; 
					}
					if(t + this.data.core.li_height + (c.scrollWidth > c.offsetWidth ? scrollbar_width : 0) > c.offsetHeight) { 
						c.scrollTop = c.scrollTop + (t - c.offsetHeight + this.data.core.li_height + 1 + (c.scrollWidth > c.offsetWidth ? scrollbar_width : 0)); 
					}
				}
			},
			deselect_node : function (obj) {
				obj = this._get_node(obj);
				if(!obj.length) { return false; }
				if(this.is_selected(obj)) {
					obj.children("a").removeClass("jstree-clicked");
					this.data.ui.selected = this.data.ui.selected.not(obj);
					if(this.data.ui.last_selected.get(0) === obj.get(0)) { this.data.ui.last_selected = this.data.ui.selected.eq(0); }
					this.__callback({ "obj" : obj });
				}
			},
			toggle_select : function (obj) {
				obj = this._get_node(obj);
				if(!obj.length) { return false; }
				if(this.is_selected(obj)) { this.deselect_node(obj); }
				else { this.select_node(obj); }
			},
			is_selected : function (obj) { return this.data.ui.selected.index(this._get_node(obj)) >= 0; },
			get_selected : function (context) { 
				return context ? $(context).find("a.jstree-clicked").parent() : this.data.ui.selected; 
			},
			deselect_all : function (context) {
				var ret = context ? $(context).find("a.jstree-clicked").parent() : this.get_container().find("a.jstree-clicked").parent();
				ret.children("a.jstree-clicked").removeClass("jstree-clicked");
				this.data.ui.selected = $([]);
				this.data.ui.last_selected = false;
				this.__callback({ "obj" : ret });
			}
		}
	});
	// include the selection plugin by default
	$.jstree.defaults.plugins.push("ui");
})(jQuery);
//*/

/* 
 * jsTree CRRM plugin
 * Handles creating/renaming/removing/moving nodes by user interaction.
 */
(function ($) {
	$.jstree.plugin("crrm", { 
		__init : function () {
			this.get_container()
				.bind("move_node.jstree", $.proxy(function (e, data) {
					if(this._get_settings().crrm.move.open_onmove) {
						var t = this;
						data.rslt.np.parentsUntil(".jstree").addBack().filter(".jstree-closed").each(function () {
							t.open_node(this, false, true);
						});
					}
				}, this));
		},
		defaults : {
			input_width_limit : 200,
			move : {
				always_copy			: false, // false, true or "multitree"
				open_onmove			: true,
				default_position	: "last",
				check_move			: function (m) { return true; }
			}
		},
		_fn : {
			_show_input : function (obj, callback) {
				obj = this._get_node(obj);
				var rtl = this._get_settings().core.rtl,
					w = this._get_settings().crrm.input_width_limit,
					w1 = obj.children("ins").width(),
					w2 = obj.find("> a:visible > ins").width() * obj.find("> a:visible > ins").length,
					t = this.get_text(obj),
					h1 = $("<div />", { css : { "position" : "absolute", "top" : "-200px", "left" : (rtl ? "0px" : "-1000px"), "visibility" : "hidden" } }).appendTo("body"),
					h2 = obj.css("position","relative").append(
					$("<input />", { 
						"value" : t,
						"class" : "jstree-rename-input",
						// "size" : t.length,
						"css" : {
							"padding" : "0",
							"border" : "1px solid silver",
							"position" : "absolute",
							"left"  : (rtl ? "auto" : (w1 + w2 + 4) + "px"),
							"right" : (rtl ? (w1 + w2 + 4) + "px" : "auto"),
							"top" : "0px",
							"height" : (this.data.core.li_height - 2) + "px",
							"lineHeight" : (this.data.core.li_height - 2) + "px",
							"width" : "150px" // will be set a bit further down
						},
						"blur" : $.proxy(function () {
							var i = obj.children(".jstree-rename-input"),
								v = i.val();
							if(v === "") { v = t; }
							h1.remove();
							i.remove(); // rollback purposes
							this.set_text(obj,t); // rollback purposes
							this.rename_node(obj, v);
							callback.call(this, obj, v, t);
							obj.css("position","");
						}, this),
						"keyup" : function (event) {
							var key = event.keyCode || event.which;
							if(key == 27) { this.value = t; this.blur(); return; }
							else if(key == 13) { this.blur(); return; }
							else {
								h2.width(Math.min(h1.text("pW" + this.value).width(),w));
							}
						},
						"keypress" : function(event) {
							var key = event.keyCode || event.which;
							if(key == 13) { return false; }
						}
					})
				).children(".jstree-rename-input"); 
				this.set_text(obj, "");
				h1.css({
						fontFamily		: h2.css('fontFamily')		|| '',
						fontSize		: h2.css('fontSize')		|| '',
						fontWeight		: h2.css('fontWeight')		|| '',
						fontStyle		: h2.css('fontStyle')		|| '',
						fontStretch		: h2.css('fontStretch')		|| '',
						fontVariant		: h2.css('fontVariant')		|| '',
						letterSpacing	: h2.css('letterSpacing')	|| '',
						wordSpacing		: h2.css('wordSpacing')		|| ''
				});
				h2.width(Math.min(h1.text("pW" + h2[0].value).width(),w))[0].select();
			},
			rename : function (obj) {
				obj = this._get_node(obj);
				this.__rollback();
				var f = this.__callback;
				this._show_input(obj, function (obj, new_name, old_name) { 
					f.call(this, { "obj" : obj, "new_name" : new_name, "old_name" : old_name });
				});
			},
			create : function (obj, position, js, callback, skip_rename) {
				var t, _this = this;
				obj = this._get_node(obj);
				if(!obj) { obj = -1; }
				this.__rollback();
				t = this.create_node(obj, position, js, function (t) {
					var p = this._get_parent(t),
						pos = $(t).index();
					if(callback) { callback.call(this, t); }
					if(p.length && p.hasClass("jstree-closed")) { this.open_node(p, false, true); }
					if(!skip_rename) { 
						this._show_input(t, function (obj, new_name, old_name) { 
							_this.__callback({ "obj" : obj, "name" : new_name, "parent" : p, "position" : pos });
						});
					}
					else { _this.__callback({ "obj" : t, "name" : this.get_text(t), "parent" : p, "position" : pos }); }
				});
				return t;
			},
			remove : function (obj) {
				obj = this._get_node(obj, true);
				var p = this._get_parent(obj), prev = this._get_prev(obj);
				this.__rollback();
				obj = this.delete_node(obj);
				if(obj !== false) { this.__callback({ "obj" : obj, "prev" : prev, "parent" : p }); }
			},
			check_move : function () {
				if(!this.__call_old()) { return false; }
				var s = this._get_settings().crrm.move;
				if(!s.check_move.call(this, this._get_move())) { return false; }
				return true;
			},
			move_node : function (obj, ref, position, is_copy, is_prepared, skip_check) {
				var s = this._get_settings().crrm.move;
				if(!is_prepared) { 
					if(typeof position === "undefined") { position = s.default_position; }
					if(position === "inside" && !s.default_position.match(/^(before|after)$/)) { position = s.default_position; }
					return this.__call_old(true, obj, ref, position, is_copy, false, skip_check);
				}
				// if the move is already prepared
				if(s.always_copy === true || (s.always_copy === "multitree" && obj.rt.get_index() !== obj.ot.get_index() )) {
					is_copy = true;
				}
				this.__call_old(true, obj, ref, position, is_copy, true, skip_check);
			},

			cut : function (obj) {
				obj = this._get_node(obj, true);
				if(!obj || !obj.length) { return false; }
				this.data.crrm.cp_nodes = false;
				this.data.crrm.ct_nodes = obj;
				this.__callback({ "obj" : obj });
			},
			copy : function (obj) {
				obj = this._get_node(obj, true);
				if(!obj || !obj.length) { return false; }
				this.data.crrm.ct_nodes = false;
				this.data.crrm.cp_nodes = obj;
				this.__callback({ "obj" : obj });
			},
			paste : function (obj) { 
				obj = this._get_node(obj);
				if(!obj || !obj.length) { return false; }
				var nodes = this.data.crrm.ct_nodes ? this.data.crrm.ct_nodes : this.data.crrm.cp_nodes;
				if(!this.data.crrm.ct_nodes && !this.data.crrm.cp_nodes) { return false; }
				if(this.data.crrm.ct_nodes) { this.move_node(this.data.crrm.ct_nodes, obj); this.data.crrm.ct_nodes = false; }
				if(this.data.crrm.cp_nodes) { this.move_node(this.data.crrm.cp_nodes, obj, false, true); }
				this.__callback({ "obj" : obj, "nodes" : nodes });
			}
		}
	});
	// include the crr plugin by default
	// $.jstree.defaults.plugins.push("crrm");
})(jQuery);
//*/

/* 
 * jsTree themes plugin
 * Handles loading and setting themes, as well as detecting path to themes, etc.
 */
(function ($) {
	var themes_loaded = [];
	// this variable stores the path to the themes folder - if left as false - it will be autodetected
	$.jstree._themes = false;
	$.jstree.plugin("themes", {
		__init : function () { 
			this.get_container()
				.bind("init.jstree", $.proxy(function () {
						var s = this._get_settings().themes;
						this.data.themes.dots = s.dots; 
						this.data.themes.icons = s.icons; 
						this.set_theme(s.theme, s.url);
					}, this))
				.bind("loaded.jstree", $.proxy(function () {
						// bound here too, as simple HTML tree's won't honor dots & icons otherwise
						if(!this.data.themes.dots) { this.hide_dots(); }
						else { this.show_dots(); }
						if(!this.data.themes.icons) { this.hide_icons(); }
						else { this.show_icons(); }
					}, this));
		},
		defaults : { 
			theme : "default", 
			url : false,
			dots : true,
			icons : true
		},
		_fn : {
			set_theme : function (theme_name, theme_url) {
				if(!theme_name) { return false; }
				if(!theme_url) { theme_url = $.jstree._themes + theme_name + '/style.css'; }
				if($.inArray(theme_url, themes_loaded) == -1) {
					$.vakata.css.add_sheet({ "url" : theme_url });
					themes_loaded.push(theme_url);
				}
				if(this.data.themes.theme != theme_name) {
					this.get_container().removeClass('jstree-' + this.data.themes.theme);
					this.data.themes.theme = theme_name;
				}
				this.get_container().addClass('jstree-' + theme_name);
				if(!this.data.themes.dots) { this.hide_dots(); }
				else { this.show_dots(); }
				if(!this.data.themes.icons) { this.hide_icons(); }
				else { this.show_icons(); }
				this.__callback();
			},
			get_theme	: function () { return this.data.themes.theme; },

			show_dots	: function () { this.data.themes.dots = true; this.get_container().children("ul").removeClass("jstree-no-dots"); },
			hide_dots	: function () { this.data.themes.dots = false; this.get_container().children("ul").addClass("jstree-no-dots"); },
			toggle_dots	: function () { if(this.data.themes.dots) { this.hide_dots(); } else { this.show_dots(); } },

			show_icons	: function () { this.data.themes.icons = true; this.get_container().children("ul").removeClass("jstree-no-icons"); },
			hide_icons	: function () { this.data.themes.icons = false; this.get_container().children("ul").addClass("jstree-no-icons"); },
			toggle_icons: function () { if(this.data.themes.icons) { this.hide_icons(); } else { this.show_icons(); } }
		}
	});
	// autodetect themes path
	$(function () {
		if($.jstree._themes === false) {
			$("script").each(function () { 
				if(this.src.toString().match(/jquery\.jstree[^\/]*?\.js(\?.*)?$/)) { 
					$.jstree._themes = this.src.toString().replace(/jquery\.jstree[^\/]*?\.js(\?.*)?$/, "") + 'themes/'; 
					return false; 
				}
			});
		}
		if($.jstree._themes === false) { $.jstree._themes = "themes/"; }
	});
	// include the themes plugin by default
	$.jstree.defaults.plugins.push("themes");
})(jQuery);
//*/

/*
 * jsTree hotkeys plugin
 * Enables keyboard navigation for all tree instances
 * Depends on the jstree ui & jquery hotkeys plugins
 */
(function ($) {
	var bound = [];
	function exec(i, event) {
		var f = $.jstree._focused(), tmp;
		if(f && f.data && f.data.hotkeys && f.data.hotkeys.enabled) { 
			tmp = f._get_settings().hotkeys[i];
			if(tmp) { return tmp.call(f, event); }
		}
	}
	$.jstree.plugin("hotkeys", {
		__init : function () {
			if(typeof $.hotkeys === "undefined") { throw "jsTree hotkeys: jQuery hotkeys plugin not included."; }
			if(!this.data.ui) { throw "jsTree hotkeys: jsTree UI plugin not included."; }
			$.each(this._get_settings().hotkeys, function (i, v) {
				if(v !== false && $.inArray(i, bound) == -1) {
					$(document).bind("keydown", i, function (event) { return exec(i, event); });
					bound.push(i);
				}
			});
			this.get_container()
				.bind("lock.jstree", $.proxy(function () {
						if(this.data.hotkeys.enabled) { this.data.hotkeys.enabled = false; this.data.hotkeys.revert = true; }
					}, this))
				.bind("unlock.jstree", $.proxy(function () {
						if(this.data.hotkeys.revert) { this.data.hotkeys.enabled = true; }
					}, this));
			this.enable_hotkeys();
		},
		defaults : {
			"up" : function () { 
				var o = this.data.ui.hovered || this.data.ui.last_selected || -1;
				this.hover_node(this._get_prev(o));
				return false; 
			},
			"ctrl+up" : function () { 
				var o = this.data.ui.hovered || this.data.ui.last_selected || -1;
				this.hover_node(this._get_prev(o));
				return false; 
			},
			"shift+up" : function () { 
				var o = this.data.ui.hovered || this.data.ui.last_selected || -1;
				this.hover_node(this._get_prev(o));
				return false; 
			},
			"down" : function () { 
				var o = this.data.ui.hovered || this.data.ui.last_selected || -1;
				this.hover_node(this._get_next(o));
				return false;
			},
			"ctrl+down" : function () { 
				var o = this.data.ui.hovered || this.data.ui.last_selected || -1;
				this.hover_node(this._get_next(o));
				return false;
			},
			"shift+down" : function () { 
				var o = this.data.ui.hovered || this.data.ui.last_selected || -1;
				this.hover_node(this._get_next(o));
				return false;
			},
			"left" : function () { 
				var o = this.data.ui.hovered || this.data.ui.last_selected;
				if(o) {
					if(o.hasClass("jstree-open")) { this.close_node(o); }
					else { this.hover_node(this._get_prev(o)); }
				}
				return false;
			},
			"ctrl+left" : function () { 
				var o = this.data.ui.hovered || this.data.ui.last_selected;
				if(o) {
					if(o.hasClass("jstree-open")) { this.close_node(o); }
					else { this.hover_node(this._get_prev(o)); }
				}
				return false;
			},
			"shift+left" : function () { 
				var o = this.data.ui.hovered || this.data.ui.last_selected;
				if(o) {
					if(o.hasClass("jstree-open")) { this.close_node(o); }
					else { this.hover_node(this._get_prev(o)); }
				}
				return false;
			},
			"right" : function () { 
				var o = this.data.ui.hovered || this.data.ui.last_selected;
				if(o && o.length) {
					if(o.hasClass("jstree-closed")) { this.open_node(o); }
					else { this.hover_node(this._get_next(o)); }
				}
				return false;
			},
			"ctrl+right" : function () { 
				var o = this.data.ui.hovered || this.data.ui.last_selected;
				if(o && o.length) {
					if(o.hasClass("jstree-closed")) { this.open_node(o); }
					else { this.hover_node(this._get_next(o)); }
				}
				return false;
			},
			"shift+right" : function () { 
				var o = this.data.ui.hovered || this.data.ui.last_selected;
				if(o && o.length) {
					if(o.hasClass("jstree-closed")) { this.open_node(o); }
					else { this.hover_node(this._get_next(o)); }
				}
				return false;
			},
			"space" : function () { 
				if(this.data.ui.hovered) { this.data.ui.hovered.children("a:eq(0)").click(); } 
				return false; 
			},
			"ctrl+space" : function (event) { 
				event.type = "click";
				if(this.data.ui.hovered) { this.data.ui.hovered.children("a:eq(0)").trigger(event); } 
				return false; 
			},
			"shift+space" : function (event) { 
				event.type = "click";
				if(this.data.ui.hovered) { this.data.ui.hovered.children("a:eq(0)").trigger(event); } 
				return false; 
			},
			"f2" : function () { this.rename(this.data.ui.hovered || this.data.ui.last_selected); },
			"del" : function () { this.remove(this.data.ui.hovered || this._get_node(null)); }
		},
		_fn : {
			enable_hotkeys : function () {
				this.data.hotkeys.enabled = true;
			},
			disable_hotkeys : function () {
				this.data.hotkeys.enabled = false;
			}
		}
	});
})(jQuery);
//*/

/* 
 * jsTree JSON plugin
 * The JSON data store. Datastores are build by overriding the `load_node` and `_is_loaded` functions.
 */
(function ($) {
	$.jstree.plugin("json_data", {
		__init : function() {
			var s = this._get_settings().json_data;
			if(s.progressive_unload) {
				this.get_container().bind("after_close.jstree", function (e, data) {
					data.rslt.obj.children("ul").remove();
				});
			}
		},
		defaults : { 
			// `data` can be a function:
			//  * accepts two arguments - node being loaded and a callback to pass the result to
			//  * will be executed in the current tree's scope & ajax won't be supported
			data : false, 
			ajax : false,
			correct_state : true,
			progressive_render : false,
			progressive_unload : false
		},
		_fn : {
			load_node : function (obj, s_call, e_call) { var _this = this; this.load_node_json(obj, function () { _this.__callback({ "obj" : _this._get_node(obj) }); s_call.call(this); }, e_call); },
			_is_loaded : function (obj) { 
				var s = this._get_settings().json_data;
				obj = this._get_node(obj); 
				return obj == -1 || !obj || (!s.ajax && !s.progressive_render && !$.isFunction(s.data)) || obj.is(".jstree-open, .jstree-leaf") || obj.children("ul").children("li").length > 0;
			},
			refresh : function (obj) {
				obj = this._get_node(obj);
				var s = this._get_settings().json_data;
				if(obj && obj !== -1 && s.progressive_unload && ($.isFunction(s.data) || !!s.ajax)) {
					obj.removeData("jstree_children");
				}
				return this.__call_old();
			},
			load_node_json : function (obj, s_call, e_call) {
				var s = this.get_settings().json_data, d,
					error_func = function () {},
					success_func = function () {};
				obj = this._get_node(obj);

				if(obj && obj !== -1 && (s.progressive_render || s.progressive_unload) && !obj.is(".jstree-open, .jstree-leaf") && obj.children("ul").children("li").length === 0 && obj.data("jstree_children")) {
					d = this._parse_json(obj.data("jstree_children"), obj);
					if(d) {
						obj.append(d);
						if(!s.progressive_unload) { obj.removeData("jstree_children"); }
					}
					this.clean_node(obj);
					if(s_call) { s_call.call(this); }
					return;
				}

				if(obj && obj !== -1) {
					if(obj.data("jstree_is_loading")) { return; }
					else { obj.data("jstree_is_loading",true); }
				}
				switch(!0) {
					case (!s.data && !s.ajax): throw "Neither data nor ajax settings supplied.";
					// function option added here for easier model integration (also supporting async - see callback)
					case ($.isFunction(s.data)):
						s.data.call(this, obj, $.proxy(function (d) {
							d = this._parse_json(d, obj);
							if(!d) { 
								if(obj === -1 || !obj) {
									if(s.correct_state) { this.get_container().children("ul").empty(); }
								}
								else {
									obj.children("a.jstree-loading").removeClass("jstree-loading");
									obj.removeData("jstree_is_loading");
									if(s.correct_state) { this.correct_state(obj); }
								}
								if(e_call) { e_call.call(this); }
							}
							else {
								if(obj === -1 || !obj) { this.get_container().children("ul").empty().append(d.children()); }
								else { obj.append(d).children("a.jstree-loading").removeClass("jstree-loading"); obj.removeData("jstree_is_loading"); }
								this.clean_node(obj);
								if(s_call) { s_call.call(this); }
							}
						}, this));
						break;
					case (!!s.data && !s.ajax) || (!!s.data && !!s.ajax && (!obj || obj === -1)):
						if(!obj || obj == -1) {
							d = this._parse_json(s.data, obj);
							if(d) {
								this.get_container().children("ul").empty().append(d.children());
								this.clean_node();
							}
							else { 
								if(s.correct_state) { this.get_container().children("ul").empty(); }
							}
						}
						if(s_call) { s_call.call(this); }
						break;
					case (!s.data && !!s.ajax) || (!!s.data && !!s.ajax && obj && obj !== -1):
						error_func = function (x, t, e) {
							var ef = this.get_settings().json_data.ajax.error; 
							if(ef) { ef.call(this, x, t, e); }
							if(obj != -1 && obj.length) {
								obj.children("a.jstree-loading").removeClass("jstree-loading");
								obj.removeData("jstree_is_loading");
								if(t === "success" && s.correct_state) { this.correct_state(obj); }
							}
							else {
								if(t === "success" && s.correct_state) { this.get_container().children("ul").empty(); }
							}
							if(e_call) { e_call.call(this); }
						};
						success_func = function (d, t, x) {
							var sf = this.get_settings().json_data.ajax.success; 
							if(sf) { d = sf.call(this,d,t,x) || d; }
							if(d === "" || (d && d.toString && d.toString().replace(/^[\s\n]+$/,"") === "") || (!$.isArray(d) && !$.isPlainObject(d))) {
								return error_func.call(this, x, t, "");
							}
							d = this._parse_json(d, obj);
							if(d) {
								if(obj === -1 || !obj) { this.get_container().children("ul").empty().append(d.children()); }
								else { obj.append(d).children("a.jstree-loading").removeClass("jstree-loading"); obj.removeData("jstree_is_loading"); }
								this.clean_node(obj);
								if(s_call) { s_call.call(this); }
							}
							else {
								if(obj === -1 || !obj) {
									if(s.correct_state) { 
										this.get_container().children("ul").empty(); 
										if(s_call) { s_call.call(this); }
									}
								}
								else {
									obj.children("a.jstree-loading").removeClass("jstree-loading");
									obj.removeData("jstree_is_loading");
									if(s.correct_state) { 
										this.correct_state(obj);
										if(s_call) { s_call.call(this); } 
									}
								}
							}
						};
						s.ajax.context = this;
						s.ajax.error = error_func;
						s.ajax.success = success_func;
						if(!s.ajax.dataType) { s.ajax.dataType = "json"; }
						if($.isFunction(s.ajax.url)) { s.ajax.url = s.ajax.url.call(this, obj); }
						if($.isFunction(s.ajax.data)) { s.ajax.data = s.ajax.data.call(this, obj); }
						$.ajax(s.ajax);
						break;
				}
			},
			_parse_json : function (js, obj, is_callback) {
				var d = false, 
					p = this._get_settings(),
					s = p.json_data,
					t = p.core.html_titles,
					tmp, i, j, ul1, ul2;

				if(!js) { return d; }
				if(s.progressive_unload && obj && obj !== -1) { 
					obj.data("jstree_children", d);
				}
				if($.isArray(js)) {
					d = $('<ul>');
					if(!js.length) { return false; }
					for(i = 0, j = js.length; i < j; i++) {
						tmp = this._parse_json(js[i], obj, true);
						if(tmp.length) {
							d = d.append(tmp);
						}
					}
					d = d.children();
				}
				else {
					if(typeof js == "string") { js = { data : js }; }
					if(!js.data && js.data !== "") { return d; }
					d = $("<li />");
					if(js.attr) { d.attr(js.attr); }
					if(js.metadata) { d.data(js.metadata); }
					if(js.state) { d.addClass("jstree-" + js.state); }
					if(!$.isArray(js.data)) { tmp = js.data; js.data = []; js.data.push(tmp); }
					$.each(js.data, function (i, m) {
						tmp = $("<a />");
						if($.isFunction(m)) { m = m.call(this, js); }
						if(typeof m == "string") { tmp.attr('href','#')[ t ? "html" : "text" ](m); }
						else {
							if(!m.attr) { m.attr = {}; }
							if(!m.attr.href) { m.attr.href = '#'; }
							tmp.attr(m.attr)[ t ? "html" : "text" ](m.title);
							if(m.language) { tmp.addClass(m.language); }
						}
						tmp.prepend("<ins class='jstree-icon'>&#160;</ins>");
						if(!m.icon && js.icon) { m.icon = js.icon; }
						if(m.icon) { 
							if(m.icon.indexOf("/") === -1) { tmp.children("ins").addClass(m.icon); }
							else { tmp.children("ins").css("background","url('" + m.icon + "') center center no-repeat"); }
						}
						d.append(tmp);
					});
					d.prepend("<ins class='jstree-icon'>&#160;</ins>");
					if(js.children) { 
						if(s.progressive_render && js.state !== "open") {
							d.addClass("jstree-closed").data("jstree_children", js.children);
						}
						else {
							if(s.progressive_unload) { d.data("jstree_children", js.children); }
							if($.isArray(js.children) && js.children.length) {
								tmp = this._parse_json(js.children, obj, true);
								if(tmp.length) {
									ul2 = $("<ul />");
									ul2.append(tmp);
									d.append(ul2);
								}
							}
						}
					}
				}
				if(!is_callback) {
					ul1 = $("<ul />");
					ul1.append(d);
					d = ul1;
				}
				return d;
			},
			get_json : function (obj, li_attr, a_attr, is_callback) {
				var result = [], 
					s = this._get_settings(), 
					_this = this,
					tmp1, tmp2, li, a, t, lang;
				obj = this._get_node(obj);
				if(!obj || obj === -1) { obj = this.get_container().find("> ul > li"); }
				li_attr = $.isArray(li_attr) ? li_attr : [ "id", "class" ];
				if(!is_callback && this.data.types) { li_attr.push(s.types.type_attr); }
				a_attr = $.isArray(a_attr) ? a_attr : [ ];

				obj.each(function () {
					li = $(this);
					tmp1 = { data : [] };
					if(li_attr.length) { tmp1.attr = { }; }
					$.each(li_attr, function (i, v) { 
						tmp2 = li.attr(v); 
						if(tmp2 && tmp2.length && tmp2.replace(/jstree[^ ]*/ig,'').length) {
							tmp1.attr[v] = (" " + tmp2).replace(/ jstree[^ ]*/ig,'').replace(/\s+$/ig," ").replace(/^ /,"").replace(/ $/,""); 
						}
					});
					if(li.hasClass("jstree-open")) { tmp1.state = "open"; }
					if(li.hasClass("jstree-closed")) { tmp1.state = "closed"; }
					if(li.data()) { tmp1.metadata = li.data(); }
					a = li.children("a");
					a.each(function () {
						t = $(this);
						if(
							a_attr.length || 
							$.inArray("languages", s.plugins) !== -1 || 
							t.children("ins").get(0).style.backgroundImage.length || 
							(t.children("ins").get(0).className && t.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig,'').length)
						) { 
							lang = false;
							if($.inArray("languages", s.plugins) !== -1 && $.isArray(s.languages) && s.languages.length) {
								$.each(s.languages, function (l, lv) {
									if(t.hasClass(lv)) {
										lang = lv;
										return false;
									}
								});
							}
							tmp2 = { attr : { }, title : _this.get_text(t, lang) }; 
							$.each(a_attr, function (k, z) {
								tmp2.attr[z] = (" " + (t.attr(z) || "")).replace(/ jstree[^ ]*/ig,'').replace(/\s+$/ig," ").replace(/^ /,"").replace(/ $/,"");
							});
							if($.inArray("languages", s.plugins) !== -1 && $.isArray(s.languages) && s.languages.length) {
								$.each(s.languages, function (k, z) {
									if(t.hasClass(z)) { tmp2.language = z; return true; }
								});
							}
							if(t.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig,'').replace(/^\s+$/ig,"").length) {
								tmp2.icon = t.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig,'').replace(/\s+$/ig," ").replace(/^ /,"").replace(/ $/,"");
							}
							if(t.children("ins").get(0).style.backgroundImage.length) {
								tmp2.icon = t.children("ins").get(0).style.backgroundImage.replace("url(","").replace(")","");
							}
						}
						else {
							tmp2 = _this.get_text(t);
						}
						if(a.length > 1) { tmp1.data.push(tmp2); }
						else { tmp1.data = tmp2; }
					});
					li = li.find("> ul > li");
					if(li.length) { tmp1.children = _this.get_json(li, li_attr, a_attr, true); }
					result.push(tmp1);
				});
				return result;
			}
		}
	});
})(jQuery);
//*/

/* 
 * jsTree languages plugin
 * Adds support for multiple language versions in one tree
 * This basically allows for many titles coexisting in one node, but only one of them being visible at any given time
 * This is useful for maintaining the same structure in many languages (hence the name of the plugin)
 */
(function ($) {
	var sh = false;
	$.jstree.plugin("languages", {
		__init : function () { this._load_css();  },
		defaults : [],
		_fn : {
			set_lang : function (i) { 
				var langs = this._get_settings().languages,
					st = false,
					selector = ".jstree-" + this.get_index() + ' a';
				if(!$.isArray(langs) || langs.length === 0) { return false; }
				if($.inArray(i,langs) == -1) {
					if(!!langs[i]) { i = langs[i]; }
					else { return false; }
				}
				if(i == this.data.languages.current_language) { return true; }
				st = $.vakata.css.get_css(selector + "." + this.data.languages.current_language, false, sh);
				if(st !== false) { st.style.display = "none"; }
				st = $.vakata.css.get_css(selector + "." + i, false, sh);
				if(st !== false) { st.style.display = ""; }
				this.data.languages.current_language = i;
				this.__callback(i);
				return true;
			},
			get_lang : function () {
				return this.data.languages.current_language;
			},
			_get_string : function (key, lang) {
				var langs = this._get_settings().languages,
					s = this._get_settings().core.strings;
				if($.isArray(langs) && langs.length) {
					lang = (lang && $.inArray(lang,langs) != -1) ? lang : this.data.languages.current_language;
				}
				if(s[lang] && s[lang][key]) { return s[lang][key]; }
				if(s[key]) { return s[key]; }
				return key;
			},
			get_text : function (obj, lang) {
				obj = this._get_node(obj) || this.data.ui.last_selected;
				if(!obj.size()) { return false; }
				var langs = this._get_settings().languages,
					s = this._get_settings().core.html_titles;
				if($.isArray(langs) && langs.length) {
					lang = (lang && $.inArray(lang,langs) != -1) ? lang : this.data.languages.current_language;
					obj = obj.children("a." + lang);
				}
				else { obj = obj.children("a:eq(0)"); }
				if(s) {
					obj = obj.clone();
					obj.children("INS").remove();
					return obj.html();
				}
				else {
					obj = obj.contents().filter(function() { return this.nodeType == 3; })[0];
					return obj.nodeValue;
				}
			},
			set_text : function (obj, val, lang) {
				obj = this._get_node(obj) || this.data.ui.last_selected;
				if(!obj.size()) { return false; }
				var langs = this._get_settings().languages,
					s = this._get_settings().core.html_titles,
					tmp;
				if($.isArray(langs) && langs.length) {
					lang = (lang && $.inArray(lang,langs) != -1) ? lang : this.data.languages.current_language;
					obj = obj.children("a." + lang);
				}
				else { obj = obj.children("a:eq(0)"); }
				if(s) {
					tmp = obj.children("INS").clone();
					obj.html(val).prepend(tmp);
					this.__callback({ "obj" : obj, "name" : val, "lang" : lang });
					return true;
				}
				else {
					obj = obj.contents().filter(function() { return this.nodeType == 3; })[0];
					this.__callback({ "obj" : obj, "name" : val, "lang" : lang });
					return (obj.nodeValue = val);
				}
			},
			_load_css : function () {
				var langs = this._get_settings().languages,
					str = "/* languages css */",
					selector = ".jstree-" + this.get_index() + ' a',
					ln;
				if($.isArray(langs) && langs.length) {
					this.data.languages.current_language = langs[0];
					for(ln = 0; ln < langs.length; ln++) {
						str += selector + "." + langs[ln] + " {";
						if(langs[ln] != this.data.languages.current_language) { str += " display:none; "; }
						str += " } ";
					}
					sh = $.vakata.css.add_sheet({ 'str' : str, 'title' : "jstree-languages" });
				}
			},
			create_node : function (obj, position, js, callback) {
				var t = this.__call_old(true, obj, position, js, function (t) {
					var langs = this._get_settings().languages,
						a = t.children("a"),
						ln;
					if($.isArray(langs) && langs.length) {
						for(ln = 0; ln < langs.length; ln++) {
							if(!a.is("." + langs[ln])) {
								t.append(a.eq(0).clone().removeClass(langs.join(" ")).addClass(langs[ln]));
							}
						}
						a.not("." + langs.join(", .")).remove();
					}
					if(callback) { callback.call(this, t); }
				});
				return t;
			}
		}
	});
})(jQuery);
//*/

/*
 * jsTree cookies plugin
 * Stores the currently opened/selected nodes in a cookie and then restores them
 * Depends on the jquery.cookie plugin
 */
(function ($) {
	$.jstree.plugin("cookies", {
		__init : function () {
			if(typeof $.cookie === "undefined") { throw "jsTree cookie: jQuery cookie plugin not included."; }

			var s = this._get_settings().cookies,
				tmp;
			if(!!s.save_loaded) {
				tmp = $.cookie(s.save_loaded);
				if(tmp && tmp.length) { this.data.core.to_load = tmp.split(","); }
			}
			if(!!s.save_opened) {
				tmp = $.cookie(s.save_opened);
				if(tmp && tmp.length) { this.data.core.to_open = tmp.split(","); }
			}
			if(!!s.save_selected) {
				tmp = $.cookie(s.save_selected);
				if(tmp && tmp.length && this.data.ui) { this.data.ui.to_select = tmp.split(","); }
			}
			this.get_container()
				.one( ( this.data.ui ? "reselect" : "reopen" ) + ".jstree", $.proxy(function () {
					this.get_container()
						.bind("open_node.jstree close_node.jstree select_node.jstree deselect_node.jstree", $.proxy(function (e) { 
								if(this._get_settings().cookies.auto_save) { this.save_cookie((e.handleObj.namespace + e.handleObj.type).replace("jstree","")); }
							}, this));
				}, this));
		},
		defaults : {
			save_loaded		: "jstree_load",
			save_opened		: "jstree_open",
			save_selected	: "jstree_select",
			auto_save		: true,
			cookie_options	: {}
		},
		_fn : {
			save_cookie : function (c) {
				if(this.data.core.refreshing) { return; }
				var s = this._get_settings().cookies;
				if(!c) { // if called manually and not by event
					if(s.save_loaded) {
						this.save_loaded();
						$.cookie(s.save_loaded, this.data.core.to_load.join(","), s.cookie_options);
					}
					if(s.save_opened) {
						this.save_opened();
						$.cookie(s.save_opened, this.data.core.to_open.join(","), s.cookie_options);
					}
					if(s.save_selected && this.data.ui) {
						this.save_selected();
						$.cookie(s.save_selected, this.data.ui.to_select.join(","), s.cookie_options);
					}
					return;
				}
				switch(c) {
					case "open_node":
					case "close_node":
						if(!!s.save_opened) { 
							this.save_opened(); 
							$.cookie(s.save_opened, this.data.core.to_open.join(","), s.cookie_options); 
						}
						if(!!s.save_loaded) { 
							this.save_loaded(); 
							$.cookie(s.save_loaded, this.data.core.to_load.join(","), s.cookie_options); 
						}
						break;
					case "select_node":
					case "deselect_node":
						if(!!s.save_selected && this.data.ui) { 
							this.save_selected(); 
							$.cookie(s.save_selected, this.data.ui.to_select.join(","), s.cookie_options); 
						}
						break;
				}
			}
		}
	});
	// include cookies by default
	// $.jstree.defaults.plugins.push("cookies");
})(jQuery);
//*/

/*
 * jsTree sort plugin
 * Sorts items alphabetically (or using any other function)
 */
(function ($) {
	$.jstree.plugin("sort", {
		__init : function () {
			this.get_container()
				.bind("load_node.jstree", $.proxy(function (e, data) {
						var obj = this._get_node(data.rslt.obj);
						obj = obj === -1 ? this.get_container().children("ul") : obj.children("ul");
						this.sort(obj);
					}, this))
				.bind("rename_node.jstree create_node.jstree create.jstree", $.proxy(function (e, data) {
						this.sort(data.rslt.obj.parent());
					}, this))
				.bind("move_node.jstree", $.proxy(function (e, data) {
						var m = data.rslt.np == -1 ? this.get_container() : data.rslt.np;
						this.sort(m.children("ul"));
					}, this));
		},
		defaults : function (a, b) { return this.get_text(a) > this.get_text(b) ? 1 : -1; },
		_fn : {
			sort : function (obj) {
				var s = this._get_settings().sort,
					t = this;
				obj.append($.makeArray(obj.children("li")).sort($.proxy(s, t)));
				obj.find("> li > ul").each(function() { t.sort($(this)); });
				this.clean_node(obj);
			}
		}
	});
})(jQuery);
//*/

/*
 * jsTree DND plugin
 * Drag and drop plugin for moving/copying nodes
 */
(function ($) {
	var o = false,
		r = false,
		m = false,
		ml = false,
		sli = false,
		sti = false,
		dir1 = false,
		dir2 = false,
		last_pos = false;
	$.vakata.dnd = {
		is_down : false,
		is_drag : false,
		helper : false,
		scroll_spd : 10,
		init_x : 0,
		init_y : 0,
		threshold : 5,
		helper_left : 5,
		helper_top : 10,
		user_data : {},

		drag_start : function (e, data, html) { 
			if($.vakata.dnd.is_drag) { $.vakata.drag_stop({}); }
			try {
				e.currentTarget.unselectable = "on";
				e.currentTarget.onselectstart = function() { return false; };
				if(e.currentTarget.style) { e.currentTarget.style.MozUserSelect = "none"; }
			} catch(err) { }
			$.vakata.dnd.init_x = e.pageX;
			$.vakata.dnd.init_y = e.pageY;
			$.vakata.dnd.user_data = data;
			$.vakata.dnd.is_down = true;
			$.vakata.dnd.helper = $("<div id='vakata-dragged' />").html(html); //.fadeTo(10,0.25);
			$(document).bind("mousemove", $.vakata.dnd.drag);
			$(document).bind("mouseup", $.vakata.dnd.drag_stop);
			return false;
		},
		drag : function (e) { 
			if(!$.vakata.dnd.is_down) { return; }
			if(!$.vakata.dnd.is_drag) {
				if(Math.abs(e.pageX - $.vakata.dnd.init_x) > 5 || Math.abs(e.pageY - $.vakata.dnd.init_y) > 5) { 
					$.vakata.dnd.helper.appendTo("body");
					$.vakata.dnd.is_drag = true;
					$(document).triggerHandler("drag_start.vakata", { "event" : e, "data" : $.vakata.dnd.user_data });
				}
				else { return; }
			}

			// maybe use a scrolling parent element instead of document?
			if(e.type === "mousemove") { // thought of adding scroll in order to move the helper, but mouse poisition is n/a
				var d = $(document), t = d.scrollTop(), l = d.scrollLeft();
				if(e.pageY - t < 20) { 
					if(sti && dir1 === "down") { clearInterval(sti); sti = false; }
					if(!sti) { dir1 = "up"; sti = setInterval(function () { $(document).scrollTop($(document).scrollTop() - $.vakata.dnd.scroll_spd); }, 150); }
				}
				else { 
					if(sti && dir1 === "up") { clearInterval(sti); sti = false; }
				}
				if($(window).height() - (e.pageY - t) < 20) {
					if(sti && dir1 === "up") { clearInterval(sti); sti = false; }
					if(!sti) { dir1 = "down"; sti = setInterval(function () { $(document).scrollTop($(document).scrollTop() + $.vakata.dnd.scroll_spd); }, 150); }
				}
				else { 
					if(sti && dir1 === "down") { clearInterval(sti); sti = false; }
				}

				if(e.pageX - l < 20) {
					if(sli && dir2 === "right") { clearInterval(sli); sli = false; }
					if(!sli) { dir2 = "left"; sli = setInterval(function () { $(document).scrollLeft($(document).scrollLeft() - $.vakata.dnd.scroll_spd); }, 150); }
				}
				else { 
					if(sli && dir2 === "left") { clearInterval(sli); sli = false; }
				}
				if($(window).width() - (e.pageX - l) < 20) {
					if(sli && dir2 === "left") { clearInterval(sli); sli = false; }
					if(!sli) { dir2 = "right"; sli = setInterval(function () { $(document).scrollLeft($(document).scrollLeft() + $.vakata.dnd.scroll_spd); }, 150); }
				}
				else { 
					if(sli && dir2 === "right") { clearInterval(sli); sli = false; }
				}
			}

			$.vakata.dnd.helper.css({ left : (e.pageX + $.vakata.dnd.helper_left) + "px", top : (e.pageY + $.vakata.dnd.helper_top) + "px" });
			$(document).triggerHandler("drag.vakata", { "event" : e, "data" : $.vakata.dnd.user_data });
		},
		drag_stop : function (e) {
			if(sli) { clearInterval(sli); }
			if(sti) { clearInterval(sti); }
			$(document).unbind("mousemove", $.vakata.dnd.drag);
			$(document).unbind("mouseup", $.vakata.dnd.drag_stop);
			$(document).triggerHandler("drag_stop.vakata", { "event" : e, "data" : $.vakata.dnd.user_data });
			$.vakata.dnd.helper.remove();
			$.vakata.dnd.init_x = 0;
			$.vakata.dnd.init_y = 0;
			$.vakata.dnd.user_data = {};
			$.vakata.dnd.is_down = false;
			$.vakata.dnd.is_drag = false;
		}
	};
	$(function() {
		var css_string = '#vakata-dragged { display:block; margin:0 0 0 0; padding:4px 4px 4px 24px; position:absolute; top:-2000px; line-height:16px; z-index:10000; } ';
		$.vakata.css.add_sheet({ str : css_string, title : "vakata" });
	});

	$.jstree.plugin("dnd", {
		__init : function () {
			this.data.dnd = {
				active : false,
				after : false,
				inside : false,
				before : false,
				off : false,
				prepared : false,
				w : 0,
				to1 : false,
				to2 : false,
				cof : false,
				cw : false,
				ch : false,
				i1 : false,
				i2 : false,
				mto : false
			};
			this.get_container()
				.bind("mouseenter.jstree", $.proxy(function (e) {
						if($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
							if(this.data.themes) {
								m.attr("class", "jstree-" + this.data.themes.theme); 
								if(ml) { ml.attr("class", "jstree-" + this.data.themes.theme); }
								$.vakata.dnd.helper.attr("class", "jstree-dnd-helper jstree-" + this.data.themes.theme);
							}
							//if($(e.currentTarget).find("> ul > li").length === 0) {
							if(e.currentTarget === e.target && $.vakata.dnd.user_data.obj && $($.vakata.dnd.user_data.obj).length && $($.vakata.dnd.user_data.obj).parents(".jstree:eq(0)")[0] !== e.target) { // node should not be from the same tree
								var tr = $.jstree._reference(e.target), dc;
								if(tr.data.dnd.foreign) {
									dc = tr._get_settings().dnd.drag_check.call(this, { "o" : o, "r" : tr.get_container(), is_root : true });
									if(dc === true || dc.inside === true || dc.before === true || dc.after === true) {
										$.vakata.dnd.helper.children("ins").attr("class","jstree-ok");
									}
								}
								else {
									tr.prepare_move(o, tr.get_container(), "last");
									if(tr.check_move()) {
										$.vakata.dnd.helper.children("ins").attr("class","jstree-ok");
									}
								}
							}
						}
					}, this))
				.bind("mouseup.jstree", $.proxy(function (e) {
						//if($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree && $(e.currentTarget).find("> ul > li").length === 0) {
						if($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree && e.currentTarget === e.target && $.vakata.dnd.user_data.obj && $($.vakata.dnd.user_data.obj).length && $($.vakata.dnd.user_data.obj).parents(".jstree:eq(0)")[0] !== e.target) { // node should not be from the same tree
							var tr = $.jstree._reference(e.currentTarget), dc;
							if(tr.data.dnd.foreign) {
								dc = tr._get_settings().dnd.drag_check.call(this, { "o" : o, "r" : tr.get_container(), is_root : true });
								if(dc === true || dc.inside === true || dc.before === true || dc.after === true) {
									tr._get_settings().dnd.drag_finish.call(this, { "o" : o, "r" : tr.get_container(), is_root : true });
								}
							}
							else {
								tr.move_node(o, tr.get_container(), "last", e[tr._get_settings().dnd.copy_modifier + "Key"]);
							}
						}
					}, this))
				.bind("mouseleave.jstree", $.proxy(function (e) {
						if(e.relatedTarget && e.relatedTarget.id && e.relatedTarget.id === "jstree-marker-line") {
							return false; 
						}
						if($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
							if(this.data.dnd.i1) { clearInterval(this.data.dnd.i1); }
							if(this.data.dnd.i2) { clearInterval(this.data.dnd.i2); }
							if(this.data.dnd.to1) { clearTimeout(this.data.dnd.to1); }
							if(this.data.dnd.to2) { clearTimeout(this.data.dnd.to2); }
							if($.vakata.dnd.helper.children("ins").hasClass("jstree-ok")) {
								$.vakata.dnd.helper.children("ins").attr("class","jstree-invalid");
							}
						}
					}, this))
				.bind("mousemove.jstree", $.proxy(function (e) {
						if($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
							var cnt = this.get_container()[0];

							// Horizontal scroll
							if(e.pageX + 24 > this.data.dnd.cof.left + this.data.dnd.cw) {
								if(this.data.dnd.i1) { clearInterval(this.data.dnd.i1); }
								this.data.dnd.i1 = setInterval($.proxy(function () { this.scrollLeft += $.vakata.dnd.scroll_spd; }, cnt), 100);
							}
							else if(e.pageX - 24 < this.data.dnd.cof.left) {
								if(this.data.dnd.i1) { clearInterval(this.data.dnd.i1); }
								this.data.dnd.i1 = setInterval($.proxy(function () { this.scrollLeft -= $.vakata.dnd.scroll_spd; }, cnt), 100);
							}
							else {
								if(this.data.dnd.i1) { clearInterval(this.data.dnd.i1); }
							}

							// Vertical scroll
							if(e.pageY + 24 > this.data.dnd.cof.top + this.data.dnd.ch) {
								if(this.data.dnd.i2) { clearInterval(this.data.dnd.i2); }
								this.data.dnd.i2 = setInterval($.proxy(function () { this.scrollTop += $.vakata.dnd.scroll_spd; }, cnt), 100);
							}
							else if(e.pageY - 24 < this.data.dnd.cof.top) {
								if(this.data.dnd.i2) { clearInterval(this.data.dnd.i2); }
								this.data.dnd.i2 = setInterval($.proxy(function () { this.scrollTop -= $.vakata.dnd.scroll_spd; }, cnt), 100);
							}
							else {
								if(this.data.dnd.i2) { clearInterval(this.data.dnd.i2); }
							}

						}
					}, this))
				.bind("scroll.jstree", $.proxy(function (e) { 
						if($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree && m && ml) {
							m.hide();
							ml.hide();
						}
					}, this))
				.delegate("a", "mousedown.jstree", $.proxy(function (e) { 
						if(e.which === 1) {
							this.start_drag(e.currentTarget, e);
							return false;
						}
					}, this))
				.delegate("a", "mouseenter.jstree", $.proxy(function (e) { 
						if($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
							this.dnd_enter(e.currentTarget);
						}
					}, this))
				.delegate("a", "mousemove.jstree", $.proxy(function (e) { 
						if($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
							if(!r || !r.length || r.children("a")[0] !== e.currentTarget) {
								this.dnd_enter(e.currentTarget);
							}
							if(typeof this.data.dnd.off.top === "undefined") { this.data.dnd.off = $(e.target).offset(); }
							this.data.dnd.w = (e.pageY - (this.data.dnd.off.top || 0)) % this.data.core.li_height;
							if(this.data.dnd.w < 0) { this.data.dnd.w += this.data.core.li_height; }
							this.dnd_show();
						}
					}, this))
				.delegate("a", "mouseleave.jstree", $.proxy(function (e) { 
						if($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
							if(e.relatedTarget && e.relatedTarget.id && e.relatedTarget.id === "jstree-marker-line") {
								return false; 
							}
								if(m) { m.hide(); }
								if(ml) { ml.hide(); }
							/*
							var ec = $(e.currentTarget).closest("li"), 
								er = $(e.relatedTarget).closest("li");
							if(er[0] !== ec.prev()[0] && er[0] !== ec.next()[0]) {
								if(m) { m.hide(); }
								if(ml) { ml.hide(); }
							}
							*/
							this.data.dnd.mto = setTimeout( 
								(function (t) { return function () { t.dnd_leave(e); }; })(this),
							0);
						}
					}, this))
				.delegate("a", "mouseup.jstree", $.proxy(function (e) { 
						if($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
							this.dnd_finish(e);
						}
					}, this));

			$(document)
				.bind("drag_stop.vakata", $.proxy(function () {
						if(this.data.dnd.to1) { clearTimeout(this.data.dnd.to1); }
						if(this.data.dnd.to2) { clearTimeout(this.data.dnd.to2); }
						if(this.data.dnd.i1) { clearInterval(this.data.dnd.i1); }
						if(this.data.dnd.i2) { clearInterval(this.data.dnd.i2); }
						this.data.dnd.after		= false;
						this.data.dnd.before	= false;
						this.data.dnd.inside	= false;
						this.data.dnd.off		= false;
						this.data.dnd.prepared	= false;
						this.data.dnd.w			= false;
						this.data.dnd.to1		= false;
						this.data.dnd.to2		= false;
						this.data.dnd.i1		= false;
						this.data.dnd.i2		= false;
						this.data.dnd.active	= false;
						this.data.dnd.foreign	= false;
						if(m) { m.css({ "top" : "-2000px" }); }
						if(ml) { ml.css({ "top" : "-2000px" }); }
					}, this))
				.bind("drag_start.vakata", $.proxy(function (e, data) {
						if(data.data.jstree) { 
							var et = $(data.event.target);
							if(et.closest(".jstree").hasClass("jstree-" + this.get_index())) {
								this.dnd_enter(et);
							}
						}
					}, this));
				/*
				.bind("keydown.jstree-" + this.get_index() + " keyup.jstree-" + this.get_index(), $.proxy(function(e) {
						if($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree && !this.data.dnd.foreign) {
							var h = $.vakata.dnd.helper.children("ins");
							if(e[this._get_settings().dnd.copy_modifier + "Key"] && h.hasClass("jstree-ok")) {
								h.parent().html(h.parent().html().replace(/ \(Copy\)$/, "") + " (Copy)");
							} 
							else {
								h.parent().html(h.parent().html().replace(/ \(Copy\)$/, ""));
							}
						}
					}, this)); */



			var s = this._get_settings().dnd;
			if(s.drag_target) {
				$(document)
					.delegate(s.drag_target, "mousedown.jstree-" + this.get_index(), $.proxy(function (e) {
						o = e.target;
						$.vakata.dnd.drag_start(e, { jstree : true, obj : e.target }, "<ins class='jstree-icon'></ins>" + $(e.target).text() );
						if(this.data.themes) { 
							if(m) { m.attr("class", "jstree-" + this.data.themes.theme); }
							if(ml) { ml.attr("class", "jstree-" + this.data.themes.theme); }
							$.vakata.dnd.helper.attr("class", "jstree-dnd-helper jstree-" + this.data.themes.theme); 
						}
						$.vakata.dnd.helper.children("ins").attr("class","jstree-invalid");
						var cnt = this.get_container();
						this.data.dnd.cof = cnt.offset();
						this.data.dnd.cw = parseInt(cnt.width(),10);
						this.data.dnd.ch = parseInt(cnt.height(),10);
						this.data.dnd.foreign = true;
						e.preventDefault();
					}, this));
			}
			if(s.drop_target) {
				$(document)
					.delegate(s.drop_target, "mouseenter.jstree-" + this.get_index(), $.proxy(function (e) {
							if(this.data.dnd.active && this._get_settings().dnd.drop_check.call(this, { "o" : o, "r" : $(e.target), "e" : e })) {
								$.vakata.dnd.helper.children("ins").attr("class","jstree-ok");
							}
						}, this))
					.delegate(s.drop_target, "mouseleave.jstree-" + this.get_index(), $.proxy(function (e) {
							if(this.data.dnd.active) {
								$.vakata.dnd.helper.children("ins").attr("class","jstree-invalid");
							}
						}, this))
					.delegate(s.drop_target, "mouseup.jstree-" + this.get_index(), $.proxy(function (e) {
							if(this.data.dnd.active && $.vakata.dnd.helper.children("ins").hasClass("jstree-ok")) {
								this._get_settings().dnd.drop_finish.call(this, { "o" : o, "r" : $(e.target), "e" : e });
							}
						}, this));
			}
		},
		defaults : {
			copy_modifier	: "ctrl",
			check_timeout	: 100,
			open_timeout	: 500,
			drop_target		: ".jstree-drop",
			drop_check		: function (data) { return true; },
			drop_finish		: $.noop,
			drag_target		: ".jstree-draggable",
			drag_finish		: $.noop,
			drag_check		: function (data) { return { after : false, before : false, inside : true }; }
		},
		_fn : {
			dnd_prepare : function () {
				if(!r || !r.length) { return; }
				this.data.dnd.off = r.offset();
				if(this._get_settings().core.rtl) {
					this.data.dnd.off.right = this.data.dnd.off.left + r.width();
				}
				if(this.data.dnd.foreign) {
					var a = this._get_settings().dnd.drag_check.call(this, { "o" : o, "r" : r });
					this.data.dnd.after = a.after;
					this.data.dnd.before = a.before;
					this.data.dnd.inside = a.inside;
					this.data.dnd.prepared = true;
					return this.dnd_show();
				}
				this.prepare_move(o, r, "before");
				this.data.dnd.before = this.check_move();
				this.prepare_move(o, r, "after");
				this.data.dnd.after = this.check_move();
				if(this._is_loaded(r)) {
					this.prepare_move(o, r, "inside");
					this.data.dnd.inside = this.check_move();
				}
				else {
					this.data.dnd.inside = false;
				}
				this.data.dnd.prepared = true;
				return this.dnd_show();
			},
			dnd_show : function () {
				if(!this.data.dnd.prepared) { return; }
				var o = ["before","inside","after"],
					r = false,
					rtl = this._get_settings().core.rtl,
					pos;
				if(this.data.dnd.w < this.data.core.li_height/3) { o = ["before","inside","after"]; }
				else if(this.data.dnd.w <= this.data.core.li_height*2/3) {
					o = this.data.dnd.w < this.data.core.li_height/2 ? ["inside","before","after"] : ["inside","after","before"];
				}
				else { o = ["after","inside","before"]; }
				$.each(o, $.proxy(function (i, val) { 
					if(this.data.dnd[val]) {
						$.vakata.dnd.helper.children("ins").attr("class","jstree-ok");
						r = val;
						return false;
					}
				}, this));
				if(r === false) { $.vakata.dnd.helper.children("ins").attr("class","jstree-invalid"); }
				
				pos = rtl ? (this.data.dnd.off.right - 18) : (this.data.dnd.off.left + 10);
				switch(r) {
					case "before":
						m.css({ "left" : pos + "px", "top" : (this.data.dnd.off.top - 6) + "px" }).show();
						if(ml) { ml.css({ "left" : (pos + 8) + "px", "top" : (this.data.dnd.off.top - 1) + "px" }).show(); }
						break;
					case "after":
						m.css({ "left" : pos + "px", "top" : (this.data.dnd.off.top + this.data.core.li_height - 6) + "px" }).show();
						if(ml) { ml.css({ "left" : (pos + 8) + "px", "top" : (this.data.dnd.off.top + this.data.core.li_height - 1) + "px" }).show(); }
						break;
					case "inside":
						m.css({ "left" : pos + ( rtl ? -4 : 4) + "px", "top" : (this.data.dnd.off.top + this.data.core.li_height/2 - 5) + "px" }).show();
						if(ml) { ml.hide(); }
						break;
					default:
						m.hide();
						if(ml) { ml.hide(); }
						break;
				}
				last_pos = r;
				return r;
			},
			dnd_open : function () {
				this.data.dnd.to2 = false;
				this.open_node(r, $.proxy(this.dnd_prepare,this), true);
			},
			dnd_finish : function (e) {
				if(this.data.dnd.foreign) {
					if(this.data.dnd.after || this.data.dnd.before || this.data.dnd.inside) {
						this._get_settings().dnd.drag_finish.call(this, { "o" : o, "r" : r, "p" : last_pos });
					}
				}
				else {
					this.dnd_prepare();
					this.move_node(o, r, last_pos, e[this._get_settings().dnd.copy_modifier + "Key"]);
				}
				o = false;
				r = false;
				m.hide();
				if(ml) { ml.hide(); }
			},
			dnd_enter : function (obj) {
				if(this.data.dnd.mto) { 
					clearTimeout(this.data.dnd.mto);
					this.data.dnd.mto = false;
				}
				var s = this._get_settings().dnd;
				this.data.dnd.prepared = false;
				r = this._get_node(obj);
				if(s.check_timeout) { 
					// do the calculations after a minimal timeout (users tend to drag quickly to the desired location)
					if(this.data.dnd.to1) { clearTimeout(this.data.dnd.to1); }
					this.data.dnd.to1 = setTimeout($.proxy(this.dnd_prepare, this), s.check_timeout); 
				}
				else { 
					this.dnd_prepare(); 
				}
				if(s.open_timeout) { 
					if(this.data.dnd.to2) { clearTimeout(this.data.dnd.to2); }
					if(r && r.length && r.hasClass("jstree-closed")) { 
						// if the node is closed - open it, then recalculate
						this.data.dnd.to2 = setTimeout($.proxy(this.dnd_open, this), s.open_timeout);
					}
				}
				else {
					if(r && r.length && r.hasClass("jstree-closed")) { 
						this.dnd_open();
					}
				}
			},
			dnd_leave : function (e) {
				this.data.dnd.after		= false;
				this.data.dnd.before	= false;
				this.data.dnd.inside	= false;
				$.vakata.dnd.helper.children("ins").attr("class","jstree-invalid");
				m.hide();
				if(ml) { ml.hide(); }
				if(r && r[0] === e.target.parentNode) {
					if(this.data.dnd.to1) {
						clearTimeout(this.data.dnd.to1);
						this.data.dnd.to1 = false;
					}
					if(this.data.dnd.to2) {
						clearTimeout(this.data.dnd.to2);
						this.data.dnd.to2 = false;
					}
				}
			},
			start_drag : function (obj, e) {
				o = this._get_node(obj);
				if(this.data.ui && this.is_selected(o)) { o = this._get_node(null, true); }
				var dt = o.length > 1 ? this._get_string("multiple_selection") : this.get_text(o),
					cnt = this.get_container();
				if(!this._get_settings().core.html_titles) { dt = dt.replace(/</ig,"&lt;").replace(/>/ig,"&gt;"); }
				$.vakata.dnd.drag_start(e, { jstree : true, obj : o }, "<ins class='jstree-icon'></ins>" + dt );
				if(this.data.themes) { 
					if(m) { m.attr("class", "jstree-" + this.data.themes.theme); }
					if(ml) { ml.attr("class", "jstree-" + this.data.themes.theme); }
					$.vakata.dnd.helper.attr("class", "jstree-dnd-helper jstree-" + this.data.themes.theme); 
				}
				this.data.dnd.cof = cnt.offset();
				this.data.dnd.cw = parseInt(cnt.width(),10);
				this.data.dnd.ch = parseInt(cnt.height(),10);
				this.data.dnd.active = true;
			}
		}
	});
	$(function() {
		var css_string = '' + 
			'#vakata-dragged ins { display:block; text-decoration:none; width:16px; height:16px; margin:0 0 0 0; padding:0; position:absolute; top:4px; left:4px; ' + 
			' -moz-border-radius:4px; border-radius:4px; -webkit-border-radius:4px; ' +
			'} ' + 
			'#vakata-dragged .jstree-ok { background:green; } ' + 
			'#vakata-dragged .jstree-invalid { background:red; } ' + 
			'#jstree-marker { padding:0; margin:0; font-size:12px; overflow:hidden; height:12px; width:8px; position:absolute; top:-30px; z-index:10001; background-repeat:no-repeat; display:none; background-color:transparent; text-shadow:1px 1px 1px white; color:black; line-height:10px; } ' + 
			'#jstree-marker-line { padding:0; margin:0; line-height:0%; font-size:1px; overflow:hidden; height:1px; width:100px; position:absolute; top:-30px; z-index:10000; background-repeat:no-repeat; display:none; background-color:#456c43; ' + 
			' cursor:pointer; border:1px solid #eeeeee; border-left:0; -moz-box-shadow: 0px 0px 2px #666; -webkit-box-shadow: 0px 0px 2px #666; box-shadow: 0px 0px 2px #666; ' + 
			' -moz-border-radius:1px; border-radius:1px; -webkit-border-radius:1px; ' +
			'}' + 
			'';
		$.vakata.css.add_sheet({ str : css_string, title : "jstree" });
		m = $("<div />").attr({ id : "jstree-marker" }).hide().html("&raquo;")
			.bind("mouseleave mouseenter", function (e) { 
				m.hide();
				ml.hide();
				e.preventDefault(); 
				e.stopImmediatePropagation(); 
				return false; 
			})
			.appendTo("body");
		ml = $("<div />").attr({ id : "jstree-marker-line" }).hide()
			.bind("mouseup", function (e) { 
				if(r && r.length) { 
					r.children("a").trigger(e); 
					e.preventDefault(); 
					e.stopImmediatePropagation(); 
					return false; 
				} 
			})
			.bind("mouseleave", function (e) { 
				var rt = $(e.relatedTarget);
				if(rt.is(".jstree") || rt.closest(".jstree").length === 0) {
					if(r && r.length) { 
						r.children("a").trigger(e); 
						m.hide();
						ml.hide();
						e.preventDefault(); 
						e.stopImmediatePropagation(); 
						return false; 
					}
				}
			})
			.appendTo("body");
		$(document).bind("drag_start.vakata", function (e, data) {
			if(data.data.jstree) { m.show(); if(ml) { ml.show(); } }
		});
		$(document).bind("drag_stop.vakata", function (e, data) {
			if(data.data.jstree) { m.hide(); if(ml) { ml.hide(); } }
		});
	});
})(jQuery);
//*/

/*
 * jsTree checkbox plugin
 * Inserts checkboxes in front of every node
 * Depends on the ui plugin
 * DOES NOT WORK NICELY WITH MULTITREE DRAG'N'DROP
 */
(function ($) {
	$.jstree.plugin("checkbox", {
		__init : function () {
			this.data.checkbox.noui = this._get_settings().checkbox.override_ui;
			if(this.data.ui && this.data.checkbox.noui) {
				this.select_node = this.deselect_node = this.deselect_all = $.noop;
				this.get_selected = this.get_checked;
			}

			this.get_container()
				.bind("open_node.jstree create_node.jstree clean_node.jstree refresh.jstree", $.proxy(function (e, data) { 
						this._prepare_checkboxes(data.rslt.obj);
					}, this))
				.bind("loaded.jstree", $.proxy(function (e) {
						this._prepare_checkboxes();
					}, this))
				.delegate( (this.data.ui && this.data.checkbox.noui ? "a" : "ins.jstree-checkbox") , "click.jstree", $.proxy(function (e) {
						e.preventDefault();
						if(this._get_node(e.target).hasClass("jstree-checked")) { this.uncheck_node(e.target); }
						else { this.check_node(e.target); }
						if(this.data.ui && this.data.checkbox.noui) {
							this.save_selected();
							if(this.data.cookies) { this.save_cookie("select_node"); }
						}
						else {
							e.stopImmediatePropagation();
							return false;
						}
					}, this));
		},
		defaults : {
			override_ui : false,
			two_state : false,
			real_checkboxes : false,
			checked_parent_open : true,
			real_checkboxes_names : function (n) { return [ ("check_" + (n[0].id || Math.ceil(Math.random() * 10000))) , 1]; }
		},
		__destroy : function () {
			this.get_container()
				.find("input.jstree-real-checkbox").removeClass("jstree-real-checkbox").end()
				.find("ins.jstree-checkbox").remove();
		},
		_fn : {
			_checkbox_notify : function (n, data) {
				if(data.checked) {
					this.check_node(n, false);
				}
			},
			_prepare_checkboxes : function (obj) {
				obj = !obj || obj == -1 ? this.get_container().find("> ul > li") : this._get_node(obj);
				if(obj === false) { return; } // added for removing root nodes
				var c, _this = this, t, ts = this._get_settings().checkbox.two_state, rc = this._get_settings().checkbox.real_checkboxes, rcn = this._get_settings().checkbox.real_checkboxes_names;
				obj.each(function () {
					t = $(this);
					c = t.is("li") && (t.hasClass("jstree-checked") || (rc && t.children(":checked").length)) ? "jstree-checked" : "jstree-unchecked";
					t.find("li").addBack().each(function () {
						var $t = $(this), nm;
						$t.children("a" + (_this.data.languages ? "" : ":eq(0)") ).not(":has(.jstree-checkbox)").prepend("<ins class='jstree-checkbox'>&#160;</ins>").parent().not(".jstree-checked, .jstree-unchecked").addClass( ts ? "jstree-unchecked" : c );
						if(rc) {
							if(!$t.children(":checkbox").length) {
								nm = rcn.call(_this, $t);
								$t.prepend("<input type='checkbox' class='jstree-real-checkbox' id='" + nm[0] + "' name='" + nm[0] + "' value='" + nm[1] + "' />");
							}
							else {
								$t.children(":checkbox").addClass("jstree-real-checkbox");
							}
						}
						if(!ts) {
							if(c === "jstree-checked" || $t.hasClass("jstree-checked") || $t.children(':checked').length) {
								$t.find("li").addBack().addClass("jstree-checked").children(":checkbox").prop("checked", true);
							}
						}
						else {
							if($t.hasClass("jstree-checked") || $t.children(':checked').length) {
								$t.addClass("jstree-checked").children(":checkbox").prop("checked", true);
							}
						}
					});
				});
				if(!ts) {
					obj.find(".jstree-checked").parent().parent().each(function () { _this._repair_state(this); }); 
				}
			},
			change_state : function (obj, state) {
				obj = this._get_node(obj);
				var coll = false, rc = this._get_settings().checkbox.real_checkboxes;
				if(!obj || obj === -1) { return false; }
				state = (state === false || state === true) ? state : obj.hasClass("jstree-checked");
				if(this._get_settings().checkbox.two_state) {
					if(state) { 
						obj.removeClass("jstree-checked").addClass("jstree-unchecked"); 
						if(rc) { obj.children(":checkbox").prop("checked", false); }
					}
					else { 
						obj.removeClass("jstree-unchecked").addClass("jstree-checked"); 
						if(rc) { obj.children(":checkbox").prop("checked", true); }
					}
				}
				else {
					if(state) { 
						coll = obj.find("li").addBack();
						if(!coll.filter(".jstree-checked, .jstree-undetermined").length) { return false; }
						coll.removeClass("jstree-checked jstree-undetermined").addClass("jstree-unchecked"); 
						if(rc) { coll.children(":checkbox").prop("checked", false); }
					}
					else { 
						coll = obj.find("li").addBack();
						if(!coll.filter(".jstree-unchecked, .jstree-undetermined").length) { return false; }
						coll.removeClass("jstree-unchecked jstree-undetermined").addClass("jstree-checked"); 
						if(rc) { coll.children(":checkbox").prop("checked", true); }
						if(this.data.ui) { this.data.ui.last_selected = obj; }
						this.data.checkbox.last_selected = obj;
					}
					obj.parentsUntil(".jstree", "li").each(function () {
						var $this = $(this);
						if(state) {
							if($this.children("ul").children("li.jstree-checked, li.jstree-undetermined").length) {
								$this.parentsUntil(".jstree", "li").addBack().removeClass("jstree-checked jstree-unchecked").addClass("jstree-undetermined");
								if(rc) { $this.parentsUntil(".jstree", "li").addBack().children(":checkbox").prop("checked", false); }
								return false;
							}
							else {
								$this.removeClass("jstree-checked jstree-undetermined").addClass("jstree-unchecked");
								if(rc) { $this.children(":checkbox").prop("checked", false); }
							}
						}
						else {
							if($this.children("ul").children("li.jstree-unchecked, li.jstree-undetermined").length) {
								$this.parentsUntil(".jstree", "li").addBack().removeClass("jstree-checked jstree-unchecked").addClass("jstree-undetermined");
								if(rc) { $this.parentsUntil(".jstree", "li").addBack().children(":checkbox").prop("checked", false); }
								return false;
							}
							else {
								$this.removeClass("jstree-unchecked jstree-undetermined").addClass("jstree-checked");
								if(rc) { $this.children(":checkbox").prop("checked", true); }
							}
						}
					});
				}
				if(this.data.ui && this.data.checkbox.noui) { this.data.ui.selected = this.get_checked(); }
				this.__callback(obj);
				return true;
			},
			check_node : function (obj) {
				if(this.change_state(obj, false)) { 
					obj = this._get_node(obj);
					if(this._get_settings().checkbox.checked_parent_open) {
						var t = this;
						obj.parents(".jstree-closed").each(function () { t.open_node(this, false, true); });
					}
					this.__callback({ "obj" : obj }); 
				}
			},
			uncheck_node : function (obj) {
				if(this.change_state(obj, true)) { this.__callback({ "obj" : this._get_node(obj) }); }
			},
			check_all : function () {
				var _this = this, 
					coll = this._get_settings().checkbox.two_state ? this.get_container_ul().find("li") : this.get_container_ul().children("li");
				coll.each(function () {
					_this.change_state(this, false);
				});
				this.__callback();
			},
			uncheck_all : function () {
				var _this = this,
					coll = this._get_settings().checkbox.two_state ? this.get_container_ul().find("li") : this.get_container_ul().children("li");
				coll.each(function () {
					_this.change_state(this, true);
				});
				this.__callback();
			},

			is_checked : function(obj) {
				obj = this._get_node(obj);
				return obj.length ? obj.is(".jstree-checked") : false;
			},
			get_checked : function (obj, get_all) {
				obj = !obj || obj === -1 ? this.get_container() : this._get_node(obj);
				return get_all || this._get_settings().checkbox.two_state ? obj.find(".jstree-checked") : obj.find("> ul > .jstree-checked, .jstree-undetermined > ul > .jstree-checked");
			},
			get_unchecked : function (obj, get_all) { 
				obj = !obj || obj === -1 ? this.get_container() : this._get_node(obj);
				return get_all || this._get_settings().checkbox.two_state ? obj.find(".jstree-unchecked") : obj.find("> ul > .jstree-unchecked, .jstree-undetermined > ul > .jstree-unchecked");
			},

			show_checkboxes : function () { this.get_container().children("ul").removeClass("jstree-no-checkboxes"); },
			hide_checkboxes : function () { this.get_container().children("ul").addClass("jstree-no-checkboxes"); },

			_repair_state : function (obj) {
				obj = this._get_node(obj);
				if(!obj.length) { return; }
				if(this._get_settings().checkbox.two_state) {
					obj.find('li').addBack().not('.jstree-checked').removeClass('jstree-undetermined').addClass('jstree-unchecked').children(':checkbox').prop('checked', true);
					return;
				}
				var rc = this._get_settings().checkbox.real_checkboxes,
					a = obj.find("> ul > .jstree-checked").length,
					b = obj.find("> ul > .jstree-undetermined").length,
					c = obj.find("> ul > li").length;
				if(c === 0) { if(obj.hasClass("jstree-undetermined")) { this.change_state(obj, false); } }
				else if(a === 0 && b === 0) { this.change_state(obj, true); }
				else if(a === c) { this.change_state(obj, false); }
				else { 
					obj.parentsUntil(".jstree","li").addBack().removeClass("jstree-checked jstree-unchecked").addClass("jstree-undetermined");
					if(rc) { obj.parentsUntil(".jstree", "li").addBack().children(":checkbox").prop("checked", false); }
				}
			},
			reselect : function () {
				if(this.data.ui && this.data.checkbox.noui) { 
					var _this = this,
						s = this.data.ui.to_select;
					s = $.map($.makeArray(s), function (n) { return "#" + n.toString().replace(/^#/,"").replace(/\\\//g,"/").replace(/\//g,"\\\/").replace(/\\\./g,".").replace(/\./g,"\\.").replace(/\:/g,"\\:"); });
					this.deselect_all();
					$.each(s, function (i, val) { _this.check_node(val); });
					this.__callback();
				}
				else { 
					this.__call_old(); 
				}
			},
			save_loaded : function () {
				var _this = this;
				this.data.core.to_load = [];
				this.get_container_ul().find("li.jstree-closed.jstree-undetermined").each(function () {
					if(this.id) { _this.data.core.to_load.push("#" + this.id); }
				});
			}
		}
	});
	$(function() {
		var css_string = '.jstree .jstree-real-checkbox { display:none; } ';
		$.vakata.css.add_sheet({ str : css_string, title : "jstree" });
	});
})(jQuery);
//*/

/* 
 * jsTree XML plugin
 * The XML data store. Datastores are build by overriding the `load_node` and `_is_loaded` functions.
 */
(function ($) {
	$.vakata.xslt = function (xml, xsl, callback) {
		var r = false, p, q, s;
		// IE9
		if(r === false && window.ActiveXObject) {
			try {
				r = new ActiveXObject("Msxml2.XSLTemplate");
				q = new ActiveXObject("Msxml2.DOMDocument");
				q.loadXML(xml);
				s = new ActiveXObject("Msxml2.FreeThreadedDOMDocument");
				s.loadXML(xsl);
				r.stylesheet = s;
				p = r.createProcessor();
				p.input = q;
				p.transform();
				r = p.output;
			}
			catch (e) { }
		}
		xml = $.parseXML(xml);
		xsl = $.parseXML(xsl);
		// FF, Chrome
		if(r === false && typeof (XSLTProcessor) !== "undefined") {
			p = new XSLTProcessor();
			p.importStylesheet(xsl);
			r = p.transformToFragment(xml, document);
			r = $('<div />').append(r).html();
		}
		// OLD IE
		if(r === false && typeof (xml.transformNode) !== "undefined") {
			r = xml.transformNode(xsl);
		}
		callback.call(null, r);
	};
	var xsl = {
		'nest' : '<' + '?xml version="1.0" encoding="utf-8" ?>' + 
			'<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" >' + 
			'<xsl:output method="html" encoding="utf-8" omit-xml-declaration="yes" standalone="no" indent="no" media-type="text/html" />' + 
			'<xsl:template match="/">' + 
			'	<xsl:call-template name="nodes">' + 
			'		<xsl:with-param name="node" select="/root" />' + 
			'	</xsl:call-template>' + 
			'</xsl:template>' + 
			'<xsl:template name="nodes">' + 
			'	<xsl:param name="node" />' + 
			'	<ul>' + 
			'	<xsl:for-each select="$node/item">' + 
			'		<xsl:variable name="children" select="count(./item) &gt; 0" />' + 
			'		<li>' + 
			'			<xsl:attribute name="class">' + 
			'				<xsl:if test="position() = last()">jstree-last </xsl:if>' + 
			'				<xsl:choose>' + 
			'					<xsl:when test="@state = \'open\'">jstree-open </xsl:when>' + 
			'					<xsl:when test="$children or @hasChildren or @state = \'closed\'">jstree-closed </xsl:when>' + 
			'					<xsl:otherwise>jstree-leaf </xsl:otherwise>' + 
			'				</xsl:choose>' + 
			'				<xsl:value-of select="@class" />' + 
			'			</xsl:attribute>' + 
			'			<xsl:for-each select="@*">' + 
			'				<xsl:if test="name() != \'class\' and name() != \'state\' and name() != \'hasChildren\'">' + 
			'					<xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>' + 
			'				</xsl:if>' + 
			'			</xsl:for-each>' + 
			'	<ins class="jstree-icon"><xsl:text>&#xa0;</xsl:text></ins>' + 
			'			<xsl:for-each select="content/name">' + 
			'				<a>' + 
			'				<xsl:attribute name="href">' + 
			'					<xsl:choose>' + 
			'					<xsl:when test="@href"><xsl:value-of select="@href" /></xsl:when>' + 
			'					<xsl:otherwise>#</xsl:otherwise>' + 
			'					</xsl:choose>' + 
			'				</xsl:attribute>' + 
			'				<xsl:attribute name="class"><xsl:value-of select="@lang" /> <xsl:value-of select="@class" /></xsl:attribute>' + 
			'				<xsl:attribute name="style"><xsl:value-of select="@style" /></xsl:attribute>' + 
			'				<xsl:for-each select="@*">' + 
			'					<xsl:if test="name() != \'style\' and name() != \'class\' and name() != \'href\'">' + 
			'						<xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>' + 
			'					</xsl:if>' + 
			'				</xsl:for-each>' + 
			'					<ins>' + 
			'						<xsl:attribute name="class">jstree-icon ' + 
			'							<xsl:if test="string-length(attribute::icon) > 0 and not(contains(@icon,\'/\'))"><xsl:value-of select="@icon" /></xsl:if>' + 
			'						</xsl:attribute>' + 
			'						<xsl:if test="string-length(attribute::icon) > 0 and contains(@icon,\'/\')"><xsl:attribute name="style">background:url(<xsl:value-of select="@icon" />) center center no-repeat;</xsl:attribute></xsl:if>' + 
			'						<xsl:text>&#xa0;</xsl:text>' + 
			'					</ins>' + 
			'					<xsl:copy-of select="./child::node()" />' + 
			'				</a>' + 
			'			</xsl:for-each>' + 
			'			<xsl:if test="$children or @hasChildren"><xsl:call-template name="nodes"><xsl:with-param name="node" select="current()" /></xsl:call-template></xsl:if>' + 
			'		</li>' + 
			'	</xsl:for-each>' + 
			'	</ul>' + 
			'</xsl:template>' + 
			'</xsl:stylesheet>',

		'flat' : '<' + '?xml version="1.0" encoding="utf-8" ?>' + 
			'<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" >' + 
			'<xsl:output method="html" encoding="utf-8" omit-xml-declaration="yes" standalone="no" indent="no" media-type="text/xml" />' + 
			'<xsl:template match="/">' + 
			'	<ul>' + 
			'	<xsl:for-each select="//item[not(@parent_id) or @parent_id=0 or not(@parent_id = //item/@id)]">' + /* the last `or` may be removed */
			'		<xsl:call-template name="nodes">' + 
			'			<xsl:with-param name="node" select="." />' + 
			'			<xsl:with-param name="is_last" select="number(position() = last())" />' + 
			'		</xsl:call-template>' + 
			'	</xsl:for-each>' + 
			'	</ul>' + 
			'</xsl:template>' + 
			'<xsl:template name="nodes">' + 
			'	<xsl:param name="node" />' + 
			'	<xsl:param name="is_last" />' + 
			'	<xsl:variable name="children" select="count(//item[@parent_id=$node/attribute::id]) &gt; 0" />' + 
			'	<li>' + 
			'	<xsl:attribute name="class">' + 
			'		<xsl:if test="$is_last = true()">jstree-last </xsl:if>' + 
			'		<xsl:choose>' + 
			'			<xsl:when test="@state = \'open\'">jstree-open </xsl:when>' + 
			'			<xsl:when test="$children or @hasChildren or @state = \'closed\'">jstree-closed </xsl:when>' + 
			'			<xsl:otherwise>jstree-leaf </xsl:otherwise>' + 
			'		</xsl:choose>' + 
			'		<xsl:value-of select="@class" />' + 
			'	</xsl:attribute>' + 
			'	<xsl:for-each select="@*">' + 
			'		<xsl:if test="name() != \'parent_id\' and name() != \'hasChildren\' and name() != \'class\' and name() != \'state\'">' + 
			'		<xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>' + 
			'		</xsl:if>' + 
			'	</xsl:for-each>' + 
			'	<ins class="jstree-icon"><xsl:text>&#xa0;</xsl:text></ins>' + 
			'	<xsl:for-each select="content/name">' + 
			'		<a>' + 
			'		<xsl:attribute name="href">' + 
			'			<xsl:choose>' + 
			'			<xsl:when test="@href"><xsl:value-of select="@href" /></xsl:when>' + 
			'			<xsl:otherwise>#</xsl:otherwise>' + 
			'			</xsl:choose>' + 
			'		</xsl:attribute>' + 
			'		<xsl:attribute name="class"><xsl:value-of select="@lang" /> <xsl:value-of select="@class" /></xsl:attribute>' + 
			'		<xsl:attribute name="style"><xsl:value-of select="@style" /></xsl:attribute>' + 
			'		<xsl:for-each select="@*">' + 
			'			<xsl:if test="name() != \'style\' and name() != \'class\' and name() != \'href\'">' + 
			'				<xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>' + 
			'			</xsl:if>' + 
			'		</xsl:for-each>' + 
			'			<ins>' + 
			'				<xsl:attribute name="class">jstree-icon ' + 
			'					<xsl:if test="string-length(attribute::icon) > 0 and not(contains(@icon,\'/\'))"><xsl:value-of select="@icon" /></xsl:if>' + 
			'				</xsl:attribute>' + 
			'				<xsl:if test="string-length(attribute::icon) > 0 and contains(@icon,\'/\')"><xsl:attribute name="style">background:url(<xsl:value-of select="@icon" />) center center no-repeat;</xsl:attribute></xsl:if>' + 
			'				<xsl:text>&#xa0;</xsl:text>' + 
			'			</ins>' + 
			'			<xsl:copy-of select="./child::node()" />' + 
			'		</a>' + 
			'	</xsl:for-each>' + 
			'	<xsl:if test="$children">' + 
			'		<ul>' + 
			'		<xsl:for-each select="//item[@parent_id=$node/attribute::id]">' + 
			'			<xsl:call-template name="nodes">' + 
			'				<xsl:with-param name="node" select="." />' + 
			'				<xsl:with-param name="is_last" select="number(position() = last())" />' + 
			'			</xsl:call-template>' + 
			'		</xsl:for-each>' + 
			'		</ul>' + 
			'	</xsl:if>' + 
			'	</li>' + 
			'</xsl:template>' + 
			'</xsl:stylesheet>'
	},
	escape_xml = function(string) {
		return string
			.toString()
			.replace(/&/g, '&amp;')
			.replace(/</g, '&lt;')
			.replace(/>/g, '&gt;')
			.replace(/"/g, '&quot;')
			.replace(/'/g, '&apos;');
	};
	$.jstree.plugin("xml_data", {
		defaults : { 
			data : false,
			ajax : false,
			xsl : "flat",
			clean_node : false,
			correct_state : true,
			get_skip_empty : false,
			get_include_preamble : true
		},
		_fn : {
			load_node : function (obj, s_call, e_call) { var _this = this; this.load_node_xml(obj, function () { _this.__callback({ "obj" : _this._get_node(obj) }); s_call.call(this); }, e_call); },
			_is_loaded : function (obj) { 
				var s = this._get_settings().xml_data;
				obj = this._get_node(obj);
				return obj == -1 || !obj || (!s.ajax && !$.isFunction(s.data)) || obj.is(".jstree-open, .jstree-leaf") || obj.children("ul").children("li").size() > 0;
			},
			load_node_xml : function (obj, s_call, e_call) {
				var s = this.get_settings().xml_data,
					error_func = function () {},
					success_func = function () {};

				obj = this._get_node(obj);
				if(obj && obj !== -1) {
					if(obj.data("jstree_is_loading")) { return; }
					else { obj.data("jstree_is_loading",true); }
				}
				switch(!0) {
					case (!s.data && !s.ajax): throw "Neither data nor ajax settings supplied.";
					case ($.isFunction(s.data)):
						s.data.call(this, obj, $.proxy(function (d) {
							this.parse_xml(d, $.proxy(function (d) {
								if(d) {
									d = d.replace(/ ?xmlns="[^"]*"/ig, "");
									if(d.length > 10) {
										d = $(d);
										if(obj === -1 || !obj) { this.get_container().children("ul").empty().append(d.children()); }
										else { obj.children("a.jstree-loading").removeClass("jstree-loading"); obj.append(d); obj.removeData("jstree_is_loading"); }
										if(s.clean_node) { this.clean_node(obj); }
										if(s_call) { s_call.call(this); }
									}
									else {
										if(obj && obj !== -1) { 
											obj.children("a.jstree-loading").removeClass("jstree-loading");
											obj.removeData("jstree_is_loading");
											if(s.correct_state) { 
												this.correct_state(obj);
												if(s_call) { s_call.call(this); } 
											}
										}
										else {
											if(s.correct_state) { 
												this.get_container().children("ul").empty();
												if(s_call) { s_call.call(this); } 
											}
										}
									}
								}
							}, this));
						}, this));
						break;
					case (!!s.data && !s.ajax) || (!!s.data && !!s.ajax && (!obj || obj === -1)):
						if(!obj || obj == -1) {
							this.parse_xml(s.data, $.proxy(function (d) {
								if(d) {
									d = d.replace(/ ?xmlns="[^"]*"/ig, "");
									if(d.length > 10) {
										d = $(d);
										this.get_container().children("ul").empty().append(d.children());
										if(s.clean_node) { this.clean_node(obj); }
										if(s_call) { s_call.call(this); }
									}
								}
								else { 
									if(s.correct_state) { 
										this.get_container().children("ul").empty(); 
										if(s_call) { s_call.call(this); }
									}
								}
							}, this));
						}
						break;
					case (!s.data && !!s.ajax) || (!!s.data && !!s.ajax && obj && obj !== -1):
						error_func = function (x, t, e) {
							var ef = this.get_settings().xml_data.ajax.error; 
							if(ef) { ef.call(this, x, t, e); }
							if(obj !== -1 && obj.length) {
								obj.children("a.jstree-loading").removeClass("jstree-loading");
								obj.removeData("jstree_is_loading");
								if(t === "success" && s.correct_state) { this.correct_state(obj); }
							}
							else {
								if(t === "success" && s.correct_state) { this.get_container().children("ul").empty(); }
							}
							if(e_call) { e_call.call(this); }
						};
						success_func = function (d, t, x) {
							d = x.responseText;
							var sf = this.get_settings().xml_data.ajax.success; 
							if(sf) { d = sf.call(this,d,t,x) || d; }
							if(d === "" || (d && d.toString && d.toString().replace(/^[\s\n]+$/,"") === "")) {
								return error_func.call(this, x, t, "");
							}
							this.parse_xml(d, $.proxy(function (d) {
								if(d) {
									d = d.replace(/ ?xmlns="[^"]*"/ig, "");
									if(d.length > 10) {
										d = $(d);
										if(obj === -1 || !obj) { this.get_container().children("ul").empty().append(d.children()); }
										else { obj.children("a.jstree-loading").removeClass("jstree-loading"); obj.append(d); obj.removeData("jstree_is_loading"); }
										if(s.clean_node) { this.clean_node(obj); }
										if(s_call) { s_call.call(this); }
									}
									else {
										if(obj && obj !== -1) { 
											obj.children("a.jstree-loading").removeClass("jstree-loading");
											obj.removeData("jstree_is_loading");
											if(s.correct_state) { 
												this.correct_state(obj);
												if(s_call) { s_call.call(this); } 
											}
										}
										else {
											if(s.correct_state) { 
												this.get_container().children("ul").empty();
												if(s_call) { s_call.call(this); } 
											}
										}
									}
								}
							}, this));
						};
						s.ajax.context = this;
						s.ajax.error = error_func;
						s.ajax.success = success_func;
						if(!s.ajax.dataType) { s.ajax.dataType = "xml"; }
						if($.isFunction(s.ajax.url)) { s.ajax.url = s.ajax.url.call(this, obj); }
						if($.isFunction(s.ajax.data)) { s.ajax.data = s.ajax.data.call(this, obj); }
						$.ajax(s.ajax);
						break;
				}
			},
			parse_xml : function (xml, callback) {
				var s = this._get_settings().xml_data;
				$.vakata.xslt(xml, xsl[s.xsl], callback);
			},
			get_xml : function (tp, obj, li_attr, a_attr, is_callback) {
				var result = "", 
					s = this._get_settings(), 
					_this = this,
					tmp1, tmp2, li, a, lang;
				if(!tp) { tp = "flat"; }
				if(!is_callback) { is_callback = 0; }
				obj = this._get_node(obj);
				if(!obj || obj === -1) { obj = this.get_container().find("> ul > li"); }
				li_attr = $.isArray(li_attr) ? li_attr : [ "id", "class" ];
				if(!is_callback && this.data.types && $.inArray(s.types.type_attr, li_attr) === -1) { li_attr.push(s.types.type_attr); }

				a_attr = $.isArray(a_attr) ? a_attr : [ ];

				if(!is_callback) { 
					if(s.xml_data.get_include_preamble) { 
						result += '<' + '?xml version="1.0" encoding="UTF-8"?' + '>'; 
					}
					result += "<root>"; 
				}
				obj.each(function () {
					result += "<item";
					li = $(this);
					$.each(li_attr, function (i, v) { 
						var t = li.attr(v);
						if(!s.xml_data.get_skip_empty || typeof t !== "undefined") {
							result += " " + v + "=\"" + escape_xml((" " + (t || "")).replace(/ jstree[^ ]*/ig,'').replace(/\s+$/ig," ").replace(/^ /,"").replace(/ $/,"")) + "\""; 
						}
					});
					if(li.hasClass("jstree-open")) { result += " state=\"open\""; }
					if(li.hasClass("jstree-closed")) { result += " state=\"closed\""; }
					if(tp === "flat") { result += " parent_id=\"" + escape_xml(is_callback) + "\""; }
					result += ">";
					result += "<content>";
					a = li.children("a");
					a.each(function () {
						tmp1 = $(this);
						lang = false;
						result += "<name";
						if($.inArray("languages", s.plugins) !== -1) {
							$.each(s.languages, function (k, z) {
								if(tmp1.hasClass(z)) { result += " lang=\"" + escape_xml(z) + "\""; lang = z; return false; }
							});
						}
						if(a_attr.length) { 
							$.each(a_attr, function (k, z) {
								var t = tmp1.attr(z);
								if(!s.xml_data.get_skip_empty || typeof t !== "undefined") {
									result += " " + z + "=\"" + escape_xml((" " + t || "").replace(/ jstree[^ ]*/ig,'').replace(/\s+$/ig," ").replace(/^ /,"").replace(/ $/,"")) + "\"";
								}
							});
						}
						if(tmp1.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig,'').replace(/^\s+$/ig,"").length) {
							result += ' icon="' + escape_xml(tmp1.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig,'').replace(/\s+$/ig," ").replace(/^ /,"").replace(/ $/,"")) + '"';
						}
						if(tmp1.children("ins").get(0).style.backgroundImage.length) {
							result += ' icon="' + escape_xml(tmp1.children("ins").get(0).style.backgroundImage.replace("url(","").replace(")","").replace(/'/ig,"").replace(/"/ig,"")) + '"';
						}
						result += ">";
						result += "<![CDATA[" + _this.get_text(tmp1, lang) + "]]>";
						result += "</name>";
					});
					result += "</content>";
					tmp2 = li[0].id || true;
					li = li.find("> ul > li");
					if(li.length) { tmp2 = _this.get_xml(tp, li, li_attr, a_attr, tmp2); }
					else { tmp2 = ""; }
					if(tp == "nest") { result += tmp2; }
					result += "</item>";
					if(tp == "flat") { result += tmp2; }
				});
				if(!is_callback) { result += "</root>"; }
				return result;
			}
		}
	});
})(jQuery);
//*/

/*
 * jsTree search plugin
 * Enables both sync and async search on the tree
 * DOES NOT WORK WITH JSON PROGRESSIVE RENDER
 */
(function ($) {
	if($().jquery.split('.')[1] >= 8) {
		$.expr[':'].jstree_contains = $.expr.createPseudo(function(search) {
			return function(a) {
				return (a.textContent || a.innerText || "").toLowerCase().indexOf(search.toLowerCase())>=0;
			};
		});
		$.expr[':'].jstree_title_contains = $.expr.createPseudo(function(search) {
			return function(a) {
				return (a.getAttribute("title") || "").toLowerCase().indexOf(search.toLowerCase())>=0;
			};
		});
	}
	else {
		$.expr[':'].jstree_contains = function(a,i,m){
			return (a.textContent || a.innerText || "").toLowerCase().indexOf(m[3].toLowerCase())>=0;
		};
		$.expr[':'].jstree_title_contains = function(a,i,m) {
			return (a.getAttribute("title") || "").toLowerCase().indexOf(m[3].toLowerCase())>=0;
		};
	}
	$.jstree.plugin("search", {
		__init : function () {
			this.data.search.str = "";
			this.data.search.result = $();
			if(this._get_settings().search.show_only_matches) {
				this.get_container()
					.bind("search.jstree", function (e, data) {
						$(this).children("ul").find("li").hide().removeClass("jstree-last");
						data.rslt.nodes.parentsUntil(".jstree").addBack().show()
							.filter("ul").each(function () { $(this).children("li:visible").eq(-1).addClass("jstree-last"); });
					})
					.bind("clear_search.jstree", function () {
						$(this).children("ul").find("li").css("display","").end().end().jstree("clean_node", -1);
					});
			}
		},
		defaults : {
			ajax : false,
			search_method : "jstree_contains", // for case insensitive - jstree_contains
			show_only_matches : false
		},
		_fn : {
			search : function (str, skip_async) {
				if($.trim(str) === "") { this.clear_search(); return; }
				var s = this.get_settings().search, 
					t = this,
					error_func = function () { },
					success_func = function () { };
				this.data.search.str = str;

				if(!skip_async && s.ajax !== false && this.get_container_ul().find("li.jstree-closed:not(:has(ul)):eq(0)").length > 0) {
					this.search.supress_callback = true;
					error_func = function () { };
					success_func = function (d, t, x) {
						var sf = this.get_settings().search.ajax.success; 
						if(sf) { d = sf.call(this,d,t,x) || d; }
						this.data.search.to_open = d;
						this._search_open();
					};
					s.ajax.context = this;
					s.ajax.error = error_func;
					s.ajax.success = success_func;
					if($.isFunction(s.ajax.url)) { s.ajax.url = s.ajax.url.call(this, str); }
					if($.isFunction(s.ajax.data)) { s.ajax.data = s.ajax.data.call(this, str); }
					if(!s.ajax.data) { s.ajax.data = { "search_string" : str }; }
					if(!s.ajax.dataType || /^json/.exec(s.ajax.dataType)) { s.ajax.dataType = "json"; }
					$.ajax(s.ajax);
					return;
				}
				if(this.data.search.result.length) { this.clear_search(); }
				this.data.search.result = this.get_container().find("a" + (this.data.languages ? "." + this.get_lang() : "" ) + ":" + (s.search_method) + "(" + this.data.search.str + ")");
				this.data.search.result.addClass("jstree-search").parent().parents(".jstree-closed").each(function () {
					t.open_node(this, false, true);
				});
				this.__callback({ nodes : this.data.search.result, str : str });
			},
			clear_search : function (str) {
				this.data.search.result.removeClass("jstree-search");
				this.__callback(this.data.search.result);
				this.data.search.result = $();
			},
			_search_open : function (is_callback) {
				var _this = this,
					done = true,
					current = [],
					remaining = [];
				if(this.data.search.to_open.length) {
					$.each(this.data.search.to_open, function (i, val) {
						if(val == "#") { return true; }
						if($(val).length && $(val).is(".jstree-closed")) { current.push(val); }
						else { remaining.push(val); }
					});
					if(current.length) {
						this.data.search.to_open = remaining;
						$.each(current, function (i, val) { 
							_this.open_node(val, function () { _this._search_open(true); }); 
						});
						done = false;
					}
				}
				if(done) { this.search(this.data.search.str, true); }
			}
		}
	});
})(jQuery);
//*/

/* 
 * jsTree contextmenu plugin
 */
(function ($) {
	$.vakata.context = {
		hide_on_mouseleave : false,

		cnt		: $("<div id='vakata-contextmenu' />"),
		vis		: false,
		tgt		: false,
		par		: false,
		func	: false,
		data	: false,
		rtl		: false,
		show	: function (s, t, x, y, d, p, rtl) {
			$.vakata.context.rtl = !!rtl;
			var html = $.vakata.context.parse(s), h, w;
			if(!html) { return; }
			$.vakata.context.vis = true;
			$.vakata.context.tgt = t;
			$.vakata.context.par = p || t || null;
			$.vakata.context.data = d || null;
			$.vakata.context.cnt
				.html(html)
				.css({ "visibility" : "hidden", "display" : "block", "left" : 0, "top" : 0 });

			if($.vakata.context.hide_on_mouseleave) {
				$.vakata.context.cnt
					.one("mouseleave", function(e) { $.vakata.context.hide(); });
			}

			h = $.vakata.context.cnt.height();
			w = $.vakata.context.cnt.width();
			if(x + w > $(document).width()) { 
				x = $(document).width() - (w + 5); 
				$.vakata.context.cnt.find("li > ul").addClass("right"); 
			}
			if(y + h > $(document).height()) { 
				y = y - (h + t[0].offsetHeight); 
				$.vakata.context.cnt.find("li > ul").addClass("bottom"); 
			}

			$.vakata.context.cnt
				.css({ "left" : x, "top" : y })
				.find("li:has(ul)")
					.bind("mouseenter", function (e) { 
						var w = $(document).width(),
							h = $(document).height(),
							ul = $(this).children("ul").show(); 
						if(w !== $(document).width()) { ul.toggleClass("right"); }
						if(h !== $(document).height()) { ul.toggleClass("bottom"); }
					})
					.bind("mouseleave", function (e) { 
						$(this).children("ul").hide(); 
					})
					.end()
				.css({ "visibility" : "visible" })
				.show();
			$(document).triggerHandler("context_show.vakata");
		},
		hide	: function () {
			$.vakata.context.vis = false;
			$.vakata.context.cnt.attr("class","").css({ "visibility" : "hidden" });
			$(document).triggerHandler("context_hide.vakata");
		},
		parse	: function (s, is_callback) {
			if(!s) { return false; }
			var str = "",
				tmp = false,
				was_sep = true;
			if(!is_callback) { $.vakata.context.func = {}; }
			str += "<ul>";
			$.each(s, function (i, val) {
				if(!val) { return true; }
				$.vakata.context.func[i] = val.action;
				if(!was_sep && val.separator_before) {
					str += "<li class='vakata-separator vakata-separator-before'></li>";
				}
				was_sep = false;
				str += "<li class='" + (val._class || "") + (val._disabled ? " jstree-contextmenu-disabled " : "") + "'><ins ";
				if(val.icon && val.icon.indexOf("/") === -1) { str += " class='" + val.icon + "' "; }
				if(val.icon && val.icon.indexOf("/") !== -1) { str += " style='background:url(" + val.icon + ") center center no-repeat;' "; }
				str += ">&#160;</ins><a href='#' rel='" + i + "'>";
				if(val.submenu) {
					str += "<span style='float:" + ($.vakata.context.rtl ? "left" : "right") + ";'>&raquo;</span>";
				}
				str += val.label + "</a>";
				if(val.submenu) {
					tmp = $.vakata.context.parse(val.submenu, true);
					if(tmp) { str += tmp; }
				}
				str += "</li>";
				if(val.separator_after) {
					str += "<li class='vakata-separator vakata-separator-after'></li>";
					was_sep = true;
				}
			});
			str = str.replace(/<li class\='vakata-separator vakata-separator-after'\><\/li\>$/,"");
			str += "</ul>";
			$(document).triggerHandler("context_parse.vakata");
			return str.length > 10 ? str : false;
		},
		exec	: function (i) {
			if($.isFunction($.vakata.context.func[i])) {
				// if is string - eval and call it!
				$.vakata.context.func[i].call($.vakata.context.data, $.vakata.context.par);
				return true;
			}
			else { return false; }
		}
	};
	$(function () {
		var css_string = '' + 
			'#vakata-contextmenu { display:block; visibility:hidden; left:0; top:-200px; position:absolute; margin:0; padding:0; min-width:180px; background:#ebebeb; border:1px solid silver; z-index:10000; *width:180px; } ' + 
			'#vakata-contextmenu ul { min-width:180px; *width:180px; } ' + 
			'#vakata-contextmenu ul, #vakata-contextmenu li { margin:0; padding:0; list-style-type:none; display:block; } ' + 
			'#vakata-contextmenu li { line-height:20px; min-height:20px; position:relative; padding:0px; } ' + 
			'#vakata-contextmenu li a { padding:1px 6px; line-height:17px; display:block; text-decoration:none; margin:1px 1px 0 1px; } ' + 
			'#vakata-contextmenu li ins { float:left; width:16px; height:16px; text-decoration:none; margin-right:2px; } ' + 
			'#vakata-contextmenu li a:hover, #vakata-contextmenu li.vakata-hover > a { background:gray; color:white; } ' + 
			'#vakata-contextmenu li ul { display:none; position:absolute; top:-2px; left:100%; background:#ebebeb; border:1px solid gray; } ' + 
			'#vakata-contextmenu .right { right:100%; left:auto; } ' + 
			'#vakata-contextmenu .bottom { bottom:-1px; top:auto; } ' + 
			'#vakata-contextmenu li.vakata-separator { min-height:0; height:1px; line-height:1px; font-size:1px; overflow:hidden; margin:0 2px; background:silver; /* border-top:1px solid #fefefe; */ padding:0; } ';
		$.vakata.css.add_sheet({ str : css_string, title : "vakata" });
		$.vakata.context.cnt
			.delegate("a","click", function (e) { e.preventDefault(); })
			.delegate("a","mouseup", function (e) {
				if(!$(this).parent().hasClass("jstree-contextmenu-disabled") && $.vakata.context.exec($(this).attr("rel"))) {
					$.vakata.context.hide();
				}
				else { $(this).blur(); }
			})
			.delegate("a","mouseover", function () {
				$.vakata.context.cnt.find(".vakata-hover").removeClass("vakata-hover");
			})
			.appendTo("body");
		$(document).bind("mousedown", function (e) { if($.vakata.context.vis && !$.contains($.vakata.context.cnt[0], e.target)) { $.vakata.context.hide(); } });
		if(typeof $.hotkeys !== "undefined") {
			$(document)
				.bind("keydown", "up", function (e) { 
					if($.vakata.context.vis) { 
						var o = $.vakata.context.cnt.find("ul:visible").last().children(".vakata-hover").removeClass("vakata-hover").prevAll("li:not(.vakata-separator)").first();
						if(!o.length) { o = $.vakata.context.cnt.find("ul:visible").last().children("li:not(.vakata-separator)").last(); }
						o.addClass("vakata-hover");
						e.stopImmediatePropagation(); 
						e.preventDefault();
					} 
				})
				.bind("keydown", "down", function (e) { 
					if($.vakata.context.vis) { 
						var o = $.vakata.context.cnt.find("ul:visible").last().children(".vakata-hover").removeClass("vakata-hover").nextAll("li:not(.vakata-separator)").first();
						if(!o.length) { o = $.vakata.context.cnt.find("ul:visible").last().children("li:not(.vakata-separator)").first(); }
						o.addClass("vakata-hover");
						e.stopImmediatePropagation(); 
						e.preventDefault();
					} 
				})
				.bind("keydown", "right", function (e) { 
					if($.vakata.context.vis) { 
						$.vakata.context.cnt.find(".vakata-hover").children("ul").show().children("li:not(.vakata-separator)").removeClass("vakata-hover").first().addClass("vakata-hover");
						e.stopImmediatePropagation(); 
						e.preventDefault();
					} 
				})
				.bind("keydown", "left", function (e) { 
					if($.vakata.context.vis) { 
						$.vakata.context.cnt.find(".vakata-hover").children("ul").hide().children(".vakata-separator").removeClass("vakata-hover");
						e.stopImmediatePropagation(); 
						e.preventDefault();
					} 
				})
				.bind("keydown", "esc", function (e) { 
					$.vakata.context.hide(); 
					e.preventDefault();
				})
				.bind("keydown", "space", function (e) { 
					$.vakata.context.cnt.find(".vakata-hover").last().children("a").click();
					e.preventDefault();
				});
		}
	});

	$.jstree.plugin("contextmenu", {
		__init : function () {
			this.get_container()
				.delegate("a", "contextmenu.jstree", $.proxy(function (e) {
						e.preventDefault();
						if(!$(e.currentTarget).hasClass("jstree-loading")) {
							this.show_contextmenu(e.currentTarget, e.pageX, e.pageY);
						}
					}, this))
				.delegate("a", "click.jstree", $.proxy(function (e) {
						if(this.data.contextmenu) {
							$.vakata.context.hide();
						}
					}, this))
				.bind("destroy.jstree", $.proxy(function () {
						// TODO: move this to descruct method
						if(this.data.contextmenu) {
							$.vakata.context.hide();
						}
					}, this));
			$(document).bind("context_hide.vakata", $.proxy(function () { this.data.contextmenu = false; }, this));
		},
		defaults : { 
			select_node : false, // requires UI plugin
			show_at_node : true,
			items : { // Could be a function that should return an object like this one
				"create" : {
					"separator_before"	: false,
					"separator_after"	: true,
					"label"				: "Create",
					"action"			: function (obj) { this.create(obj); }
				},
				"rename" : {
					"separator_before"	: false,
					"separator_after"	: false,
					"label"				: "Rename",
					"action"			: function (obj) { this.rename(obj); }
				},
				"remove" : {
					"separator_before"	: false,
					"icon"				: false,
					"separator_after"	: false,
					"label"				: "Delete",
					"action"			: function (obj) { if(this.is_selected(obj)) { this.remove(); } else { this.remove(obj); } }
				},
				"ccp" : {
					"separator_before"	: true,
					"icon"				: false,
					"separator_after"	: false,
					"label"				: "Edit",
					"action"			: false,
					"submenu" : { 
						"cut" : {
							"separator_before"	: false,
							"separator_after"	: false,
							"label"				: "Cut",
							"action"			: function (obj) { this.cut(obj); }
						},
						"copy" : {
							"separator_before"	: false,
							"icon"				: false,
							"separator_after"	: false,
							"label"				: "Copy",
							"action"			: function (obj) { this.copy(obj); }
						},
						"paste" : {
							"separator_before"	: false,
							"icon"				: false,
							"separator_after"	: false,
							"label"				: "Paste",
							"action"			: function (obj) { this.paste(obj); }
						}
					}
				}
			}
		},
		_fn : {
			show_contextmenu : function (obj, x, y) {
				obj = this._get_node(obj);
				var s = this.get_settings().contextmenu,
					a = obj.children("a:visible:eq(0)"),
					o = false,
					i = false;
				if(s.select_node && this.data.ui && !this.is_selected(obj)) {
					this.deselect_all();
					this.select_node(obj, true);
				}
				if(s.show_at_node || typeof x === "undefined" || typeof y === "undefined") {
					o = a.offset();
					x = o.left;
					y = o.top + this.data.core.li_height;
				}
				i = obj.data("jstree") && obj.data("jstree").contextmenu ? obj.data("jstree").contextmenu : s.items;
				if($.isFunction(i)) { i = i.call(this, obj); }
				this.data.contextmenu = true;
				$.vakata.context.show(i, a, x, y, this, obj, this._get_settings().core.rtl);
				if(this.data.themes) { $.vakata.context.cnt.attr("class", "jstree-" + this.data.themes.theme + "-context"); }
			}
		}
	});
})(jQuery);
//*/

/* 
 * jsTree types plugin
 * Adds support types of nodes
 * You can set an attribute on each li node, that represents its type.
 * According to the type setting the node may get custom icon/validation rules
 */
(function ($) {
	$.jstree.plugin("types", {
		__init : function () {
			var s = this._get_settings().types;
			this.data.types.attach_to = [];
			this.get_container()
				.bind("init.jstree", $.proxy(function () { 
						var types = s.types, 
							attr  = s.type_attr, 
							icons_css = "", 
							_this = this;

						$.each(types, function (i, tp) {
							$.each(tp, function (k, v) { 
								if(!/^(max_depth|max_children|icon|valid_children)$/.test(k)) { _this.data.types.attach_to.push(k); }
							});
							if(!tp.icon) { return true; }
							if( tp.icon.image || tp.icon.position) {
								if(i == "default")	{ icons_css += '.jstree-' + _this.get_index() + ' a > .jstree-icon { '; }
								else				{ icons_css += '.jstree-' + _this.get_index() + ' li[' + attr + '="' + i + '"] > a > .jstree-icon { '; }
								if(tp.icon.image)	{ icons_css += ' background-image:url(' + tp.icon.image + '); '; }
								if(tp.icon.position){ icons_css += ' background-position:' + tp.icon.position + '; '; }
								else				{ icons_css += ' background-position:0 0; '; }
								icons_css += '} ';
							}
						});
						if(icons_css !== "") { $.vakata.css.add_sheet({ 'str' : icons_css, title : "jstree-types" }); }
					}, this))
				.bind("before.jstree", $.proxy(function (e, data) { 
						var s, t, 
							o = this._get_settings().types.use_data ? this._get_node(data.args[0]) : false, 
							d = o && o !== -1 && o.length ? o.data("jstree") : false;
						if(d && d.types && d.types[data.func] === false) { e.stopImmediatePropagation(); return false; }
						if($.inArray(data.func, this.data.types.attach_to) !== -1) {
							if(!data.args[0] || (!data.args[0].tagName && !data.args[0].jquery)) { return; }
							s = this._get_settings().types.types;
							t = this._get_type(data.args[0]);
							if(
								( 
									(s[t] && typeof s[t][data.func] !== "undefined") || 
									(s["default"] && typeof s["default"][data.func] !== "undefined") 
								) && this._check(data.func, data.args[0]) === false
							) {
								e.stopImmediatePropagation();
								return false;
							}
						}
					}, this));
			if(is_ie6) {
				this.get_container()
					.bind("load_node.jstree set_type.jstree", $.proxy(function (e, data) {
							var r = data && data.rslt && data.rslt.obj && data.rslt.obj !== -1 ? this._get_node(data.rslt.obj).parent() : this.get_container_ul(),
								c = false,
								s = this._get_settings().types;
							$.each(s.types, function (i, tp) {
								if(tp.icon && (tp.icon.image || tp.icon.position)) {
									c = i === "default" ? r.find("li > a > .jstree-icon") : r.find("li[" + s.type_attr + "='" + i + "'] > a > .jstree-icon");
									if(tp.icon.image) { c.css("backgroundImage","url(" + tp.icon.image + ")"); }
									c.css("backgroundPosition", tp.icon.position || "0 0");
								}
							});
						}, this));
			}
		},
		defaults : {
			// defines maximum number of root nodes (-1 means unlimited, -2 means disable max_children checking)
			max_children		: -1,
			// defines the maximum depth of the tree (-1 means unlimited, -2 means disable max_depth checking)
			max_depth			: -1,
			// defines valid node types for the root nodes
			valid_children		: "all",

			// whether to use $.data
			use_data : false, 
			// where is the type stores (the rel attribute of the LI element)
			type_attr : "rel",
			// a list of types
			types : {
				// the default type
				"default" : {
					"max_children"	: -1,
					"max_depth"		: -1,
					"valid_children": "all"

					// Bound functions - you can bind any other function here (using boolean or function)
					//"select_node"	: true
				}
			}
		},
		_fn : {
			_types_notify : function (n, data) {
				if(data.type && this._get_settings().types.use_data) {
					this.set_type(data.type, n);
				}
			},
			_get_type : function (obj) {
				obj = this._get_node(obj);
				return (!obj || !obj.length) ? false : obj.attr(this._get_settings().types.type_attr) || "default";
			},
			set_type : function (str, obj) {
				obj = this._get_node(obj);
				var ret = (!obj.length || !str) ? false : obj.attr(this._get_settings().types.type_attr, str);
				if(ret) { this.__callback({ obj : obj, type : str}); }
				return ret;
			},
			_check : function (rule, obj, opts) {
				obj = this._get_node(obj);
				var v = false, t = this._get_type(obj), d = 0, _this = this, s = this._get_settings().types, data = false;
				if(obj === -1) { 
					if(!!s[rule]) { v = s[rule]; }
					else { return; }
				}
				else {
					if(t === false) { return; }
					data = s.use_data ? obj.data("jstree") : false;
					if(data && data.types && typeof data.types[rule] !== "undefined") { v = data.types[rule]; }
					else if(!!s.types[t] && typeof s.types[t][rule] !== "undefined") { v = s.types[t][rule]; }
					else if(!!s.types["default"] && typeof s.types["default"][rule] !== "undefined") { v = s.types["default"][rule]; }
				}
				if($.isFunction(v)) { v = v.call(this, obj); }
				if(rule === "max_depth" && obj !== -1 && opts !== false && s.max_depth !== -2 && v !== 0) {
					// also include the node itself - otherwise if root node it is not checked
					obj.children("a:eq(0)").parentsUntil(".jstree","li").each(function (i) {
						// check if current depth already exceeds global tree depth
						if(s.max_depth !== -1 && s.max_depth - (i + 1) <= 0) { v = 0; return false; }
						d = (i === 0) ? v : _this._check(rule, this, false);
						// check if current node max depth is already matched or exceeded
						if(d !== -1 && d - (i + 1) <= 0) { v = 0; return false; }
						// otherwise - set the max depth to the current value minus current depth
						if(d >= 0 && (d - (i + 1) < v || v < 0) ) { v = d - (i + 1); }
						// if the global tree depth exists and it minus the nodes calculated so far is less than `v` or `v` is unlimited
						if(s.max_depth >= 0 && (s.max_depth - (i + 1) < v || v < 0) ) { v = s.max_depth - (i + 1); }
					});
				}
				return v;
			},
			check_move : function () {
				if(!this.__call_old()) { return false; }
				var m  = this._get_move(),
					s  = m.rt._get_settings().types,
					mc = m.rt._check("max_children", m.cr),
					md = m.rt._check("max_depth", m.cr),
					vc = m.rt._check("valid_children", m.cr),
					ch = 0, d = 1, t;

				if(vc === "none") { return false; } 
				if($.isArray(vc) && m.ot && m.ot._get_type) {
					m.o.each(function () {
						if($.inArray(m.ot._get_type(this), vc) === -1) { d = false; return false; }
					});
					if(d === false) { return false; }
				}
				if(s.max_children !== -2 && mc !== -1) {
					ch = m.cr === -1 ? this.get_container().find("> ul > li").not(m.o).length : m.cr.find("> ul > li").not(m.o).length;
					if(ch + m.o.length > mc) { return false; }
				}
				if(s.max_depth !== -2 && md !== -1) {
					d = 0;
					if(md === 0) { return false; }
					if(typeof m.o.d === "undefined") {
						// TODO: deal with progressive rendering and async when checking max_depth (how to know the depth of the moved node)
						t = m.o;
						while(t.length > 0) {
							t = t.find("> ul > li");
							d ++;
						}
						m.o.d = d;
					}
					if(md - m.o.d < 0) { return false; }
				}
				return true;
			},
			create_node : function (obj, position, js, callback, is_loaded, skip_check) {
				if(!skip_check && (is_loaded || this._is_loaded(obj))) {
					var p  = (typeof position == "string" && position.match(/^before|after$/i) && obj !== -1) ? this._get_parent(obj) : this._get_node(obj),
						s  = this._get_settings().types,
						mc = this._check("max_children", p),
						md = this._check("max_depth", p),
						vc = this._check("valid_children", p),
						ch;
					if(typeof js === "string") { js = { data : js }; }
					if(!js) { js = {}; }
					if(vc === "none") { return false; } 
					if($.isArray(vc)) {
						if(!js.attr || !js.attr[s.type_attr]) { 
							if(!js.attr) { js.attr = {}; }
							js.attr[s.type_attr] = vc[0]; 
						}
						else {
							if($.inArray(js.attr[s.type_attr], vc) === -1) { return false; }
						}
					}
					if(s.max_children !== -2 && mc !== -1) {
						ch = p === -1 ? this.get_container().find("> ul > li").length : p.find("> ul > li").length;
						if(ch + 1 > mc) { return false; }
					}
					if(s.max_depth !== -2 && md !== -1 && (md - 1) < 0) { return false; }
				}
				return this.__call_old(true, obj, position, js, callback, is_loaded, skip_check);
			}
		}
	});
})(jQuery);
//*/

/* 
 * jsTree HTML plugin
 * The HTML data store. Datastores are build by replacing the `load_node` and `_is_loaded` functions.
 */
(function ($) {
	$.jstree.plugin("html_data", {
		__init : function () { 
			// this used to use html() and clean the whitespace, but this way any attached data was lost
			this.data.html_data.original_container_html = this.get_container().find(" > ul > li").clone(true);
			// remove white space from LI node - otherwise nodes appear a bit to the right
			this.data.html_data.original_container_html.find("li").addBack().contents().filter(function() { return this.nodeType == 3; }).remove();
		},
		defaults : { 
			data : false,
			ajax : false,
			correct_state : true
		},
		_fn : {
			load_node : function (obj, s_call, e_call) { var _this = this; this.load_node_html(obj, function () { _this.__callback({ "obj" : _this._get_node(obj) }); s_call.call(this); }, e_call); },
			_is_loaded : function (obj) { 
				obj = this._get_node(obj); 
				return obj == -1 || !obj || (!this._get_settings().html_data.ajax && !$.isFunction(this._get_settings().html_data.data)) || obj.is(".jstree-open, .jstree-leaf") || obj.children("ul").children("li").size() > 0;
			},
			load_node_html : function (obj, s_call, e_call) {
				var d,
					s = this.get_settings().html_data,
					error_func = function () {},
					success_func = function () {};
				obj = this._get_node(obj);
				if(obj && obj !== -1) {
					if(obj.data("jstree_is_loading")) { return; }
					else { obj.data("jstree_is_loading",true); }
				}
				switch(!0) {
					case ($.isFunction(s.data)):
						s.data.call(this, obj, $.proxy(function (d) {
							if(d && d !== "" && d.toString && d.toString().replace(/^[\s\n]+$/,"") !== "") {
								d = $(d);
								if(!d.is("ul")) { d = $("<ul />").append(d); }
								if(obj == -1 || !obj) { this.get_container().children("ul").empty().append(d.children()).find("li, a").filter(function () { return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS"; }).prepend("<ins class='jstree-icon'>&#160;</ins>").end().filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon"); }
								else { obj.children("a.jstree-loading").removeClass("jstree-loading"); obj.append(d).children("ul").find("li, a").filter(function () { return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS"; }).prepend("<ins class='jstree-icon'>&#160;</ins>").end().filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon"); obj.removeData("jstree_is_loading"); }
								this.clean_node(obj);
								if(s_call) { s_call.call(this); }
							}
							else {
								if(obj && obj !== -1) {
									obj.children("a.jstree-loading").removeClass("jstree-loading");
									obj.removeData("jstree_is_loading");
									if(s.correct_state) { 
										this.correct_state(obj);
										if(s_call) { s_call.call(this); } 
									}
								}
								else {
									if(s.correct_state) { 
										this.get_container().children("ul").empty();
										if(s_call) { s_call.call(this); } 
									}
								}
							}
						}, this));
						break;
					case (!s.data && !s.ajax):
						if(!obj || obj == -1) {
							this.get_container()
								.children("ul").empty()
								.append(this.data.html_data.original_container_html)
								.find("li, a").filter(function () { return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS"; }).prepend("<ins class='jstree-icon'>&#160;</ins>").end()
								.filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon");
							this.clean_node();
						}
						if(s_call) { s_call.call(this); }
						break;
					case (!!s.data && !s.ajax) || (!!s.data && !!s.ajax && (!obj || obj === -1)):
						if(!obj || obj == -1) {
							d = $(s.data);
							if(!d.is("ul")) { d = $("<ul />").append(d); }
							this.get_container()
								.children("ul").empty().append(d.children())
								.find("li, a").filter(function () { return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS"; }).prepend("<ins class='jstree-icon'>&#160;</ins>").end()
								.filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon");
							this.clean_node();
						}
						if(s_call) { s_call.call(this); }
						break;
					case (!s.data && !!s.ajax) || (!!s.data && !!s.ajax && obj && obj !== -1):
						obj = this._get_node(obj);
						error_func = function (x, t, e) {
							var ef = this.get_settings().html_data.ajax.error; 
							if(ef) { ef.call(this, x, t, e); }
							if(obj != -1 && obj.length) {
								obj.children("a.jstree-loading").removeClass("jstree-loading");
								obj.removeData("jstree_is_loading");
								if(t === "success" && s.correct_state) { this.correct_state(obj); }
							}
							else {
								if(t === "success" && s.correct_state) { this.get_container().children("ul").empty(); }
							}
							if(e_call) { e_call.call(this); }
						};
						success_func = function (d, t, x) {
							var sf = this.get_settings().html_data.ajax.success; 
							if(sf) { d = sf.call(this,d,t,x) || d; }
							if(d === "" || (d && d.toString && d.toString().replace(/^[\s\n]+$/,"") === "")) {
								return error_func.call(this, x, t, "");
							}
							if(d) {
								d = $(d);
								if(!d.is("ul")) { d = $("<ul />").append(d); }
								if(obj == -1 || !obj) { this.get_container().children("ul").empty().append(d.children()).find("li, a").filter(function () { return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS"; }).prepend("<ins class='jstree-icon'>&#160;</ins>").end().filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon"); }
								else { obj.children("a.jstree-loading").removeClass("jstree-loading"); obj.append(d).children("ul").find("li, a").filter(function () { return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS"; }).prepend("<ins class='jstree-icon'>&#160;</ins>").end().filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon"); obj.removeData("jstree_is_loading"); }
								this.clean_node(obj);
								if(s_call) { s_call.call(this); }
							}
							else {
								if(obj && obj !== -1) {
									obj.children("a.jstree-loading").removeClass("jstree-loading");
									obj.removeData("jstree_is_loading");
									if(s.correct_state) { 
										this.correct_state(obj);
										if(s_call) { s_call.call(this); } 
									}
								}
								else {
									if(s.correct_state) { 
										this.get_container().children("ul").empty();
										if(s_call) { s_call.call(this); } 
									}
								}
							}
						};
						s.ajax.context = this;
						s.ajax.error = error_func;
						s.ajax.success = success_func;
						if(!s.ajax.dataType) { s.ajax.dataType = "html"; }
						if($.isFunction(s.ajax.url)) { s.ajax.url = s.ajax.url.call(this, obj); }
						if($.isFunction(s.ajax.data)) { s.ajax.data = s.ajax.data.call(this, obj); }
						$.ajax(s.ajax);
						break;
				}
			}
		}
	});
	// include the HTML data plugin by default
	$.jstree.defaults.plugins.push("html_data");
})(jQuery);
//*/

/* 
 * jsTree themeroller plugin
 * Adds support for jQuery UI themes. Include this at the end of your plugins list, also make sure "themes" is not included.
 */
(function ($) {
	$.jstree.plugin("themeroller", {
		__init : function () {
			var s = this._get_settings().themeroller;
			this.get_container()
				.addClass("ui-widget-content")
				.addClass("jstree-themeroller")
				.delegate("a","mouseenter.jstree", function (e) {
					if(!$(e.currentTarget).hasClass("jstree-loading")) {
						$(this).addClass(s.item_h);
					}
				})
				.delegate("a","mouseleave.jstree", function () {
					$(this).removeClass(s.item_h);
				})
				.bind("init.jstree", $.proxy(function (e, data) { 
						data.inst.get_container().find("> ul > li > .jstree-loading > ins").addClass("ui-icon-refresh");
						this._themeroller(data.inst.get_container().find("> ul > li"));
					}, this))
				.bind("open_node.jstree create_node.jstree", $.proxy(function (e, data) { 
						this._themeroller(data.rslt.obj);
					}, this))
				.bind("loaded.jstree refresh.jstree", $.proxy(function (e) {
						this._themeroller();
					}, this))
				.bind("close_node.jstree", $.proxy(function (e, data) {
						this._themeroller(data.rslt.obj);
					}, this))
				.bind("delete_node.jstree", $.proxy(function (e, data) {
						this._themeroller(data.rslt.parent);
					}, this))
				.bind("correct_state.jstree", $.proxy(function (e, data) {
						data.rslt.obj
							.children("ins.jstree-icon").removeClass(s.opened + " " + s.closed + " ui-icon").end()
							.find("> a > ins.ui-icon")
								.filter(function() { 
									return this.className.toString()
										.replace(s.item_clsd,"").replace(s.item_open,"").replace(s.item_leaf,"")
										.indexOf("ui-icon-") === -1; 
								}).removeClass(s.item_open + " " + s.item_clsd).addClass(s.item_leaf || "jstree-no-icon");
					}, this))
				.bind("select_node.jstree", $.proxy(function (e, data) {
						data.rslt.obj.children("a").addClass(s.item_a);
					}, this))
				.bind("deselect_node.jstree deselect_all.jstree", $.proxy(function (e, data) {
						this.get_container()
							.find("a." + s.item_a).removeClass(s.item_a).end()
							.find("a.jstree-clicked").addClass(s.item_a);
					}, this))
				.bind("dehover_node.jstree", $.proxy(function (e, data) {
						data.rslt.obj.children("a").removeClass(s.item_h);
					}, this))
				.bind("hover_node.jstree", $.proxy(function (e, data) {
						this.get_container()
							.find("a." + s.item_h).not(data.rslt.obj).removeClass(s.item_h);
						data.rslt.obj.children("a").addClass(s.item_h);
					}, this))
				.bind("move_node.jstree", $.proxy(function (e, data) {
						this._themeroller(data.rslt.o);
						this._themeroller(data.rslt.op);
					}, this));
		},
		__destroy : function () {
			var s = this._get_settings().themeroller,
				c = [ "ui-icon" ];
			$.each(s, function (i, v) {
				v = v.split(" ");
				if(v.length) { c = c.concat(v); }
			});
			this.get_container()
				.removeClass("ui-widget-content")
				.find("." + c.join(", .")).removeClass(c.join(" "));
		},
		_fn : {
			_themeroller : function (obj) {
				var s = this._get_settings().themeroller;
				obj = (!obj || obj == -1) ? this.get_container_ul() : this._get_node(obj);
				obj = (!obj || obj == -1) ? this.get_container_ul() : obj.parent();
				obj
					.find("li.jstree-closed")
						.children("ins.jstree-icon").removeClass(s.opened).addClass("ui-icon " + s.closed).end()
						.children("a").addClass(s.item)
							.children("ins.jstree-icon").addClass("ui-icon")
								.filter(function() { 
									return this.className.toString()
										.replace(s.item_clsd,"").replace(s.item_open,"").replace(s.item_leaf,"")
										.indexOf("ui-icon-") === -1; 
								}).removeClass(s.item_leaf + " " + s.item_open).addClass(s.item_clsd || "jstree-no-icon")
								.end()
							.end()
						.end()
					.end()
					.find("li.jstree-open")
						.children("ins.jstree-icon").removeClass(s.closed).addClass("ui-icon " + s.opened).end()
						.children("a").addClass(s.item)
							.children("ins.jstree-icon").addClass("ui-icon")
								.filter(function() { 
									return this.className.toString()
										.replace(s.item_clsd,"").replace(s.item_open,"").replace(s.item_leaf,"")
										.indexOf("ui-icon-") === -1; 
								}).removeClass(s.item_leaf + " " + s.item_clsd).addClass(s.item_open || "jstree-no-icon")
								.end()
							.end()
						.end()
					.end()
					.find("li.jstree-leaf")
						.children("ins.jstree-icon").removeClass(s.closed + " ui-icon " + s.opened).end()
						.children("a").addClass(s.item)
							.children("ins.jstree-icon").addClass("ui-icon")
								.filter(function() { 
									return this.className.toString()
										.replace(s.item_clsd,"").replace(s.item_open,"").replace(s.item_leaf,"")
										.indexOf("ui-icon-") === -1; 
								}).removeClass(s.item_clsd + " " + s.item_open).addClass(s.item_leaf || "jstree-no-icon");
			}
		},
		defaults : {
			"opened"	: "ui-icon-triangle-1-se",
			"closed"	: "ui-icon-triangle-1-e",
			"item"		: "ui-state-default",
			"item_h"	: "ui-state-hover",
			"item_a"	: "ui-state-active",
			"item_open"	: "ui-icon-folder-open",
			"item_clsd"	: "ui-icon-folder-collapsed",
			"item_leaf"	: "ui-icon-document"
		}
	});
	$(function() {
		var css_string = '' + 
			'.jstree-themeroller .ui-icon { overflow:visible; } ' + 
			'.jstree-themeroller a { padding:0 2px; } ' + 
			'.jstree-themeroller .jstree-no-icon { display:none; }';
		$.vakata.css.add_sheet({ str : css_string, title : "jstree" });
	});
})(jQuery);
//*/

/* 
 * jsTree unique plugin
 * Forces different names amongst siblings (still a bit experimental)
 * NOTE: does not check language versions (it will not be possible to have nodes with the same title, even in different languages)
 */
(function ($) {
	$.jstree.plugin("unique", {
		__init : function () {
			this.get_container()
				.bind("before.jstree", $.proxy(function (e, data) { 
						var nms = [], res = true, p, t;
						if(data.func == "move_node") {
							// obj, ref, position, is_copy, is_prepared, skip_check
							if(data.args[4] === true) {
								if(data.args[0].o && data.args[0].o.length) {
									data.args[0].o.children("a").each(function () { nms.push($(this).text().replace(/^\s+/g,"")); });
									res = this._check_unique(nms, data.args[0].np.find("> ul > li").not(data.args[0].o), "move_node");
								}
							}
						}
						if(data.func == "create_node") {
							// obj, position, js, callback, is_loaded
							if(data.args[4] || this._is_loaded(data.args[0])) {
								p = this._get_node(data.args[0]);
								if(data.args[1] && (data.args[1] === "before" || data.args[1] === "after")) {
									p = this._get_parent(data.args[0]);
									if(!p || p === -1) { p = this.get_container(); }
								}
								if(typeof data.args[2] === "string") { nms.push(data.args[2]); }
								else if(!data.args[2] || !data.args[2].data) { nms.push(this._get_string("new_node")); }
								else { nms.push(data.args[2].data); }
								res = this._check_unique(nms, p.find("> ul > li"), "create_node");
							}
						}
						if(data.func == "rename_node") {
							// obj, val
							nms.push(data.args[1]);
							t = this._get_node(data.args[0]);
							p = this._get_parent(t);
							if(!p || p === -1) { p = this.get_container(); }
							res = this._check_unique(nms, p.find("> ul > li").not(t), "rename_node");
						}
						if(!res) {
							e.stopPropagation();
							return false;
						}
					}, this));
		},
		defaults : { 
			error_callback : $.noop
		},
		_fn : { 
			_check_unique : function (nms, p, func) {
				var cnms = [], ok = true;
				p.children("a").each(function () { cnms.push($(this).text().replace(/^\s+/g,"")); });
				if(!cnms.length || !nms.length) { return true; }
				$.each(nms, function (i, v) {
					if($.inArray(v, cnms) !== -1) {
						ok = false;
						return false;
					}
				});
				if(!ok) {
					this._get_settings().unique.error_callback.call(null, nms, p, func);
				}
				return ok;
			},
			check_move : function () {
				if(!this.__call_old()) { return false; }
				var p = this._get_move(), nms = [];
				if(p.o && p.o.length) {
					p.o.children("a").each(function () { nms.push($(this).text().replace(/^\s+/g,"")); });
					return this._check_unique(nms, p.np.find("> ul > li").not(p.o), "check_move");
				}
				return true;
			}
		}
	});
})(jQuery);
//*/

/*
 * jsTree wholerow plugin
 * Makes select and hover work on the entire width of the node
 * MAY BE HEAVY IN LARGE DOM
 */
(function ($) {
	$.jstree.plugin("wholerow", {
		__init : function () {
			if(!this.data.ui) { throw "jsTree wholerow: jsTree UI plugin not included."; }
			this.data.wholerow.html = false;
			this.data.wholerow.to = false;
			this.get_container()
				.bind("init.jstree", $.proxy(function (e, data) { 
						this._get_settings().core.animation = 0;
					}, this))
				.bind("open_node.jstree create_node.jstree clean_node.jstree loaded.jstree", $.proxy(function (e, data) { 
						this._prepare_wholerow_span( data && data.rslt && data.rslt.obj ? data.rslt.obj : -1 );
					}, this))
				.bind("search.jstree clear_search.jstree reopen.jstree after_open.jstree after_close.jstree create_node.jstree delete_node.jstree clean_node.jstree", $.proxy(function (e, data) { 
						if(this.data.to) { clearTimeout(this.data.to); }
						this.data.to = setTimeout( (function (t, o) { return function() { t._prepare_wholerow_ul(o); }; })(this,  data && data.rslt && data.rslt.obj ? data.rslt.obj : -1), 0);
					}, this))
				.bind("deselect_all.jstree", $.proxy(function (e, data) { 
						this.get_container().find(" > .jstree-wholerow .jstree-clicked").removeClass("jstree-clicked " + (this.data.themeroller ? this._get_settings().themeroller.item_a : "" ));
					}, this))
				.bind("select_node.jstree deselect_node.jstree ", $.proxy(function (e, data) { 
						data.rslt.obj.each(function () { 
							var ref = data.inst.get_container().find(" > .jstree-wholerow li:visible:eq(" + ( parseInt((($(this).offset().top - data.inst.get_container().offset().top + data.inst.get_container()[0].scrollTop) / data.inst.data.core.li_height),10)) + ")");
							// ref.children("a")[e.type === "select_node" ? "addClass" : "removeClass"]("jstree-clicked");
							ref.children("a").attr("class",data.rslt.obj.children("a").attr("class"));
						});
					}, this))
				.bind("hover_node.jstree dehover_node.jstree", $.proxy(function (e, data) { 
						this.get_container().find(" > .jstree-wholerow .jstree-hovered").removeClass("jstree-hovered " + (this.data.themeroller ? this._get_settings().themeroller.item_h : "" ));
						if(e.type === "hover_node") {
							var ref = this.get_container().find(" > .jstree-wholerow li:visible:eq(" + ( parseInt(((data.rslt.obj.offset().top - this.get_container().offset().top + this.get_container()[0].scrollTop) / this.data.core.li_height),10)) + ")");
							// ref.children("a").addClass("jstree-hovered");
							ref.children("a").attr("class",data.rslt.obj.children(".jstree-hovered").attr("class"));
						}
					}, this))
				.delegate(".jstree-wholerow-span, ins.jstree-icon, li", "click.jstree", function (e) {
						var n = $(e.currentTarget);
						if(e.target.tagName === "A" || (e.target.tagName === "INS" && n.closest("li").is(".jstree-open, .jstree-closed"))) { return; }
						n.closest("li").children("a:visible:eq(0)").click();
						e.stopImmediatePropagation();
					})
				.delegate("li", "mouseover.jstree", $.proxy(function (e) {
						e.stopImmediatePropagation();
						if($(e.currentTarget).children(".jstree-hovered, .jstree-clicked").length) { return false; }
						this.hover_node(e.currentTarget);
						return false;
					}, this))
				.delegate("li", "mouseleave.jstree", $.proxy(function (e) {
						if($(e.currentTarget).children("a").hasClass("jstree-hovered").length) { return; }
						this.dehover_node(e.currentTarget);
					}, this));
			if(is_ie7 || is_ie6) {
				$.vakata.css.add_sheet({ str : ".jstree-" + this.get_index() + " { position:relative; } ", title : "jstree" });
			}
		},
		defaults : {
		},
		__destroy : function () {
			this.get_container().children(".jstree-wholerow").remove();
			this.get_container().find(".jstree-wholerow-span").remove();
		},
		_fn : {
			_prepare_wholerow_span : function (obj) {
				obj = !obj || obj == -1 ? this.get_container().find("> ul > li") : this._get_node(obj);
				if(obj === false) { return; } // added for removing root nodes
				obj.each(function () {
					$(this).find("li").addBack().each(function () {
						var $t = $(this);
						if($t.children(".jstree-wholerow-span").length) { return true; }
						$t.prepend("<span class='jstree-wholerow-span' style='width:" + ($t.parentsUntil(".jstree","li").length * 18) + "px;'>&#160;</span>");
					});
				});
			},
			_prepare_wholerow_ul : function () {
				var o = this.get_container().children("ul").eq(0), h = o.html();
				o.addClass("jstree-wholerow-real");
				if(this.data.wholerow.last_html !== h) {
					this.data.wholerow.last_html = h;
					this.get_container().children(".jstree-wholerow").remove();
					this.get_container().append(
						o.clone().removeClass("jstree-wholerow-real")
							.wrapAll("<div class='jstree-wholerow' />").parent()
							.width(o.parent()[0].scrollWidth)
							.css("top", (o.height() + ( is_ie7 ? 5 : 0)) * -1 )
							.find("li[id]").each(function () { this.removeAttribute("id"); }).end()
					);
				}
			}
		}
	});
	$(function() {
		var css_string = '' + 
			'.jstree .jstree-wholerow-real { position:relative; z-index:1; } ' + 
			'.jstree .jstree-wholerow-real li { cursor:pointer; } ' + 
			'.jstree .jstree-wholerow-real a { border-left-color:transparent !important; border-right-color:transparent !important; } ' + 
			'.jstree .jstree-wholerow { position:relative; z-index:0; height:0; } ' + 
			'.jstree .jstree-wholerow ul, .jstree .jstree-wholerow li { width:100%; } ' + 
			'.jstree .jstree-wholerow, .jstree .jstree-wholerow ul, .jstree .jstree-wholerow li, .jstree .jstree-wholerow a { margin:0 !important; padding:0 !important; } ' + 
			'.jstree .jstree-wholerow, .jstree .jstree-wholerow ul, .jstree .jstree-wholerow li { background:transparent !important; }' + 
			'.jstree .jstree-wholerow ins, .jstree .jstree-wholerow span, .jstree .jstree-wholerow input { display:none !important; }' + 
			'.jstree .jstree-wholerow a, .jstree .jstree-wholerow a:hover { text-indent:-9999px; !important; width:100%; padding:0 !important; border-right-width:0px !important; border-left-width:0px !important; } ' + 
			'.jstree .jstree-wholerow-span { position:absolute; left:0; margin:0px; padding:0; height:18px; border-width:0; padding:0; z-index:0; }';
		if(is_ff2) {
			css_string += '' + 
				'.jstree .jstree-wholerow a { display:block; height:18px; margin:0; padding:0; border:0; } ' + 
				'.jstree .jstree-wholerow-real a { border-color:transparent !important; } ';
		}
		if(is_ie7 || is_ie6) {
			css_string += '' + 
				'.jstree .jstree-wholerow, .jstree .jstree-wholerow li, .jstree .jstree-wholerow ul, .jstree .jstree-wholerow a { margin:0; padding:0; line-height:18px; } ' + 
				'.jstree .jstree-wholerow a { display:block; height:18px; line-height:18px; overflow:hidden; } ';
		}
		$.vakata.css.add_sheet({ str : css_string, title : "jstree" });
	});
})(jQuery);
//*/

/*
* jsTree model plugin
* This plugin gets jstree to use a class model to retrieve data, creating great dynamism
*/
(function ($) {
	var nodeInterface = ["getChildren","getChildrenCount","getAttr","getName","getProps"],
		validateInterface = function(obj, inter) {
			var valid = true;
			obj = obj || {};
			inter = [].concat(inter);
			$.each(inter, function (i, v) {
				if(!$.isFunction(obj[v])) { valid = false; return false; }
			});
			return valid;
		};
	$.jstree.plugin("model", {
		__init : function () {
			if(!this.data.json_data) { throw "jsTree model: jsTree json_data plugin not included."; }
			this._get_settings().json_data.data = function (n, b) {
				var obj = (n == -1) ? this._get_settings().model.object : n.data("jstree_model");
				if(!validateInterface(obj, nodeInterface)) { return b.call(null, false); }
				if(this._get_settings().model.async) {
					obj.getChildren($.proxy(function (data) {
						this.model_done(data, b);
					}, this));
				}
				else {
					this.model_done(obj.getChildren(), b);
				}
			};
		},
		defaults : {
			object : false,
			id_prefix : false,
			async : false
		},
		_fn : {
			model_done : function (data, callback) {
				var ret = [], 
					s = this._get_settings(),
					_this = this;

				if(!$.isArray(data)) { data = [data]; }
				$.each(data, function (i, nd) {
					var r = nd.getProps() || {};
					r.attr = nd.getAttr() || {};
					if(nd.getChildrenCount()) { r.state = "closed"; }
					r.data = nd.getName();
					if(!$.isArray(r.data)) { r.data = [r.data]; }
					if(_this.data.types && $.isFunction(nd.getType)) {
						r.attr[s.types.type_attr] = nd.getType();
					}
					if(r.attr.id && s.model.id_prefix) { r.attr.id = s.model.id_prefix + r.attr.id; }
					if(!r.metadata) { r.metadata = { }; }
					r.metadata.jstree_model = nd;
					ret.push(r);
				});
				callback.call(null, ret);
			}
		}
	});
})(jQuery);
//*/

})();// This plugin comes from:
//
// http://www.keyframesandcode.com/resources/javascript/jQuery/demos/populate-demo.html

jQuery.fn.populate = function(obj, options) {

  // ------------------------------------------------------------------------------------------
  // JSON conversion function

  // convert 
  function parseJSON(obj, path) {
    // prepare
    path = path || '';

    // iteration (objects / arrays)
    if(obj == undefined) {
      // do nothing
    } else if(obj.constructor == Object) {
      for(var prop in obj) {
        var name	= path + (path == '' ? prop : '[' +prop+ ']');
        parseJSON(obj[prop], name);
      }
    }

    else if(obj.constructor == Array) {
      for(var i = 0; i < obj.length; i++) {
        var index	= options.useIndices ? i : '';
        index		= options.phpNaming ? '[' +index+']' : index;
        var name	= path + index;
        parseJSON(obj[i], name);
      }
      // assignment (values)
    } else {
      // if the element name hasn't yet been defined, create it as a single value
      if(arr[path] == undefined) {
        arr[path] = obj;
        // if the element name HAS been defined, but it's a single value, convert to an array and add the new value
      } else if(arr[path].constructor != Array) {
        arr[path] = [arr[path], obj];
        // if the element name HAS been defined, and is already an array, push the single value on the end of the stack
      } else {
        arr[path].push(obj);
      }
    }
  };


  // ------------------------------------------------------------------------------------------
  // population functions

  function debug(str) {
    if(window.console && console.log) {
      console.log(str);
    }
  }

  function getElementName(name) {
    if (!options.phpNaming) {
      name = name.replace(/\[\]$/,'');
    }
    return name;
  }

  function populateElement(parentElement, name, value) {
    var selector	= options.identifier == 'id' ? '#' + name : '[' +options.identifier+ '="' +name+ '"]';
    var element		= jQuery(selector, parentElement);
    value			= value.toString();
    value			= value == 'null' ? '' : value;
    element.html(value);
  }

  function populateFormElement(form, name, value) {
    // check that the named element exists in the form
    var name	= getElementName(name); // handle non-php naming
    var element	= form[name];

    // if the form element doesn't exist, check if there is a tag with that id
    if(element == undefined) {
      // look for the element
      element = jQuery('#' + name, form);
      if(element) {
        element.html(value);
        return true;
      }

      // nope, so exit
      if(options.debug) {
        debug('No such element as ' + name);
      }
      return false;
    }

    // debug options
    if(options.debug) {
      _populate.elements.push(element);
    }

    // now, place any single elements in an array.
    // this is so that the next bit of code (a loop) can treat them the 
    // same as any array-elements passed, ie radiobutton or checkox arrays,
    // and the code will just work
    elements = element.type == undefined && element.length ? element : [element];

    // populate the element correctly
    for(var e = 0; e < elements.length; e++) {
      // grab the element
      var element = elements[e];
      // skip undefined elements or function objects (IE only)
      if(!element || typeof element == 'undefined' || 
          typeof element == 'function') {
        continue;
      }

      // anything else, process
      switch(element.type || element.tagName) {
        case 'radio':
          // use the single value to check the radio button
          element.checked = (element.value != '' && value.toString() == element.value);

        case 'checkbox':
          // depends on the value.
          // if it's an array, perform a sub loop
          // if it's a value, just do the check

          var values = value.constructor == Array ? value : [value];
          for(var j = 0; j < values.length; j++) {
            element.checked |= element.value == values[j];
          }

          //element.checked = (element.value != '' && value.toString().toLowerCase() == element.value.toLowerCase());
          break;

        case 'select-multiple':
          var values = value.constructor == Array ? value : [value];
          for(var i = 0; i < element.options.length; i++) {
            for(var j = 0; j < values.length; j++) {
              element.options[i].selected |= element.options[i].value == values[j];
            }
          }
          break;

        case 'select':
        case 'select-one':
          // if the select box has been replaced by this 
          // selectbox plugin: https://gist.github.com/1139558
          if ($('#' + element.id + '_container').length > 0) {
            // Click the correct li to set the select box.
            $('li#' + element.id + '_input_' + value).click()
          // Otherwise just let it work the usual way.
          } else {
            element.value = value.toString() || value;
          }
          break;

        case 'text':
        case 'button':
        case 'textarea':
        case 'submit':
        default:
          value			= value == null ? '' : value;
          element.value	= value;

      }

    }

  }



  // ------------------------------------------------------------------------------------------
  // options & setup

  // exit if no data object supplied
  if (obj === undefined) {
    return this;
  };

  // options
  var options = jQuery.extend({
    phpNaming:			true,
      phpIndices:			false,
      resetForm:			true,
      identifier:			'id',
      debug:				false
  }, options);

  if(options.phpIndices) {
    options.phpNaming = true;
  }

  // ------------------------------------------------------------------------------------------
  // convert hierarchical JSON to flat array

  var arr	= [];
  parseJSON(obj);

  if(options.debug) {
    _populate = {
      arr:		arr,
      obj:		obj,
      elements:	[]
    }
  }

  // ------------------------------------------------------------------------------------------
  // main process function

  this.each(function(){
    // variables
    var tagName	= this.tagName.toLowerCase();
    var method	= tagName == 'form' ? populateFormElement : populateElement;

    // reset form?
    if(tagName == 'form' && options.resetForm) {
      this.reset();
    }

    // update elements
    for(var i in arr) {
      method(this, i, arr[i]);
    }
  });

  return this;
};
/*
 One Click Upload - jQuery Plugin
 --------------------------------

 Copyright (c) 2008 Michael Mitchell - http://www.michaelmitchell.co.nz
 Copyright (c) 2011 Andrey Fedoseev <andrey.fedoseev@gmail.com> - http://andreyfedoseev.name
 Copyright (c) 2012 vol7ron <supervolting@gmail.com>

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 */

(function($) {
    $.fn.upload = function(options) {
        /** Merge the users options with our defaults */
        options = $.extend({
            name       : 'file',
            enctype    : 'multipart/form-data',
            action     : '',
            autoSubmit : true,
            onSubmit   : function() {},
            onComplete : function() {},
            onSelect   : function() {},
            params     : {}
        },
        options);

        return new $.ocupload(this, options);
    };

    $.ocupload = function(element, options) {
        /** Fix scope problems */
        var self = this;

        /** A unique id so we can find our elements later */
        var id = new Date().getTime().toString();

        /** Upload iframe */
        var iframe = $("<iframe></iframe>", {
            id       : "iframe" + id,
            name     : "iframe" + id
        }).css({
            display  : "none"
        });

        /** Form */
        var form = $("<form></form>", {
            method   : "post",
            enctype  : options.enctype,
            action   : options.action,
            target   : "iframe" + id
        }).css({
            margin   : 0,
            padding  : 0
        });

        /** Get cursor type from the object ocupload was assigned to */
        /** TODO: Add parameter to init? cursor: auto, cursor: pointer etc */
        var element_cursor = element.css('cursor');

        /** File Input */
        var input = $("<input>", {
            name     : options.name + '[]',
            multiple : 'multiple',
            type     : 'file'
        }).css({
            position : 'absolute',
            display  : 'none',
            cursor   : element_cursor,
            opacity  : 0
        });

        /** Put everything together */

        element.wrap("<div></div>");
        form.append(input);
        element.after(form);
        element.after(iframe);
	element.click(function(){input.click()});

        /** Find the container and make it nice and snug */
        var container = element.parent().css({
            position : 'relative',
	    display  : element.css('display'),
  //          height   : element.outerHeight() + 'px',
  //          width    : element.outerWidth() + 'px',
            overflow : 'hidden',
            cursor   : element_cursor,
            margin   : 0,
            padding  : 0
        });

        /** Get input dimensions so we can put it in the right place */
 //       var input_height = input.outerHeight(1);
 //       var input_width  = input.outerWidth(1);

        /** Watch for file selection */
        input.change(function() {
            /** Do something when a file is selected. */
            self.onSelect(self.filename());

            /** Submit the form automaticly after selecting the file */
            if (self.autoSubmit) {
                self.submit();
            }
        });

        /** Methods */
        $.extend(this, {
            autoSubmit : options.autoSubmit,  // vol7ron: changed 'true' to 'options.autoSubmit'
            onSubmit   : options.onSubmit,
            onComplete : options.onComplete,
            onSelect   : options.onSelect,

            /** get filename */
            filename: function() {
                return input.val();
            },

            /** get/set params */
            params: function(params) {
                params = params ? params: false;
                if (params) {
                    options.params = $.extend(options.params, params);
                }
                else {
                    return options.params;
                }
            },

            /** get/set name */
            name: function(name) {
                name = name ? name: false;
                if (name) {
                    input.attr('name', value);
                }
                else {
                    return input.attr('name');
                }
            },

            /** get/set action */
            action: function(action) {
                action = action ? action: false;
                if (action) {
                    form.attr('action', action);
                }
                else {
                    return form.attr('action');
                }
            },

            /** get/set enctype */
            enctype: function(enctype) {
                enctype = enctype ? enctype: false;
                if (enctype) {
                    form.attr('enctype', enctype);
                }
                else {
                    return form.attr('enctype');
                }
            },

            /** set options */
            set: function(obj, value) {
                value = value ? value: false;
                function option(action, value) {
                    switch (action) {
                    case 'name':       self.name(value);
                                       break;
                    case 'action':     self.action(value);
                                       break;
                    case 'enctype':    self.enctype(value);
                                       break;
                    case 'params':     self.params(value);
                                       break;
                    case 'autoSubmit': self.autoSubmit = value;
                                       break;
                    case 'onSubmit':   self.onSubmit = value;
                                       break;
                    case 'onComplete': self.onComplete = value;
                                       break;
                    case 'onSelect':   self.onSelect = value;
                                       break;
                    default:
                                       throw new Error("[jQuery.ocupload.set] '" + action + "' is an invalid option.");
                    }
                }

                if (value) {
                    option(obj, value);
                }
                else {
                    $.each(obj, function(key, value) {
                        option(key, value);
                    });
                }
            },

            /** Submit the form */
            submit: function() {
                /** Do something before we upload */

                // if onSubmit returns true, don't send to server (for debugging)
		var exit = this.onSubmit();
                if (exit)
                   return;

		$(".ocupload-" + id,form).remove(); // clear the previous used attributes in case loading multiple files

                /** add additional paramters before sending */
                $.each(options.params, function(key, value) {
                    form.append($("<input>",{
                       type    : "hidden",
		       name    : key,
		       value   : value,
		       'class' : "ocupload-" + id  // including the upload id
                    }));

                });

                /** Submit the actual form */
                form.submit();

                /** Do something after we are finished uploading */
                iframe.unbind().load(function() {
                    /** Get a response from the server in plain text */
                    var myFrame = document.getElementById(iframe.attr('name'));
                    var response = $(myFrame.contentWindow.document.body).text();

                    /** Do something on complete */
                    self.onComplete(response);
                });
            }
        });
    };
})(jQuery);
function checkEmpty(o,n) {
	if (o.val() === '' || o.val() === null) {
		var text = n.replace(":","");
		$.jGrowl(text + " Required");
		o.addClass("ui-state-error");
		return false;
	} else {
		o.removeClass("ui-state-error");
		return true;
	}
}
function checkRegexp( o, regexp, n ) {
	if ( !( regexp.test( o.val() ) ) ) {
		var text = n.replace(":","");
		$.jGrowl("Incorrect format: " + text);
		o.addClass("ui-state-error");
		return false;
	} else {
		o.removeClass("ui-state-error");
		return true;
	}
}
function split( val ) {
	return val.split( /\n\s*/ );
}
function extractLast( term ) {
	return split( term ).pop();
}
function search_array(a, query_value){
	var query_value1 = query_value.replace('?','\\?');
	var found = $.map(a, function (value) {
		var re = RegExp(query_value1, "g");
		if(value.match(re)) {
			return value;
		} else {
			return null;
		}
	});
	return found;
}
function reload_grid(id) {
	if ($("#"+id)[0].grid) {
		jQuery("#"+id).trigger("reloadGrid");
	}
}
function openencounter() {
	$('#dialog_load').dialog('option', 'title', "Loading encounter...").dialog('open');
	$("#encounter_body").html('');
	$("#encounter_body").load('ajaxencounter/loadtemplate');
	$("#encounter_link_span").html('<a href="#" id="encounter_panel">[Active Encounter #: ' + noshdata.eid + ']</a>');
	$("#encounter_panel").click(function() {
		noshdata.encounter_active = 'y';
		openencounter();
		$("#nosh_chart_div").hide();
		$("#nosh_encounter_div").show();
	});
	$.ajax({
		type: "POST",
		url: "ajaxsearch/get-tags/eid/" + noshdata.eid,
		dataType: "json",
		success: function(data){
			$("#encounter_tags").tagit("fill",data);
			$('#dialog_load').dialog('close');
		}
	});
}
function closeencounter() {
	noshdata.encounter_active = 'n';
	$("#nosh_encounter_div").hide();
	$("#nosh_chart_div").show();
	$("#encounter_link_span").html('');
}
function loadbuttons() {
	$(".nosh_button").button();
	$(".nosh_button_save").button({icons: {primary: "ui-icon-disk"}});
	$(".nosh_button_cancel").button({icons: {primary: "ui-icon-close"}});
	$(".nosh_button_delete").button({icons: {primary: "ui-icon-trash"}});
	$(".nosh_button_calculator").button({icons: {primary: "ui-icon-calculator"}});
	$(".nosh_button_check").button({icons: {primary: "ui-icon-check"}});
	$(".nosh_button_preview").button({icons: {primary: "ui-icon-comment"}});
	$(".nosh_button_edit").button({icons: {primary: "ui-icon-pencil"}});
	$(".nosh_button_add").button({icons: {primary: "ui-icon-plus"}});
	$(".nosh_button_print").button({icons: {primary: "ui-icon-print"}});
	$(".nosh_button_alert").button({icons: {primary: "ui-icon-alert"}});
	$(".nosh_button_copy").button({icons: {primary: "ui-icon-copy"}});
	$(".nosh_button_extlink").button({icons: {primary: "ui-icon-extlink"}});
	$(".nosh_button_reactivate").button({icons: {primary: "ui-icon-arrowreturnthick-1-w"}});
	$(".nosh_button_reply").button({icons: {primary: "ui-icon-arrowreturn-1-w"}});
	$(".nosh_button_forward").button({icons: {primary: "ui-icon-arrow-1-e"}});
	$(".nosh_button_open").button({icons: {primary: "ui-icon-folder-open"}});
	$(".nosh_button_calendar").button({icons: {primary: "ui-icon-calendar"}});
	$(".nosh_button_cart").button({icons: {primary: "ui-icon-cart"}});
	$(".nosh_button_image").button({icons: {primary: "ui-icon-image"}});
	$(".nosh_button_next").button({text: false, icons: {primary: "ui-icon-seek-next"}});
	$(".nosh_button_prev").button({text: false, icons: {primary: "ui-icon-seek-prev"}});
}
function swipe(){
	if(supportsTouch === true){
		$('.textdump').swipe({
			excludedElements:'button, input, select, a, .noSwipe',
			tap: function(){
				$(this).swipe('disable');
				$(this).focus();
				$(this).on('focusout', function() {
					$(this).swipe('enable');
				});
			},
			swipeRight: function(){
				var elem = $(this);
				textdump(elem);
			}
		});
		$('.textdump_text').text('Swipe right');
	} else {
		$('.textdump_text').text('Click shift-right arrow key');
	}
}
function menu_update(type) {
	$.ajax({
		type: "POST",
		url: "ajaxchart/" + type + "-list",
		success: function(data){
			$("#menu_accordion_" + type + "-list_content").html(data);
			$("#menu_accordion_" + type + "-list_load").hide();
		}
	});
}
function remove_text(parent_id_entry, a, label_text, ret) {
	var old = $("#" + parent_id_entry).val();
	var old_arr = old.split('  ');
	if (label_text != '') {
		var new_arr = search_array(old_arr, label_text);
	} else {
		var new_arr = [];
	}
	if (new_arr.length > 0) {
		var arr_index = old_arr.indexOf(new_arr[0]);
		a = a.replace(label_text, '');
		old_arr[arr_index] = old_arr[arr_index].replace(label_text, '');
		var old_arr1 = old_arr[arr_index].split('; ')
		var new_arr1 = search_array(old_arr1, a);
		if (new_arr1.length > 0) {
			var arr_index1 = old_arr1.indexOf(new_arr1[0]);
			old_arr1.splice(arr_index1,1);
			if (old_arr1.length > 0) {
				old_arr[arr_index] = label_text + old_arr1.join('; ');
			} else {
				old_arr.splice(arr_index,1);
			}
		}
	} else {
		var new_arr2 = search_array(old_arr, a);
		if (new_arr2.length > 0) {
			var arr_index2 = old_arr.indexOf(new_arr2[0]);
			old_arr.splice(arr_index2,1);
		}
	}
	var b = old_arr.join("  ");
	if (ret == true) {
		return b;
	} else {
		$("#" + parent_id_entry).val(b);
	}
}
function repeat_text(parent_id_entry, a, label_text) {
	var ret = false;
	var old = $("#" + parent_id_entry).val();
	var old_arr = old.split('  ');
	if (label_text != '') {
		var new_arr = search_array(old_arr, label_text);
	} else {
		var new_arr = [];
	}
	if (new_arr.length > 0) {
		var arr_index = old_arr.indexOf(new_arr[0]);
		a = a.replace(label_text, '');
		old_arr[arr_index] = old_arr[arr_index].replace(label_text, '');
		var old_arr1 = old_arr[arr_index].split('; ')
		var new_arr1 = search_array(old_arr1, a);
		if (new_arr1.length > 0) {
			ret = true;
		}
	} else {
		var new_arr2 = search_array(old_arr, a);
		if (new_arr2.length > 0) {
			ret = true;
		}
	}
	return ret;
}
function refresh_documents() {
	$.ajax({
		type: "POST",
		url: "ajaxsearch/documents-count",
		dataType: "json",
		success: function(data){
			jQuery("#labs").jqGrid('setCaption', 'Labs: ' + data.labs_count);
			jQuery("#radiology").jqGrid('setCaption', 'Imaging: ' + data.radiology_count);
			jQuery("#cardiopulm").jqGrid('setCaption', 'Cardiopulmonary: ' + data.cardiopulm_count);
			jQuery("#endoscopy").jqGrid('setCaption', 'Endoscopy: ' + data.endoscopy_count);
			jQuery("#referrals").jqGrid('setCaption', 'Referrals: ' + data.referrals_count);
			jQuery("#past_records").jqGrid('setCaption', 'Past Records: ' + data.past_records_count);
			jQuery("#outside_forms").jqGrid('setCaption', 'Outside Forms: ' + data.outside_forms_count);
			jQuery("#letters").jqGrid('setCaption', 'Letters: ' + data.letters_count);
		}
	});
}
function checkorders() {
	$.ajax({
		type: "POST",
		url: "ajaxencounter/check-orders",
		dataType: "json",
		success: function(data){
			$('#button_orders_labs_status').html(data.labs_status);
			$('#button_orders_rad_status').html(data.rad_status);
			$('#button_orders_cp_status').html(data.cp_status);
			$('#button_orders_ref_status').html(data.ref_status);
			$('#button_orders_rx_status').html(data.rx_status);
			$('#button_orders_imm_status').html(data.imm_status);
			$('#button_orders_sup_status').html(data.sup_status);
		}
	});
}
function check_oh_status() {
	$.ajax({
		type: "POST",
		url: "ajaxencounter/check-oh",
		dataType: "json",
		success: function(data){
			$('#button_oh_sh_status').html(data.sh_status);
			$('#button_oh_etoh_status').html(data.etoh_status);
			$('#button_oh_tobacco_status').html(data.tobacco_status);
			$('#button_oh_drugs_status').html(data.drugs_status);
			$('#button_oh_employment_status').html(data.employment_status);
			$('#button_oh_meds_status').html(data.meds_status);
			$('#button_oh_supplements_status').html(data.supplements_status);
			$('#button_oh_allergies_status').html(data.allergies_status);
			$('#button_oh_psychosocial_status').html(data.psychosocial_status);
			$('#button_oh_developmental_status').html(data.developmental_status);
			$('#button_oh_medtrials_status').html(data.medtrials_status);
		}
	});
}
function check_ros_status() {
	$.ajax({
		type: "POST",
		url: "ajaxencounter/check-ros",
		dataType: "json",
		success: function(data){
			$('#button_ros_gen_status').html(data.gen);
			$('#button_ros_eye_status').html(data.eye);
			$('#button_ros_ent_status').html(data.ent);
			$('#button_ros_resp_status').html(data.resp);
			$('#button_ros_cv_status').html(data.cv);
			$('#button_ros_gi_status').html(data.gi);
			$('#button_ros_gu_status').html(data.gu);
			$('#button_ros_mus_status').html(data.mus);
			$('#button_ros_neuro_status').html(data.neuro);
			$('#button_ros_psych_status').html(data.psych);
			$('#button_ros_heme_status').html(data.heme);
			$('#button_ros_endocrine_status').html(data.endocrine);
			$('#button_ros_skin_status').html(data.skin);
			$('#button_ros_wcc_status').html(data.wcc);
			$('#button_ros_psych1_status').html(data.psych1);
			$('#button_ros_psych2_status').html(data.psych2);
			$('#button_ros_psych3_status').html(data.psych3);
			$('#button_ros_psych4_status').html(data.psych4);
			$('#button_ros_psych5_status').html(data.psych5);
			$('#button_ros_psych6_status').html(data.psych6);
			$('#button_ros_psych7_status').html(data.psych7);
			$('#button_ros_psych8_status').html(data.psych8);
			$('#button_ros_psych9_status').html(data.psych9);
			$('#button_ros_psych10_status').html(data.psych10);
			$('#button_ros_psych11_status').html(data.psych11);
		}
	});
}
function check_pe_status() {
	$.ajax({
		type: "POST",
		url: "ajaxencounter/check-pe",
		dataType: "json",
		success: function(data){
			$('#button_pe_gen_status').html(data.gen);
			$('#button_pe_eye_status').html(data.eye);
			$('#button_pe_ent_status').html(data.ent);
			$('#button_pe_neck_status').html(data.neck);
			$('#button_pe_resp_status').html(data.resp);
			$('#button_pe_cv_status').html(data.cv);
			$('#button_pe_ch_status').html(data.ch);
			$('#button_pe_gi_status').html(data.gi);
			$('#button_pe_gu_status').html(data.gu);
			$('#button_pe_lymph_status').html(data.lymph);
			$('#button_pe_ms_status').html(data.ms);
			$('#button_pe_neuro_status').html(data.neuro);
			$('#button_pe_psych_status').html(data.psych);
			$('#button_pe_skin_status').html(data.skin);
			$('#button_pe_constitutional_status').html(data.constitutional);
			$('#button_pe_mental_status').html(data.mental);
		}
	});
}
function check_labs1() {
	$.ajax({
		type: "POST",
		url: "ajaxencounter/check-labs",
		dataType: "json",
		success: function(data){
			$('#button_labs_ua_status').html(data.ua);
			$('#button_labs_rapid_status').html(data.rapid);
			$('#button_labs_micro_status').html(data.micro);
			$('#button_labs_other_status').html(data.other);
		}
	});
}
function total_balance() {
	if (noshdata.pid != '') {
		$.ajax({
			type: "POST",
			url: "ajaxchart/total-balance",
			success: function(data){
				$('#total_balance').html(data);
			}
		});
	}
}
function hpi_autosave(type) {
	var old0 = $("#"+type+"_old").val();
	var new0 = $("#"+type).val();
	if (old0 != new0) {
		$.ajax({
			type: "POST",
			url: "ajaxencounter/hpi-save/" + type,
			data: type+'=' + $("#"+type).val(),
			success: function(data){
				$.jGrowl(data);
				var a = $("#"+type).val();
				$("#"+type+"_old").val(a);
			}
		});
	}
}
function oh_autosave() {
	var bValid = false;
	$("#oh_form").find(".text").each(function() {
		if (bValid == false) {
			var input_id = $(this).attr('id');
			var a = $("#" + input_id).val();
			var b = $("#" + input_id + "_old").val();
			if (a != b) {
				bValid = true;
			}
		}
	});
	if (bValid) {
		var oh_str = $("#oh_form").serialize();
		if(oh_str){
			$.ajax({
				type: "POST",
				url: "ajaxencounter/oh-save",
				data: oh_str,
				success: function(data){
					$.jGrowl(data);
					$("#oh_form").find(".text").each(function() {
						var input_id = $(this).attr('id');
						var a = $("#" + input_id).val();
						$("#" + input_id + "_old").val(a);
					});
				}
			});
		} else {
			$.jGrowl("Please complete the form");
		}
	}
}
function vitals_autosave() {
	var bValid = false;
	$("#vitals_form").find(".text").each(function() {
		if (bValid == false) {
			var input_id = $(this).attr('id');
			var a = $("#" + input_id).val();
			var b = $("#" + input_id + "_old").val();
			if (a != b) {
				bValid = true;
			}
		}
	});
	if (bValid) {
		var vitals_str = $("#vitals_form").serialize();
		if(vitals_str){
			$.ajax({
				type: "POST",
				url: "ajaxencounter/vitals-save",
				data: vitals_str,
				success: function(data){
					$.jGrowl(data);
					$("#vitals_form").find(".text").each(function() {
						var input_id = $(this).attr('id');
						var a = $("#" + input_id).val();
						$("#" + input_id + "_old").val(a);
					});
				}
			});
		} else {
			$.jGrowl("Please complete the form");
		}
	}
}
function proc_autosave() {
	var bValid = false;
	$("#procedure_form").find(".text").each(function() {
		if (bValid == false) {
			var input_id = $(this).attr('id');
			var a = $("#" + input_id).val();
			var b = $("#" + input_id + "_old").val();
			if (a != b) {
				bValid = true;
			}
		}
	});
	if (bValid) {
		var proc_str = $("#procedure_form").serialize();
		if(proc_str){
			$.ajax({
				type: "POST",
				url: "ajaxencounter/proc-save",
				data: proc_str,
				success: function(data){
					$.jGrowl(data);
					$("#procedure_form").find(".text").each(function() {
						var input_id = $(this).attr('id');
						var a = $("#" + input_id).val();
						$("#" + input_id + "_old").val(a);
					});
				}
			});
		} else {
			$.jGrowl("Please complete the form");
		}
	}
}
function assessment_autosave() {
	var bValid = false;
	$("#assessment_form").find(".text").each(function() {
		if (bValid == false) {
			var input_id = $(this).attr('id');
			var a = $("#" + input_id).val();
			var b = $("#" + input_id + "_old").val();
			if (a != b) {
				bValid = true;
			}
		}
	});
	if (bValid) {
		var assessment_str = $("#assessment_form").serialize();
		if(assessment_str){
			$.ajax({
				type: "POST",
				url: "ajaxencounter/assessment-save",
				data: assessment_str,
				success: function(data){
					$.jGrowl(data);
					$("#assessment_form").find(".text").each(function() {
						var input_id = $(this).attr('id');
						var a = $("#" + input_id).val();
						$("#" + input_id + "_old").val(a);
					});
					$.ajax({
						type: "POST",
						url: "ajaxencounter/get-billing",
						dataType: "json",
						success: function(data){
							$("#billing_icd").removeOption(/./);
							$("#billing_icd").addOption(data, false);
						}
					});
				}
			});
		} else {
			$.jGrowl("Please complete the form");
		}
	}
}
function orders_autosave() {
	var bValid = false;
	$("#orders_form").find(".text").each(function() {
		if (bValid == false) {
			var input_id = $(this).attr('id');
			var a = $("#" + input_id).val();
			var b = $("#" + input_id + "_old").val();
			if (a != b) {
				bValid = true;
			}
		}
	});
	if (bValid) {
		var orders_str = $("#orders_form").serialize();
		if(orders_str){
			$.ajax({
				type: "POST",
				url: "ajaxencounter/orders-save",
				data: orders_str,
				success: function(data){
					$.jGrowl(data);
					$("#orders_form").find(".text").each(function() {
						var input_id = $(this).attr('id');
						var a = $("#" + input_id).val();
						$("#" + input_id + "_old").val(a);
					});
				}
			});
		} else {
			$.jGrowl("Please complete the form");
		}
	}
}
function billing_autosave() {
	var bValid = false;
	$("#encounter_billing_form").find(".text").each(function() {
		if (bValid == false) {
			var input_id = $(this).attr('id');
			var a = $("#" + input_id).val();
			var b = $("#" + input_id + "_old").val();
			if (a != b) {
				bValid = true;
			}
		}
	});
	if (bValid) {
		var billing_str = $("#encounter_billing_form").serialize();
		if(billing_str){
			$.ajax({
				type: "POST",
				url: "ajaxencounter/billing-save1",
				data: billing_str,
				success: function(data){
					$.jGrowl(data);
					$("#encounter_billing_form").find(".text").each(function() {
						var input_id = $(this).attr('id');
						var a = $("#" + input_id).val();
						$("#" + input_id + "_old").val(a);
					});
				}
			});
		} else {
			$.jGrowl("Please complete the form");
		}
	}
}
function pending_order_load(item) {
	$.ajax({
		url: "ajaxchart/order-type/" + item,
		dataType: "json",
		type: "POST",
		success: function(data){
			var label = data.label;
			var status = "";
			var type = "";
			if (label == 'messages_lab') {
				status = 'Details for Lab Order #' + item;
				type = 'lab';
			}
			if (label == 'messages_rad') {
				status = 'Details for Radiology Order #' + item;
				type = 'rad';
			}
			if (label == 'messages_cp') {
				status = 'Details for Cardiopulmonary Order #' + item;
				type = 'cp';
			}
			load_outside_providers(type,'edit');
			$.each(data, function(key, value){
				if (key != 'label') {
					if (key == 'orders_pending_date') {
						var value = getCurrentDate();
					}
					$("#edit_"+label+"_form :input[name='" + key + "']").val(value);
				}
			});
			$("#"+label+"_status").html(status);
			if ($("#"+label+"_provider_list").val() == '' && noshdata.group_id == '2') {
				$("#"+label+"_provider_list").val(noshdata.user_id);
			}
			$("#"+label+"_edit_fields").dialog("option", "title", "Edit Lab Order");
			$("#"+label+"_edit_fields").dialog('open');
		}
	});
}
function load_outside_providers(type,action) {
	$("#messages_"+type+"_location").removeOption(/./);
	var type1 = '';
	var type2 = '';
	if (type == 'lab') {
		type1 = 'Laboratory';
		type2 = 'lab';
	}
	if (type == 'rad') {
		type1 = 'Radiology';
		type2 = 'imaging';
	}
	if (type == 'cp') {
		type1 = 'Cardiopulmonary';
		type2 = 'cardiopulmonary';
	}
	$.ajax({
		url: "ajaxsearch/orders-provider/" + type1,
		dataType: "json",
		type: "POST",
		async: false,
		success: function(data){
			if(data.response == 'true'){
				$("#messages_"+type+"_location").addOption({"":"Add "+type2+" provider."}, false);
				$("#messages_"+type+"_location").addOption(data.message, false);
			} else {
				$("#messages_"+type+"_location").addOption({"":"No "+type2+" provider.  Click Add."}, false);
			}
		}
	});
	$("#messages_"+type+"_provider_list").removeOption(/./);
	$.ajax({
		url: "ajaxsearch/provider-select",
		dataType: "json",
		type: "POST",
		async: false,
		success: function(data){
			$("#messages_"+type+"_provider_list").addOption({"":"Select a provider for the order."}, false);
			$("#messages_"+type+"_provider_list").addOption(data, false);
			if(action == 'add') {
				if (noshdata.group_id == '2') {
					$("#messages_"+type+"_provider_list").val(noshdata.user_id);
				} else {
					$("#messages_"+type+"_provider_list").val('');
				}
			}
		}
	});
}
function hpi_template_renew() {
	$.ajax({
		type: "POST",
		url: "ajaxencounter/hpi-template-select-list",
		dataType: "json",
		success: function(data){
			$('#hpi_template').addOption({"":"*Select a template"}, false);
			$('#hpi_template').addOption(data.options, false);
			$('#hpi_template').sortOptions();
			$('#hpi_template').val("");
		}
	});
}
function ros_form_load() {
	$('.ros_buttonset').buttonset();
	$('.ros_detail_text').hide();
	$("#ros_gu_menarche").datepicker();
	$("#ros_gu_lmp").datepicker();
}
function get_ros_templates(group, id, type) {
	$.ajax({
		type: "POST",
		url: "ajaxencounter/get-ros-templates/" + group + "/" + id + "/" + type,
		dataType: "json",
		success: function(data){
			$('#'+group+'_form').html('');
			$('#'+group+'_form').dform(data);
			ros_form_load();
		}
	});
}
function ros_template_renew() {
	$.ajax({
		type: "POST",
		url: "ajaxencounter/ros-template-select-list",
		dataType: "json",
		success: function(data){
			$.each(data, function(key, value){
				$('#'+key+'_template').addOption({"":"*Select a template"}, false);
				$('#'+key+'_template').addOption(value, false);
				$('#'+key+'_template').sortOptions();
				$('#'+key+'_template').val("");
			});
		}
	});
	$.ajax({
		type: "POST",
		url: "ajaxencounter/get-default-ros-templates",
		dataType: "json",
		success: function(data){
			$.each(data, function(key, value){
				$('#'+key+'_form').html('');
				$('#'+key+'_form').dform(value);
				$("." + key + "_div").css("padding","5px");
				$('.ros_template_div select').addOption({'':'Select option'},true);
				ros_form_load();
			});
			$('#dialog_load').dialog('close');
		}
	});
}
function ros_dialog_open() {
	if ($('#ros_skin_form').html() == '' || $('#ros_psych11_form').html() == '') {
		$('#dialog_load').dialog('option', 'title', "Loading templates...").dialog('open');
		ros_template_renew();
		$.ajax({
			type: "POST",
			url: "ajaxencounter/get-ros",
			dataType: "json",
			success: function(data){
				if (data && data != '') {
					$.each(data, function(key, value){
						if (key != 'eid' || key != 'pid' || key != 'ros_date' || key != 'encounter_provider') {
							$('#'+key).val(value);
							$('#'+key+'_old').val(value);
						}
					});
				}
			}
		});
	}
}
function pe_form_load() {
	$('.pe_buttonset').buttonset();
	$('.pe_detail_text').hide();
}
function get_pe_templates(group, id, type) {
	$.ajax({
		type: "POST",
		url: "ajaxencounter/get-pe-templates/" + group + "/" + id + "/" + type,
		dataType: "json",
		success: function(data){
			$('#'+group+'_form').html('');
			$('#'+group+'_form').dform(data);
			pe_form_load();
		}
	});
}
function pe_accordion_action(id, dialog_id) {
	$("#" + id + " .text").first().focus();
	$("#"+dialog_id).find('.pe_entry').each(function(){
		var parent_id1 = $(this).attr("id");
		if (!!$(this).val()) {
			$('#' + parent_id1 + '_h').html(noshdata.item_present);
		} else {
			$('#' + parent_id1 + '_h').html(noshdata.item_empty);
		}
	});
}
function pe_template_renew() {
	$.ajax({
		type: "POST",
		url: "ajaxencounter/pe-template-select-list",
		dataType: "json",
		success: function(data){
			$.each(data, function(key, value){
				$('#'+key+'_template').addOption({"":"*Select a template"}, false);
				$('#'+key+'_template').addOption(value, false);
				$('#'+key+'_template').sortOptions();
				$('#'+key+'_template').val("");
			});
		}
	});
	$.ajax({
		type: "POST",
		url: "ajaxencounter/get-default-pe-templates",
		dataType: "json",
		success: function(data){
			$.each(data, function(key, value){
				$('#'+key+'_form').html('');
				$('#'+key+'_form').dform(value);
				$("." + key + "_div").css("padding","5px");
				$('.pe_template_div select').addOption({'':'Select option'},true);
				pe_form_load();
			});
			$('#dialog_load').dialog('close');
		}
	});
}
function pe_dialog_open() {
	var bValid = false;
	$('.pe_dialog').each(function() {
		var dialog_id = $(this).attr('id');
		var accordion_id = dialog_id.replace('_dialog', '_accordion');
		if (!$("#"+accordion_id).hasClass('ui-accordion')) {
			$("#"+accordion_id).accordion({
				create: function(event, ui) {
					var id = ui.panel[0].id;
					pe_accordion_action(id, dialog_id);
				},
				activate: function(event, ui) {
					var id = ui.newPanel[0].id;
					pe_accordion_action(id, dialog_id);
				},
				heightStyle: "content"
			});
			bValid = true;
		}
	});
	if (bValid == true) {
		$('#dialog_load').dialog('option', 'title', "Loading templates...").dialog('open');
		pe_template_renew();
		$.ajax({
			type: "POST",
			url: "ajaxencounter/get-pe",
			dataType: "json",
			success: function(data){
				if (data && data != '') {
					$.each(data, function(key, value){
						if (key != 'eid' || key != 'pid' || key != 'pe_date' || key != 'encounter_provider') {
							$('#'+key).val(value);
							$('#'+key+'_old').val(value);
							if (!!value) {
								$('#' + key + '_h').html(noshdata.item_present);
							} else {
								$('#' + key + '_h').html(noshdata.item_empty);
							}
							
							
						}
					});
				}
			}
		});
	}
}
function parse_date(string) {
	var date = new Date();
	var parts = String(string).split(/[- :]/);
	date.setFullYear(parts[0]);
	date.setMonth(parts[1] - 1);
	date.setDate(parts[2]);
	date.setHours(parts[3]);
	date.setMinutes(parts[4]);
	date.setSeconds(parts[5]);
	date.setMilliseconds(0);
	return date;
}
function parse_date1(string) {
	var date = new Date();
	var parts = String(string).split("/");
	date.setFullYear(parts[2]);
	date.setMonth(parts[0] - 1);
	date.setDate(parts[1]);
	date.setHours(0);
	date.setMinutes(0);
	date.setSeconds(0);
	date.setMilliseconds(0);
	return date;
}
function editDate(string) {
	var result = string.split("-");
	var edit_date = result[1] + '/' + result[2] + '/' + result[0];
	return edit_date;
}
function editDate1(string) {
	var result1 = string.split(" ");
	var result = result1[0].split("-");
	var edit_date = result[1] + '/' + result[2] + '/' + result[0];
	if (edit_date == '00/00/0000') {
		var edit_date1 = '';
	} else {
		var edit_date1 = edit_date;
	}
	return edit_date1;
}
function editDate2(string) {
	var result1 = string.split(" ");
	var result = result1[1].split(":");
	var hour1 = result[0];
	var hour2 = parseInt(hour1);
	if (hour2 > 12) {
		var hour3 = hour2 - 12;
		var hour4 = hour3 + '';
		var pm = 'PM';
		if (hour4.length == 1) {
			var hour = "0" + hour4;
		} else {
			var hour = hour4;
		}
	} else {
		if (hour2 == 0) {
			var hour = '12';
			var pm = 'AM';
		}
		if (hour2 == 12) {
			var hour = hour2;
			var pm = 'PM';
		}
		if (hour2 < 12) {
			var pm = 'AM';
			if (hour2.length == 1) {
				var hour = "0" + hour2;
			} else {
				var hour = hour2;
			}
		}
	}
	var minute1 = result[1];
	var minute2 = minute1 + '';
	if (minute2.length == 1) {
		var minute = "0" + minute2;
	} else {
		var minute = minute2;
	}
	var time = hour + ":" + minute + ' ' + pm;
	return time;
}
function getCurrentDate() {
	var d = new Date();
	var day1 = d.getDate();
	var day2 = day1 + '';
	if (day2.length == 1) {
		var day = "0" + day2;
	} else {
		var day = day2;
	}
	var month1 = d.getMonth();
	var month2 = parseInt(month1);
	var month3 = month2 + 1;
	var month4 = month3 + '';
	if (month4.length == 1) {
		var month = "0" + month4;
	} else {
		var month = month4;
	}
	var date = month + "/" + day + "/" + d.getFullYear();
	return date;
}
function getCurrentTime() {
	var d = new Date();
	var hour1 = d.getHours();
	var hour2 = parseInt(hour1);
	if (hour2 > 12) {
		var hour3 = hour2 - 12;
		var hour4 = hour3 + '';
		var pm = 'PM';
		if (hour4.length == 1) {
			var hour = "0" + hour4;
		} else {
			var hour = hour4;
		}
	} else {
		if (hour2 == 0) {
			var hour = '12';
			var pm = 'AM';
		}
		if (hour2 == 12) {
			var hour = hour2;
			var pm = 'PM';
		}
		if (hour2 < 12) {
			var pm = 'AM';
			if (hour2.length == 1) {
				var hour = "0" + hour2;
			} else {
				var hour = hour2;
			}
		}
	}
	var minute1 = d.getMinutes();
	var minute2 = minute1 + '';
	if (minute2.length == 1) {
		var minute = "0" + minute2;
	} else {
		var minute = minute2;
	}
	var time = hour + ":" + minute + ' ' + pm;
	return time;
}
$.fn.clearForm = function() {
	return this.each(function() {
		var type = this.type, tag = this.tagName.toLowerCase();
		if (tag == 'form')
			return $(':input',this).clearForm();
		if (type == 'text' || type == 'password' || type == 'hidden' || tag == 'textarea')
			this.value = '';
		else if (type == 'checkbox' || type == 'radio')
			this.checked = false;
		else if (tag == 'select')
			this.selectedIndex = 0;
	});
};
$.fn.clearDiv = function() {
	return this.each(function() {
		var type = this.type, tag = this.tagName.toLowerCase();
		if (tag == 'div')
			return $(':input',this).clearForm();
		if (type == 'text' || type == 'password' || type == 'hidden' || tag == 'textarea')
			this.value = '';
		else if (type == 'checkbox' || type == 'radio')
			this.checked = false;
		else if (tag == 'select')
			this.selectedIndex = 0;
	});
};
$.fn.serializeJSON = function() {
	var o = {};
	var a = this.serializeArray();
	$.each(a, function() {
		if (o[this.name] !== undefined) {
			if (!o[this.name].push) {
				o[this.name] = [o[this.name]];
			}
			o[this.name].push(this.value || '');
		} else {
			o[this.name] = this.value || '';
		}
	});
	return o;
};
$.widget( "custom.catcomplete", $.ui.autocomplete, {
	_renderMenu: function( ul, items ) {
		var that = this,
		currentCategory = "";
		$.each( items, function( index, item ) {
			if ( item.category != currentCategory ) {
				ul.append( "<li class='ui-autocomplete-category'>" + item.category + "</li>" );
				currentCategory = item.category;
			}
			that._renderItemData( ul, item );
		});
	}
});
$.ajaxSetup({
	headers: {"cache-control":"no-cache"},
	beforeSend: function(request) {
		return request.setRequestHeader("X-CSRF-Token", $("meta[name='token']").attr('content'));
	}
});
$(document).ajaxError(function(event,xhr,options,exc) {
	if (xhr.status == "404" ) {
		alert("Route not found!");
		//window.location.replace(noshdata.error);
	} else {
		if(xhr.responseText){
			var response1 = $.parseJSON(xhr.responseText);
			var error = "Error:\nType: " + response1.error.type + "\nMessage: " + response1.error.message + "\nFile: " + response1.error.file;
			alert(error);
		}
	}
});
$.extend($.jgrid.defaults, {
	ajaxGridOptions : {
		beforeSend: function(xhr) {
			return xhr.setRequestHeader("X-CSRF-Token", $("meta[name='token']").attr('content'));
		}
	}
});
$(document).idleTimeout({
	inactivity: 3600000,
	noconfirm: 10000,
	alive_url: noshdata.error,
	redirect_url: noshdata.logout_url,
	logout_url: noshdata.logout_url,
	sessionAlive: false
});
$(document).ready(function() {
	loadbuttons();
	$(".nosh_tooltip").tooltip();
	$(".phonemask").mask("(999) 999-9999");
	$("#switcher").themeswitcher({
		imgpath: noshdata.images,
		loadtheme: "redmond"
	});
	$("#dialog_load").dialog({
		height: 75,
		autoOpen: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		modal: true
	});
	var tz = jstz.determine();
	$.cookie('nosh_tz', tz.name(), { path: '/' });
	$('.textdump').swipe({
		swipeRight: function(){
			var elem = $(this);
			textdump(elem);
		}
	});
});
$(document).on("click", ".ui-jqgrid-titlebar", function() {
	$(".ui-jqgrid-titlebar-close", this).click();
});
$(document).on('click', '#save_oh_sh_form', function(){
	var old = $("#oh_sh").val();
	var old1 = old.trim();
	var a = $("#sh1").val();
	var b = $("#sh2").val();
	var c = $("#sh3").val();
	var d = $("#oh_sh_marital_status").val();
	var d0 = $("#oh_sh_marital_status_old").val();
	var e = $("#oh_sh_partner_name").val();
	var e0 = $("#oh_sh_partner_name").val();
	var f = $("#sh4").val();
	var g = $("#sh5").val();
	var h = $("#sh6").val();
	var i = $("#sh7").val();
	var j = $("#sh8").val();
	var k = $("input[name='sh9']:checked").val();
	var l = $("input[name='sh10']:checked").val();
	var m = $("input[name='sh11']:checked").val();
	if(a){
		var a1 = 'Family members in the household: ' + a + '\n';
	} else {
		var a1 = '';
	}
	if(b){
		var b1 = 'Children: ' + b + '\n';
	} else {
		var b1 = '';
	}
	if(c){
		var c1 = 'Pets: ' + c + '\n';
	} else {
		var c1 = '';
	}
	if(d){
		var d1 = 'Marital status: ' + d + '\n';
	} else {
		var d1 = '';
	}
	if(e){
		var e1 = 'Partner name: ' + e + '\n';
	} else {
		var e1 = '';
	}
	if(f){
		var f1 = 'Diet: ' + f + '\n';
	} else {
		var f1 = '';
	}
	if(g){
		var g1 = 'Exercise: ' + g + '\n';
	} else {
		var g1 = '';
	}
	if(h){
		var h1 = 'Sleep: ' + h + '\n';
	} else {
		var h1 = '';
	}
	if(i){
		var i1 = 'Hobbies: ' + i + '\n';
	} else {
		var i1 = '';
	}
	if(j){
		var j1 = 'Child care arrangements: ' + j + '\n';
	} else {
		var j1 = '';
	}
	if(k){
		var k1 = k + '\n';
	} else {
		var k1 = '';
	}
	if(l){
		var l1 = l + '\n';
	} else {
		var l1 = '';
	}
	if(m){
		var m1 = m + '\n';
	} else {
		var m1 = '';
	}
	var full = d1+e1+a1+b1+c1+f1+g1+h1+i1+j1+k1+l1+m1;
	var full1 = full.trim();
	if (old1 != '') {
		var n = old1+'\n'+full1+'\n';
	} else {
		var n = full1+'\n';
	}
	var o = n.length;
	$("#oh_sh").val(n).caret(o);
	if(d != d0 || e != e0) {
		$.ajax({
			type: "POST",
			url: "ajaxencounter/edit-demographics/sh",
			data: "marital_status=" + d + "&partner_name=" + e,
			success: function(data){
				$.jGrowl(data);
			}
		});
	}
	var sh9_y = $('#sh9_y').attr('checked');
	var sh9_n = $('#sh9_n').attr('checked');
	if(sh9_y){
		$.ajax({
			type: "POST",
			url: "ajaxencounter/edit-demographics/sex",
			data: "status=yes",
			success: function(data){
				$.jGrowl(data);
			}
		});
	}
	if(sh9_n){
		$.ajax({
			type: "POST",
			url: "ajaxencounter/edit-demographics/sex",
			data: "status=no",
			success: function(data){
				$.jGrowl(data);
			}
		});
	}
});
$(document).on("click", '#save_oh_etoh_form', function(){
	var old = $("#oh_etoh").val();
	var old1 = old.trim();
	var a = $("input[name='oh_etoh_select']:checked").val();
	var a0 = $("#oh_etoh_text").val();
	if(a){
		var a1 = a + a0;
	} else {
		var a1 = '';
	}
	if (old1 != '') {
		var b = old1+'\n'+a1+'\n';
	} else {
		var b = a1+'\n';
	}
	var c = b.length;
	$("#oh_etoh").val(b).caret(c);
});
$(document).on('click', '#save_oh_tobacco_form', function(){
	var old = $("#oh_tobacco").val();
	var old1 = old.trim();
	var a = $("input[name='oh_tobacco_select']:checked").val();
	var a0 = $("#oh_tobacco_text").val();
	if(a){
		var a1 = a + a0;
	} else {
		var a1 = '';
	}
	if (old1 != '') {
		var b = old1+'\n'+a1+'\n';
	} else {
		var b = a1+'\n';
	}
	var c = b.length;
	$("#oh_tobacco").val(b).caret(c);
	var tobacco_y = $('#oh_tobacco_y').prop('checked');
	var tobacco_n = $('#oh_tobacco_n').prop('checked');
	if(tobacco_y){
		$.ajax({
			type: "POST",
			url: "ajaxencounter/edit-demographics/tobacco",
			data: "status=yes",
			success: function(data){
				$.jGrowl(data);
			}
		});
	}
	if(tobacco_n){
		$.ajax({
			type: "POST",
			url: "ajaxencounter/edit-demographics/tobacco",
			data: "status=no",
			success: function(data){
				$.jGrowl(data);
			}
		});
	}
});
$(document).on('click', '#save_oh_drugs_form', function(){
	var old = $("#oh_drugs").val();
	var old1 = old.trim();
	var a = $("input[name='oh_drugs_select']:checked").val();
	if(a){
		if (a == 'No illicit drug use.') {
			var a1 = a;
		} else {
			var a0 = $("#oh_drugs_text").val();
			var a2 = $("#oh_drugs_text1").val();
			var a1 = a + a0 + '\nFrequency of drug use: ' + a2;
			$('#oh_drugs_input').hide();
			$('#oh_drugs_text').val('');
			$("#oh_drugs_text1").val('');
			$("input[name='oh_drugs_select']").each(function(){
				$(this).prop('checked', false);
			});
			$('#oh_drugs_form input[type="radio"]').button('refresh');
		}
	} else {
		var a1 = '';
		$('#oh_drugs_input').hide();
	}
	if (old1 != '') {
		var b = old1+'\n'+a1+'\n';
	} else {
		var b = a1+'\n';
	}
	var c = b.length;
	$("#oh_drugs").val(b).caret(c);
});
$(document).on('click', '#save_oh_employment_form', function(){
	var old = $("#oh_employment").val();
	var old1 = old.trim();
	var a = $("input[name='oh_employment_select']:checked").val();
	var b = $("#oh_employment_text").val();
	var c = $("#oh_employment_employer").val();
	var c0 = $("#oh_employment_employer_old").val();
	if(a){
		var a1 = a + '\n';
	} else {
		var a1 = '';
	}
	if(b){
		var b1 = 'Employment field: ' + b + '\n';
	} else {
		var b1 = '';
	}
	if(c){
		var c1 = 'Employer: ' + c + '\n';
	} else {
		var c1 = '';
	}
	var full = a1+b1+c1;
	var full1 = full.trim();
	if (old1 != '') {
		var d = old1+'\n'+full1+'\n';
	} else {
		var d = full1+'\n';
	}
	var e = d.length;
	$("#oh_employment").val(d).caret(e);
	if(c != c0){
		$.ajax({
			type: "POST",
			url: "ajaxencounter/edit-demographics/employer",
			data: "employer=" + c,
			success: function(data){
				$.jGrowl(data);
			}
		});
	}
});
function updateTextArea(parent_id_entry) {
	var newtext = '';
	$('#' + parent_id_entry + '_form :checked').each(function() {
		newtext += $(this).val() + '  ';
	});
	$('#' + parent_id_entry).val(newtext);
}
function ros_normal(parent_id) {
	var id = parent_id;
	var x = parent_id.length - 1;
	parent_id = parent_id.slice(0,x);
	$("#" + id).siblings('input:checkbox').each(function(){
		var parent_id = $(this).attr("id");
		$(this).prop('checked',false);
		var parts = parent_id.split('_');
		if (parts[1] == 'wccage') {
			var parent_id_entry = 'ros_wcc';
		} else {
			var parent_id_entry = parts[0] + '_' + parts[1];
		}
		var a = $(this).val();
		remove_text(parent_id_entry,a,'',false);
		$("#" + parent_id_entry + "_form input:checkbox").button('refresh');
	});
	$("#" + parent_id + "_div").find('.ros_detail_text').each(function(){
		var parent_id = $(this).attr("id");
		var parts = parent_id.split('_');
		if (parts[1] == 'wccage') {
			var parent_id_entry = 'ros_wcc';
		} else {
			var parent_id_entry = parts[0] + '_' + parts[1];
		}
		var old = $("#" + parent_id_entry).val();
		var a = ' ' + $(this).val();
		remove_text(parent_id_entry,a,'',false);
		$(this).hide();
	});
}
function ros_other(parent_id) {
	var x = parent_id.length - 1;
	parent_id = parent_id.slice(0,x);
	$("#" + parent_id + "_div").find('.ros_normal:checkbox').each(function(){
		var parent_id = $(this).attr("id");
		$(this).prop('checked',false);
		var parts = parent_id.split('_');
		if (parts[1] == 'wccage') {
			var parent_id_entry = 'ros_wcc';
		} else {
			var parent_id_entry = parts[0] + '_' + parts[1];
		}
		var old = $("#" + parent_id_entry).val();
		var a = $(this).val();
		remove_text(parent_id_entry,a,'',false);
		$("#" + parent_id_entry + "_form input:checkbox").button('refresh');
	});
}
$(document).on("click", '.ros_template_div input[type="checkbox"]', function() {
	var parent_id = $(this).attr("id");
	var parts = parent_id.split('_');
	if (parts[1] == 'wccage') {
		var parent_id_entry = 'ros_wcc';
	} else {
		var parent_id_entry = parts[0] + '_' + parts[1];
	}
	var label = parts[0] + '_' + parts[1] + '_' + parts[2] + '_label';
	var label_text = $("#" + label).text() + ': ';
	var old = $("#" + parent_id_entry).val();
	var a = $(this).val();
	var repeat = repeat_text(parent_id_entry,a,label_text);
	if ($(this).prop('checked') && repeat !== true) {
		if (old != '') {
			var comma = a.charAt(0);
			var old_arr = old.split('  ');
			var new_arr = search_array(old_arr, label_text);
			if (new_arr.length > 0) {
				var arr_index = old_arr.indexOf(new_arr[0]);
				a = a.replace(label_text, '; ');
				old_arr[arr_index] += a;
			} else {
				old_arr.push(a);
			}
			var b = old_arr.join("  ");
		} else {
			var b = a;
		}
		$("#" + parent_id_entry).val(b);
		if ($(this).is('.ros_normal')) {
			ros_normal(parent_id);
		} else {
			ros_other(parent_id);
		}
	} else {
		remove_text(parent_id_entry,a,label_text,false);
	}
});
$(document).on("click", '.ros_template_div input[type="radio"]', function() {
	var parent_id = $(this).attr("id");
	var parts = parent_id.split('_');
	if (parts[1] == 'wccage') {
		var parent_id_entry = 'ros_wcc';
	} else {
		var parent_id_entry = parts[0] + '_' + parts[1];
	}
	var old = $("#" + parent_id_entry).val();
	var a = $(this).val();
	var repeat = repeat_text(parent_id_entry,a,'');
	console.log(repeat);
	if ($(this).prop('checked') && repeat !== true) {
		if (old != '') {
			$(this).siblings('input:radio').each(function() {
				var d = $(this).val();
				var d1 = '  ' + d;
				old = old.replace(d1,'');
				old = old.replace(d, '');
			});
			if (old != '') {
				var b = old + '  ' + a;
			} else {
				var b = a;
			}
		} else {
			var b = a;
		}
		$("#" + parent_id_entry).val(b);
	} else {
		remove_text(parent_id_entry,a,'',false);
	}
});
$(document).on("change", '.ros_template_div select', function() {
	var parent_id = $(this).attr("id");
	var parts = parent_id.split('_');
	if (parts[1] == 'wccage') {
		var parent_id_entry = 'ros_wcc';
	} else {
		var parent_id_entry = parts[0] + '_' + parts[1];
	}
	var old = $("#" + parent_id_entry).val();
	var a = $(this).val();
	if (old != '') {
		$(this).siblings('option').each(function() {
			var d = $(this).val();
			var d1 = '  ' + d;
			old = old.replace(d1,'');
			old = old.replace(d, '');
		});
		var b = old + '  ' + a;
	} else {
		var b = a;
	}
	$("#" + parent_id_entry).val(b); 
});
$(document).on('focus', '.ros_template_div input[type="text"]', function() {
	noshdata.old_text = $(this).val();
});
$(document).on('focusout', '.ros_template_div input[type="text"]', function() {
	var a = $(this).val();
	if (a != noshdata.old_text) {
		if (a != '') {
			var parent_id = $(this).attr("id");
			var parts = parent_id.split('_');
			if (parts[1] == 'wccage') {
				var parent_id_entry = 'ros_wcc';
			} else {
				var parent_id_entry = parts[0] + '_' + parts[1];
			}
			var x = parent_id.length - 1;
			var parent_div = parent_id.slice(0,x);
			var start1 = $("#" + parent_div + "_div").find('span:first').text();
			if (start1 == '') {
				start1 = $("#" + parts[0] + '_' + parts[1] + '_' + parts[2] + '_label').text();
			}
			var start1_n = start1.lastIndexOf(' (');
			if (start1_n != -1) {
				var start1_n1 = start1.substring(0,start1_n);
				var start1_n2 = start1_n1.toLowerCase();
			} else {
				var start1_n1 = start1;
				var start1_n2 = start1;
			}
			var start2 = $("label[for='" + parent_id + "']").text();
			var start3_n = start1.lastIndexOf('degrees');
			if (start3_n != -1) {
				var end_text = ' degrees.';
			} else {
				var end_text = '';
			}
			var start4 = $(this).closest('div.ui-accordion').find('h3.ui-state-active').text();
			if (start4 != '') {
				var start4_n = start4.lastIndexOf('-');
				if (start4_n != -1) {
					var parts2 = start4.split(' - ');
					var mid_text = ', ' + parts2[1].toLowerCase();
				} else {
					var mid_text = ', ' + start4.toLowerCase();
				}
			} else {
				var mid_text = '';
			}
			if (!!start2) {
				var start_text = start2 + ' ' + start1_n2;
			} else {
				var start_text = start1_n1;
			}
			var old = $("#" + parent_id_entry).val();
			var a_pointer = a.length - 1;
			var a_pointer2 = a.lastIndexOf('.');
			if (!!old) {
				if (!!start_text) {
					var c = start_text + mid_text + ': ' + a + end_text;
					if (noshdata.old_text != '') {
						var c_old = start_text + mid_text + ': ' + noshdata.old_text + end_text;
					}
				} else {
					if (a_pointer != a_pointer2) {
						var c = a + '.';
					} else {
						var c = a;
					}
				}
				if (noshdata.old_text != '') {
					var old_text_pointer = noshdata.old_text.length - 1;
					var old_text_pointer2 = noshdata.old_text.lastIndexOf('.');
					if (old_text_pointer != old_text_pointer2) {
						var old_text1 = noshdata.old_text + '.';
					} else {
						var old_text1 = noshdata.old_text;
					}
					if (!!start_text) {
						var b = old.replace(c_old, c);
					} else {
						var b = old.replace(old_text1, c);
					}
					noshdata.old_text = '';
				} else {
					var b = old + '  ' + c;
				}
			} else {
				if (!!start_text) {
					var b = start_text + mid_text + ': ' + a + end_text;
				} else {
					if (a_pointer != a_pointer2) {
						var b = a + '.';
					} else {
						var b = a;
					}
				}
			}
			$("#" + parent_id_entry).val(b);
		}
	}
});
$(document).on('click', '.ros_template_div .ros_detail', function() {
	var detail_id = $(this).attr("id") + '_detail';
	if ($(this).prop('checked')) {
		$('#' + detail_id).show('fast');
		$('#' + detail_id).focus();
	} else {
		var parent_id = $(this).attr("id");
		var parts = parent_id.split('_');
		if (parts[1] == 'wccage') {
		var parent_id_entry = 'ros_wcc';
		} else {
			var parent_id_entry = parts[0] + '_' + parts[1];
		}
		var old = $("#" + parent_id_entry).val();
		var a = ' ' + $('#' + detail_id).val();
		var a1 = a + '  ';
		var c = old.replace(a1,'');
		c = c.replace(a, '');
		$("#" + parent_id_entry).val(c);
		$('#' + detail_id).hide('fast');
	}
});
$(document).on("click", '.all_normal', function(){
	var a = $(this).prop('checked');
	var parent_id = $(this).attr("id");
	var parts = parent_id.split('_');
	if (parts[1] == 'wcc') {
		if(a){
			$("#ros_wcc_form").find("input.ros_normal:checkbox").each(function(){
				$(this).prop("checked",true);
			});
			$("#ros_wcc_age_form").find("input.ros_normal:checkbox").each(function(){
				$(this).prop("checked",true);
			});
			var newtext = '';
			$('#ros_wcc_form :checked').each(function() {
				newtext += $(this).val() + '  ';
			});
			$('#ros_wcc_age_form :checked').each(function() {
				newtext += $(this).val() + '  ';
			});
			$('#ros_wcc').val(newtext);
		} else {
			$("#ros_wcc").val('');
			$("#ros_wcc_form").find('input.ros_normal:checkbox').each(function(){
				$(this).prop("checked",false);
			});
			$("#ros_wcc_age_form").find('input.ros_normal:checkbox').each(function(){
				$(this).prop("checked",false);
			});
		}
		$('#ros_wcc_form input[type="checkbox"]').button('refresh');
		$('#ros_wcc_age_form input[type="checkbox"]').button('refresh');
	} else {
		var parent_id_entry = parts[0] + '_' + parts[1];
		if(a){
			$("#" + parent_id_entry + "_form").find("input.ros_normal:checkbox").each(function(){
				$(this).prop("checked",true);
			});
			updateTextArea(parent_id_entry);
		} else {
			$("#" + parent_id_entry).val('');
			$("#" + parent_id_entry + "_form").find('input.ros_normal:checkbox').each(function(){
				$(this).prop("checked",false);
			});
		}
		$("#" + parent_id_entry + '_form input[type="checkbox"]').button('refresh');
	}
});

function updateTextArea_pe(parent_id_entry) {
	var newtext = '';
	$('#' + parent_id_entry + '_form :checked').each(function() {
		newtext += $(this).val() + '  ';
	});
	$('#' + parent_id_entry).val(newtext);
}
function pe_normal(parent_id) {
	var id = parent_id;
	var x = parent_id.length - 1;
	parent_id = parent_id.slice(0,x);
	$("#" + id).siblings('input:checkbox').each(function() {
		var parent_id = $(this).attr("id");
		$(this).prop('checked',false);
		var parts = parent_id.split('_');
		var parent_id_entry = parts[0] + '_' + parts[1];
		var old = $("#" + parent_id_entry).val();
		var a = $(this).val();
		remove_text(parent_id_entry,a,'',false);
		$(this).button('refresh');
	});
	$("#" + parent_id + "_div").find('.pe_detail_text').each(function(){
		var parent_id = $(this).attr("id");
		var parts = parent_id.split('_');
		var parent_id_entry = parts[0] + '_' + parts[1];
		var old = $("#" + parent_id_entry).val();
		if ($(this).val() != '') {
			var text_pointer = $(this).val().length - 1;
			var text_pointer2 = $(this).val().lastIndexOf('.');
			if (text_pointer != text_pointer2) {
				var text1 = $(this).val() + '.';
			} else {
				var text1 = $(this).val();
			}
			var a = ' ' + text1;
			remove_text(parent_id_entry,a,'',false);
		}
		$(this).val('');
		$(this).hide();
	});
}
function pe_other(parent_id) {
	var x = parent_id.length - 1;
	parent_id = parent_id.slice(0,x);
	$("#" + parent_id + "_div").find('.pe_normal:checkbox').each(function(){
		var parent_id = $(this).attr("id");
		$(this).prop('checked',false);
		var parts = parent_id.split('_');
		var parent_id_entry = parts[0] + '_' + parts[1];
		var old = $("#" + parent_id_entry).val();
		var a = $(this).val();
		remove_text(parent_id_entry,a,'',false);
		//var a1 = a + '  ';
		//var c = old.replace(a1,'');
		//c = c.replace(a, '');
		//$("#" + parent_id_entry).val(c);
		$(this).button('refresh');
	});
}
$(document).on("click", '.pe_template_div input[type="checkbox"]', function() {
	var parent_id = $(this).attr("id");
	var parts = parent_id.split('_');
	var parent_id_entry = parts[0] + '_' + parts[1];
	var label = parts[0] + '_' + parts[1] + '_' + parts[2] + '_label';
	var label_text = $("#" + label).text() + ': ';
	var old = $("#" + parent_id_entry).val();
	var a = $(this).val();
	var repeat = repeat_text(parent_id_entry,a,label_text);
	if ($(this).is(':checked') && repeat !== true) {
		if (old != '') {
			var comma = a.charAt(0);
			var old_arr = old.split('  ');
			var new_arr = search_array(old_arr, label_text);
			if (new_arr.length > 0) {
				var arr_index = old_arr.indexOf(new_arr[0]);
				a = a.replace(label_text, '; ');
				old_arr[arr_index] += a;
			} else {
				old_arr.push(a);
			}
			var b = old_arr.join("  ");
		} else {
			var b = a;
		}
		$("#" + parent_id_entry).val(b);
		if ($(this).is('.pe_normal')) {
			pe_normal(parent_id);
		} else {
			pe_other(parent_id);
		}
	} else {
		remove_text(parent_id_entry,a,label_text,false);
	}
});
$(document).on("change", '.pe_template_div input[type="radio"]', function() {
	var parent_id = $(this).attr("id");
	var parts = parent_id.split('_');
	var parent_id_entry = parts[0] + '_' + parts[1];
	var old = $("#" + parent_id_entry).val();
	var a = $(this).val();
	var repeat = repeat_text(parent_id_entry,a,'');
	if ($(this).is(':checked') && repeat !== true) {
		if (old != '') {
			$(this).siblings('input:radio').each(function() {
				var d = $(this).val();
				var d1 = '  ' + d;
				old = old.replace(d1,'');
				old = old.replace(d, '');
			});
			if (old != '') {
				var b = old + '  ' + a;
			} else {
				var b = a;
			}
		} else {
			var b = a;
		}
		$("#" + parent_id_entry).val(b);
	} else {
		remove_text(parent_id_entry,a,'',false);
	}
});
$(document).on("change", '.pe_template_div select', function() {
	var parent_id = $(this).attr("id");
	var parts = parent_id.split('_');
	var parent_id_entry = parts[0] + '_' + parts[1];
	var old = $("#" + parent_id_entry).val();
	var a = $(this).val();
	if (old != '') {
		$(this).siblings('option').each(function() {
			var d = $(this).val();
			var d1 = '  ' + d;
			old = old.replace(d1,'');
			old = old.replace(d, '');
		});
		var b = old + '  ' + a;
	} else {
		var b = a;
	}
	$("#" + parent_id_entry).val(b); 
});
$(document).on("focus", '.pe_template_div input[type="text"]', function() {
	noshdata.old_text = $(this).val();
});
$(document).on("focusout", '.pe_template_div input[type="text"]', function() {
	var a = $(this).val();
	if (a != noshdata.old_text) {
		if (a != '') {
			var parent_id = $(this).attr("id");
			var parts = parent_id.split('_');
			var parent_id_entry = parts[0] + '_' + parts[1];
			var x = parent_id.length - 1;
			var parent_div = parent_id.slice(0,x);
			var start1 = $("#" + parent_div + "_div").find('span:first').text();
			if (start1 == '') {
				start1 = $("#" + parts[0] + '_' + parts[1] + '_' + parts[2] + '_label').text();
			}
			var start1_n = start1.lastIndexOf(' (');
			if (start1_n != -1) {
				var start1_n1 = start1.substring(0,start1_n);
				var start1_n2 = start1_n1.toLowerCase();
			} else {
				var start1_n1 = start1;
				var start1_n2 = start1;
			}
			var start2 = $("label[for='" + parent_id + "']").text();
			var start3_n = start1.lastIndexOf('degrees');
			if (start3_n != -1) {
				var end_text = ' degrees.';
			} else {
				var end_text = '';
			}
			var start4 = $(this).closest('div.ui-accordion').find('h3.ui-state-active').text();
			if (start4 != '') {
				var start4_n = start4.lastIndexOf('-');
				if (start4_n != -1) {
					var parts2 = start4.split(' - ');
					var mid_text = ', ' + parts2[1].toLowerCase();
				} else {
					var mid_text = ', ' + start4.toLowerCase();
				}
			} else {
				var mid_text = '';
			}
			if (!!start2) {
				var start_text = start2 + ' ' + start1_n2;
			} else {
				var start_text = start1_n1;
			}
			var old = $("#" + parent_id_entry).val();
			var a_pointer = a.length - 1;
			var a_pointer2 = a.lastIndexOf('.');
			if (!!old) {
				if (!!start_text) {
					var c = start_text + mid_text + ': ' + a + end_text;
					if (noshdata.old_text != '') {
						var c_old = start_text + mid_text + ': ' + noshdata.old_text + end_text;
					}
				} else {
					if (a_pointer != a_pointer2) {
						var c = a + '.';
					} else {
						var c = a;
					}
				}
				if (noshdata.old_text != '') {
					var old_text_pointer = noshdata.old_text.length - 1;
					var old_text_pointer2 = noshdata.old_text.lastIndexOf('.');
					if (old_text_pointer != old_text_pointer2) {
						var old_text1 = noshdata.old_text + '.';
					} else {
						var old_text1 = noshdata.old_text;
					}
					if (!!start_text) {
						var b = old.replace(c_old, c);
					} else {
						var b = old.replace(old_text1, c);
					}
					noshdata.old_text = '';
				} else {
					var b = old + ' ' + c;
				}
			} else {
				if (!!start_text) {
					var b = start_text + mid_text + ': ' + a + end_text;
				} else {
					if (a_pointer != a_pointer2) {
						var b = a + '.';
					} else {
						var b = a;
					}
				}
			}
			$("#" + parent_id_entry).val(b);
		}
	}
});
$(document).on("click", '.pe_template_div .pe_detail', function() {
	var detail_id = $(this).attr("id") + '_detail';
	if ($(this).is(':checked')) {
		$('#' + detail_id).show('fast');
		$('#' + detail_id).focus();
	} else {
		var parent_id = $(this).attr("id");
		var parts = parent_id.split('_');
		var parent_id_entry = parts[0] + '_' + parts[1];
		var old = $("#" + parent_id_entry).val();
		if ($('#' + detail_id).val() != '') {
			var text_pointer = $('#' + detail_id).val().length - 1;
			var text_pointer2 = $('#' + detail_id).val().lastIndexOf('.');
			if (text_pointer != text_pointer2) {
				var text1 = $('#' + detail_id).val() + '.';
			} else {
				var text1 = $('#' + detail_id).val();
			}
			var a = ' ' + text1;
			var a1 = a + '  ';
			var c = old.replace(a1,'');
			c = c.replace(a, '');
			$("#" + parent_id_entry).val(c);
		}
		$('#' + detail_id).val('');
		$('#' + detail_id).hide('fast');
	}
});
$(document).on("click", '.all_normal_pe', function(){
	var a = $(this).is(':checked');
	var parent_id = $(this).attr("id");
	var n = parent_id.lastIndexOf('_');
	var parent_id_entry = parent_id.substring(0,n);
	if(a){
		$("#" + parent_id_entry + "_form").find("input.pe_normal:checkbox").each(function(){
			$(this).prop("checked",true);
		});
		updateTextArea_pe(parent_id_entry);
	} else {
		$("#" + parent_id_entry).val('');
		$("#" + parent_id_entry + "_form").find('input.pe_normal:checkbox').each(function(){
			$(this).prop("checked",false);
		});
	}
	$("#" + parent_id_entry + '_form input[type="checkbox"]').button('refresh');
});
$(document).on("click", '.all_normal1_pe', function(){
	var a = $(this).is(':checked');
	var parent_id = $(this).attr("id");
	var parent_id_entry = parent_id.replace('normal','dialog');
	if(a){
		$("#" + parent_id_entry).find(".all_normal_pe").each(function(){
			$(this).prop("checked",true);
			var parent_id1 = $(this).attr("id");
			var n1 = parent_id1.lastIndexOf('_');
			var parent_id_entry1 = parent_id1.substring(0,n1);
			$("#" + parent_id_entry1 + "_form").find("input.pe_normal:checkbox").each(function(){
				$(this).prop("checked",true);
			});
			updateTextArea_pe(parent_id_entry1);
			$("#" + parent_id_entry1 + '_form input[type="checkbox"]').button('refresh');
		}).button('refresh');
		$("#" + parent_id_entry).find(".all_normal2_pe").each(function(){
			$(this).prop("checked",true);
			var parent_id2 = $(this).attr("id");
			var parent_id_entry2 = parent_id2.replace('_normal1','');
			var old2 = $("#" + parent_id_entry2).val();
			var a2 = $(this).val();
			if (old2 != '') {
				var b2 = old2 + '  ' + a2;
			} else {
				var b2 = a2;
			}
			$("#" + parent_id_entry2).val(b2); 
		}).button('refresh');
	} else {
		$("#" + parent_id_entry).find(".all_normal_pe").each(function(){
			$(this).prop("checked",false);
			var parent_id2 = $(this).attr("id");
			var n2 = parent_id2.lastIndexOf('_');
			var parent_id_entry2 = parent_id2.substring(0,n2);
			$("#" + parent_id_entry2).val('');
			$("#" + parent_id_entry2 + "_form").find('input.pe_normal:checkbox').each(function(){
				$(this).prop("checked",false);
			});
			$("#" + parent_id_entry2 + '_form input[type="checkbox"]').button('refresh');
		}).button('refresh');
		$("#" + parent_id_entry).find(".all_normal2_pe").each(function(){
			$(this).prop("checked",true);
			var parent_id2 = $(this).attr("id");
			var parent_id_entry2 = parent_id2.replace('_normal1','');
			var old2 = $("#" + parent_id_entry2).val();
			var a2 = $(this).val();
			var a3 = '  ' + a2;
			var c2 = old2.replace(a3,'');
			c2 = c2.replace(a2, '');
			$("#" + parent_id_entry2).val(c2); 
		}).button('refresh');
	}
	$("#"+parent_id_entry).find('.pe_entry').each(function(){
		var parent_id1 = $(this).attr("id");
		if (!!$(this).val()) {
			$('#' + parent_id1 + '_h').html(noshdata.item_present);
		} else {
			$('#' + parent_id1 + '_h').html(noshdata.item_empty);
		}
	});
});
$(document).on("click", ".all_normal2_pe", function(){
	var parent_id = $(this).attr("id");
	var parent_id_entry = parent_id.replace('_normal1','');
	var old = $("#" + parent_id_entry).val();
	var a = $(this).val();
	if ($(this).is(':checked')) {
		if (old != '') {
			var b = old + '  ' + a;
		} else {
			var b = a;
		}
		$("#" + parent_id_entry).val(b); 
	} else {
		var a1 = '  ' + a;
		var c = old.replace(a1,'');
		c = c.replace(a, '');
		$("#" + parent_id_entry).val(c); 
	}
});
function loadimagepreview(){
	$('#image_placeholder').html('');
	$('#image_placeholder').empty();
	var image_total = '';
	$.ajax({
		url: "ajaxchart/image-load",
		type: "POST",
		success: function(data){
			$('#image_placeholder').html(data);
			image_total = $("#image_placeholder img").length;
			var $image = $("#image_placeholder img");
			$image.tooltip();
			$image.first().show();
			var i = 1;
			$("#image_status").html('Image ' + i + ' of ' + image_total);
			$('#next_image').click(function () {
				var $next = $image.filter(':visible').hide().next('img');
				i++;
				if($next.length === 0) {
					$next = $image.first();
					i = 1;
				}
				$next.show();
				$("#image_status").html('Image ' + i + ' of ' + image_total);
			});
			$('#prev_image').click(function () {
				var $prev = $image.filter(':visible').hide().prev('img');
				i--;
				if($prev.length === 0) {
					$next = $image.last();
					i = image_total;
				}
				$prev.show();
				$("#image_status").html('Image ' + i + ' of ' + image_total);
			});
		}
	});
}
$(document).on('click', '#edit_image', function () {
	var image = $("#image_placeholder img").filter(':visible').attr('src');
	var image_id1 = $("#image_placeholder img").filter(':visible').attr('id');
	var image_id = image_id1.replace('_image', '');
	$('#wPaint').css({
		width: document.getElementById(image_id1).naturalWidth,
		height: document.getElementById(image_id1).naturalHeight
	}).wPaint('resize');
	$('.wPaint-menu-name-main').css({width:579});
	$('.wPaint-menu-name-text').css({width:182,left:0,top:42});
	$('.wPaint-menu-select').css({"overflow-y":"scroll"});
	$('#wPaint').wPaint('image', image);
	$.ajax({
		url: "ajaxchart/image-get/" + image_id,
		dataType: "json",
		type: "POST",
		success: function(data){
			$.each(data, function(key, value){
				$("#image_form :input[name='" + key + "']").val(value);
			});
			$("#image_dialog").dialog('open');
		}
	});
});
$(document).on('click', "#del_image", function() {
	var image_id1 = $("#image_placeholder img").filter(':visible').attr('id');
	var image_id = image_id1.replace('_image', '');
	if(confirm('Are you sure you want to delete this image?')){ 
		$.ajax({
			type: "POST",
			url: "ajaxchart/delete-image",
			data: "image_id=" + image_id,
			success: function(data){
				$.jGrowl(data);
				loadimagepreview();
			}
		});
	}
});
$(document).on('keydown', ':text', function(e){
	if(e.keyCode==13) {
		e.preventDefault();
	}
});
$(document).on('keydown', '.textdump', function(e){
	if(e.keyCode==39) {
		if(e.shiftKey==true) {
			e.preventDefault();
			var id = $(this).attr('id');
			$.ajax({
				type: "POST",
				url: "ajaxsearch/textdump-group/" + id,
				success: function(data){
					$("#textdump_group_html").html('');
					$("#textdump_group_html").append(data);
					$(".edittextgroup").button({text: false, icons: {primary: "ui-icon-pencil"}});
					$(".deletetextgroup").button({text: false, icons: {primary: "ui-icon-trash"}});
					$(".normaltextgroup").button({text: false, icons: {primary: "ui-icon-check"}});
					$('.textdump_group_item_text').editable('destroy');
					$('.textdump_group_item_text').editable({
						toggle:'manual',
						ajaxOptions: {
							headers: {"cache-control":"no-cache"},
							beforeSend: function(request) {
								return request.setRequestHeader("X-CSRF-Token", $("meta[name='token']").attr('content'));
							},
							error: function(xhr) {
								if (xhr.status == "404" ) {
									alert("Route not found!");
									//window.location.replace(noshdata.error);
								} else {
									if(xhr.responseText){
										var response1 = $.parseJSON(xhr.responseText);
										var error = "Error:\nType: " + response1.error.type + "\nMessage: " + response1.error.message + "\nFile: " + response1.error.file;
										alert(error);
									}
								}
							}
						}
					});
					$("#textdump_group_target").val(id);
					$("#textdump_group").dialog("option", "position", { my: 'left top', at: 'right top', of: '#'+id });
					$("#textdump_group").dialog('open');
				}
			});
		}
	}
});
$(document).on('click', '.textdump_group_item', function(){
	var id = $("#textdump_group_target").val();
	var group = $(this).text();
	$("#textdump_group_item").val(group);
	var id1 = $(this).attr('id');
	$("#textdump_group_id").val(id1);
	$.ajax({
		type: "POST",
		url: "ajaxsearch/textdump/" + id,
		data: 'group='+group,
		success: function(data){
			$("#textdump_html").html('');
			$("#textdump_html").append(data);
			$(".edittexttemplate").button({text: false, icons: {primary: "ui-icon-pencil"}});
			$(".deletetexttemplate").button({text: false, icons: {primary: "ui-icon-trash"}});
			$(".normaltexttemplate").button({text: false, icons: {primary: "ui-icon-check"}});
			$('.textdump_item_text').editable('destroy');
			$('.textdump_item_text').editable({
				toggle:'manual',
				ajaxOptions: {
					headers: {"cache-control":"no-cache"},
					beforeSend: function(request) {
						return request.setRequestHeader("X-CSRF-Token", $("meta[name='token']").attr('content'));
					},
					error: function(xhr) {
						if (xhr.status == "404" ) {
							alert("Route not found!");
							//window.location.replace(noshdata.error);
						} else {
							if(xhr.responseText){
								var response1 = $.parseJSON(xhr.responseText);
								var error = "Error:\nType: " + response1.error.type + "\nMessage: " + response1.error.message + "\nFile: " + response1.error.file;
								alert(error);
							}
						}
					}
				}
			});
			$("#textdump_target").val(id);
			$("#textdump").dialog("option", "position", { my: 'left top', at: 'right top', of: '#'+id });
			$("#textdump").dialog('open');
		}
	});
});
$(document).on('click', '.textdump_item', function() {
	if ($(this).find(':first-child').hasClass("ui-state-error") == false) {
		var a = '';
		var id = $("#textdump_target").val();
		var old = $("#"+id).val();
		if ($("#textdump_input").val() == '') {
			if (old != '') {
				a += '\n' + $("#textdump_group_item").val() + ": ";
			} else {
				a += $("#textdump_group_item").val() + ": ";
			}
		}
		a += $(this).text();
		if (old != '') {
			var b = old + '\n' + a;
		} else {
			var b = a;
		}
		$("#"+id).val(b);
		var old1 = $("#textdump_input").val();
		if (old1 != '') {
			var c = old1 + '\n' + a;
		} else {
			var c = a;
		}
		$("#textdump_input").val(c);
		$(this).find(':first-child').addClass("ui-state-error ui-corner-all");
	}
});
$(document).on('click', '.edittextgroup', function(e) {
	var id = $(this).attr('id');
	e.stopPropagation();
	$("#"+id+"_b").editable('show', true);
});
$(document).on('click', '.edittexttemplate', function(e) {
	var id = $(this).attr('id');
	e.stopPropagation();
	$("#"+id+"_span").editable('show', true);
});
$(document).on('click', '.deletetextgroup', function() {
	var id = $(this).attr('id');
	var template_id = id.replace('deletetextgroup_','');
	$.ajax({
		type: "POST",
		url: "ajaxsearch/deletetextdumpgroup/" + template_id,
		success: function(data){
			$("#textgroupdiv_"+template_id).remove();
		}
	});
});
$(document).on('click', '.deletetexttemplate', function() {
	var id = $(this).attr('id');
	var template_id = id.replace('deletetexttemplate_','');
	$.ajax({
		type: "POST",
		url: "ajaxsearch/deletetextdump/" + template_id,
		success: function(data){
			$("#texttemplatediv_"+template_id).remove();
		}
	});
});
$(document).on('click', '.normaltextgroup', function() {
	var id = $("#textdump_group_target").val();
	var a = $(this).val();
	var old = $("#"+id).val();
	if (a != 'No normal values set.') {
		if ($(this).prop('checked')) {
			if (old != '') {
				var b = old + '\n' + a;
			} else {
				var b = a;
			}
			$("#"+id).val(b);
		} else {
			var a1 = a + '  ';
			var c = old.replace(a1,'');
			c = c.replace(a, '');
			$("#" +id).val(c); 
		}
	} else {
		$.jGrowl(a);
	}
});
$(document).on('click', '.normaltexttemplate', function() {
	var id = $(this).attr('id');
	var template_id = id.replace('normaltexttemplate_','');
	if ($(this).prop('checked')) {
		$.ajax({
			type: "POST",
			url: "ajaxsearch/defaulttextdump/" + template_id,
			success: function(data){
				$.jGrowl('Template marked as normal default!');
				$("#textdump_group_html").html('');
				$("#textdump_group_html").append(data);
				$(".edittextgroup").button({text: false, icons: {primary: "ui-icon-pencil"}});
				$(".deletetextgroup").button({text: false, icons: {primary: "ui-icon-trash"}});
				$(".normaltextgroup").button({text: false, icons: {primary: "ui-icon-check"}});
				$('.textdump_group_item_text').editable('destroy');
				$('.textdump_group_item_text').editable({
					toggle:'manual',
					ajaxOptions: {
						headers: {"cache-control":"no-cache"},
						beforeSend: function(request) {
							return request.setRequestHeader("X-CSRF-Token", $("meta[name='token']").attr('content'));
						},
						error: function(xhr) {
							if (xhr.status == "404" ) {
								alert("Route not found!");
								//window.location.replace(noshdata.error);
							} else {
								if(xhr.responseText){
									var response1 = $.parseJSON(xhr.responseText);
									var error = "Error:\nType: " + response1.error.type + "\nMessage: " + response1.error.message + "\nFile: " + response1.error.file;
									alert(error);
								}
							}
						}
					}
				});
			}
		});
	} else {
		$.ajax({
			type: "POST",
			url: "ajaxsearch/undefaulttextdump/" + template_id,
			success: function(data){
				$.jGrowl('Template unmarked as normal default!');
				$("#textdump_group_html").html('');
				$("#textdump_group_html").append(data);
				$(".edittextgroup").button({text: false, icons: {primary: "ui-icon-pencil"}});
				$(".deletetextgroup").button({text: false, icons: {primary: "ui-icon-trash"}});
				$(".normaltextgroup").button({text: false, icons: {primary: "ui-icon-check"}});
				$('.textdump_group_item_text').editable('destroy');
				$('.textdump_group_item_text').editable({
					toggle:'manual',
					ajaxOptions: {
						headers: {"cache-control":"no-cache"},
						beforeSend: function(request) {
							return request.setRequestHeader("X-CSRF-Token", $("meta[name='token']").attr('content'));
						},
						error: function(xhr) {
							if (xhr.status == "404" ) {
								alert("Route not found!");
								//window.location.replace(noshdata.error);
							} else {
								if(xhr.responseText){
									var response1 = $.parseJSON(xhr.responseText);
									var error = "Error:\nType: " + response1.error.type + "\nMessage: " + response1.error.message + "\nFile: " + response1.error.file;
									alert(error);
								}
							}
						}
					}
				});
			}
		});
	}
});
$(document).on('keydown', '#textdump_group_add', function(e){
	if(e.keyCode==13) {
		e.preventDefault();
		var a = $("#textdump_group_add").val();
		if (a != '') {
			var str = $("#textdump_group_form").serialize();
			if(str){
				$.ajax({
					type: "POST",
					url: "ajaxsearch/add-text-template-group",
					data: str,
					dataType: 'json',
					success: function(data){
						$.jGrowl(data.message);
						var app = '<div id="textgroupdiv_' + data.id + '" style="width:99%" class="pure-g"><div class="pure-u-3-4"><input type="checkbox" id="normaltextgroup_' + data.id + '" class="normaltextgroup" value="No normal values set."><label for="normaltextgroup_' + data.id + '">Normal</label> <b id="edittextgroup_' + data.id + '_b" class="textdump_group_item textdump_group_item_text" data-type="text" data-pk="' + data.id + '" data-name="group" data-url="ajaxsearch/edit-text-template-group" data-title="Group">' + a + '</b></div><div class="pure-u-1-4" style="overflow:hidden"><div style="width:200px;"><button type="button" id="edittextgroup_' + data.id + '" class="edittextgroup">Edit</button><button type="button" id="deletetextgroup_' + data.id + '" class="deletetextgroup">Remove</button></div></div><hr class="ui-state-default"/></div>';
						$("#textdump_group_html").append(app);
						$(".edittextgroup").button({text: false, icons: {primary: "ui-icon-pencil"}});
						$(".deletetextgroup").button({text: false, icons: {primary: "ui-icon-trash"}});
						$(".normaltextgroup").button({text: false, icons: {primary: "ui-icon-check"}});
						$('.textdump_group_item_text').editable('destroy');
						$('.textdump_group_item_text').editable({
							toggle:'manual',
							ajaxOptions: {
								headers: {"cache-control":"no-cache"},
								beforeSend: function(request) {
									return request.setRequestHeader("X-CSRF-Token", $("meta[name='token']").attr('content'));
								},
								error: function(xhr) {
									if (xhr.status == "404" ) {
										alert("Route not found!");
										//window.location.replace(noshdata.error);
									} else {
										if(xhr.responseText){
											var response1 = $.parseJSON(xhr.responseText);
											var error = "Error:\nType: " + response1.error.type + "\nMessage: " + response1.error.message + "\nFile: " + response1.error.file;
											alert(error);
										}
									}
								}
							}
						});
						$("#textdump_group_add").val('');
					}
				});
			} else {
				$.jGrowl("Please complete the form");
			}
		} else {
			$.jGrowl("No text to add!");
		}
	}
});
$(document).on('keydown', '#textdump_add', function(e){
	if(e.keyCode==13) {
		e.preventDefault();
		var a = $("#textdump_add").val();
		if (a != '') {
			var str = $("#textdump_form").serialize();
			if(str){
				$.ajax({
					type: "POST",
					url: "ajaxsearch/add-text-template",
					data: str,
					dataType: 'json',
					success: function(data){
						$.jGrowl(data.message);
						var app = '<div id="texttemplatediv_' + data.id + '" style="width:99%" class="pure-g"><div class="textdump_item pure-u-2-3"><span id="edittexttemplate_' + data.id + '_span" class="textdump_item_text ui-state-error" data-type="text" data-pk="' + data.id + '" data-name="array" data-url="ajaxsearch/edit-text-template" data-title="Item">' + a + '</span></div><div class="pure-u-1-3" style="overflow:hidden"><div style="width:400px;"><input type="checkbox" id="normaltexttemplate_' + data.id + '" class="normaltexttemplate" value="normal"><label for="normaltexttemplate_' + data.id + '">Mark as Default Normal</label><button type="button" id="edittexttemplate_' + data.id + '" class="edittexttemplate">Edit</button><button type="button" id="deletetexttemplate_' + data.id + '" class="deletetexttemplate">Remove</button></div></div><hr class="ui-state-default"/></div>';
						$("#textdump_html").append(app);
						$(".edittexttemplate").button({text: false, icons: {primary: "ui-icon-pencil"}});
						$(".deletetexttemplate").button({text: false, icons: {primary: "ui-icon-trash"}});
						$(".normaltexttemplate").button({text: false, icons: {primary: "ui-icon-check"}});
						$('.textdump_item_text').editable('destroy');
						$('.textdump_item_text').editable({
							toggle:'manual',
							ajaxOptions: {
								headers: {"cache-control":"no-cache"},
								beforeSend: function(request) {
									return request.setRequestHeader("X-CSRF-Token", $("meta[name='token']").attr('content'));
								},
								error: function(xhr) {
									if (xhr.status == "404" ) {
										alert("Route not found!");
										//window.location.replace(noshdata.error);
									} else {
										if(xhr.responseText){
											var response1 = $.parseJSON(xhr.responseText);
											var error = "Error:\nType: " + response1.error.type + "\nMessage: " + response1.error.message + "\nFile: " + response1.error.file;
											alert(error);
										}
									}
								}
							}
						});
						var a1 = '';
						if ($("#textdump_input").val() == '') {
							a1 += '\n' + $("#textdump_group_item").val() + ": ";
						}
						a1 += a;
						var id = $("#textdump_target").val();
						var old = $("#"+id).val();
						if (old != '') {
							var b = old + '\n' + a1;
						} else {
							var b = a1;
						}
						$("#"+id).val(b);
						var old1 = $("#textdump_input").val();
						if (old1 != '') {
							var c = old1 + '\n' + a1;
						} else {
							var c = a1;
						}
						$("#textdump_input").val(c);
						$("#textdump_add").val('');
					}
				});
			} else {
				$.jGrowl("Please complete the form");
			}
		} else {
			$.jGrowl("No text to add!");
		}
	}
});
$(document).on("change", "#hippa_address_id", function () {
	var a = $(this).find("option:selected").first().text();
	if (a != 'Select Provider') {
		$("#hippa_provider1").val(a);
	} else {
		$("#hippa_provider1").val('');
	}
});
$(document).on('click', "#hippa_address_id2", function (){
	var id = $("#hippa_address_id").val();
	if(id){
		$("#print_to_dialog").dialog("option", "title", "Edit Provider");
		$.ajax({
			type: "POST",
			url: "ajaxsearch/orders-provider1",
			data: "address_id=" + id,
			dataType: "json",
			success: function(data){
				$.each(data, function(key, value){
					$("#print_to_form :input[name='" + key + "']").val(value);
				});
			}
		});
	} else {
		$("#print_to_dialog").dialog("option", "title", "Add Provider");
	}
	$("#print_to_dialog").dialog('open');
});
$(document).on('click', '.assessment_clear', function(){
	var id = $(this).attr('id');
	var parts = id.split('_');
	console.log(parts[2]);
	$("#assessment_" + parts[2]).val('');
	$("#assessment_icd" + parts[2]).val('');
	$("#assessment_icd" + parts[2] + "_div").html('');
	$("#assessment_icd" + parts[2] + "_div_button").hide();
});
function textdump(elem) {
	var id = $(elem).attr('id');
	$.ajax({
		type: "POST",
		url: "ajaxsearch/textdump-group/" + id,
		success: function(data){
			$("#textdump_group_html").html('');
			$("#textdump_group_html").append(data);
			$(".edittextgroup").button({text: false, icons: {primary: "ui-icon-pencil"}});
			$(".deletetextgroup").button({text: false, icons: {primary: "ui-icon-trash"}});
			$(".normaltextgroup").button({text: false, icons: {primary: "ui-icon-check"}});
			$('.textdump_group_item_text').editable('destroy');
			$('.textdump_group_item_text').editable({
				toggle:'manual',
				ajaxOptions: {
					headers: {"cache-control":"no-cache"},
					beforeSend: function(request) {
						return request.setRequestHeader("X-CSRF-Token", $("meta[name='token']").attr('content'));
					},
					error: function(xhr) {
						if (xhr.status == "404" ) {
							alert("Route not found!");
							//window.location.replace(noshdata.error);
						} else {
							if(xhr.responseText){
								var response1 = $.parseJSON(xhr.responseText);
								var error = "Error:\nType: " + response1.error.type + "\nMessage: " + response1.error.message + "\nFile: " + response1.error.file;
								alert(error);
							}
						}
					}
				}
			});
			$("#textdump_group_target").val(id);
			$("#textdump_group").dialog("option", "position", { my: 'left top', at: 'right top', of: '#'+id });
			$("#textdump_group").dialog('open');
		}
	});
}
/*! jstz - v1.0.4 - 2012-12-12 */
(function(e){var t=function(){"use strict";var e="s",n=function(e){var t=-e.getTimezoneOffset();return t!==null?t:0},r=function(e,t,n){var r=new Date;return e!==undefined&&r.setFullYear(e),r.setDate(n),r.setMonth(t),r},i=function(e){return n(r(e,0,2))},s=function(e){return n(r(e,5,2))},o=function(e){var t=e.getMonth()>7?s(e.getFullYear()):i(e.getFullYear()),r=n(e);return t-r!==0},u=function(){var t=i(),n=s(),r=i()-s();return r<0?t+",1":r>0?n+",1,"+e:t+",0"},a=function(){var e=u();return new t.TimeZone(t.olson.timezones[e])};return{determine:a,date_is_dst:o}}();t.TimeZone=function(e){"use strict";var n=null,r=function(){return n},i=function(){var e=t.olson.ambiguity_list[n],r=e.length,i=0,s=e[0];for(;i<r;i+=1){s=e[i];if(t.date_is_dst(t.olson.dst_start_dates[s])){n=s;return}}},s=function(){return typeof t.olson.ambiguity_list[n]!="undefined"};return n=e,s()&&i(),{name:r}},t.olson={},t.olson.timezones={"-720,0":"Etc/GMT+12","-660,0":"Pacific/Pago_Pago","-600,1":"America/Adak","-600,0":"Pacific/Honolulu","-570,0":"Pacific/Marquesas","-540,0":"Pacific/Gambier","-540,1":"America/Anchorage","-480,1":"America/Los_Angeles","-480,0":"Pacific/Pitcairn","-420,0":"America/Phoenix","-420,1":"America/Denver","-360,0":"America/Guatemala","-360,1":"America/Chicago","-360,1,s":"Pacific/Easter","-300,0":"America/Bogota","-300,1":"America/New_York","-270,0":"America/Caracas","-240,1":"America/Halifax","-240,0":"America/Santo_Domingo","-240,1,s":"America/Santiago","-210,1":"America/St_Johns","-180,1":"America/Godthab","-180,0":"America/Argentina/Buenos_Aires","-180,1,s":"America/Montevideo","-120,0":"Etc/GMT+2","-120,1":"Etc/GMT+2","-60,1":"Atlantic/Azores","-60,0":"Atlantic/Cape_Verde","0,0":"Etc/UTC","0,1":"Europe/London","60,1":"Europe/Berlin","60,0":"Africa/Lagos","60,1,s":"Africa/Windhoek","120,1":"Asia/Beirut","120,0":"Africa/Johannesburg","180,0":"Asia/Baghdad","180,1":"Europe/Moscow","210,1":"Asia/Tehran","240,0":"Asia/Dubai","240,1":"Asia/Baku","270,0":"Asia/Kabul","300,1":"Asia/Yekaterinburg","300,0":"Asia/Karachi","330,0":"Asia/Kolkata","345,0":"Asia/Kathmandu","360,0":"Asia/Dhaka","360,1":"Asia/Omsk","390,0":"Asia/Rangoon","420,1":"Asia/Krasnoyarsk","420,0":"Asia/Jakarta","480,0":"Asia/Shanghai","480,1":"Asia/Irkutsk","525,0":"Australia/Eucla","525,1,s":"Australia/Eucla","540,1":"Asia/Yakutsk","540,0":"Asia/Tokyo","570,0":"Australia/Darwin","570,1,s":"Australia/Adelaide","600,0":"Australia/Brisbane","600,1":"Asia/Vladivostok","600,1,s":"Australia/Sydney","630,1,s":"Australia/Lord_Howe","660,1":"Asia/Kamchatka","660,0":"Pacific/Noumea","690,0":"Pacific/Norfolk","720,1,s":"Pacific/Auckland","720,0":"Pacific/Tarawa","765,1,s":"Pacific/Chatham","780,0":"Pacific/Tongatapu","780,1,s":"Pacific/Apia","840,0":"Pacific/Kiritimati"},t.olson.dst_start_dates=function(){"use strict";var e=new Date(2010,6,15,1,0,0,0);return{"America/Denver":new Date(2011,2,13,3,0,0,0),"America/Mazatlan":new Date(2011,3,3,3,0,0,0),"America/Chicago":new Date(2011,2,13,3,0,0,0),"America/Mexico_City":new Date(2011,3,3,3,0,0,0),"America/Asuncion":new Date(2012,9,7,3,0,0,0),"America/Santiago":new Date(2012,9,3,3,0,0,0),"America/Campo_Grande":new Date(2012,9,21,5,0,0,0),"America/Montevideo":new Date(2011,9,2,3,0,0,0),"America/Sao_Paulo":new Date(2011,9,16,5,0,0,0),"America/Los_Angeles":new Date(2011,2,13,8,0,0,0),"America/Santa_Isabel":new Date(2011,3,5,8,0,0,0),"America/Havana":new Date(2012,2,10,2,0,0,0),"America/New_York":new Date(2012,2,10,7,0,0,0),"Asia/Beirut":new Date(2011,2,27,1,0,0,0),"Europe/Helsinki":new Date(2011,2,27,4,0,0,0),"Europe/Istanbul":new Date(2011,2,28,5,0,0,0),"Asia/Damascus":new Date(2011,3,1,2,0,0,0),"Asia/Jerusalem":new Date(2011,3,1,6,0,0,0),"Asia/Gaza":new Date(2009,2,28,0,30,0,0),"Africa/Cairo":new Date(2009,3,25,0,30,0,0),"Pacific/Auckland":new Date(2011,8,26,7,0,0,0),"Pacific/Fiji":new Date(2010,11,29,23,0,0,0),"America/Halifax":new Date(2011,2,13,6,0,0,0),"America/Goose_Bay":new Date(2011,2,13,2,1,0,0),"America/Miquelon":new Date(2011,2,13,5,0,0,0),"America/Godthab":new Date(2011,2,27,1,0,0,0),"Europe/Moscow":e,"Asia/Yekaterinburg":e,"Asia/Omsk":e,"Asia/Krasnoyarsk":e,"Asia/Irkutsk":e,"Asia/Yakutsk":e,"Asia/Vladivostok":e,"Asia/Kamchatka":e,"Europe/Minsk":e,"Australia/Perth":new Date(2008,10,1,1,0,0,0)}}(),t.olson.ambiguity_list={"America/Denver":["America/Denver","America/Mazatlan"],"America/Chicago":["America/Chicago","America/Mexico_City"],"America/Santiago":["America/Santiago","America/Asuncion","America/Campo_Grande"],"America/Montevideo":["America/Montevideo","America/Sao_Paulo"],"Asia/Beirut":["Asia/Beirut","Europe/Helsinki","Europe/Istanbul","Asia/Damascus","Asia/Jerusalem","Asia/Gaza"],"Pacific/Auckland":["Pacific/Auckland","Pacific/Fiji"],"America/Los_Angeles":["America/Los_Angeles","America/Santa_Isabel"],"America/New_York":["America/Havana","America/New_York"],"America/Halifax":["America/Goose_Bay","America/Halifax"],"America/Godthab":["America/Miquelon","America/Godthab"],"Asia/Dubai":["Europe/Moscow"],"Asia/Dhaka":["Asia/Yekaterinburg"],"Asia/Jakarta":["Asia/Omsk"],"Asia/Shanghai":["Asia/Krasnoyarsk","Australia/Perth"],"Asia/Tokyo":["Asia/Irkutsk"],"Australia/Brisbane":["Asia/Yakutsk"],"Pacific/Noumea":["Asia/Vladivostok"],"Pacific/Tarawa":["Asia/Kamchatka"],"Africa/Johannesburg":["Asia/Gaza","Africa/Cairo"],"Asia/Baghdad":["Europe/Minsk"]},typeof exports!="undefined"?exports.jstz=t:e.jstz=t})(this);/*!
 * jQuery Cookie Plugin v1.4.0
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD
		define(['jquery'], factory);
	} else if (typeof exports === 'object') {
		// CommonJS
		factory(require('jquery'));
	} else {
		// Browser globals
		factory(jQuery);
	}
}(function ($) {

	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			// If we can't parse the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
			return config.json ? JSON.parse(s) : s;
		} catch(e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function (key, value, options) {

		// Write

		if (value !== undefined && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setTime(+t + days * 864e+5);
			}

			return (document.cookie = [
				encode(key), '=', stringifyCookieValue(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split('; ') : [];

		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if (key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if (!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) === undefined) {
			return false;
		}

		// Must not alter options, thus extending a fresh object...
		$.cookie(key, '', $.extend({}, options, { expires: -1 }));
		return !$.cookie(key);
	};

}));
(function (root, factory) {

        if (typeof exports === 'object') {
            module.exports = factory();
        }
        else if (typeof define === 'function' && define.amd) {
            define(factory);
        }
        else {
            root.BlueButton = factory();
        }

    }(this, function () {

        /* BlueButton.js -- 0.0.19 */

/*
 * core.js - Essential and shared functionality.
 */

var Core = function () {
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parses an HL7 date in String form and creates a new Date object.
   * 
   * TODO: CCDA dates can be in form:
   *   <effectiveTime value="20130703094812"/>
   * ...or:
   *   <effectiveTime>
   *     <low value="19630617120000"/>
   *     <high value="20110207100000"/>
   *   </effectiveTime>
   * When latter, parseDate will not be given type `String`, but `null` and
   * log the error "date is not a string".
   */
  var parseDate = function (str) {
    if (!str || typeof str !== "string") {
      // console.log("Error: date is not a string");
      return null;
    }
    var year = str.substr(0, 4);
    // months start at 0, because why not
    var month = parseInt(str.substr(4, 2), 10) - 1;
    var day = str.substr(6, 2);
    return new Date(year, month, day);
  };
  
  /*
   * Removes all `null` properties from an object.
   */
  var trim = function (o) {
    var y;
    for (var x in o) {
      y = o[x];
      // if (y === null || (y instanceof Object && Object.keys(y).length == 0)) {
      if (y === null) {
        delete o[x];
      }
      if (y instanceof Object) y = trim(y);
    }
    return o;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parseDate: parseDate,
    trim: trim
  };
  
}();
;

/*
 * xml.js - XML parsing functions.
 */

var XML = function () {
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////

  /*
   * A function used to wrap DOM elements in an object so methods can be added
   * to the element object. IE8 does not allow methods to be added directly to
   * DOM objects.
   */
  var wrapElement = function (el) {
    function wrapElementHelper(currentEl) {
      return {
        el: currentEl,
        template: template,
        tag: tag,
        elsByTag: elsByTag,
        attr: attr,
        val: val,
        isEmpty: isEmpty
      }
    }
    
    // el is an array of elements
    if (el.length) {
      var els = [];
      for (var i = 0; i < el.length; i++) {
        els.push(wrapElementHelper(el[i]));
      }
      return els;
    
    // el is a single element
    } else {
      return wrapElementHelper(el);
    }
  };
  
  /*
   * Find element by tag name, then attribute value.
   */
  var tagAttrVal = function (el, tag, attr, value) {
    el = el.getElementsByTagName(tag);
    for (var i = 0; i < el.length; i++) {
      if (el[i].getAttribute(attr) === value) {
        return el[i];
      }
    }
  };
  
  /*
   * Search for a template ID, and return its parent element.
   * Example:
   *   <templateId root="2.16.840.1.113883.10.20.22.2.17"/>
   * Can be found using:
   *   el = dom.template('2.16.840.1.113883.10.20.22.2.17');
   */
  var template = function (templateId) {
    var el = tagAttrVal(this.el, 'templateId', 'root', templateId);
    if (!el) {
      return emptyEl();
    } else {
      return wrapElement(el.parentNode);
    }
  };
  
  /*
   * Search for the first occurrence of an element by tag name.
   */
  var tag = function (tag) {
    var el = this.el.getElementsByTagName(tag)[0];
    if (!el) {
      return emptyEl();
    } else {
      return wrapElement(el);
    }
  };
  
  /*
   * Search for all elements by tag name.
   */
  var elsByTag = function (tag) {
    return wrapElement(this.el.getElementsByTagName(tag));
  };
  
  /*
   * Retrieve the element's attribute value. Example:
   *   value = el.attr('displayName');
   */
  var attr = function (attr) {
    if (!this.el) { return null; }
    // Workaround a bug in jsdom https://github.com/tmpvar/jsdom/issues/651
    attr = isNode ? attr.toLowerCase() : attr;
    return this.el.getAttribute(attr);
  };
  
  /*
   * Retrieve the element's value. For example, if the element is:
   *   <city>Madison</city>
   * Use:
   *   value = el.tag('city').val();
   */
  var val = function () {
    if (!this.el) { return null; }
    try {
      return this.el.childNodes[0].nodeValue;
    } catch (e) {
      return null;
    }
  };
  
  /*
   * Creates and returns an empty DOM element with tag name "empty":
   *   <empty></empty>
   */
  var emptyEl = function () {
    var el = doc.createElement('empty');
    return wrapElement(el);
  };
  
  /*
   * Determines if the element is empty, i.e.:
   *   <empty></empty>
   * This element is created by function `emptyEL`.
   */
  var isEmpty = function () {
    if (this.el.tagName.toLowerCase() == 'empty') {
      return true;
    } else {
      return false;
    }
  };
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Cross-browser XML parsing supporting IE8+ and Node.js.
   */
  var parseXML = function (data) {
    // XML data must be a string
    if (!data || typeof data !== "string") {
      console.log("BB Error: XML data is not a string");
      return null;
    }
    
    var xml;
    
    // Node
    if (isNode) {
      xml = jsdom.jsdom(data, jsdom.level(1, "core"));
      
    // Browser
    } else {
      
      // Standard parser
      if (window.DOMParser) {
        parser = new DOMParser();
        xml = parser.parseFromString(data, "text/xml");
        
      // IE
      } else {
        try {
          xml = new ActiveXObject("Microsoft.XMLDOM");
          xml.async = "false";
          xml.loadXML(data);
        } catch (e) {
          console.log("BB ActiveX Exception: Could not parse XML");
        }
      }
    }
    
    if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
      console.log("BB Error: Could not parse XML");
      return null;
    }
    
    return wrapElement(xml);
  };
  
  // Init
  ///////////////////////////
  
  // Establish the root object, `window` in the browser, or `global` in Node.
  var root = this,
      jsdom = undefined,
      isNode = false,
      doc = root.document; // Will be `undefined` if we're in Node

  // Check if we're in Node. If so, pull in `jsdom` so we can simulate the DOM.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      isNode = true;
      jsdom = require("jsdom");
      doc = new (jsdom.level(1, "core").Document)();
    }
  }
  
  // Reveal public methods
  return {
    parseXML: parseXML
  };
  
}();
;

/*
 * codes.js
 */

var Codes = function () {
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////

  /*
   * Consistently parse a CCDA code.
   */
  var parse = function (el) {};
  
  /*
   * Administrative Gender (HL7 V3)
   * http://phinvads.cdc.gov/vads/ViewValueSet.action?id=8DE75E17-176B-DE11-9B52-0015173D1785
   * OID: 2.16.840.1.113883.1.11.1
   */
  var gender = function (code) {
    var map = {
      'F': 'female',
      'M': 'male',
      'UN': 'undifferentiated'
    };
    
    return map[code] || null;
  };
  
  /*
   * Marital Status (HL7)
   * http://phinvads.cdc.gov/vads/ViewValueSet.action?id=46D34BBC-617F-DD11-B38D-00188B398520
   * OID: 2.16.840.1.114222.4.11.809
   */
  var maritalStatus = function (code) {
    var map = {
      'N': 'annulled',
      'C': 'common law',
      'D': 'divorced',
      'P': 'domestic partner',
      'I': 'interlocutory',
      'E': 'legally separated',
      'G': 'living together',
      'M': 'married',
      'O': 'other',
      'R': 'registered domestic partner',
      'A': 'separated',
      'S': 'single',
      'U': 'unknown',
      'B': 'unmarried',
      'T': 'unreported',
      'W': 'widowed'
    };
    
    return map[code] || null;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    gender: gender,
    maritalStatus: maritalStatus
  };
  
}();
;

/*
 * c32.js
 */

var C32 = function () {
  
  // Dependancies
  ///////////////////////////
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
  };
  
}();
;

/*
 * allergies.js
 */

C32.Allergies = function () {
  
  // Dependancies
  ///////////////////////////
  var parseDate = Core.parseDate;
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parse the allergies CCDA XML section.
   */
  var parse = function (xmlDOM) {
    var data = [], el, entries, entry;
    
    el = xmlDOM.template('2.16.840.1.113883.3.88.11.83.102');

    entries = el.elsByTag('entry');
    
    for (var i = 0; i < entries.length; i++) {
      entry = entries[i];
      
      el = entry.tag('effectiveTime');
      var start_date = parseDate(el.tag('low').attr('value')),
          end_date = parseDate(el.tag('high').attr('value'));
      
      el = entry.template('2.16.840.1.113883.3.88.11.83.6').tag('code');
      var name = el.attr('displayName'),
          code = el.attr('code'),
          code_system = el.attr('codeSystem'),
          code_system_name = el.attr('codeSystemName');
      
      // value => reaction_type
      el = entry.template('2.16.840.1.113883.3.88.11.83.6').tag('value');
      var reaction_type_name = el.attr('displayName'),
          reaction_type_code = el.attr('code'),
          reaction_type_code_system = el.attr('codeSystem'),
          reaction_type_code_system_name = el.attr('codeSystemName');
      
      // reaction
      el = entry.template('2.16.840.1.113883.10.20.1.54').tag('value');
      var reaction_name = el.attr('displayName'),
          reaction_code = el.attr('code'),
          reaction_code_system = el.attr('codeSystem');
      
      // severity
      el = entry.template('2.16.840.1.113883.10.20.1.55').tag('value');
      var severity = el.attr('displayName');
      
      // participant => allergen
      el = entry.tag('participant').tag('code');
      var allergen_name = el.attr('displayName'),
          allergen_code = el.attr('code'),
          allergen_code_system = el.attr('codeSystem'),
          allergen_code_system_name = el.attr('codeSystemName');
      
      // status
      el = entry.template('2.16.840.1.113883.10.20.1.39').tag('value');
      var status = el.attr('displayName');
      
      data.push({
        date_range: {
          start: start_date,
          end: end_date
        },
        name: name,
        code: code,
        code_system: code_system,
        code_system_name: code_system_name,
        status: status,
        severity: severity,
        reaction: {
          name: reaction_name,
          code: reaction_code,
          code_system: reaction_code_system
        },
        reaction_type: {
          name: reaction_type_name,
          code: reaction_type_code,
          code_system: reaction_type_code_system,
          code_system_name: reaction_type_code_system_name
        },
        allergen: {
          name: allergen_name,
          code: allergen_code,
          code_system: allergen_code_system,
          code_system_name: allergen_code_system_name
        }
      });
    }
    
    return data;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parse: parse
  };
  
}();
;

/*
 * demographics.js
 */

C32.Demographics = function () {
  
  // Dependancies
  ///////////////////////////
  var parseDate = Core.parseDate;
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parse the demographics CCDA XML section.
   */
  var parse = function (xmlDOM) {
    var data = {}, el, els, patient;
    
    el = xmlDOM.template('2.16.840.1.113883.3.88.11.32.1');
    patient = el.tag('patientRole');
    el = patient.tag('patient').tag('name');
    var prefix = el.tag('prefix').val();
    
    els = el.elsByTag('given');
    var given = [];
    
    for (var i = 0; i < els.length; i++) {
      given.push(els[i].val());
    }
    
    var family = el.tag('family').val();
    
    el = patient.tag('patient');
    var dob = parseDate(el.tag('birthTime').attr('value')),
        gender = Codes.gender(el.tag('administrativeGenderCode').attr('code')),
        marital_status = Codes.maritalStatus(el.tag('maritalStatusCode').attr('code'));
    
    el = patient.tag('addr');
    els = el.elsByTag('streetAddressLine');
    var street = [];
    
    for (var i = 0; i < els.length; i++) {
      street.push(els[i].val());
    }
    
    var city = el.tag('city').val(),
        state = el.tag('state').val(),
        zip = el.tag('postalCode').val(),
        country = el.tag('country').val();
    
    el = patient.tag('telecom');
    var home = el.attr('value'),
        work = null,
        mobile = null;
    
    var email = null;
    
    var language = patient.tag('languageCommunication').tag('languageCode').attr('code'),
        race = patient.tag('raceCode').attr('displayName'),
        ethnicity = patient.tag('ethnicGroupCode').attr('displayName'),
        religion = patient.tag('religiousAffiliationCode').attr('displayName');
    
    el = patient.tag('birthplace');
    var birthplace_state = el.tag('state').val(),
        birthplace_zip = el.tag('postalCode').val(),
        birthplace_country = el.tag('country').val();
    
    el = patient.tag('guardian');
    var guardian_relationship = el.tag('code').attr('displayName'),
        guardian_home = el.tag('telecom').attr('value');
    el = el.tag('guardianPerson');
    
    els = el.elsByTag('given');
    var guardian_given = [];
    
    for (var i = 0; i < els.length; i++) {
      guardian_given.push(els[i].val());
    }
    
    var guardian_family = el.tag('family').val();
    
    el = patient.tag('guardian').tag('addr');
    
    els = el.elsByTag('streetAddressLine');
    var guardian_street = [];
    
    for (var i = 0; i < els.length; i++) {
      guardian_street.push(els[i].val());
    }
    
    var guardian_city = el.tag('city').val(),
        guardian_state = el.tag('state').val(),
        guardian_zip = el.tag('postalCode').val(),
        guardian_country = el.tag('country').val();
    
    el = patient.tag('providerOrganization');
    var provider_organization = el.tag('name').val(),
        provider_phone = el.tag('telecom').attr('value');
    
    els = el.elsByTag('streetAddressLine');
    var provider_street = [];
    
    for (var i = 0; i < els.length; i++) {
      provider_street.push(els[i].val());
    }
    
    var provider_city = el.tag('city').val(),
        provider_state = el.tag('state').val(),
        provider_zip = el.tag('postalCode').val(),
        provider_country = el.tag('country').val();
    
    data = {
      name: {
        prefix: prefix,
        given: given,
        family: family
      },
      dob: dob,
      gender: gender,
      marital_status: marital_status,
      address: {
       street: street,
        city: city,
        state: state,
        zip: zip,
        country: country
      },
      phone: {
        home: home,
        work: work,
        mobile: mobile
      },
      email: email,
      language: language,
      race: race,
      ethnicity: ethnicity,
      religion: religion,
      birthplace: {
        state: birthplace_state,
        zip: birthplace_zip,
        country: birthplace_country
      },
      guardian: {
        name: {
          given: guardian_given,
          family: guardian_family
        },
        relationship: guardian_relationship,
        address: {
          street: guardian_street,
          city: guardian_city,
          state: guardian_state,
          zip: guardian_zip,
          country: guardian_country
        },
        phone: {
          home: guardian_home
        }
      },
      provider: {
        organization: provider_organization,
        phone: provider_phone,
        address: {
          street: provider_street,
          city: provider_city,
          state: provider_state,
          zip: provider_zip,
          country: provider_country
        }
      }
    };
    
    return data;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parse: parse
  };
  
}();
;

/*
 * encounters.js
 */

C32.Encounters = function () {
  
  // Dependancies
  ///////////////////////////
  var parseDate = Core.parseDate;
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parse the encounters CCDA XML section.
   */
  var parse = function (xmlDOM) {
    var data = [], el, els, entries, entry;
    
    el = xmlDOM.template('2.16.840.1.113883.3.88.11.83.127');

    entries = el.elsByTag('entry');
    
    for (var i = 0; i < entries.length; i++) {
      entry = entries[i];
      
      var date = parseDate(entry.tag('effectiveTime').attr('value'));
      if (!date) {
        var date = parseDate(entry.tag('effectiveTime').tag('low').attr('value'));
      }
      
      el = entry.tag('code');
      var name = el.attr('displayName'),
          code = el.attr('code'),
          code_system = el.attr('codeSystem'),
          code_system_name = el.attr('codeSystemName'),
          code_system_version = el.attr('codeSystemVersion');
      
      // finding
      el = entry.tag('value');
      var finding_name = el.attr('displayName'),
          finding_code = el.attr('code'),
          finding_code_system = el.attr('codeSystem');
      
      // translation
      el = entry.tag('translation');
      var translation_name = el.attr('displayName'),
          translation_code = el.attr('code'),
          translation_code_system = el.attr('codeSystem'),
          translation_code_system_name = el.attr('codeSystemName');
      
      // performer
      el = entry.tag('performer');
      var performer_name = el.tag('name').val(),
          performer_code = el.attr('code'),
          performer_code_system = el.attr('codeSystem'),
          performer_code_system_name = el.attr('codeSystemName');

      // participant => location
      el = entry.tag('participant');
      var organization = el.tag('name').val();
      
      els = el.elsByTag('streetAddressLine');
      street = [];
      
      for (var j = 0; j < els.length; j++) {
        street.push(els[j].val());
      }
      
      var city = el.tag('city').val(),
          state = el.tag('state').val(),
          zip = el.tag('postalCode').val(),
          country = el.tag('country').val();
      
      data.push({
        date: date,
        name: name,
        code: code,
        code_system: code_system,
        code_system_name: code_system_name,
        code_system_version: code_system_version,
        finding: {
          name: finding_name,
          code: finding_code,
          code_system: finding_code_system
        },
        translation: {
          name: translation_name,
          code: translation_code,
          code_system: translation_code_system,
          code_system_name: translation_code_system_name
        },
        performer: {
          name: performer_name,
          code: performer_code,
          code_system: performer_code_system,
          code_system_name: performer_code_system_name
        },
        location: {
          organization: organization,
          street: street,
          city: city,
          state: state,
          zip: zip,
          country: country
        }
      });
    }
    
    return data;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parse: parse
  };
  
}();
;

/*
 * immunizations.js
 */

C32.Immunizations = function () {
  
  // Dependancies
  ///////////////////////////
  var parseDate = Core.parseDate;
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parse the immunizations CCDA XML section.
   */
  var parse = function (xmlDOM) {
    var data = [], el, entries, entry;
    
    el = xmlDOM.template('2.16.840.1.113883.3.88.11.83.117');

    entries = el.elsByTag('entry');
    
    for (var i = 0; i < entries.length; i++) {
      entry = entries[i];
      
      // date
      el = entry.tag('effectiveTime');
      var date = parseDate(el.attr('value'));
      
      // product
      el = entry.template('2.16.840.1.113883.10.20.1.53').tag('code');
      var product_name = el.attr('displayName'),
          product_code = el.attr('code'),
          product_code_system = el.attr('codeSystem'),
          product_code_system_name = el.attr('codeSystemName');
      
      // translation
      el = entry.template('2.16.840.1.113883.10.20.1.53').tag('translation');
      var translation_name = el.attr('displayName'),
          translation_code = el.attr('code'),
          translation_code_system = el.attr('codeSystem'),
          translation_code_system_name = el.attr('codeSystemName');
      
      // route
      el = entry.tag('routeCode');
      var route_name = el.attr('displayName'),
          route_code = el.attr('code'),
          route_code_system = el.attr('codeSystem'),
          route_code_system_name = el.attr('codeSystemName');
      
      // instructions
      el = entry.template('2.16.840.1.113883.10.20.1.49');
      var instructions_text = el.tag('text').val();
      el = el.tag('code');
      var education_name = el.attr('displayName'),
          education_code = el.attr('code'),
          education_code_system = el.attr('codeSystem');
      
      data.push({
        date: date,
        product: {
          name: product_name,
          code: product_code,
          code_system: product_code_system,
          code_system_name: product_code_system_name,
          translation: {
            name: translation_name,
            code: translation_code,
            code_system: translation_code_system,
            code_system_name: translation_code_system_name
          }
        },
        route: {
          name: route_name,
          code: route_code,
          code_system: route_code_system,
          code_system_name: route_code_system_name
        },
        instructions: instructions_text,
        education_type: {
          name: education_name,
          code: education_code,
          code_system: education_code_system
        }
      });
    }
    
    return data;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parse: parse
  };
  
}();
;

/*
 * labs.js
 */

C32.Labs = function () {
  
  // Dependancies
  ///////////////////////////
  var parseDate = Core.parseDate;
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parse the labs CCDA XML section.
   */
  var parse = function (xmlDOM) {
    var data = [], results_data, el, entries, entry, results, result;
    
    el = xmlDOM.template('2.16.840.1.113883.3.88.11.83.122');

    entries = el.elsByTag('entry');
    
    for (var i = 0; i < entries.length; i++) {
      entry = entries[i];

      el = entry.tag('effectiveTime');
      var panel_date = parseDate(entry.tag('effectiveTime').attr('value'));
      if (!panel_date) {
        var panel_date = parseDate(entry.tag('effectiveTime').tag('low').attr('value'));
      }
      
      // panel
      el = entry.tag('code');
      var panel_name = el.attr('displayName'),
          panel_code = el.attr('code'),
          panel_code_system = el.attr('codeSystem'),
          panel_code_system_name = el.attr('codeSystemName');
      
      results = entry.elsByTag('component');
      results_data = [];
      
      for (var j = 0; j < results.length; j++) {
        result = results[j];

        // sometimes results organizers contain non-results. we only want results
        if (result.template('2.16.840.1.113883.10.20.1.31').val()) {
          var date = parseDate(result.tag('effectiveTime').attr('value'));
          
          el = result.tag('code');
          var name = el.attr('displayName'),
              code = el.attr('code'),
              code_system = el.attr('codeSystem'),
              code_system_name = el.attr('codeSystemName');
          
          el = result.tag('value');
          var value = parseFloat(el.attr('value')),
              unit = el.attr('unit');

          el = result.tag('referenceRange');
          var reference_range_text = el.tag('observationRange').tag('text').val();
              reference_range_low_unit = el.tag('observationRange').tag('low').attr('unit');
              reference_range_low_value = el.tag('observationRange').tag('low').attr('value');
              reference_range_high_unit = el.tag('observationRange').tag('high').attr('unit');
              reference_range_high_value = el.tag('observationRange').tag('high').attr('value');
          
          results_data.push({
            date: date,
            name: name,
            value: value,
            unit: unit,
            code: code,
            code_system: code_system,
            code_system_name: code_system_name,
            reference_range: {
              text: reference_range_text,
              low_unit: reference_range_low_unit,
              low_value: reference_range_low_value,
              high_unit: reference_range_high_unit,
              high_value: reference_range_high_value,
            }
          });
        }
      }
      
      data.push({
        name: panel_name,
        code: panel_code,
        code_system: panel_code_system,
        code_system_name: panel_code_system_name,
        date: panel_date,
        results: results_data
      });
    }
    
    return data;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parse: parse
  };
  
}();
;

/*
 * medications.js
 */

C32.Medications = function () {
  
  // Dependancies
  ///////////////////////////
  var parseDate = Core.parseDate;
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parse the medications CCDA XML section.
   */
  var parse = function (xmlDOM) {
    var data = [], el, entries, entry;
    
    el = xmlDOM.template('2.16.840.1.113883.3.88.11.83.112');

    entries = el.elsByTag('entry');
    
    for (var i = 0; i < entries.length; i++) {
      entry = entries[i];
      
      el = entry.tag('effectiveTime');
      var start_date = parseDate(el.tag('low').attr('value')),
          end_date = parseDate(el.tag('high').attr('value'));
      
      el = entry.tag('manufacturedProduct').tag('code');
      var product_name = el.attr('displayName'),
          product_code = el.attr('code'),
          product_code_system = el.attr('codeSystem');
      
      el = entry.tag('manufacturedProduct').tag('translation');
      var translation_name = el.attr('displayName'),
          translation_code = el.attr('code'),
          translation_code_system = el.attr('codeSystem'),
          translation_code_system_name = el.attr('codeSystemName');
      
      el = entry.tag('doseQuantity');
      var dose_value = el.attr('value'),
          dose_unit = el.attr('unit');
      
      el = entry.tag('rateQuantity');
      var rate_quantity_value = el.attr('value'),
          rate_quantity_unit = el.attr('unit');
      
      el = entry.tag('precondition').tag('value');
      var precondition_name = el.attr('displayName'),
          precondition_code = el.attr('code'),
          precondition_code_system = el.attr('codeSystem'),
      
      el = entry.template('2.16.840.1.113883.10.20.1.28').tag('value');
      var reason_name = el.attr('displayName'),
          reason_code = el.attr('code'),
          reason_code_system = el.attr('codeSystem');
      
      el = entry.tag('routeCode')
      var route_name = el.attr('displayName'),
          route_code = el.attr('code'),
          route_code_system = el.attr('codeSystem'),
          route_code_system_name = el.attr('codeSystemName');
      
      // participant => vehicle
      el = entry.tag('participant').tag('code');
      var vehicle_name = el.attr('displayName'),
          vehicle_code = el.attr('code'),
          vehicle_code_system = el.attr('codeSystem'),
          vehicle_code_system_name = el.attr('codeSystemName');
      
      el = entry.tag('administrationUnitCode');
      var administration_name = el.attr('displayName'),
          administration_code = el.attr('code'),
          administration_code_system = el.attr('codeSystem'),
          administration_code_system_name = el.attr('codeSystemName');
      
      // performer => prescriber
      el = entry.tag('performer');
      var prescriber_organization = el.tag('name').val(),
          prescriber_person = null;
      
      data.push({
        date_range: {
          start: start_date,
          end: end_date
        },
        product: {
          name: product_name,
          code: product_code,
          code_system: product_code_system,
          translation: {
            name: translation_name,
            code: translation_code,
            code_system: translation_code_system,
            code_system_name: translation_code_system_name
          }
        },
        dose_quantity: {
          value: dose_value,
          unit: dose_unit
        },
        rate_quantity: {
          value: rate_quantity_value,
          unit: rate_quantity_unit
        },
        precondition: {
          name: precondition_name,
          code: precondition_code,
          code_system: precondition_code_system
        },
        reason: {
          name: reason_name,
          code: reason_code,
          code_system: reason_code_system
        },
        route: {
          name: route_name,
          code: route_code,
          code_system: route_code_system,
          code_system_name: route_code_system_name
        },
        vehicle: {
          name: vehicle_name,
          code: vehicle_code,
          code_system: vehicle_code_system,
          code_system_name: vehicle_code_system_name
        },
        administration: {
          name: administration_name,
          code: administration_code,
          code_system: administration_code_system,
          code_system_name: administration_code_system_name
        },
        prescriber: {
          organization: prescriber_organization,
          person: prescriber_person
        }
      });
    }
    
    return data;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parse: parse
  };
  
}();
;

/*
 * problems.js
 */

C32.Problems = function () {
  
  // Dependancies
  ///////////////////////////
  var parseDate = Core.parseDate;
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parse the problems CCDA XML section.
   */
  var parse = function (xmlDOM) {
    var data = [], el, entries, entry;
    
    el = xmlDOM.template('2.16.840.1.113883.3.88.11.83.103');
    
    entries = el.elsByTag('entry');
    
    for (var i = 0; i < entries.length; i++) {
      entry = entries[i];
      
      el = entry.tag('effectiveTime');
      var start_date = parseDate(el.tag('low').attr('value')),
          end_date = parseDate(el.tag('high').attr('value'));
      
      el = entry.template('2.16.840.1.113883.10.20.1.28').tag('value');
      var name = el.attr('displayName'),
          code = el.attr('code'),
          code_system = el.attr('codeSystem');
      
      el = entry.template('2.16.840.1.113883.10.20.1.50');
      var status = el.tag('value').attr('displayName');
      
      el = entry.template('2.16.840.1.113883.10.20.1.38');
      var age = parseFloat(el.tag('value').attr('value'));
      
      data.push({
        date_range: {
          start: start_date,
          end: end_date
        },
        name: name,
        status: status,
        age: age,
        code: code,
        code_system: code_system
      });
    }
    
    return data;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parse: parse
  };
  
}();
;

/*
 * procedures.js
 */

C32.Procedures = function () {
  
  // Dependancies
  ///////////////////////////
  var parseDate = Core.parseDate;
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parse the procedures CCDA XML section.
   */
  var parse = function (xmlDOM) {
    var data = [], el, els, entries, entry;
    
    el = xmlDOM.template('2.16.840.1.113883.3.88.11.83.108');
    
    entries = el.elsByTag('entry');
    
    for (var i = 0; i < entries.length; i++) {
      entry = entries[i];
      
      el = entry.tag('effectiveTime');
      var date = parseDate(el.attr('value'));
      
      el = entry.tag('code');
      var name = el.attr('displayName'),
          code = el.attr('code'),
          code_system = el.attr('codeSystem');
      
      // 'specimen' tag not always present
      // el = entry.tag('specimen').tag('code');
      // var specimen_name = el.attr('displayName'),
      //     specimen_code = el.attr('code'),
      //     specimen_code_system = el.attr('codeSystem');
      var specimen_name = null,
          specimen_code = null,
          specimen_code_system = null;
      
      el = entry.tag('performer').tag('addr');
      var organization = el.tag('name').val(),
          phone = el.tag('telecom').attr('value');
      
      els = el.elsByTag('streetAddressLine');
      street = [];
      
      for (var j = 0; j < els.length; j++) {
        street.push(els[j].val());
      }
          
      var city = el.tag('city').val(),
          state = el.tag('state').val(),
          zip = el.tag('postalCode').val(),
          country = el.tag('country').val();
      
      // participant => device
      el = entry.tag('participant').tag('code');
      var device_name = el.attr('displayName'),
          device_code = el.attr('code'),
          device_code_system = el.attr('codeSystem');
      
      data.push({
        date: date,
        name: name,
        code: code,
        code_system: code_system,
        specimen: {
          name: specimen_name,
          code: specimen_code,
          code_system: specimen_code_system
        },
        performer: {
          organization: organization,
          street: street,
          city: city,
          state: state,
          zip: zip,
          country: country,
          phone: phone
        },
        device: {
          name: device_name,
          code: device_code,
          code_system: device_code_system
        }
      });
    }
    
    return data;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parse: parse
  };
  
}();
;

/*
 * vitals.js
 */

C32.Vitals = function () {
  
  // Dependancies
  ///////////////////////////
  var parseDate = Core.parseDate;
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parse the vitals CCDA XML section.
   */
  var parse = function (xmlDOM) {
    var data = [], results_data, el, entries, entry, results, result;
    
    el = xmlDOM.template('2.16.840.1.113883.3.88.11.83.119');
    
    entries = el.elsByTag('entry');
    
    for (var i = 0; i < entries.length; i++) {
      entry = entries[i];
      
      el = entry.tag('effectiveTime');
      var entry_date = parseDate(el.attr('value'));
      
      results = entry.elsByTag('component');
      results_data = [];
      
      for (var j = 0; j < results.length; j++) {
        result = results[j];
        
        // Results
        
        el = result.tag('code');
        var name = el.attr('displayName'),
            code = el.attr('code'),
            // code_system = el.attr('codeSystem'),
            // code_system_name = el.attr('codeSystemName');
        
        el = result.tag('value');
        var value = parseFloat(el.attr('value')),
            unit = el.attr('unit');
        
        results_data.push({
          name: name,
          code: code,
          // code_system: code_system,
          // code_system_name: code_system_name,
          value: value,
          unit: unit
        });
      }
      
      data.push({
        date: entry_date,
        results: results_data
      });
    }
    
    return data;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parse: parse
  };
  
}();
;

/*
 * ccda.js
 */

var CCDA = function () {
  
  // Dependancies
  ///////////////////////////
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
  };
  
}();
;

/*
 * allergies.js
 */

CCDA.Allergies = function () {
  
  // Dependancies
  ///////////////////////////
  var parseDate = Core.parseDate;
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parse the allergies CCDA XML section.
   */
  var parse = function (xmlDOM) {
    var data = [], el, entries, entry;
    
    el = xmlDOM.template('2.16.840.1.113883.10.20.22.2.6.1');
    entries = el.elsByTag('entry');
    
    for (var i = 0; i < entries.length; i++) {
      entry = entries[i];
      
      el = entry.tag('effectiveTime');
      var start_date = parseDate(el.tag('low').attr('value')),
          end_date = parseDate(el.tag('high').attr('value'));
      
      el = entry.template('2.16.840.1.113883.10.20.22.4.7').tag('code');
      var name = el.attr('displayName'),
          code = el.attr('code'),
          code_system = el.attr('codeSystem'),
          code_system_name = el.attr('codeSystemName');
      
      // value => reaction_type
      el = entry.template('2.16.840.1.113883.10.20.22.4.7').tag('value');
      var reaction_type_name = el.attr('displayName'),
          reaction_type_code = el.attr('code'),
          reaction_type_code_system = el.attr('codeSystem'),
          reaction_type_code_system_name = el.attr('codeSystemName');
      
      // reaction
      el = entry.template('2.16.840.1.113883.10.20.22.4.9').tag('value');
      var reaction_name = el.attr('displayName'),
          reaction_code = el.attr('code'),
          reaction_code_system = el.attr('codeSystem');
      
      // severity
      el = entry.template('2.16.840.1.113883.10.20.22.4.8').tag('value');
      var severity = el.attr('displayName');
      
      // participant => allergen
      el = entry.tag('participant').tag('code');
      var allergen_name = el.attr('displayName'),
          allergen_code = el.attr('code'),
          allergen_code_system = el.attr('codeSystem'),
          allergen_code_system_name = el.attr('codeSystemName');
      
      // status
      el = entry.template('2.16.840.1.113883.10.20.22.4.28').tag('value');
      var status = el.attr('displayName');
      
      data.push({
        date_range: {
          start: start_date,
          end: end_date
        },
        name: name,
        code: code,
        code_system: code_system,
        code_system_name: code_system_name,
        status: status,
        severity: severity,
        reaction: {
          name: reaction_name,
          code: reaction_code,
          code_system: reaction_code_system
        },
        reaction_type: {
          name: reaction_type_name,
          code: reaction_type_code,
          code_system: reaction_type_code_system,
          code_system_name: reaction_type_code_system_name
        },
        allergen: {
          name: allergen_name,
          code: allergen_code,
          code_system: allergen_code_system,
          code_system_name: allergen_code_system_name
        }
      });
    }
    
    return data;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parse: parse
  };
  
}();
;

/*
 * demographics.js
 */

CCDA.Demographics = function () {
  
  // Dependancies
  ///////////////////////////
  var parseDate = Core.parseDate;
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parse the demographics CCDA XML section.
   */
  var parse = function (xmlDOM) {
    var data = {}, el, els, patient;
    
    el = xmlDOM.template('2.16.840.1.113883.10.20.22.1.1');
    patient = el.tag('patientRole');
    el = patient.tag('patient').tag('name');
    var prefix = el.tag('prefix').val();
    
    els = el.elsByTag('given');
    var given = [];
    
    for (var i = 0; i < els.length; i++) {
      given.push(els[i].val());
    }
    
    var family = el.tag('family').val();
    
    el = patient.tag('patient');
    var dob = parseDate(el.tag('birthTime').attr('value')),
        gender = Codes.gender(el.tag('administrativeGenderCode').attr('code')),
        marital_status = Codes.maritalStatus(el.tag('maritalStatusCode').attr('code'));
    
    el = patient.tag('addr');
    els = el.elsByTag('streetAddressLine');
    var street = [];
    
    for (var i = 0; i < els.length; i++) {
      street.push(els[i].val());
    }
    
    var city = el.tag('city').val(),
        state = el.tag('state').val(),
        zip = el.tag('postalCode').val(),
        country = el.tag('country').val();
    
    el = patient.tag('telecom');
    var home = el.attr('value'),
        work = null,
        mobile = null;
    
    var email = null;
    
    var language = patient.tag('languageCommunication').tag('languageCode').attr('code'),
        race = patient.tag('raceCode').attr('displayName'),
        ethnicity = patient.tag('ethnicGroupCode').attr('displayName'),
        religion = patient.tag('religiousAffiliationCode').attr('displayName');
    
    el = patient.tag('birthplace');
    var birthplace_state = el.tag('state').val(),
        birthplace_zip = el.tag('postalCode').val(),
        birthplace_country = el.tag('country').val();
    
    el = patient.tag('guardian');
    var guardian_relationship = el.tag('code').attr('displayName'),
        guardian_home = el.tag('telecom').attr('value');
    el = el.tag('guardianPerson');
    
    els = el.elsByTag('given');
    var guardian_given = [];
    
    for (var i = 0; i < els.length; i++) {
      guardian_given.push(els[i].val());
    }
    
    var guardian_family = el.tag('family').val();
    
    el = patient.tag('guardian').tag('addr');
    
    els = el.elsByTag('streetAddressLine');
    var guardian_street = [];
    
    for (var i = 0; i < els.length; i++) {
      guardian_street.push(els[i].val());
    }
    
    var guardian_city = el.tag('city').val(),
        guardian_state = el.tag('state').val(),
        guardian_zip = el.tag('postalCode').val(),
        guardian_country = el.tag('country').val();
    
    el = patient.tag('providerOrganization');
    var provider_organization = el.tag('name').val(),
        provider_phone = el.tag('telecom').attr('value');
    
    els = el.elsByTag('streetAddressLine');
    var provider_street = [];
    
    for (var i = 0; i < els.length; i++) {
      provider_street.push(els[i].val());
    }
    
    var provider_city = el.tag('city').val(),
        provider_state = el.tag('state').val(),
        provider_zip = el.tag('postalCode').val(),
        provider_country = el.tag('country').val();
    
    data = {
      name: {
        prefix: prefix,
        given: given,
        family: family
      },
      dob: dob,
      gender: gender,
      marital_status: marital_status,
      address: {
       street: street,
        city: city,
        state: state,
        zip: zip,
        country: country
      },
      phone: {
        home: home,
        work: work,
        mobile: mobile
      },
      email: email,
      language: language,
      race: race,
      ethnicity: ethnicity,
      religion: religion,
      birthplace: {
        state: birthplace_state,
        zip: birthplace_zip,
        country: birthplace_country
      },
      guardian: {
        name: {
          given: guardian_given,
          family: guardian_family
        },
        relationship: guardian_relationship,
        address: {
          street: guardian_street,
          city: guardian_city,
          state: guardian_state,
          zip: guardian_zip,
          country: guardian_country
        },
        phone: {
          home: guardian_home
        }
      },
      provider: {
        organization: provider_organization,
        phone: provider_phone,
        address: {
          street: provider_street,
          city: provider_city,
          state: provider_state,
          zip: provider_zip,
          country: provider_country
        }
      }
    };
    
    return data;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parse: parse
  };
  
}();
;

/*
 * encounters.js
 */

CCDA.Encounters = function () {
  
  // Dependancies
  ///////////////////////////
  var parseDate = Core.parseDate;
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parse the encounters CCDA XML section.
   */
  var parse = function (xmlDOM) {
    var data = [], el, els, entries, entry;
    
    el = xmlDOM.template('2.16.840.1.113883.10.20.22.2.22')
    if (el.isEmpty()) {
      el = xmlDOM.template('2.16.840.1.113883.10.20.22.2.22.1');
    }
    
    entries = el.elsByTag('entry');
    
    for (var i = 0; i < entries.length; i++) {
      entry = entries[i];
      
      var date = parseDate(entry.tag('effectiveTime').attr('value'));
      
      el = entry.tag('code');
      var name = el.attr('displayName'),
          code = el.attr('code'),
          code_system = el.attr('codeSystem'),
          code_system_name = el.attr('codeSystemName'),
          code_system_version = el.attr('codeSystemVersion');
      
      // finding
      el = entry.tag('value');
      var finding_name = el.attr('displayName'),
          finding_code = el.attr('code'),
          finding_code_system = el.attr('codeSystem');
      
      // translation
      el = entry.tag('translation');
      var translation_name = el.attr('displayName'),
          translation_code = el.attr('code'),
          translation_code_system = el.attr('codeSystem'),
          translation_code_system_name = el.attr('codeSystemName');
      
      // performer
      el = entry.tag('performer').tag('code');
      var performer_name = el.attr('displayName'),
          performer_code = el.attr('code'),
          performer_code_system = el.attr('codeSystem'),
          performer_code_system_name = el.attr('codeSystemName');

      // participant => location
      el = entry.tag('participant');
      var organization = el.tag('code').attr('displayName');
      
      els = el.elsByTag('streetAddressLine');
      street = [];
      
      for (var j = 0; j < els.length; j++) {
        street.push(els[j].val());
      }
      
      var city = el.tag('city').val(),
          state = el.tag('state').val(),
          zip = el.tag('postalCode').val(),
          country = el.tag('country').val();
      
      data.push({
        date: date,
        name: name,
        code: code,
        code_system: code_system,
        code_system_name: code_system_name,
        code_system_version: code_system_version,
        finding: {
          name: finding_name,
          code: finding_code,
          code_system: finding_code_system
        },
        translation: {
          name: translation_name,
          code: translation_code,
          code_system: translation_code_system,
          code_system_name: translation_code_system_name
        },
        performer: {
          name: performer_name,
          code: performer_code,
          code_system: performer_code_system,
          code_system_name: performer_code_system_name
        },
        location: {
          organization: organization,
          street: street,
          city: city,
          state: state,
          zip: zip,
          country: country
        }
      });
    }
    
    return data;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parse: parse
  };
  
}();
;

/*
 * immunizations.js
 */

CCDA.Immunizations = function () {
  
  // Dependancies
  ///////////////////////////
  var parseDate = Core.parseDate;
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parse the immunizations CCDA XML section.
   */
  var parse = function (xmlDOM) {
    var data = [], el, entries, entry;
    
    el = xmlDOM.template('2.16.840.1.113883.10.20.22.2.2.1')
    if (el.isEmpty()) {
      el = xmlDOM.template('2.16.840.1.113883.10.20.22.2.2');
    }
    
    entries = el.elsByTag('entry');
    
    for (var i = 0; i < entries.length; i++) {
      entry = entries[i];
      
      // date
      el = entry.tag('effectiveTime');
      var date = parseDate(el.attr('value'));
      
      // product
      el = entry.template('2.16.840.1.113883.10.20.22.4.54').tag('code');
      var product_name = el.attr('displayName'),
          product_code = el.attr('code'),
          product_code_system = el.attr('codeSystem'),
          product_code_system_name = el.attr('codeSystemName');
      
      // translation
      el = entry.template('2.16.840.1.113883.10.20.22.4.54').tag('translation');
      var translation_name = el.attr('displayName'),
          translation_code = el.attr('code'),
          translation_code_system = el.attr('codeSystem'),
          translation_code_system_name = el.attr('codeSystemName');
      
      // route
      el = entry.tag('routeCode');
      var route_name = el.attr('displayName'),
          route_code = el.attr('code'),
          route_code_system = el.attr('codeSystem'),
          route_code_system_name = el.attr('codeSystemName');
      
      // instructions
      el = entry.template('2.16.840.1.113883.10.20.22.4.20');
      var instructions_text = el.tag('text').val();
      el = el.tag('code');
      var education_name = el.attr('displayName'),
          education_code = el.attr('code'),
          education_code_system = el.attr('codeSystem');
      
      data.push({
        date: date,
        product: {
          name: product_name,
          code: product_code,
          code_system: product_code_system,
          code_system_name: product_code_system_name,
          translation: {
            name: translation_name,
            code: translation_code,
            code_system: translation_code_system,
            code_system_name: translation_code_system_name
          }
        },
        route: {
          name: route_name,
          code: route_code,
          code_system: route_code_system,
          code_system_name: route_code_system_name
        },
        instructions: instructions_text,
        education_type: {
          name: education_name,
          code: education_code,
          code_system: education_code_system
        }
      });
    }
    
    return data;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parse: parse
  };
  
}();
;

/*
 * labs.js
 */

CCDA.Labs = function () {
  
  // Dependancies
  ///////////////////////////
  var parseDate = Core.parseDate;
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parse the labs CCDA XML section.
   */
  var parse = function (xmlDOM) {
    var data = [], results_data, el, entries, entry, results, result;
    
    el = xmlDOM.template('2.16.840.1.113883.10.20.22.2.3.1');
    entries = el.elsByTag('entry');
    
    for (var i = 0; i < entries.length; i++) {
      entry = entries[i];
      
      // panel
      el = entry.tag('code');
      var panel_name = el.attr('displayName'),
          panel_code = el.attr('code'),
          // panel_code_system = el.attr('codeSystem'),
          // panel_code_system_name = el.attr('codeSystemName');
      
      results = entry.elsByTag('component');
      results_data = [];
      
      for (var j = 0; j < results.length; j++) {
        result = results[j];
        
        var date = parseDate(result.tag('effectiveTime').attr('value'));
        
        el = result.tag('code');
        var name = el.attr('displayName'),
            code = el.attr('code'),
            // code_system = el.attr('codeSystem'),
            // code_system_name = el.attr('codeSystemName');
        
        el = result.tag('value');
        var value = parseFloat(el.attr('value')),
            unit = el.attr('unit');
        
        // reference range may not be present
        // reference_low = null;
        // reference_high = null;
        
        results_data.push({
          date: date,
          name: name,
          value: value,
          unit: unit,
          code: code,
          // code_system: code_system,
          // code_system_name: code_system_name,
          // reference_low: reference_low,
          // reference_high: reference_high
        });
      }
      
      data.push({
        name: panel_name,
        code: panel_code,
        // code_system: panel_code_system,
        // code_system_name: panel_code_system_name,
        results: results_data
      });
    }
    
    return data;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parse: parse
  };
  
}();
;

/*
 * medications.js
 */

CCDA.Medications = function () {
  
  // Dependancies
  ///////////////////////////
  var parseDate = Core.parseDate;
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parse the medications CCDA XML section.
   */
  var parse = function (xmlDOM) {
    var data = [], el, entries, entry;
    
    el = xmlDOM.template('2.16.840.1.113883.10.20.22.2.1.1');
    entries = el.elsByTag('entry');
    
    for (var i = 0; i < entries.length; i++) {
      entry = entries[i];
      
      el = entry.tag('effectiveTime');
      var start_date = parseDate(el.tag('low').attr('value')),
          end_date = parseDate(el.tag('high').attr('value'));
      
      el = entry.tag('manufacturedProduct').tag('code');
      var product_name = el.attr('displayName'),
          product_code = el.attr('code'),
          product_code_system = el.attr('codeSystem');
      
      el = entry.tag('manufacturedProduct').tag('translation');
      var translation_name = el.attr('displayName'),
          translation_code = el.attr('code'),
          translation_code_system = el.attr('codeSystem'),
          translation_code_system_name = el.attr('codeSystemName');
      
      el = entry.tag('doseQuantity');
      var dose_value = el.attr('value'),
          dose_unit = el.attr('unit');
      
      el = entry.tag('rateQuantity');
      var rate_quantity_value = el.attr('value'),
          rate_quantity_unit = el.attr('unit');
      
      el = entry.tag('precondition').tag('value');
      var precondition_name = el.attr('displayName'),
          precondition_code = el.attr('code'),
          precondition_code_system = el.attr('codeSystem'),
      
      el = entry.template('2.16.840.1.113883.10.20.22.4.19').tag('value');
      var reason_name = el.attr('displayName'),
          reason_code = el.attr('code'),
          reason_code_system = el.attr('codeSystem');
      
      el = entry.tag('routeCode')
      var route_name = el.attr('displayName'),
          route_code = el.attr('code'),
          route_code_system = el.attr('codeSystem'),
          route_code_system_name = el.attr('codeSystemName');
      
      // participant => vehicle
      el = entry.tag('participant').tag('code');
      var vehicle_name = el.attr('displayName'),
          vehicle_code = el.attr('code'),
          vehicle_code_system = el.attr('codeSystem'),
          vehicle_code_system_name = el.attr('codeSystemName');
      
      el = entry.tag('administrationUnitCode');
      var administration_name = el.attr('displayName'),
          administration_code = el.attr('code'),
          administration_code_system = el.attr('codeSystem'),
          administration_code_system_name = el.attr('codeSystemName');
      
      // performer => prescriber
      el = entry.tag('performer');
      var prescriber_organization = el.tag('name').val(),
          prescriber_person = null;
      
      data.push({
        date_range: {
          start: start_date,
          end: end_date
        },
        product: {
          name: product_name,
          code: product_code,
          code_system: product_code_system,
          translation: {
            name: translation_name,
            code: translation_code,
            code_system: translation_code_system,
            code_system_name: translation_code_system_name
          }
        },
        dose_quantity: {
          value: dose_value,
          unit: dose_unit
        },
        rate_quantity: {
          value: rate_quantity_value,
          unit: rate_quantity_unit
        },
        precondition: {
          name: precondition_name,
          code: precondition_code,
          code_system: precondition_code_system
        },
        reason: {
          name: reason_name,
          code: reason_code,
          code_system: reason_code_system
        },
        route: {
          name: route_name,
          code: route_code,
          code_system: route_code_system,
          code_system_name: route_code_system_name
        },
        vehicle: {
          name: vehicle_name,
          code: vehicle_code,
          code_system: vehicle_code_system,
          code_system_name: vehicle_code_system_name
        },
        administration: {
          name: administration_name,
          code: administration_code,
          code_system: administration_code_system,
          code_system_name: administration_code_system_name
        },
        prescriber: {
          organization: prescriber_organization,
          person: prescriber_person
        }
      });
    }
    
    return data;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parse: parse
  };
  
}();
;

/*
 * problems.js
 */

CCDA.Problems = function () {
  
  // Dependancies
  ///////////////////////////
  var parseDate = Core.parseDate;
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parse the problems CCDA XML section.
   */
  var parse = function (xmlDOM) {
    var data = [], el, entries, entry;
    
    el = xmlDOM.template('2.16.840.1.113883.10.20.22.2.5.1')
    if (el.isEmpty()) {
      el = xmlDOM.template('2.16.840.1.113883.10.20.22.2.5');
    }
    
    entries = el.elsByTag('entry');
    
    for (var i = 0; i < entries.length; i++) {
      entry = entries[i];
      
      el = entry.tag('effectiveTime');
      var start_date = parseDate(el.tag('low').attr('value')),
          end_date = parseDate(el.tag('high').attr('value'));
      
      el = entry.template('2.16.840.1.113883.10.20.22.4.4').tag('value');
      var name = el.attr('displayName'),
          code = el.attr('code'),
          code_system = el.attr('codeSystem');
      
      el = entry.template('2.16.840.1.113883.10.20.22.4.6');
      var status = el.tag('value').attr('displayName');
      
      el = entry.template('2.16.840.1.113883.10.20.22.4.31');
      var age = parseFloat(el.tag('value').attr('value'));
      
      data.push({
        date_range: {
          start: start_date,
          end: end_date
        },
        name: name,
        status: status,
        age: age,
        code: code,
        code_system: code_system
      });
    }
    
    return data;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parse: parse
  };
  
}();
;

/*
 * procedures.js
 */

CCDA.Procedures = function () {
  
  // Dependancies
  ///////////////////////////
  var parseDate = Core.parseDate;
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parse the procedures CCDA XML section.
   */
  var parse = function (xmlDOM) {
    var data = [], el, els, entries, entry;
    
    el = xmlDOM.template('2.16.840.1.113883.10.20.22.2.7.1')
    if (el.isEmpty()) {
      el = xmlDOM.template('2.16.840.1.113883.10.20.22.2.7');
    }
    
    entries = el.elsByTag('entry');
    
    for (var i = 0; i < entries.length; i++) {
      entry = entries[i];
      
      el = entry.tag('effectiveTime');
      var date = parseDate(el.attr('value'));
      
      el = entry.tag('code');
      var name = el.attr('displayName'),
          code = el.attr('code'),
          code_system = el.attr('codeSystem');
      
      // 'specimen' tag not always present
      // el = entry.tag('specimen').tag('code');
      // var specimen_name = el.attr('displayName'),
      //     specimen_code = el.attr('code'),
      //     specimen_code_system = el.attr('codeSystem');
      var specimen_name = null,
          specimen_code = null,
          specimen_code_system = null;
      
      el = entry.tag('performer').tag('addr');
      var organization = el.tag('name').val(),
          phone = el.tag('telecom').attr('value');
      
      els = el.elsByTag('streetAddressLine');
      street = [];
      
      for (var j = 0; j < els.length; j++) {
        street.push(els[j].val());
      }
          
      var city = el.tag('city').val(),
          state = el.tag('state').val(),
          zip = el.tag('postalCode').val(),
          country = el.tag('country').val();
      
      // participant => device
      el = entry.tag('participant').tag('code');
      var device_name = el.attr('displayName'),
          device_code = el.attr('code'),
          device_code_system = el.attr('codeSystem');
      
      data.push({
        date: date,
        name: name,
        code: code,
        code_system: code_system,
        specimen: {
          name: specimen_name,
          code: specimen_code,
          code_system: specimen_code_system
        },
        performer: {
          organization: organization,
          street: street,
          city: city,
          state: state,
          zip: zip,
          country: country,
          phone: phone
        },
        device: {
          name: device_name,
          code: device_code,
          code_system: device_code_system
        }
      });
    }
    
    return data;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parse: parse
  };
  
}();
;

/*
 * vitals.js
 */

CCDA.Vitals = function () {
  
  // Dependancies
  ///////////////////////////
  var parseDate = Core.parseDate;
  
  // Properties
  ///////////////////////////
  
  // Private Methods
  ///////////////////////////
  
  // Public Methods
  ///////////////////////////
  
  /*
   * Parse the vitals CCDA XML section.
   */
  var parse = function (xmlDOM) {
    var data = [], results_data, el, entries, entry, results, result;
    
    el = xmlDOM.template('2.16.840.1.113883.10.20.22.2.4.1');
    
    entries = el.elsByTag('entry');
    
    for (var i = 0; i < entries.length; i++) {
      entry = entries[i];
      
      el = entry.tag('effectiveTime');
      var entry_date = parseDate(el.attr('value'));
      
      results = entry.elsByTag('component');
      results_data = [];
      
      for (var j = 0; j < results.length; j++) {
        result = results[j];
        
        // Results
        
        el = result.tag('code');
        var name = el.attr('displayName'),
            code = el.attr('code'),
            // code_system = el.attr('codeSystem'),
            // code_system_name = el.attr('codeSystemName');
        
        el = result.tag('value');
        var value = parseFloat(el.attr('value')),
            unit = el.attr('unit');
        
        results_data.push({
          name: name,
          code: code,
          // code_system: code_system,
          // code_system_name: code_system_name,
          value: value,
          unit: unit
        });
      }
      
      data.push({
        date: entry_date,
        results: results_data
      });
    }
    
    return data;
  };
  
  // Init
  ///////////////////////////
  
  // Reveal public methods
  return {
    parse: parse
  };
  
}();
;

/*
 * bluebutton.js - The public `BlueButton` object.
 */
 
var BlueButton = function (source) {
  
  // Dependancies
  ///////////////////////////
  
  // Properties
  ///////////////////////////
  var xmlDOM = null,
      type = '',
      data = {};
  
  // Private Methods
  ///////////////////////////
  var addMethods = function (objects) {
    for (var i = 0; i < objects.length; i++) {
      objects[i].json = function () { return JSON.stringify(this, null, 2) };
    };
  };
  
  // Public Methods
  ///////////////////////////
  var doc = function () { return data.document };
  var allergies = function () { return data.allergies };
  var demographics = function () { return data.demographics };
  var encounters = function () { return data.encounters };
  var immunizations = function () { return data.immunizations };
  var labs = function () { return data.labs };
  var medications = function () { return data.medications };
  var problems = function () { return data.problems };
  var procedures = function () { return data.procedures };
  var vitals = function (filters) {
    if (filters) {
      return Core.filters(data.vitals);
    } else {
      return data.vitals;
    }
  };
  
  // Init
  ///////////////////////////
  
  // Remove leading and trailing whitespace
  source = source.replace(/^\s+|\s+$/g,'');
  
  // Detect document type
  if (source.substr(0, 5) == "<?xml") {
    xmlDOM = XML.parseXML(source);
    
    if (!xmlDOM.template('2.16.840.1.113883.3.88.11.32.1').isEmpty()) {
      type = "c32";
    } else if(!xmlDOM.template('2.16.840.1.113883.10.20.22.1.2').isEmpty()) {
      type = "ccda";
    }
  } else {
    type = "json";
  }
  
  data.document = { type: type };
  
  switch (type) {
    case "c32":
      data.allergies =     C32.Allergies.parse(xmlDOM);
      data.demographics =  C32.Demographics.parse(xmlDOM);
      data.encounters =    C32.Encounters.parse(xmlDOM);
      data.immunizations = C32.Immunizations.parse(xmlDOM);
      data.labs =          C32.Labs.parse(xmlDOM);
      data.medications =   C32.Medications.parse(xmlDOM);
      data.problems =      C32.Problems.parse(xmlDOM);
      data.procedures =    C32.Procedures.parse(xmlDOM);
      data.vitals =        C32.Vitals.parse(xmlDOM);
      break;
    case "ccda":
      data.allergies =     CCDA.Allergies.parse(xmlDOM);
      data.demographics =  CCDA.Demographics.parse(xmlDOM);
      data.encounters =    CCDA.Encounters.parse(xmlDOM);
      data.immunizations = CCDA.Immunizations.parse(xmlDOM);
      data.labs =          CCDA.Labs.parse(xmlDOM);
      data.medications =   CCDA.Medications.parse(xmlDOM);
      data.problems =      CCDA.Problems.parse(xmlDOM);
      data.procedures =    CCDA.Procedures.parse(xmlDOM);
      data.vitals =        CCDA.Vitals.parse(xmlDOM);
      break;
    case "json":
      try {
        var json = JSON.parse(source);
      } catch (e) {
        console.log("BB Exception: Could not parse JSON");
      }
      console.log("BB Error: Blue Button JSON not yet implemented.");
      break;
  }
  
  addMethods([
    data,
    data.document,
    data.allergies,
    data.demographics,
    data.encounters,
    data.immunizations,
    data.labs,
    data.medications,
    data.problems,
    data.procedures,
    data.vitals
  ]);
  
  // Reveal public methods
  return {
    xmlDOM: xmlDOM,
    data: data,
    document: doc,
    allergies: allergies,
    demographics: demographics,
    encounters: encounters,
    immunizations: immunizations,
    labs: labs,
    medications: medications,
    problems: problems,
    procedures: procedures,
    vitals: vitals
  };
    
};

        return BlueButton;

    }));
/*! rgbHex - v1.1.2 - 2013-09-27 */window.rgbHex=function(){function a(a){return!isNaN(parseFloat(a))&&isFinite(a)}function b(a){return a.replace(/^\s+|\s+$/g,"")}function c(c){return c=b(c),a(c)&&c>=0&&255>=c}function d(a){return/^[0-9a-f]{3}$|^[0-9a-f]{6}$/i.test(b(a))}function e(a){return a=parseInt(a,10).toString(16),1===a.length?"0"+a:a}function f(a){return parseInt(a,16).toString()}function g(b){return b=b.split(","),(3===b.length||4===b.length)&&c(b[0])&&c(b[1])&&c(b[2])?4!==b.length||a(b[3])?"#"+e(b[0]).toUpperCase()+e(b[1]).toUpperCase()+e(b[2]).toUpperCase():null:null}function h(a){return d(a)?(3===a.length&&(a=a.charAt(0)+a.charAt(0)+a.charAt(1)+a.charAt(1)+a.charAt(2)+a.charAt(2)),"rgb("+f(a.substr(0,2))+","+f(a.substr(2,2))+","+f(a.substr(4,2))+")"):void 0}function i(a){return a.replace(/\s/g,"")}return function(a){if(!a)return null;var c=null,d=/^rgba?\((.*)\);?$/,e=/^#/;return a=b(a.toString()),"transparent"===a||"rgba(0,0,0,0)"===i(a)?"transparent":d.test(a)?g(a.match(d)[1]):e.test(a)?h(a.split("#").reverse()[0]):(c=a.split(","),1===c.length?h(a):3===c.length||4===c.length?g(a):void 0)}}(),jQuery&&jQuery.extend({rgbHex:function(a){return window.rgbHex(a)}});
/*! wColorPicker - v2.1.7 - 2013-09-27 */!function(a){function b(b,c){this.$el=a(b),this.options=c,this.init=!1,this.generate()}b.prototype={generate:function(){return this.$colorPicker||(this.$noneColorPalette=this._createPalette("none",[["transparent"]]),this.$simpleColorPalette=this._createPalette("simple",a.fn.wColorPicker.simpleColors),this.$mixedColorPalette=this._createPalette("mixed",a.fn.wColorPicker.mixedColors),this.$colorTarget=a('<div class="wColorPicker-color-target"></div>'),this.$customInput=a('<input type="text" class="wColorPicker-custom-input"/>').keyup(a.proxy(this._customInputKeyup,this)),this.options.dropperButton&&(this.$dropperButton=this._createDropperButton()),this.$colorPickerPalettesHolder=a('<div class="wColorPicker-palettes-holder"></div>').append(this.$noneColorPalette).append(this.$colorTarget).append(this.$customInput).append(this.$dropperButton).append("<br/>").append(this.$simpleColorPalette).append(this.$mixedColorPalette),this.$colorPickerHolder=a('<div class="wColorPicker-holder"></div>').append(this.$colorPickerPalettesHolder),this.$colorPickerBg=a('<div class="wColorPicker-bg"></div>'),this.$colorPicker=a('<div class="wColorPicker" title=""></div>').mouseenter(function(a){a.stopPropagation()}).bind("mouseenter mousemove click",function(a){a.stopPropagation()}).append(this.$colorPickerBg).append(this.$colorPickerHolder),this.setOpacity(this.options.opacity),this.setTheme(this.options.theme),this.setColor(this.options.color),a("body").append(this.$colorPicker),this.width=this.$colorPickerPalettesHolder.width(),this.height=this.$colorPickerPalettesHolder.height(),this.$colorPickerPalettesHolder.width(this.width),this.$colorPickerPalettesHolder.height(this.height),this.$el.append(this.$colorPicker),this.setMode(this.options.mode),this.setPosition(this.options.position)),this.init=!0,this},setTheme:function(a){this.$colorPicker.attr("class",this.$colorPicker.attr("class").replace(/wColorPicker-theme-.+\s|wColorPicker-theme-.+$/,"")),this.$colorPicker.addClass("wColorPicker-theme-"+a)},setOpacity:function(a){this.$colorPickerBg.css("opacity",a)},setColor:function(a){return window.rgbHex(a)?(this.options.color=a,this.$colorTarget.css("backgroundColor",a),this.$customInput.val(a),this.init&&this.options.onSelect&&this.options.onSelect.apply(this,[a]),void 0):!0},setMode:function(b){var c=this,d=function(){c._toggleEffect("show")},e=function(){c._toggleEffect("hide")};if("flat"===b?this.$colorPicker.removeClass("wColorPicker-zindex").css({position:"relative",display:""}):this.$colorPicker.addClass("wColorPicker-zindex").css({position:"absolute"}).hide(),this.$el.find("wColorPicker-button").remove(),this.$el.unbind("mouseenter",d).unbind("mouseleave",e),a(document).unbind("click",e),"flat"!==b){var f=null,g=null,h=function(a){a.stopPropagation(),c.options.generateButton&&g.css("backgroundColor",c.options.color),c._toggleEffect()};this.options.generateButton&&(f=a('<div class="wColorPicker-button"></div>'),g=a('<div class="wColorPicker-button-color"></div>').css("backgroundColor",this.options.color),this.$el.append(f),f.append(g.height(this.$el.height()-f.outerHeight(!0)))),this.$noneColorPalette.bind("click",h),this.$simpleColorPalette.bind("click",h),this.$mixedColorPalette.bind("click",h)}"click"===b?(this.$el.click(function(a){c._toggleEffect(),a.stopPropagation()}),this.$colorPicker.click(function(a){a.stopPropagation()}),a(document).bind("click",e)):"hover"===b&&this.$el.bind("mouseenter",d).bind("mouseleave",e)},setEffect:function(a){return"flat"===this.options.mode?!0:(this.$colorPicker.css("opacity",1),this.$colorPickerHolder.width(this.width).height(this.height),"fade"===a?this.$colorPicker.css("opacity",0):"slide"===a&&this.$colorPickerHolder.width("x"===this.positionAxis?0:this.width).height("y"===this.positionAxis?0:this.height),void 0)},setPosition:function(a){if("flat"===this.options.mode)return!0;var b=this.$el.outerWidth(),c=this.$el.outerHeight(),d=this.$el.outerWidth()/2-this.$colorPicker.outerWidth()/2,e=this.$el.outerHeight()/2-this.$colorPicker.outerHeight()/2,f={left:"",right:"",top:"",bottom:""},g=this.options.position.charAt(0);switch("t"===g||"b"===g?this.positionAxis="y":("l"===g||"r"===g)&&(this.positionAxis="x"),a){case"tl":f.left=0,f.bottom=c;break;case"tc":f.left=d,f.bottom=c;break;case"tr":f.right=0,f.bottom=c;break;case"rt":f.left=b,f.top=0;break;case"rm":f.left=b,f.top=e;break;case"rb":f.left=b,f.bottom=0;break;case"br":f.right=0,f.top=c;break;case"bc":f.left=d,f.top=c;break;case"bl":f.left=0,f.top=c;break;case"lb":f.right=b,f.bottom=0;break;case"lm":f.right=b,f.top=e;break;case"lt":f.right=b,f.top=0}this.$colorPicker.css(f),this.setEffect(this.options.effect)},_createPalette:function(b,c){var d=0,e=0,f=0,g=0,h=null,i=a('<div class="wColorPicker-palette wColorPicker-palette-'+b+'"></div>');for(d=0,e=c.length;e>d;d++){for(f=0,g=c[d].length;g>f;f++)h=this._createColor(f,c[d][f]),0===d&&h.addClass("wColorPicker-palette-color-top"),0===f&&h.addClass("wColorPicker-palette-color-left"),i.append(h);e>d&&i.append("<br/>")}return i},_createColor:function(b,c){var d=this;return a('<div class="wColorPicker-palette-color"></div>').attr("id","wColorPicker-palette-color-"+b).addClass("wColorPicker-palette-color-"+b).css("backgroundColor",c).hover(function(){d._colorMouseenter(a(this))},function(){d._colorMouseleave(a(this))}).click(function(){d.setColor(window.rgbHex(a(this).css("backgroundColor")))})},_createDropperButton:function(){return a('<div class="wColorPicker-dropper"></div>').click(a.proxy(this.options.onDropper,this))},_customInputKeyup:function(b){var c=a(b.target).val();window.rgbHex(c)&&(this.$colorTarget.css("backgroundColor",c),13===b.keyCode&&this.setColor(c))},_colorMouseenter:function(a){var b=window.rgbHex(a.css("backgroundColor"));a.addClass("active").prev().addClass("active-right"),a.prevAll("."+a.attr("id")+":first").addClass("active-bottom"),this.$colorTarget.css("backgroundColor",b),this.$customInput.val(b),this.options.onMouseover&&this.options.onMouseover.apply(this,[b])},_colorMouseleave:function(a){a.removeClass("active").prev().removeClass("active-right"),a.prevAll("."+a.attr("id")+":first").removeClass("active-bottom"),this.$colorTarget.css("backgroundColor",this.options.color),this.$customInput.val(this.options.color),this.options.onMouseout&&this.options.onMouseout.apply(this,[this.options.color])},_toggleEffect:function(a){var b=this.$colorPicker.hasClass("wColorPicker-visible");(!a||"show"===a&&b===!1||"hide"===a&&b===!0)&&(b||this.setPosition(this.options.position),this["_"+this.options.effect+"Effect"+(b?"Hide":"Show")](),this.$colorPicker.toggleClass("wColorPicker-visible"))},_noneEffectShow:function(){this.$colorPicker.css("display","inline-block")},_noneEffectHide:function(){this.$colorPicker.hide()},_fadeEffectShow:function(){this.$colorPicker.stop(!0,!1).css({display:"inline-block"}).animate({opacity:1},this.options.showSpeed)},_fadeEffectHide:function(){this.$colorPicker.stop(!0,!1).animate({opacity:0},this.options.hideSpeed,a.proxy(function(){this.$colorPicker.hide()},this))},_slideEffectShow:function(){var a="y"===this.positionAxis?{height:this.height}:{width:this.width};this.$colorPicker.css("display","inline-block"),this.$colorPickerHolder.stop(!0,!1).animate(a,this.options.showSpeed)},_slideEffectHide:function(){var b="y"===this.positionAxis?{height:0}:{width:0};this.$colorPickerHolder.stop(!0,!1).animate(b,this.options.hideSpeed,a.proxy(function(){this.$colorPicker.hide()},this))}},a.fn.wColorPicker=function(c,d){function e(d){var e,f=a.data(d,"wColorPicker");return f||(e=a.extend({},a.fn.wColorPicker.defaults,c),e.color=window.rgbHex(e.color)?e.color:"transparent",f=new b(d,e),a.data(d,"wColorPicker",f)),f}if("string"==typeof c){var f=[],g=null,h=null,i=null;return h=this.each(function(){g=a(this).data("wColorPicker"),g&&(i=(d?"set":"get")+c.charAt(0).toUpperCase()+c.substring(1).toLowerCase(),g[c]?f.push(g[c].apply(g,[d])):d?(g[i]&&g[i].apply(g,[d]),g.options[c]&&(g.options[c]=d)):g[i]?f.push(g[i].apply(g,[d])):g.options[c]?f.push(g.options[c]):f.push(null))}),1===f.length?f[0]:f.length>0?f:h}return this.each(function(){e(this)})},a.fn.wColorPicker.defaults={theme:"classic",opacity:.9,color:"#FF0000",mode:"flat",position:"bl",generateButton:!0,dropperButton:!1,effect:"slide",showSpeed:500,hideSpeed:500,onMouseover:null,onMouseout:null,onSelect:null,onDropper:null},a.fn.wColorPicker.mixedColors=[["#000000","#003300","#006600","#009900","#00CC00","#00FF00","#330000","#333300","#336600","#339900","#33CC00","#33FF00","#660000","#663300","#666600","#669900","#66CC00","#66FF00"],["#000033","#003333","#006633","#009933","#00CC33","#00FF33","#330033","#333333","#336633","#339933","#33CC33","#33FF33","#660033","#663333","#666633","#669933","#66CC33","#66FF33"],["#000066","#003366","#006666","#009966","#00CC66","#00FF66","#330066","#333366","#336666","#339966","#33CC66","#33FF66","#660066","#663366","#666666","#669966","#66CC66","#66FF66"],["#000099","#003399","#006699","#009999","#00CC99","#00FF99","#330099","#333399","#336699","#339999","#33CC99","#33FF99","#660099","#663399","#666699","#669999","#66CC99","#66FF99"],["#0000CC","#0033CC","#0066CC","#0099CC","#00CCCC","#00FFCC","#3300CC","#3333CC","#3366CC","#3399CC","#33CCCC","#33FFCC","#6600CC","#6633CC","#6666CC","#6699CC","#66CCCC","#66FFCC"],["#0000FF","#0033FF","#0066FF","#0099FF","#00CCFF","#00FFFF","#3300FF","#3333FF","#3366FF","#3399FF","#33CCFF","#33FFFF","#6600FF","#6633FF","#6666FF","#6699FF","#66CCFF","#66FFFF"],["#990000","#993300","#996600","#999900","#99CC00","#99FF00","#CC0000","#CC3300","#CC6600","#CC9900","#CCCC00","#CCFF00","#FF0000","#FF3300","#FF6600","#FF9900","#FFCC00","#FFFF00"],["#990033","#993333","#996633","#999933","#99CC33","#99FF33","#CC0033","#CC3333","#CC6633","#CC9933","#CCCC33","#CCFF33","#FF0033","#FF3333","#FF6633","#FF9933","#FFCC33","#FFFF33"],["#990066","#993366","#996666","#999966","#99CC66","#99FF66","#CC0066","#CC3366","#CC6666","#CC9966","#CCCC66","#CCFF66","#FF0066","#FF3366","#FF6666","#FF9966","#FFCC66","#FFFF66"],["#990099","#993399","#996699","#999999","#99CC99","#99FF99","#CC0099","#CC3399","#CC6699","#CC9999","#CCCC99","#CCFF99","#FF0099","#FF3399","#FF6699","#FF9999","#FFCC99","#FFFF99"],["#9900CC","#9933CC","#9966CC","#9999CC","#99CCCC","#99FFCC","#CC00CC","#CC33CC","#CC66CC","#CC99CC","#CCCCCC","#CCFFCC","#FF00CC","#FF33CC","#FF66CC","#FF99CC","#FFCCCC","#FFFFCC"],["#9900FF","#9933FF","#9966FF","#9999FF","#99CCFF","#99FFFF","#CC00FF","#CC33FF","#CC66FF","#CC99FF","#CCCCFF","#CCFFFF","#FF00FF","#FF33FF","#FF66FF","#FF99FF","#FFCCFF","#FFFFFF"]],a.fn.wColorPicker.simpleColors=[["#000000"],["#333333"],["#666666"],["#999999"],["#CCCCCC"],["#FFFFFF"],["#FF0000"],["#00FF00"],["#0000FF"],["#FFFF00"],["#00FFFF"],["#FF00FF"]]}(jQuery);/*! wPaint - v2.5.0 - 2014-03-01 */!function(a){"use strict";function b(b,c){this.$el=a(b),this.options=c,this.init=!1,this.menus={primary:null,active:null,all:{}},this.previousMode=null,this.width=this.$el.width(),this.height=this.$el.height(),this.ctxBgResize=!1,this.ctxResize=!1,this.generate(),this._init()}function c(a,b,c){this.wPaint=a,this.options=c,this.name=b,this.type=a.menus.primary?"secondary":"primary",this.docked=!0,this.dockOffset={left:0,top:0},this.generate()}b.prototype={generate:function(){function b(b){var c=b?b.capitalize():"",d="canvas"+c,e="ctx"+c;return f[d]=document.createElement("canvas"),f[e]=f[d].getContext("2d"),f["$"+d]=a(f[d]),f["$"+d].attr("class","wPaint-canvas"+(b?"-"+b:"")).attr("width",f.width+"px").attr("height",f.height+"px").css({position:"absolute",left:0,top:0}),f.$el.append(f["$"+d]),f["$"+d]}function c(a){a.preventDefault(),a.stopPropagation(),f.draw=!0,a.canvasEvent="down",f._closeSelectBoxes(),f._callShapeFunc.apply(f,[a])}function d(a){f.draw&&(a.canvasEvent="move",f._callShapeFunc.apply(f,[a]))}function e(a){f.draw&&(f.draw=!1,a.canvasEvent="up",f._callShapeFunc.apply(f,[a]))}if(this.init)return this;var f=this;b("bg"),b("").on("mousedown",c).bindMobileEvents(),b("temp").hide(),a(document).on("mousemove",d).on("mousedown",a.proxy(this._closeSelectBoxes,this)).on("mouseup",e),this.setTheme(this.options.theme)},_init:function(){var a=null,b=null;this.init=!0;for(a in this.options)b="set"+a.capitalize(),this[b]&&this[b](this.options[a]);this._fixMenus(),this.menus.primary._getIcon(this.options.mode).trigger("click")},resize:function(){var a=this.getBg(),b=this.getImage();this.width=this.$el.width(),this.height=this.$el.height(),this.canvasBg.width=this.width,this.canvasBg.height=this.height,this.canvas.width=this.width,this.canvas.height=this.height,this.ctxBgResize===!1&&(this.ctxBgResize=!0,this.setBg(a,!0)),this.ctxResize===!1&&(this.ctxResize=!0,this.setImage(b,"",!0,!0))},setTheme:function(a){var b,c;for(a=a.split(" "),this.$el.attr("class",(this.$el.attr("class")||"").replace(/wPaint-theme-.+\s|wPaint-theme-.+$/,"")),b=0,c=a.length;c>b;b++)this.$el.addClass("wPaint-theme-"+a[b])},setMode:function(a){this.setCursor(a),this.previousMode=this.options.mode,this.options.mode=a},setImage:function(b,c,d,e){function f(){var a=1,b=0,f=0,j=0,k=0,l=h.width,m=h.height;d||((h.width>g.width||h.height>g.height||g.options.imageStretch)&&(b=g.width/h.width,f=g.height/h.height,a=f>b?b:f,l=h.width*a,m=h.height*a),j=(g.width-l)/2,k=(g.height-m)/2),i.clearRect(0,0,g.width,g.height),i.drawImage(h,j,k,l,m),g[c+"Resize"]=!1,e||g._addUndo()}if(!b)return!0;var g=this,h=null,i="";c="ctx"+(c||"").capitalize(),i=this[c],window.rgbHex(b)?(i.clearRect(0,0,this.width,this.height),i.fillStyle=b,i.rect(0,0,this.width,this.height),i.fill()):(h=new Image,h.src=b.toString(),a(h).load(f))},setBg:function(a,b){return a?void this.setImage(a,"bg",b,!0):!0},setCursor:function(b){b=a.fn.wPaint.cursors[b]||a.fn.wPaint.cursors["default"],this.$el.css("cursor",'url("'+this.options.path+b.path+'") '+b.left+" "+b.top+", default")},setMenuOrientation:function(b){a.each(this.menus.all,function(a,c){c.options.aligment=b,c.setAlignment(b)})},getImage:function(b){var c=document.createElement("canvas"),d=c.getContext("2d");return b=b===!1?!1:!0,a(c).css({display:"none",position:"absolute",left:0,top:0}).attr("width",this.width).attr("height",this.height),b&&d.drawImage(this.canvasBg,0,0),d.drawImage(this.canvas,0,0),c.toDataURL()},getBg:function(){return this.canvasBg.toDataURL()},_displayStatus:function(b){var c=this;this.$status||(this.$status=a('<div class="wPaint-status"></div>'),this.$el.append(this.$status)),this.$status.html(b),clearTimeout(this.displayStatusTimer),this.$status.fadeIn(500,function(){c.displayStatusTimer=setTimeout(function(){c.$status.fadeOut(500)},1500)})},_showModal:function(a){function b(){d.remove(),e.remove(),c._createModal(a)}var c=this,d=this.$el.children(".wPaint-modal-bg"),e=this.$el.children(".wPaint-modal");d.length?e.fadeOut(500,b):this._createModal(a)},_createModal:function(b){function c(){f.fadeOut(500,d)}function d(){e.remove(),f.remove()}b=a('<div class="wPaint-modal-content"></div>').append(b.children());var e=a('<div class="wPaint-modal-bg"></div>'),f=a('<div class="wPaint-modal"></div>'),g=a('<div class="wPaint-modal-holder"></div>'),h=a('<div class="wPaint-modal-close">X</div>');h.on("click",c),f.append(g.append(b)).append(h),this.$el.append(e).append(f),f.css({left:this.$el.outerWidth()/2-f.outerWidth(!0)/2,top:this.$el.outerHeight()/2-f.outerHeight(!0)/2}),f.fadeIn(500)},_createMenu:function(a,b){return b=b||{},b.alignment=this.options.menuOrientation,b.handle=this.options.menuHandle,new c(this,a,b)},_fixMenus:function(){function b(b,d){var e=a(d),f=e.clone();f.appendTo(c.$el),f.outerHeight()===f.get(0).scrollHeight&&e.css({overflowY:"auto"}),f.remove()}var c=this,d=null;for(var e in this.menus.all)d=c.menus.all[e].$menu.find(".wPaint-menu-select-holder"),d.length&&d.children().each(b)},_closeSelectBoxes:function(a){var b,c;for(b in this.menus.all)c=this.menus.all[b].$menuHolder.children(".wPaint-menu-icon-select"),a&&(c=c.not(".wPaint-menu-icon-name-"+a.name)),c.children(".wPaint-menu-select-holder").hide()},_callShapeFunc:function(a){var b=this.$canvas.offset(),c=a.canvasEvent.capitalize(),d="_draw"+this.options.mode.capitalize()+c;a.pageX=Math.floor(a.pageX-b.left),a.pageY=Math.floor(a.pageY-b.top),this[d]&&this[d].apply(this,[a]),this.options["draw"+c]&&this.options["_draw"+c].apply(this,[a]),"Down"===c&&this.options.onShapeDown?this.options.onShapeDown.apply(this,[a]):"Move"===c&&this.options.onShapeMove?this.options.onShapeMove.apply(this,[a]):"Up"===c&&this.options.onShapeUp&&this.options.onShapeUp.apply(this,[a])},_stopPropagation:function(a){a.stopPropagation()},_drawShapeDown:function(a){this.$canvasTemp.css({left:a.PageX,top:a.PageY}).attr("width",0).attr("height",0).show(),this.canvasTempLeftOriginal=a.pageX,this.canvasTempTopOriginal=a.pageY},_drawShapeMove:function(b,c){var d=this.canvasTempLeftOriginal,e=this.canvasTempTopOriginal;c=c||2,b.left=b.pageX<d?b.pageX:d,b.top=b.pageY<e?b.pageY:e,b.width=Math.abs(b.pageX-d),b.height=Math.abs(b.pageY-e),b.x=this.options.lineWidth/2*c,b.y=this.options.lineWidth/2*c,b.w=b.width-this.options.lineWidth*c,b.h=b.height-this.options.lineWidth*c,a(this.canvasTemp).css({left:b.left,top:b.top}).attr("width",b.width).attr("height",b.height),this.canvasTempLeftNew=b.left,this.canvasTempTopNew=b.top,c=c||2,this.ctxTemp.fillStyle=this.options.fillStyle,this.ctxTemp.strokeStyle=this.options.strokeStyle,this.ctxTemp.lineWidth=this.options.lineWidth*c},_drawShapeUp:function(){this.ctx.drawImage(this.canvasTemp,this.canvasTempLeftNew,this.canvasTempTopNew),this.$canvasTemp.hide()},_drawDropperDown:function(a){var b={x:a.pageX,y:a.pageY},c=this._getPixel(this.ctx,b),d=null;d="rgba("+[c.r,c.g,c.b,c.a].join(",")+")",this.options[this.dropper]=d,this.menus.active._getIcon(this.dropper).wColorPicker("color",d)},_drawDropperUp:function(){this.setMode(this.previousMode)},_getPixel:function(a,b){var c=a.getImageData(0,0,this.width,this.height),d=c.data,e=4*(b.y*c.width+b.x);return{r:d[e],g:d[e+1],b:d[e+2],a:d[e+3]}}},c.prototype={generate:function(){this.$menu=a('<div class="wPaint-menu"></div>'),this.$menuHolder=a('<div class="wPaint-menu-holder wPaint-menu-name-'+this.name+'"></div>'),this.options.handle?this.$menuHandle=this._createHandle():this.$menu.addClass("wPaint-menu-nohandle"),"primary"===this.type?(this.wPaint.menus.primary=this,this.setOffsetLeft(this.options.offsetLeft),this.setOffsetTop(this.options.offsetTop)):"secondary"===this.type&&this.$menu.hide(),this.$menu.append(this.$menuHolder.append(this.$menuHandle)),this.reset(),this.wPaint.$el.append(this.$menu),this.setAlignment(this.options.alignment)},reset:function(){function b(a){d._appendItem(a)}var c,d=this,e=a.fn.wPaint.menus[this.name];for(c in e.items)this.$menuHolder.children(".wPaint-menu-icon-name-"+c).length||(e.items[c].name=c,e.items[c].img=d.wPaint.options.path+(e.items[c].img||e.img),b(e.items[c]))},_appendItem:function(a){var b=this["_createIcon"+a.icon.capitalize()](a);a.after?this.$menuHolder.children(".wPaint-menu-icon-name-"+a.after).after(b):this.$menuHolder.append(b)},setOffsetLeft:function(a){this.$menu.css({left:a})},setOffsetTop:function(a){this.$menu.css({top:a})},setAlignment:function(a){var b=this.$menu.css("left");this.$menu.attr("class",this.$menu.attr("class").replace(/wPaint-menu-alignment-.+\s|wPaint-menu-alignment-.+$/,"")),this.$menu.addClass("wPaint-menu-alignment-"+a),this.$menu.width("auto").css("left",-1e4),this.$menu.width(this.$menu.width()).css("left",b),"secondary"===this.type&&("horizontal"===this.options.alignment?this.dockOffset.top=this.wPaint.menus.primary.$menu.outerHeight(!0):this.dockOffset.left=this.wPaint.menus.primary.$menu.outerWidth(!0))},_createHandle:function(){function b(){e.docked=!1,e._setDrag()}function c(){a.each(e.$menu.data("ui-draggable").snapElements,function(a,b){var c=e.$menu.offset(),d=e.wPaint.menus.primary.$menu.offset();e.dockOffset.left=c.left-d.left,e.dockOffset.top=c.top-d.top,e.docked=b.snapping}),e._setDrag()}function d(){e._setIndex()}var e=this,f=a('<div class="wPaint-menu-handle"></div>');return this.$menu.draggable({handle:f}),"secondary"===this.type&&(this.$menu.draggable("option","snap",this.wPaint.menus.primary.$menu),this.$menu.draggable("option","start",b),this.$menu.draggable("option","stop",c),this.$menu.draggable("option","drag",d)),f.bindMobileEvents(),f},_createIconBase:function(b){function c(b){var c=a(b.currentTarget);c.siblings(".hover").removeClass("hover"),c.hasClass("disabled")||c.addClass("hover")}function d(b){a(b.currentTarget).removeClass("hover")}function e(){f.wPaint.menus.active=f}var f=this,g=a('<div class="wPaint-menu-icon wPaint-menu-icon-name-'+b.name+'"></div>'),h=a('<div class="wPaint-menu-icon-img"></div>'),i=h.realWidth(null,null,this.wPaint.$el);return g.attr("title",b.title).on("mousedown",a.proxy(this.wPaint._closeSelectBoxes,this.wPaint,b)).on("mouseenter",c).on("mouseleave",d).on("click",e),a.isNumeric(b.index)&&h.css({backgroundImage:"url("+b.img+")",backgroundPosition:-i*b.index+"px 0px"}),g.append(h)},_createIconGroup:function(b){function c(){h.children(".wPaint-menu-select-holder").is(":visible")||b.callback.apply(f.wPaint,[])}function d(){h.addClass("active").siblings(".active").removeClass("active")}function e(){h.attr("title",b.title).off("click.setIcon").on("click.setIcon",c),h.children(".wPaint-menu-icon-img").css(g),b.callback.apply(f.wPaint,[])}var f=this,g={backgroundImage:"url("+b.img+")"},h=this.$menuHolder.children(".wPaint-menu-icon-group-"+b.group),i=h.length,j=null,k=null,l=null,m=0;return i||(h=this._createIconBase(b).addClass("wPaint-menu-icon-group wPaint-menu-icon-group-"+b.group).on("click.setIcon",c).on("mousedown",a.proxy(this._iconClick,this))),m=h.children(".wPaint-menu-icon-img").realWidth(null,null,this.wPaint.$el),g.backgroundPosition=-m*b.index+"px center",j=h.children(".wPaint-menu-select-holder"),j.length||(j=this._createSelectBox(h),j.children().on("click",d)),l=a('<div class="wPaint-menu-icon-select-img"></div>').attr("title",b.title).css(g),k=this._createSelectOption(j,l).addClass("wPaint-menu-icon-name-"+b.name).on("click",e),b.after&&j.children(".wPaint-menu-select").children(".wPaint-menu-icon-name-"+b.after).after(k),i?void 0:h},_createIconGeneric:function(a){return this._createIconActivate(a)},_createIconActivate:function(a){function b(b){"generic"!==a.icon&&c._iconClick(b),a.callback.apply(c.wPaint,[b])}if(a.group)return this._createIconGroup(a);var c=this,d=this._createIconBase(a);return d.on("click",b),d},_isIconDisabled:function(a){return this.$menuHolder.children(".wPaint-menu-icon-name-"+a).hasClass("disabled")},_setIconDisabled:function(a,b){var c=this.$menuHolder.children(".wPaint-menu-icon-name-"+a);b?c.addClass("disabled").removeClass("hover"):c.removeClass("disabled")},_getIcon:function(a){return this.$menuHolder.children(".wPaint-menu-icon-name-"+a)},_iconClick:function(b){var c=a(b.currentTarget),d=this.wPaint.menus.all;for(var e in d)d[e]&&"secondary"===d[e].type&&d[e].$menu.hide();c.siblings(".active").removeClass("active"),c.hasClass("disabled")||c.addClass("active")},_createIconToggle:function(a){function b(){d.toggleClass("active"),a.callback.apply(c.wPaint,[d.hasClass("active")])}var c=this,d=this._createIconBase(a);return d.on("click",b),d},_createIconSelect:function(b){function c(c){h.children(".wPaint-menu-icon-img").html(a(c.currentTarget).html()),b.callback.apply(g.wPaint,[a(c.currentTarget).html()])}var d,e,f,g=this,h=this._createIconBase(b),i=this._createSelectBox(h);for(d=0,e=b.range.length;e>d;d++)f=this._createSelectOption(i,b.range[d]),f.on("click",c),b.useRange&&f.css(b.name,b.range[d]);return h},_createSelectBox:function(b){function c(a){a.stopPropagation(),g.hide()}function d(){i=setTimeout(function(){g.toggle()},200)}function e(){clearTimeout(i)}function f(){g.toggle()}var g=a('<div class="wPaint-menu-select-holder"></div>'),h=a('<div class="wPaint-menu-select"></div>'),i=null;return g.on("mousedown mouseup",this.wPaint._stopPropagation).on("click",c).hide(),g.css("horizontal"===this.options.alignment?{left:0,top:b.children(".wPaint-menu-icon-img").realHeight("outer",!0,this.wPaint.$el)}:{left:b.children(".wPaint-menu-icon-img").realWidth("outer",!0,this.wPaint.$el),top:0}),b.addClass("wPaint-menu-icon-select").append('<div class="wPaint-menu-icon-group-arrow"></div>').append(g.append(h)),b.hasClass("wPaint-menu-icon-group")?b.on("mousedown",d).on("mouseup",e):b.on("click",f),g},_createSelectOption:function(b,c){var d=b.children(".wPaint-menu-select"),e=a('<div class="wPaint-menu-select-option"></div>').append(c);return d.children().length||e.addClass("first"),d.append(e),e},_setSelectValue:function(a,b){this._getIcon(a).children(".wPaint-menu-icon-img").html(b)},_createIconColorPicker:function(a){function b(){"dropper"===e.wPaint.options.mode&&e.wPaint.setMode(e.wPaint.previousMode)}function c(b){a.callback.apply(e.wPaint,[b])}function d(){f.trigger("click"),e.wPaint.dropper=a.name,e.wPaint.setMode("dropper")}var e=this,f=this._createIconBase(a);return f.on("click",b).addClass("wPaint-menu-colorpicker").wColorPicker({mode:"click",generateButton:!1,dropperButton:!0,onSelect:c,onDropper:d}),f},_setColorPickerValue:function(a,b){this._getIcon(a).children(".wPaint-menu-icon-img").css("backgroundColor",b)},_createIconMenu:function(a){function b(){c.wPaint.setCursor(a.name);var b=c.wPaint.menus.all[a.name];b.$menu.toggle(),c.handle?b._setDrag():b._setPosition()}var c=this,d=this._createIconActivate(a);return d.on("click",b),d},_setDrag:function(){var b=this.$menu,c=null,d=null;b.is(":visible")&&(this.docked&&(c=d=a.proxy(this._setPosition,this),this._setPosition()),this.wPaint.menus.primary.$menu.draggable("option","drag",c),this.wPaint.menus.primary.$menu.draggable("option","stop",d))},_setPosition:function(){var a=this.wPaint.menus.primary.$menu.position();this.$menu.css({left:a.left+this.dockOffset.left,top:a.top+this.dockOffset.top})},_setIndex:function(){var a=this.wPaint.menus.primary.$menu.offset(),b=this.$menu.offset();b.top<a.top||b.left<a.left?this.$menu.addClass("wPaint-menu-behind"):this.$menu.removeClass("wPaint-menu-behind")}},a.support.canvas=document.createElement("canvas").getContext,a.fn.wPaint=function(c,d){function e(){return a.support.canvas?a.proxy(f,this)():(a(this).html("Browser does not support HTML5 canvas, please upgrade to a more modern browser."),!1)}function f(){var d=a.data(this,"wPaint");return d||(d=new b(this,a.extend(!0,{},c)),a.data(this,"wPaint",d)),d}function g(){var b=a.data(this,"wPaint");b&&(b[c]?b[c].apply(b,[d]):void 0!==d?(b[i]&&b[i].apply(b,[d]),b.options[c]&&(b.options[c]=d)):h.push(b[i]?b[i].apply(b,[d]):b.options[c]?b.options[c]:void 0))}if("string"==typeof c){var h=[],i=(d?"set":"get")+c.charAt(0).toUpperCase()+c.substring(1);return this.each(g),h.length?1===h.length?h[0]:h:this}return c=a.extend({},a.fn.wPaint.defaults,c),c.lineWidth=parseInt(c.lineWidth,10),c.fontSize=parseInt(c.fontSize,10),this.each(e)},a.fn.wPaint.extend=function(a,d){function e(c){if(d[c]){var e=b.prototype[c],f=a[c];d[c]=function(){e.apply(this,arguments),f.apply(this,arguments)}}else d[c]=a[c]}var f;d="menu"===d?c.prototype:b.prototype;for(f in a)e(f)},a.fn.wPaint.menus={},a.fn.wPaint.cursors={},a.fn.wPaint.defaults={path:"/",theme:"standard classic",autoScaleImage:!0,autoCenterImage:!0,menuHandle:!0,menuOrientation:"horizontal",menuOffsetLeft:5,menuOffsetTop:5,bg:null,image:null,imageStretch:!1,onShapeDown:null,onShapeMove:null,onShapeUp:null}}(jQuery),function(){String.prototype.capitalize||(String.prototype.capitalize=function(){return this.slice(0,1).toUpperCase()+this.slice(1)})}(),function(a){a.fn.realWidth=function(b,c,d){var e=null,f=null,g=null;return b="inner"===b||"outer"===b?b:"",g=""===b?"width":b+"Width",c=c===!0?!0:!1,f=a(this).clone().css({position:"absolute",left:-1e4}).appendTo(d||"body"),e=c?f[g](c):f[g](),f.remove(),e},a.fn.realHeight=function(b,c,d){var e=null,f=null,g=null;return b="inner"===b||"outer"===b?b:"",g=""===b?"height":b+"Height",c=c===!0?!0:!1,f=a(this).clone().css({position:"absolute",left:-1e4}).appendTo(d||"body"),e=c?f[g](c):f[g](),f.remove(),e},a.fn.bindMobileEvents=function(){a(this).on("touchstart touchmove touchend touchcancel",function(){var a=event.changedTouches||event.originalEvent.targetTouches,b=a[0],c="";switch(event.type){case"touchstart":c="mousedown";break;case"touchmove":c="mousemove",event.preventDefault();break;case"touchend":c="mouseup";break;default:return}var d=document.createEvent("MouseEvent");d.initMouseEvent(c,!0,!0,window,1,b.screenX,b.screenY,b.clientX,b.clientY,!1,!1,!1,!1,0,null),b.target.dispatchEvent(d)})}}(jQuery);/*! wPaint - v2.5.0 - 2014-03-01 */!function(a){a.fn.wPaint.menus.main={img:"plugins/main/img/icons-menu-main.png",items:{undo:{icon:"generic",title:"Undo",index:0,callback:function(){this.undo()}},redo:{icon:"generic",title:"Redo",index:1,callback:function(){this.redo()}},clear:{icon:"generic",title:"Clear",index:2,callback:function(){this.clear()}},rectangle:{icon:"activate",title:"Rectangle",index:3,callback:function(){this.setMode("rectangle")}},ellipse:{icon:"activate",title:"Ellipse",index:4,callback:function(){this.setMode("ellipse")}},line:{icon:"activate",title:"Line",index:5,callback:function(){this.setMode("line")}},pencil:{icon:"activate",title:"Pencil",index:6,callback:function(){this.setMode("pencil")}},eraser:{icon:"activate",title:"Eraser",index:8,callback:function(){this.setMode("eraser")}},bucket:{icon:"activate",title:"Bucket",index:9,callback:function(){this.setMode("bucket")}},fillStyle:{title:"Fill Color",icon:"colorPicker",callback:function(a){this.setFillStyle(a)}},lineWidth:{icon:"select",title:"Stroke Width",range:[1,2,3,4,5,6,7,8,9,10],value:2,callback:function(a){this.setLineWidth(a)}},strokeStyle:{icon:"colorPicker",title:"Stroke Color",callback:function(a){this.setStrokeStyle(a)}}}},a.extend(a.fn.wPaint.cursors,{"default":{path:"plugins/main/img/cursor-crosshair.png",left:7,top:7},dropper:{path:"plugins/main/img/cursor-dropper.png",left:0,top:12},pencil:{path:"plugins/main/img/cursor-pencil.png",left:0,top:11.99},bucket:{path:"plugins/main/img/cursor-bucket.png",left:0,top:10},eraser1:{path:"plugins/main/img/cursor-eraser1.png",left:1,top:1},eraser2:{path:"plugins/main/img/cursor-eraser2.png",left:2,top:2},eraser3:{path:"plugins/main/img/cursor-eraser3.png",left:2,top:2},eraser4:{path:"plugins/main/img/cursor-eraser4.png",left:3,top:3},eraser5:{path:"plugins/main/img/cursor-eraser5.png",left:3,top:3},eraser6:{path:"plugins/main/img/cursor-eraser6.png",left:4,top:4},eraser7:{path:"plugins/main/img/cursor-eraser7.png",left:4,top:4},eraser8:{path:"plugins/main/img/cursor-eraser8.png",left:5,top:5},eraser9:{path:"plugins/main/img/cursor-eraser9.png",left:5,top:5},eraser10:{path:"plugins/main/img/cursor-eraser10.png",left:6,top:6}}),a.extend(a.fn.wPaint.defaults,{mode:"pencil",lineWidth:"3",fillStyle:"#FFFFFF",strokeStyle:"#FFFF00"}),a.fn.wPaint.extend({undoCurrent:-1,undoArray:[],setUndoFlag:!0,generate:function(){this.menus.all.main=this._createMenu("main",{offsetLeft:this.options.menuOffsetLeft,offsetTop:this.options.menuOffsetTop})},_init:function(){this._addUndo(),this.menus.all.main._setIconDisabled("clear",!0)},setStrokeStyle:function(a){this.options.strokeStyle=a,this.menus.all.main._setColorPickerValue("strokeStyle",a)},setLineWidth:function(a){this.options.lineWidth=a,this.menus.all.main._setSelectValue("lineWidth",a),this.setCursor(this.options.mode)},setFillStyle:function(a){this.options.fillStyle=a,this.menus.all.main._setColorPickerValue("fillStyle",a)},setCursor:function(a){"eraser"===a&&this.setCursor("eraser"+this.options.lineWidth)},undo:function(){this.undoArray[this.undoCurrent-1]&&this._setUndo(--this.undoCurrent),this._undoToggleIcons()},redo:function(){this.undoArray[this.undoCurrent+1]&&this._setUndo(++this.undoCurrent),this._undoToggleIcons()},_addUndo:function(){for(this.undoCurrent<this.undoArray.length-1?this.undoArray[++this.undoCurrent]=this.getImage(!1):(this.undoArray.push(this.getImage(!1)),this.undoArray.length>this.undoMax?this.undoArray=this.undoArray.slice(1,this.undoArray.length):this.undoCurrent++);this.undoCurrent!==this.undoArray.length-1;)this.undoArray.pop();this._undoToggleIcons(),this.menus.all.main._setIconDisabled("clear",!1)},_undoToggleIcons:function(){var a=this.undoCurrent>0&&this.undoArray.length>1?0:1,b=this.undoCurrent<this.undoArray.length-1?2:3;this.menus.all.main._setIconDisabled("undo",1===a?!0:!1),this.menus.all.main._setIconDisabled("redo",3===b?!0:!1)},_setUndo:function(a){this.setImage(this.undoArray[a],null,null,!0)},clear:function(){this.menus.all.main._isIconDisabled("clear")||(this.ctx.clearRect(0,0,this.width,this.height),this._addUndo(),this.menus.all.main._setIconDisabled("clear",!0))},_drawRectangleDown:function(a){this._drawShapeDown(a)},_drawRectangleMove:function(a){this._drawShapeMove(a),this.ctxTemp.rect(a.x,a.y,a.w,a.h),this.ctxTemp.stroke(),this.ctxTemp.fill()},_drawRectangleUp:function(a){this._drawShapeUp(a),this._addUndo()},_drawEllipseDown:function(a){this._drawShapeDown(a)},_drawEllipseMove:function(a){this._drawShapeMove(a),this.ctxTemp.ellipse(a.x,a.y,a.w,a.h),this.ctxTemp.stroke(),this.ctxTemp.fill()},_drawEllipseUp:function(a){this._drawShapeUp(a),this._addUndo()},_drawLineDown:function(a){this._drawShapeDown(a)},_drawLineMove:function(a){this._drawShapeMove(a,1);var b=this.canvasTempLeftOriginal,c=this.canvasTempTopOriginal;a.pageX<b&&(a.x=a.x+a.w,a.w=-1*a.w),a.pageY<c&&(a.y=a.y+a.h,a.h=-1*a.h),this.ctxTemp.lineJoin="round",this.ctxTemp.beginPath(),this.ctxTemp.moveTo(a.x,a.y),this.ctxTemp.lineTo(a.x+a.w,a.y+a.h),this.ctxTemp.closePath(),this.ctxTemp.stroke()},_drawLineUp:function(a){this._drawShapeUp(a),this._addUndo()},_drawPencilDown:function(a){this.ctx.lineJoin="round",this.ctx.lineCap="round",this.ctx.strokeStyle=this.options.strokeStyle,this.ctx.fillStyle=this.options.strokeStyle,this.ctx.lineWidth=this.options.lineWidth,this.ctx.beginPath(),this.ctx.arc(a.pageX,a.pageY,this.options.lineWidth/2,0,2*Math.PI,!0),this.ctx.closePath(),this.ctx.fill(),this.ctx.beginPath(),this.ctx.moveTo(a.pageX,a.pageY)},_drawPencilMove:function(a){this.ctx.lineTo(a.pageX,a.pageY),this.ctx.stroke()},_drawPencilUp:function(){this.ctx.closePath(),this._addUndo()},_drawEraserDown:function(a){this.ctx.save(),this.ctx.globalCompositeOperation="destination-out",this._drawPencilDown(a)},_drawEraserMove:function(a){this._drawPencilMove(a)},_drawEraserUp:function(a){this._drawPencilUp(a),this.ctx.restore()},_drawBucketDown:function(a){this.ctx.fillArea(a.pageX,a.pageY,this.options.fillStyle),this._addUndo()}})}(jQuery),!function(){window.CanvasRenderingContext2D&&(CanvasRenderingContext2D.prototype.fillArea=function(a,b,c){function d(a){return{r:p[a],g:p[a+1],b:p[a+2],a:p[a+3]}}function e(a){p[a]=c.r,p[a+1]=c.g,p[a+2]=c.b,p[a+3]=c.a}function f(a){return g.r===a.r&&g.g===a.g&&g.b===a.b&&g.a===a.a}if(!a||!b||!c)return!0;var g,h,i,j,k,l,m=this.canvas.width,n=this.canvas.height,o=this.getImageData(0,0,m,n),p=o.data,q=[[a,b]];if(g=d(4*(b*m+a)),l=this.canvas.style.color,this.canvas.style.color=c,c=this.canvas.style.color.match(/^rgba?\((.*)\);?$/)[1].split(","),this.canvas.style.color=l,c={r:parseInt(c[0],10),g:parseInt(c[1],10),b:parseInt(c[2],10),a:parseInt(c[3]||255,10)},f(c))return!0;for(;q.length;){for(h=q.pop(),i=4*(h[1]*m+h[0]);h[1]-->=0&&f(d(i));)i-=4*m;for(i+=4*m,++h[1],j=!1,k=!1;h[1]++<n-1&&f(d(i));)e(i),h[0]>0&&(f(d(i-4))?j||(q.push([h[0]-1,h[1]]),j=!0):j&&(j=!1)),h[0]<m-1&&(f(d(i+4))?k||(q.push([h[0]+1,h[1]]),k=!0):k&&(k=!1)),i+=4*m}this.putImageData(o,0,0)})}();/*! wPaint - v2.5.0 - 2014-03-01 */!function(a){a.fn.wPaint.menus.text={img:"plugins/text/img/icons-menu-text.png",items:{bold:{icon:"toggle",title:"Bold",index:0,callback:function(a){this.setFontBold(a)}},italic:{icon:"toggle",title:"Italic",index:1,callback:function(a){this.setFontItalic(a)}},fontSize:{title:"Font Size",icon:"select",range:[8,9,10,12,14,16,20,24,30],value:12,callback:function(a){this.setFontSize(a)}},fontFamily:{icon:"select",title:"Font Family",range:["Arial","Courier","Times","Verdana"],useRange:!0,value:"Arial",callback:function(a){this.setFontFamily(a)}}}},a.fn.wPaint.menus.main.items.text={icon:"menu",after:"pencil",title:"Text",index:7,callback:function(){this.setMode("text")}},a.extend(a.fn.wPaint.defaults,{fontSize:"12",fontFamily:"Arial",fontBold:!1,fontItalic:!1,fontUnderline:!1}),a.fn.wPaint.extend({generate:function(){this.$textCalc=a("<div></div>").hide(),this.$textInput=a('<textarea class="wPaint-text-input" spellcheck="false"></textarea>').on("mousedown",this._stopPropagation).css({position:"absolute"}).hide(),a("body").append(this.$textCalc),this.$el.append(this.$textInput),this.menus.all.text=this._createMenu("text")},_init:function(){function b(){c._drawTextIfNotEmpty(),c.$textInput.hide(),c.$canvasTemp.hide()}var c=this;for(var d in this.menus.all)this.menus.all[d].$menu.on("click",b).on("mousedown",this._stopPropagation);a(document).on("mousedown",b)},setFillStyle:function(a){this.$textInput.css("color",a)},setFontSize:function(a){this.options.fontSize=parseInt(a,10),this._setFont({fontSize:a+"px",lineHeight:a+"px"}),this.menus.all.text._setSelectValue("fontSize",a)},setFontFamily:function(a){this.options.fontFamily=a,this._setFont({fontFamily:a}),this.menus.all.text._setSelectValue("fontFamily",a)},setFontBold:function(a){this.options.fontBold=a,this._setFont({fontWeight:a?"bold":""})},setFontItalic:function(a){this.options.fontItalic=a,this._setFont({fontStyle:a?"italic":""})},setFontUnderline:function(a){this.options.fontUnderline=a,this._setFont({fontWeight:a?"underline":""})},_setFont:function(a){this.$textInput.css(a),this.$textCalc.css(a)},_drawTextDown:function(a){this._drawTextIfNotEmpty(),this._drawShapeDown(a,1),this.$textInput.css({left:a.pageX-1,top:a.pageY-1,width:0,height:0}).show().focus()},_drawTextMove:function(a){this._drawShapeMove(a,1),this.$textInput.css({left:a.left-1,top:a.top-1,width:a.width,height:a.height})},_drawTextIfNotEmpty:function(){""!==this.$textInput.val()&&this._drawText()},_drawText:function(){var a,b,c,d,e="",f=this.$textInput.val().split("\n"),g=[],h=this.$textInput.width()-2,i=0,j=0,k=this.$textInput.position(),l=k.left+1,m=k.top+1;for(this.options.fontItalic&&(e+="italic "),this.options.fontBold&&(e+="bold "),e+=this.options.fontSize+"px "+this.options.fontFamily,a=0,b=f.length;b>a;a++){for(this.$textCalc.html(""),j=0,c=0,d=f[0].length;d>c;c++)i=this.$textCalc.append(f[a][c]).width(),i>h&&(g.push(f[a].substring(j,c)),j=c,this.$textCalc.html(f[a][c]));j!==c&&g.push(f[a].substring(j,c))}for(f=this.$textInput.val(g.join("\n")).val().split("\n"),a=0,b=f.length;b>a;a++)this.ctx.fillStyle=this.options.fillStyle,this.ctx.textBaseline="top",this.ctx.font=e,this.ctx.fillText(f[a],l,m),m+=this.options.fontSize;this.$textInput.val(""),this._addUndo()}})}(jQuery);/*! wPaint - v2.5.0 - 2014-03-01 */!function(a){var b="plugins/shapes/img/icons-menu-main-shapes.png";a.extend(!0,a.fn.wPaint.menus.main.items,{rectangle:{group:"shapes"},roundedRect:{icon:"activate",group:"shapes",title:"Rounded Rectangle",img:b,index:0,callback:function(){this.setMode("roundedRect")}},square:{icon:"activate",group:"shapes",title:"Square",img:b,index:1,callback:function(){this.setMode("square")}},roundedSquare:{icon:"activate",group:"shapes",title:"Rounded Square",img:b,index:2,callback:function(){this.setMode("roundedSquare")}},diamond:{icon:"activate",group:"shapes",title:"Diamond",img:b,index:4,callback:function(){this.setMode("diamond")}},ellipse:{group:"shapes2"},circle:{icon:"activate",group:"shapes2",title:"Circle",img:b,index:3,callback:function(){this.setMode("circle")}},pentagon:{icon:"activate",group:"shapes2",title:"Pentagon",img:b,index:5,callback:function(){this.setMode("pentagon")}},hexagon:{icon:"activate",group:"shapes2",title:"Hexagon",img:b,index:6,callback:function(){this.setMode("hexagon")}}}),a.fn.wPaint.extend({_drawRoundedRectDown:function(a){this._drawShapeDown(a)},_drawRoundedRectMove:function(a){this._drawShapeMove(a);var b=a.w>a.h?a.h/a.w:a.w/a.h;this.ctxTemp.roundedRect(a.x,a.y,a.w,a.h,Math.ceil(b*a.w*a.h*.001)),this.ctxTemp.stroke(),this.ctxTemp.fill()},_drawRoundedRectUp:function(a){this._drawShapeUp(a),this._addUndo()},_drawSquareDown:function(a){this._drawShapeDown(a)},_drawSquareMove:function(a){this._drawShapeMove(a);var b=a.w>a.h?a.h:a.w;this.ctxTemp.rect(a.x,a.y,b,b),this.ctxTemp.stroke(),this.ctxTemp.fill()},_drawSquareUp:function(a){this._drawShapeUp(a),this._addUndo()},_drawRoundedSquareDown:function(a){this._drawShapeDown(a)},_drawRoundedSquareMove:function(a){this._drawShapeMove(a);var b=a.w>a.h?a.h:a.w;this.ctxTemp.roundedRect(a.x,a.y,b,b,Math.ceil(b*b*.001)),this.ctxTemp.stroke(),this.ctxTemp.fill()},_drawRoundedSquareUp:function(a){this._drawShapeUp(a),this._addUndo()},_drawDiamondDown:function(a){this._drawShapeDown(a)},_drawDiamondMove:function(a){this._drawShapeMove(a),this.ctxTemp.diamond(a.x,a.y,a.w,a.h),this.ctxTemp.stroke(),this.ctxTemp.fill()},_drawDiamondUp:function(a){this._drawShapeUp(a),this._addUndo()},_drawCircleDown:function(a){this._drawShapeDown(a)},_drawCircleMove:function(a){this._drawShapeMove(a);var b=a.w>a.h?a.h:a.w;this.ctxTemp.ellipse(a.x,a.y,b,b),this.ctxTemp.stroke(),this.ctxTemp.fill()},_drawCircleUp:function(a){this._drawShapeUp(a),this._addUndo()},_drawPentagonDown:function(a){this._drawShapeDown(a)},_drawPentagonMove:function(a){this._drawShapeMove(a),this.ctxTemp.pentagon(a.x,a.y,a.w,a.h),this.ctxTemp.stroke(),this.ctxTemp.fill()},_drawPentagonUp:function(a){this._drawShapeUp(a),this._addUndo()},_drawHexagonDown:function(a){this._drawShapeDown(a)},_drawHexagonMove:function(a){this._drawShapeMove(a),this.ctxTemp.hexagon(a.x,a.y,a.w,a.h),this.ctxTemp.stroke(),this.ctxTemp.fill()},_drawHexagonUp:function(a){this._drawShapeUp(a),this._addUndo()}})}(jQuery),!function(){window.CanvasRenderingContext2D&&(CanvasRenderingContext2D.prototype.diamond=function(a,b,c,d){return a&&b&&c&&d?(this.beginPath(),this.moveTo(a+.5*c,b),this.lineTo(a,b+.5*d),this.lineTo(a+.5*c,b+d),this.lineTo(a+c,b+.5*d),this.lineTo(a+.5*c,b),void this.closePath()):!0}),window.CanvasRenderingContext2D&&(CanvasRenderingContext2D.prototype.ellipse=function(a,b,c,d){if(!(a&&b&&c&&d))return!0;var e=.5522848,f=c/2*e,g=d/2*e,h=a+c,i=b+d,j=a+c/2,k=b+d/2;this.beginPath(),this.moveTo(a,k),this.bezierCurveTo(a,k-g,j-f,b,j,b),this.bezierCurveTo(j+f,b,h,k-g,h,k),this.bezierCurveTo(h,k+g,j+f,i,j,i),this.bezierCurveTo(j-f,i,a,k+g,a,k),this.closePath()}),window.CanvasRenderingContext2D&&(CanvasRenderingContext2D.prototype.hexagon=function(a,b,c,d){if(!(a&&b&&c&&d))return!0;var e=.225,f=1-e;this.beginPath(),this.moveTo(a+.5*c,b),this.lineTo(a,b+d*e),this.lineTo(a,b+d*f),this.lineTo(a+.5*c,b+d),this.lineTo(a+c,b+d*f),this.lineTo(a+c,b+d*e),this.lineTo(a+.5*c,b),this.closePath()}),window.CanvasRenderingContext2D&&(CanvasRenderingContext2D.prototype.pentagon=function(a,b,c,d){return a&&b&&c&&d?(this.beginPath(),this.moveTo(a+c/2,b),this.lineTo(a,b+.4*d),this.lineTo(a+.2*c,b+d),this.lineTo(a+.8*c,b+d),this.lineTo(a+c,b+.4*d),this.lineTo(a+c/2,b),void this.closePath()):!0}),window.CanvasRenderingContext2D&&(CanvasRenderingContext2D.prototype.roundedRect=function(a,b,c,d,e){return a&&b&&c&&d?(e||(e=5),this.beginPath(),this.moveTo(a+e,b),this.lineTo(a+c-e,b),this.quadraticCurveTo(a+c,b,a+c,b+e),this.lineTo(a+c,b+d-e),this.quadraticCurveTo(a+c,b+d,a+c-e,b+d),this.lineTo(a+e,b+d),this.quadraticCurveTo(a,b+d,a,b+d-e),this.lineTo(a,b+e),this.quadraticCurveTo(a,b,a+e,b),void this.closePath()):!0})}();/*! wPaint - v2.5.0 - 2014-03-01 */!function(a){var b="plugins/file/img/icons-menu-main-file.png";a.extend(!0,a.fn.wPaint.menus.main.items,{save:{icon:"generic",title:"Save Image",img:b,index:0,callback:function(){this.options.saveImg.apply(this,[this.getImage()])}},loadBg:{icon:"generic",group:"loadImg",title:"Load Image to Foreground",img:b,index:2,callback:function(){this.options.loadImgFg.apply(this,[])}},loadFg:{icon:"generic",group:"loadImg",title:"Load Image to Background",img:b,index:1,callback:function(){this.options.loadImgBg.apply(this,[])}}}),a.extend(a.fn.wPaint.defaults,{saveImg:null,loadImgFg:null,loadImgBg:null}),a.fn.wPaint.extend({_showFileModal:function(b,c){function d(a,b){function c(c){c.stopPropagation(),"fg"===a?e.setImage(b):"bg"===a&&e.setBg(b,null,null,!0)}g.on("click",c)}for(var e=this,f=a("<div></div>"),g=null,h=0,i=c.length;i>h;h++)g=a('<img class="wPaint-modal-img"/>').attr("src",c[h]),g=a('<div class="wPaint-modal-img-holder"></div>').append(g),d(b,c[h]),f.append(g);this._showModal(f)}})}(jQuery);/*! X-editable - v1.5.1 
* In-place editing with Twitter Bootstrap, jQuery UI or pure jQuery
* http://github.com/vitalets/x-editable
* Copyright (c) 2013 Vitaliy Potapov; Licensed MIT */
!function(a){"use strict";var b=function(b,c){this.options=a.extend({},a.fn.editableform.defaults,c),this.$div=a(b),this.options.scope||(this.options.scope=this)};b.prototype={constructor:b,initInput:function(){this.input=this.options.input,this.value=this.input.str2value(this.options.value),this.input.prerender()},initTemplate:function(){this.$form=a(a.fn.editableform.template)},initButtons:function(){var b=this.$form.find(".editable-buttons");b.append(a.fn.editableform.buttons),"bottom"===this.options.showbuttons&&b.addClass("editable-buttons-bottom")},render:function(){this.$loading=a(a.fn.editableform.loading),this.$div.empty().append(this.$loading),this.initTemplate(),this.options.showbuttons?this.initButtons():this.$form.find(".editable-buttons").remove(),this.showLoading(),this.isSaving=!1,this.$div.triggerHandler("rendering"),this.initInput(),this.$form.find("div.editable-input").append(this.input.$tpl),this.$div.append(this.$form),a.when(this.input.render()).then(a.proxy(function(){if(this.options.showbuttons||this.input.autosubmit(),this.$form.find(".editable-cancel").click(a.proxy(this.cancel,this)),this.input.error)this.error(this.input.error),this.$form.find(".editable-submit").attr("disabled",!0),this.input.$input.attr("disabled",!0),this.$form.submit(function(a){a.preventDefault()});else{this.error(!1),this.input.$input.removeAttr("disabled"),this.$form.find(".editable-submit").removeAttr("disabled");var b=null===this.value||void 0===this.value||""===this.value?this.options.defaultValue:this.value;this.input.value2input(b),this.$form.submit(a.proxy(this.submit,this))}this.$div.triggerHandler("rendered"),this.showForm(),this.input.postrender&&this.input.postrender()},this))},cancel:function(){this.$div.triggerHandler("cancel")},showLoading:function(){var a,b;this.$form?(a=this.$form.outerWidth(),b=this.$form.outerHeight(),a&&this.$loading.width(a),b&&this.$loading.height(b),this.$form.hide()):(a=this.$loading.parent().width(),a&&this.$loading.width(a)),this.$loading.show()},showForm:function(a){this.$loading.hide(),this.$form.show(),a!==!1&&this.input.activate(),this.$div.triggerHandler("show")},error:function(b){var c,d=this.$form.find(".control-group"),e=this.$form.find(".editable-error-block");if(b===!1)d.removeClass(a.fn.editableform.errorGroupClass),e.removeClass(a.fn.editableform.errorBlockClass).empty().hide();else{if(b){c=(""+b).split("\n");for(var f=0;f<c.length;f++)c[f]=a("<div>").text(c[f]).html();b=c.join("<br>")}d.addClass(a.fn.editableform.errorGroupClass),e.addClass(a.fn.editableform.errorBlockClass).html(b).show()}},submit:function(b){b.stopPropagation(),b.preventDefault();var c=this.input.input2value(),d=this.validate(c);if("object"===a.type(d)&&void 0!==d.newValue){if(c=d.newValue,this.input.value2input(c),"string"==typeof d.msg)return this.error(d.msg),this.showForm(),void 0}else if(d)return this.error(d),this.showForm(),void 0;if(!this.options.savenochange&&this.input.value2str(c)==this.input.value2str(this.value))return this.$div.triggerHandler("nochange"),void 0;var e=this.input.value2submit(c);this.isSaving=!0,a.when(this.save(e)).done(a.proxy(function(a){this.isSaving=!1;var b="function"==typeof this.options.success?this.options.success.call(this.options.scope,a,c):null;return b===!1?(this.error(!1),this.showForm(!1),void 0):"string"==typeof b?(this.error(b),this.showForm(),void 0):(b&&"object"==typeof b&&b.hasOwnProperty("newValue")&&(c=b.newValue),this.error(!1),this.value=c,this.$div.triggerHandler("save",{newValue:c,submitValue:e,response:a}),void 0)},this)).fail(a.proxy(function(a){this.isSaving=!1;var b;b="function"==typeof this.options.error?this.options.error.call(this.options.scope,a,c):"string"==typeof a?a:a.responseText||a.statusText||"Unknown error!",this.error(b),this.showForm()},this))},save:function(b){this.options.pk=a.fn.editableutils.tryParseJson(this.options.pk,!0);var c,d="function"==typeof this.options.pk?this.options.pk.call(this.options.scope):this.options.pk,e=!!("function"==typeof this.options.url||this.options.url&&("always"===this.options.send||"auto"===this.options.send&&null!==d&&void 0!==d));return e?(this.showLoading(),c={name:this.options.name||"",value:b,pk:d},"function"==typeof this.options.params?c=this.options.params.call(this.options.scope,c):(this.options.params=a.fn.editableutils.tryParseJson(this.options.params,!0),a.extend(c,this.options.params)),"function"==typeof this.options.url?this.options.url.call(this.options.scope,c):a.ajax(a.extend({url:this.options.url,data:c,type:"POST"},this.options.ajaxOptions))):void 0},validate:function(a){return void 0===a&&(a=this.value),"function"==typeof this.options.validate?this.options.validate.call(this.options.scope,a):void 0},option:function(a,b){a in this.options&&(this.options[a]=b),"value"===a&&this.setValue(b)},setValue:function(a,b){this.value=b?this.input.str2value(a):a,this.$form&&this.$form.is(":visible")&&this.input.value2input(this.value)}},a.fn.editableform=function(c){var d=arguments;return this.each(function(){var e=a(this),f=e.data("editableform"),g="object"==typeof c&&c;f||e.data("editableform",f=new b(this,g)),"string"==typeof c&&f[c].apply(f,Array.prototype.slice.call(d,1))})},a.fn.editableform.Constructor=b,a.fn.editableform.defaults={type:"text",url:null,params:null,name:null,pk:null,value:null,defaultValue:null,send:"auto",validate:null,success:null,error:null,ajaxOptions:null,showbuttons:!0,scope:null,savenochange:!1},a.fn.editableform.template='<form class="form-inline editableform"><div class="control-group"><div><div class="editable-input"></div><div class="editable-buttons"></div></div><div class="editable-error-block"></div></div></form>',a.fn.editableform.loading='<div class="editableform-loading"></div>',a.fn.editableform.buttons='<button type="submit" class="editable-submit">ok</button><button type="button" class="editable-cancel">cancel</button>',a.fn.editableform.errorGroupClass=null,a.fn.editableform.errorBlockClass="editable-error",a.fn.editableform.engine="jquery"}(window.jQuery),function(a){"use strict";a.fn.editableutils={inherit:function(a,b){var c=function(){};c.prototype=b.prototype,a.prototype=new c,a.prototype.constructor=a,a.superclass=b.prototype},setCursorPosition:function(a,b){if(a.setSelectionRange)a.setSelectionRange(b,b);else if(a.createTextRange){var c=a.createTextRange();c.collapse(!0),c.moveEnd("character",b),c.moveStart("character",b),c.select()}},tryParseJson:function(a,b){if("string"==typeof a&&a.length&&a.match(/^[\{\[].*[\}\]]$/))if(b)try{a=new Function("return "+a)()}catch(c){}finally{return a}else a=new Function("return "+a)();return a},sliceObj:function(b,c,d){var e,f,g={};if(!a.isArray(c)||!c.length)return g;for(var h=0;h<c.length;h++)e=c[h],b.hasOwnProperty(e)&&(g[e]=b[e]),d!==!0&&(f=e.toLowerCase(),b.hasOwnProperty(f)&&(g[e]=b[f]));return g},getConfigData:function(b){var c={};return a.each(b.data(),function(a,b){("object"!=typeof b||b&&"object"==typeof b&&(b.constructor===Object||b.constructor===Array))&&(c[a]=b)}),c},objectKeys:function(a){if(Object.keys)return Object.keys(a);if(a!==Object(a))throw new TypeError("Object.keys called on a non-object");var b,c=[];for(b in a)Object.prototype.hasOwnProperty.call(a,b)&&c.push(b);return c},escape:function(b){return a("<div>").text(b).html()},itemsByValue:function(b,c,d){if(!c||null===b)return[];if("function"!=typeof d){var e=d||"value";d=function(a){return a[e]}}var f=a.isArray(b),g=[],h=this;return a.each(c,function(c,e){if(e.children)g=g.concat(h.itemsByValue(b,e.children,d));else if(f)a.grep(b,function(a){return a==(e&&"object"==typeof e?d(e):e)}).length&&g.push(e);else{var i=e&&"object"==typeof e?d(e):e;b==i&&g.push(e)}}),g},createInput:function(b){var c,d,e,f=b.type;return"date"===f&&("inline"===b.mode?a.fn.editabletypes.datefield?f="datefield":a.fn.editabletypes.dateuifield&&(f="dateuifield"):a.fn.editabletypes.date?f="date":a.fn.editabletypes.dateui&&(f="dateui"),"date"!==f||a.fn.editabletypes.date||(f="combodate")),"datetime"===f&&"inline"===b.mode&&(f="datetimefield"),"wysihtml5"!==f||a.fn.editabletypes[f]||(f="textarea"),"function"==typeof a.fn.editabletypes[f]?(c=a.fn.editabletypes[f],d=this.sliceObj(b,this.objectKeys(c.defaults)),e=new c(d)):(a.error("Unknown type: "+f),!1)},supportsTransitions:function(){var a=document.body||document.documentElement,b=a.style,c="transition",d=["Moz","Webkit","Khtml","O","ms"];if("string"==typeof b[c])return!0;c=c.charAt(0).toUpperCase()+c.substr(1);for(var e=0;e<d.length;e++)if("string"==typeof b[d[e]+c])return!0;return!1}}}(window.jQuery),function(a){"use strict";var b=function(a,b){this.init(a,b)},c=function(a,b){this.init(a,b)};b.prototype={containerName:null,containerDataName:null,innerCss:null,containerClass:"editable-container editable-popup",defaults:{},init:function(c,d){this.$element=a(c),this.options=a.extend({},a.fn.editableContainer.defaults,d),this.splitOptions(),this.formOptions.scope=this.$element[0],this.initContainer(),this.delayedHide=!1,this.$element.on("destroyed",a.proxy(function(){this.destroy()},this)),a(document).data("editable-handlers-attached")||(a(document).on("keyup.editable",function(b){27===b.which&&a(".editable-open").editableContainer("hide")}),a(document).on("click.editable",function(c){var d,e=a(c.target),f=[".editable-container",".ui-datepicker-header",".datepicker",".modal-backdrop",".bootstrap-wysihtml5-insert-image-modal",".bootstrap-wysihtml5-insert-link-modal"];if(a.contains(document.documentElement,c.target)&&!e.is(document)){for(d=0;d<f.length;d++)if(e.is(f[d])||e.parents(f[d]).length)return;b.prototype.closeOthers(c.target)}}),a(document).data("editable-handlers-attached",!0))},splitOptions:function(){if(this.containerOptions={},this.formOptions={},!a.fn[this.containerName])throw new Error(this.containerName+" not found. Have you included corresponding js file?");for(var b in this.options)b in this.defaults?this.containerOptions[b]=this.options[b]:this.formOptions[b]=this.options[b]},tip:function(){return this.container()?this.container().$tip:null},container:function(){var a;return this.containerDataName&&(a=this.$element.data(this.containerDataName))?a:a=this.$element.data(this.containerName)},call:function(){this.$element[this.containerName].apply(this.$element,arguments)},initContainer:function(){this.call(this.containerOptions)},renderForm:function(){this.$form.editableform(this.formOptions).on({save:a.proxy(this.save,this),nochange:a.proxy(function(){this.hide("nochange")},this),cancel:a.proxy(function(){this.hide("cancel")},this),show:a.proxy(function(){this.delayedHide?(this.hide(this.delayedHide.reason),this.delayedHide=!1):this.setPosition()},this),rendering:a.proxy(this.setPosition,this),resize:a.proxy(this.setPosition,this),rendered:a.proxy(function(){this.$element.triggerHandler("shown",a(this.options.scope).data("editable"))},this)}).editableform("render")},show:function(b){this.$element.addClass("editable-open"),b!==!1&&this.closeOthers(this.$element[0]),this.innerShow(),this.tip().addClass(this.containerClass),this.$form,this.$form=a("<div>"),this.tip().is(this.innerCss)?this.tip().append(this.$form):this.tip().find(this.innerCss).append(this.$form),this.renderForm()},hide:function(a){if(this.tip()&&this.tip().is(":visible")&&this.$element.hasClass("editable-open")){if(this.$form.data("editableform").isSaving)return this.delayedHide={reason:a},void 0;this.delayedHide=!1,this.$element.removeClass("editable-open"),this.innerHide(),this.$element.triggerHandler("hidden",a||"manual")}},innerShow:function(){},innerHide:function(){},toggle:function(a){this.container()&&this.tip()&&this.tip().is(":visible")?this.hide():this.show(a)},setPosition:function(){},save:function(a,b){this.$element.triggerHandler("save",b),this.hide("save")},option:function(a,b){this.options[a]=b,a in this.containerOptions?(this.containerOptions[a]=b,this.setContainerOption(a,b)):(this.formOptions[a]=b,this.$form&&this.$form.editableform("option",a,b))},setContainerOption:function(a,b){this.call("option",a,b)},destroy:function(){this.hide(),this.innerDestroy(),this.$element.off("destroyed"),this.$element.removeData("editableContainer")},innerDestroy:function(){},closeOthers:function(b){a(".editable-open").each(function(c,d){if(d!==b&&!a(d).find(b).length){var e=a(d),f=e.data("editableContainer");f&&("cancel"===f.options.onblur?e.data("editableContainer").hide("onblur"):"submit"===f.options.onblur&&e.data("editableContainer").tip().find("form").submit())}})},activate:function(){this.tip&&this.tip().is(":visible")&&this.$form&&this.$form.data("editableform").input.activate()}},a.fn.editableContainer=function(d){var e=arguments;return this.each(function(){var f=a(this),g="editableContainer",h=f.data(g),i="object"==typeof d&&d,j="inline"===i.mode?c:b;h||f.data(g,h=new j(this,i)),"string"==typeof d&&h[d].apply(h,Array.prototype.slice.call(e,1))})},a.fn.editableContainer.Popup=b,a.fn.editableContainer.Inline=c,a.fn.editableContainer.defaults={value:null,placement:"top",autohide:!0,onblur:"cancel",anim:!1,mode:"popup"},jQuery.event.special.destroyed={remove:function(a){a.handler&&a.handler()}}}(window.jQuery),function(a){"use strict";a.extend(a.fn.editableContainer.Inline.prototype,a.fn.editableContainer.Popup.prototype,{containerName:"editableform",innerCss:".editable-inline",containerClass:"editable-container editable-inline",initContainer:function(){this.$tip=a("<span></span>"),this.options.anim||(this.options.anim=0)},splitOptions:function(){this.containerOptions={},this.formOptions=this.options},tip:function(){return this.$tip},innerShow:function(){this.$element.hide(),this.tip().insertAfter(this.$element).show()},innerHide:function(){this.$tip.hide(this.options.anim,a.proxy(function(){this.$element.show(),this.innerDestroy()},this))},innerDestroy:function(){this.tip()&&this.tip().empty().remove()}})}(window.jQuery),function(a){"use strict";var b=function(b,c){this.$element=a(b),this.options=a.extend({},a.fn.editable.defaults,c,a.fn.editableutils.getConfigData(this.$element)),this.options.selector?this.initLive():this.init(),this.options.highlight&&!a.fn.editableutils.supportsTransitions()&&(this.options.highlight=!1)};b.prototype={constructor:b,init:function(){var b,c=!1;if(this.options.name=this.options.name||this.$element.attr("id"),this.options.scope=this.$element[0],this.input=a.fn.editableutils.createInput(this.options),this.input){switch(void 0===this.options.value||null===this.options.value?(this.value=this.input.html2value(a.trim(this.$element.html())),c=!0):(this.options.value=a.fn.editableutils.tryParseJson(this.options.value,!0),this.value="string"==typeof this.options.value?this.input.str2value(this.options.value):this.options.value),this.$element.addClass("editable"),"textarea"===this.input.type&&this.$element.addClass("editable-pre-wrapped"),"manual"!==this.options.toggle?(this.$element.addClass("editable-click"),this.$element.on(this.options.toggle+".editable",a.proxy(function(a){if(this.options.disabled||a.preventDefault(),"mouseenter"===this.options.toggle)this.show();else{var b="click"!==this.options.toggle;this.toggle(b)}},this))):this.$element.attr("tabindex",-1),"function"==typeof this.options.display&&(this.options.autotext="always"),this.options.autotext){case"always":b=!0;break;case"auto":b=!a.trim(this.$element.text()).length&&null!==this.value&&void 0!==this.value&&!c;break;default:b=!1}a.when(b?this.render():!0).then(a.proxy(function(){this.options.disabled?this.disable():this.enable(),this.$element.triggerHandler("init",this)},this))}},initLive:function(){var b=this.options.selector;this.options.selector=!1,this.options.autotext="never",this.$element.on(this.options.toggle+".editable",b,a.proxy(function(b){var c=a(b.target);c.data("editable")||(c.hasClass(this.options.emptyclass)&&c.empty(),c.editable(this.options).trigger(b))},this))},render:function(a){return this.options.display!==!1?this.input.value2htmlFinal?this.input.value2html(this.value,this.$element[0],this.options.display,a):"function"==typeof this.options.display?this.options.display.call(this.$element[0],this.value,a):this.input.value2html(this.value,this.$element[0]):void 0},enable:function(){this.options.disabled=!1,this.$element.removeClass("editable-disabled"),this.handleEmpty(this.isEmpty),"manual"!==this.options.toggle&&"-1"===this.$element.attr("tabindex")&&this.$element.removeAttr("tabindex")},disable:function(){this.options.disabled=!0,this.hide(),this.$element.addClass("editable-disabled"),this.handleEmpty(this.isEmpty),this.$element.attr("tabindex",-1)},toggleDisabled:function(){this.options.disabled?this.enable():this.disable()},option:function(b,c){return b&&"object"==typeof b?(a.each(b,a.proxy(function(b,c){this.option(a.trim(b),c)},this)),void 0):(this.options[b]=c,"disabled"===b?c?this.disable():this.enable():("value"===b&&this.setValue(c),this.container&&this.container.option(b,c),this.input.option&&this.input.option(b,c),void 0))},handleEmpty:function(b){this.options.display!==!1&&(this.isEmpty=void 0!==b?b:"function"==typeof this.input.isEmpty?this.input.isEmpty(this.$element):""===a.trim(this.$element.html()),this.options.disabled?this.isEmpty&&(this.$element.empty(),this.options.emptyclass&&this.$element.removeClass(this.options.emptyclass)):this.isEmpty?(this.$element.html(this.options.emptytext),this.options.emptyclass&&this.$element.addClass(this.options.emptyclass)):this.options.emptyclass&&this.$element.removeClass(this.options.emptyclass))},show:function(b){if(!this.options.disabled){if(this.container){if(this.container.tip().is(":visible"))return}else{var c=a.extend({},this.options,{value:this.value,input:this.input});this.$element.editableContainer(c),this.$element.on("save.internal",a.proxy(this.save,this)),this.container=this.$element.data("editableContainer")}this.container.show(b)}},hide:function(){this.container&&this.container.hide()},toggle:function(a){this.container&&this.container.tip().is(":visible")?this.hide():this.show(a)},save:function(a,b){if(this.options.unsavedclass){var c=!1;c=c||"function"==typeof this.options.url,c=c||this.options.display===!1,c=c||void 0!==b.response,c=c||this.options.savenochange&&this.input.value2str(this.value)!==this.input.value2str(b.newValue),c?this.$element.removeClass(this.options.unsavedclass):this.$element.addClass(this.options.unsavedclass)}if(this.options.highlight){var d=this.$element,e=d.css("background-color");d.css("background-color",this.options.highlight),setTimeout(function(){"transparent"===e&&(e=""),d.css("background-color",e),d.addClass("editable-bg-transition"),setTimeout(function(){d.removeClass("editable-bg-transition")},1700)},10)}this.setValue(b.newValue,!1,b.response)},validate:function(){return"function"==typeof this.options.validate?this.options.validate.call(this,this.value):void 0},setValue:function(b,c,d){this.value=c?this.input.str2value(b):b,this.container&&this.container.option("value",this.value),a.when(this.render(d)).then(a.proxy(function(){this.handleEmpty()},this))},activate:function(){this.container&&this.container.activate()},destroy:function(){this.disable(),this.container&&this.container.destroy(),this.input.destroy(),"manual"!==this.options.toggle&&(this.$element.removeClass("editable-click"),this.$element.off(this.options.toggle+".editable")),this.$element.off("save.internal"),this.$element.removeClass("editable editable-open editable-disabled"),this.$element.removeData("editable")}},a.fn.editable=function(c){var d={},e=arguments,f="editable";switch(c){case"validate":return this.each(function(){var b,c=a(this),e=c.data(f);e&&(b=e.validate())&&(d[e.options.name]=b)}),d;case"getValue":return 2===arguments.length&&arguments[1]===!0?d=this.eq(0).data(f).value:this.each(function(){var b=a(this),c=b.data(f);c&&void 0!==c.value&&null!==c.value&&(d[c.options.name]=c.input.value2submit(c.value))}),d;case"submit":var g=arguments[1]||{},h=this,i=this.editable("validate");if(a.isEmptyObject(i)){var j={};if(1===h.length){var k=h.data("editable"),l={name:k.options.name||"",value:k.input.value2submit(k.value),pk:"function"==typeof k.options.pk?k.options.pk.call(k.options.scope):k.options.pk};"function"==typeof k.options.params?l=k.options.params.call(k.options.scope,l):(k.options.params=a.fn.editableutils.tryParseJson(k.options.params,!0),a.extend(l,k.options.params)),j={url:k.options.url,data:l,type:"POST"},g.success=g.success||k.options.success,g.error=g.error||k.options.error}else{var m=this.editable("getValue");j={url:g.url,data:m,type:"POST"}}j.success="function"==typeof g.success?function(a){g.success.call(h,a,g)}:a.noop,j.error="function"==typeof g.error?function(){g.error.apply(h,arguments)}:a.noop,g.ajaxOptions&&a.extend(j,g.ajaxOptions),g.data&&a.extend(j.data,g.data),a.ajax(j)}else"function"==typeof g.error&&g.error.call(h,i);return this}return this.each(function(){var d=a(this),g=d.data(f),h="object"==typeof c&&c;return h&&h.selector?(g=new b(this,h),void 0):(g||d.data(f,g=new b(this,h)),"string"==typeof c&&g[c].apply(g,Array.prototype.slice.call(e,1)),void 0)})},a.fn.editable.defaults={type:"text",disabled:!1,toggle:"click",emptytext:"Empty",autotext:"auto",value:null,display:null,emptyclass:"editable-empty",unsavedclass:"editable-unsaved",selector:null,highlight:"#FFFF80"}}(window.jQuery),function(a){"use strict";a.fn.editabletypes={};var b=function(){};b.prototype={init:function(b,c,d){this.type=b,this.options=a.extend({},d,c)},prerender:function(){this.$tpl=a(this.options.tpl),this.$input=this.$tpl,this.$clear=null,this.error=null},render:function(){},value2html:function(b,c){a(c)[this.options.escape?"text":"html"](a.trim(b))},html2value:function(b){return a("<div>").html(b).text()},value2str:function(a){return a},str2value:function(a){return a},value2submit:function(a){return a},value2input:function(a){this.$input.val(a)},input2value:function(){return this.$input.val()},activate:function(){this.$input.is(":visible")&&this.$input.focus()},clear:function(){this.$input.val(null)},escape:function(b){return a("<div>").text(b).html()},autosubmit:function(){},destroy:function(){},setClass:function(){this.options.inputclass&&this.$input.addClass(this.options.inputclass)},setAttr:function(a){void 0!==this.options[a]&&null!==this.options[a]&&this.$input.attr(a,this.options[a])},option:function(a,b){this.options[a]=b}},b.defaults={tpl:"",inputclass:null,escape:!0,scope:null,showbuttons:!0},a.extend(a.fn.editabletypes,{abstractinput:b})}(window.jQuery),function(a){"use strict";var b=function(){};a.fn.editableutils.inherit(b,a.fn.editabletypes.abstractinput),a.extend(b.prototype,{render:function(){var b=a.Deferred();return this.error=null,this.onSourceReady(function(){this.renderList(),b.resolve()},function(){this.error=this.options.sourceError,b.resolve()}),b.promise()},html2value:function(){return null},value2html:function(b,c,d,e){var f=a.Deferred(),g=function(){"function"==typeof d?d.call(c,b,this.sourceData,e):this.value2htmlFinal(b,c),f.resolve()};return null===b?g.call(this):this.onSourceReady(g,function(){f.resolve()}),f.promise()},onSourceReady:function(b,c){var d;if(a.isFunction(this.options.source)?(d=this.options.source.call(this.options.scope),this.sourceData=null):d=this.options.source,this.options.sourceCache&&a.isArray(this.sourceData))return b.call(this),void 0;try{d=a.fn.editableutils.tryParseJson(d,!1)}catch(e){return c.call(this),void 0}if("string"==typeof d){if(this.options.sourceCache){var f,g=d;if(a(document).data(g)||a(document).data(g,{}),f=a(document).data(g),f.loading===!1&&f.sourceData)return this.sourceData=f.sourceData,this.doPrepend(),b.call(this),void 0;if(f.loading===!0)return f.callbacks.push(a.proxy(function(){this.sourceData=f.sourceData,this.doPrepend(),b.call(this)},this)),f.err_callbacks.push(a.proxy(c,this)),void 0;f.loading=!0,f.callbacks=[],f.err_callbacks=[]}var h=a.extend({url:d,type:"get",cache:!1,dataType:"json",success:a.proxy(function(d){f&&(f.loading=!1),this.sourceData=this.makeArray(d),a.isArray(this.sourceData)?(f&&(f.sourceData=this.sourceData,a.each(f.callbacks,function(){this.call()})),this.doPrepend(),b.call(this)):(c.call(this),f&&a.each(f.err_callbacks,function(){this.call()}))},this),error:a.proxy(function(){c.call(this),f&&(f.loading=!1,a.each(f.err_callbacks,function(){this.call()}))},this)},this.options.sourceOptions);a.ajax(h)}else this.sourceData=this.makeArray(d),a.isArray(this.sourceData)?(this.doPrepend(),b.call(this)):c.call(this)},doPrepend:function(){null!==this.options.prepend&&void 0!==this.options.prepend&&(a.isArray(this.prependData)||(a.isFunction(this.options.prepend)&&(this.options.prepend=this.options.prepend.call(this.options.scope)),this.options.prepend=a.fn.editableutils.tryParseJson(this.options.prepend,!0),"string"==typeof this.options.prepend&&(this.options.prepend={"":this.options.prepend}),this.prependData=this.makeArray(this.options.prepend)),a.isArray(this.prependData)&&a.isArray(this.sourceData)&&(this.sourceData=this.prependData.concat(this.sourceData)))},renderList:function(){},value2htmlFinal:function(){},makeArray:function(b){var c,d,e,f,g=[];if(!b||"string"==typeof b)return null;if(a.isArray(b)){f=function(a,b){return d={value:a,text:b},c++>=2?!1:void 0};for(var h=0;h<b.length;h++)e=b[h],"object"==typeof e?(c=0,a.each(e,f),1===c?g.push(d):c>1&&(e.children&&(e.children=this.makeArray(e.children)),g.push(e))):g.push({value:e,text:e})}else a.each(b,function(a,b){g.push({value:a,text:b})});return g},option:function(a,b){this.options[a]=b,"source"===a&&(this.sourceData=null),"prepend"===a&&(this.prependData=null)}}),b.defaults=a.extend({},a.fn.editabletypes.abstractinput.defaults,{source:null,prepend:!1,sourceError:"Error when loading list",sourceCache:!0,sourceOptions:null}),a.fn.editabletypes.list=b}(window.jQuery),function(a){"use strict";var b=function(a){this.init("text",a,b.defaults)};a.fn.editableutils.inherit(b,a.fn.editabletypes.abstractinput),a.extend(b.prototype,{render:function(){this.renderClear(),this.setClass(),this.setAttr("placeholder")},activate:function(){this.$input.is(":visible")&&(this.$input.focus(),a.fn.editableutils.setCursorPosition(this.$input.get(0),this.$input.val().length),this.toggleClear&&this.toggleClear())},renderClear:function(){this.options.clear&&(this.$clear=a('<span class="editable-clear-x"></span>'),this.$input.after(this.$clear).css("padding-right",24).keyup(a.proxy(function(b){if(!~a.inArray(b.keyCode,[40,38,9,13,27])){clearTimeout(this.t);var c=this;this.t=setTimeout(function(){c.toggleClear(b)},100)}},this)).parent().css("position","relative"),this.$clear.click(a.proxy(this.clear,this)))},postrender:function(){},toggleClear:function(){if(this.$clear){var a=this.$input.val().length,b=this.$clear.is(":visible");a&&!b&&this.$clear.show(),!a&&b&&this.$clear.hide()}},clear:function(){this.$clear.hide(),this.$input.val("").focus()}}),b.defaults=a.extend({},a.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="text">',placeholder:null,clear:!0}),a.fn.editabletypes.text=b}(window.jQuery),function(a){"use strict";var b=function(a){this.init("textarea",a,b.defaults)};a.fn.editableutils.inherit(b,a.fn.editabletypes.abstractinput),a.extend(b.prototype,{render:function(){this.setClass(),this.setAttr("placeholder"),this.setAttr("rows"),this.$input.keydown(function(b){b.ctrlKey&&13===b.which&&a(this).closest("form").submit()})},activate:function(){a.fn.editabletypes.text.prototype.activate.call(this)}}),b.defaults=a.extend({},a.fn.editabletypes.abstractinput.defaults,{tpl:"<textarea></textarea>",inputclass:"input-large",placeholder:null,rows:7}),a.fn.editabletypes.textarea=b}(window.jQuery),function(a){"use strict";var b=function(a){this.init("select",a,b.defaults)};a.fn.editableutils.inherit(b,a.fn.editabletypes.list),a.extend(b.prototype,{renderList:function(){this.$input.empty();var b=function(c,d){var e;if(a.isArray(d))for(var f=0;f<d.length;f++)e={},d[f].children?(e.label=d[f].text,c.append(b(a("<optgroup>",e),d[f].children))):(e.value=d[f].value,d[f].disabled&&(e.disabled=!0),c.append(a("<option>",e).text(d[f].text)));return c};b(this.$input,this.sourceData),this.setClass(),this.$input.on("keydown.editable",function(b){13===b.which&&a(this).closest("form").submit()})},value2htmlFinal:function(b,c){var d="",e=a.fn.editableutils.itemsByValue(b,this.sourceData);e.length&&(d=e[0].text),a.fn.editabletypes.abstractinput.prototype.value2html.call(this,d,c)},autosubmit:function(){this.$input.off("keydown.editable").on("change.editable",function(){a(this).closest("form").submit()})}}),b.defaults=a.extend({},a.fn.editabletypes.list.defaults,{tpl:"<select></select>"}),a.fn.editabletypes.select=b}(window.jQuery),function(a){"use strict";var b=function(a){this.init("checklist",a,b.defaults)};a.fn.editableutils.inherit(b,a.fn.editabletypes.list),a.extend(b.prototype,{renderList:function(){var b;if(this.$tpl.empty(),a.isArray(this.sourceData)){for(var c=0;c<this.sourceData.length;c++)b=a("<label>").append(a("<input>",{type:"checkbox",value:this.sourceData[c].value})).append(a("<span>").text(" "+this.sourceData[c].text)),a("<div>").append(b).appendTo(this.$tpl);this.$input=this.$tpl.find('input[type="checkbox"]'),this.setClass()}},value2str:function(b){return a.isArray(b)?b.sort().join(a.trim(this.options.separator)):""},str2value:function(b){var c,d=null;return"string"==typeof b&&b.length?(c=new RegExp("\\s*"+a.trim(this.options.separator)+"\\s*"),d=b.split(c)):d=a.isArray(b)?b:[b],d},value2input:function(b){this.$input.prop("checked",!1),a.isArray(b)&&b.length&&this.$input.each(function(c,d){var e=a(d);a.each(b,function(a,b){e.val()==b&&e.prop("checked",!0)})})},input2value:function(){var b=[];return this.$input.filter(":checked").each(function(c,d){b.push(a(d).val())}),b},value2htmlFinal:function(b,c){var d=[],e=a.fn.editableutils.itemsByValue(b,this.sourceData),f=this.options.escape;e.length?(a.each(e,function(b,c){var e=f?a.fn.editableutils.escape(c.text):c.text;d.push(e)}),a(c).html(d.join("<br>"))):a(c).empty()},activate:function(){this.$input.first().focus()},autosubmit:function(){this.$input.on("keydown",function(b){13===b.which&&a(this).closest("form").submit()})}}),b.defaults=a.extend({},a.fn.editabletypes.list.defaults,{tpl:'<div class="editable-checklist"></div>',inputclass:null,separator:","}),a.fn.editabletypes.checklist=b}(window.jQuery),function(a){"use strict";var b=function(a){this.init("password",a,b.defaults)};a.fn.editableutils.inherit(b,a.fn.editabletypes.text),a.extend(b.prototype,{value2html:function(b,c){b?a(c).text("[hidden]"):a(c).empty()},html2value:function(){return null}}),b.defaults=a.extend({},a.fn.editabletypes.text.defaults,{tpl:'<input type="password">'}),a.fn.editabletypes.password=b}(window.jQuery),function(a){"use strict";var b=function(a){this.init("email",a,b.defaults)};a.fn.editableutils.inherit(b,a.fn.editabletypes.text),b.defaults=a.extend({},a.fn.editabletypes.text.defaults,{tpl:'<input type="email">'}),a.fn.editabletypes.email=b}(window.jQuery),function(a){"use strict";var b=function(a){this.init("url",a,b.defaults)};a.fn.editableutils.inherit(b,a.fn.editabletypes.text),b.defaults=a.extend({},a.fn.editabletypes.text.defaults,{tpl:'<input type="url">'}),a.fn.editabletypes.url=b}(window.jQuery),function(a){"use strict";var b=function(a){this.init("tel",a,b.defaults)};a.fn.editableutils.inherit(b,a.fn.editabletypes.text),b.defaults=a.extend({},a.fn.editabletypes.text.defaults,{tpl:'<input type="tel">'}),a.fn.editabletypes.tel=b}(window.jQuery),function(a){"use strict";var b=function(a){this.init("number",a,b.defaults)};a.fn.editableutils.inherit(b,a.fn.editabletypes.text),a.extend(b.prototype,{render:function(){b.superclass.render.call(this),this.setAttr("min"),this.setAttr("max"),this.setAttr("step")},postrender:function(){this.$clear&&this.$clear.css({right:24})}}),b.defaults=a.extend({},a.fn.editabletypes.text.defaults,{tpl:'<input type="number">',inputclass:"input-mini",min:null,max:null,step:null}),a.fn.editabletypes.number=b}(window.jQuery),function(a){"use strict";
var b=function(a){this.init("range",a,b.defaults)};a.fn.editableutils.inherit(b,a.fn.editabletypes.number),a.extend(b.prototype,{render:function(){this.$input=this.$tpl.filter("input"),this.setClass(),this.setAttr("min"),this.setAttr("max"),this.setAttr("step"),this.$input.on("input",function(){a(this).siblings("output").text(a(this).val())})},activate:function(){this.$input.focus()}}),b.defaults=a.extend({},a.fn.editabletypes.number.defaults,{tpl:'<input type="range"><output style="width: 30px; display: inline-block"></output>',inputclass:"input-medium"}),a.fn.editabletypes.range=b}(window.jQuery),function(a){"use strict";var b=function(a){this.init("time",a,b.defaults)};a.fn.editableutils.inherit(b,a.fn.editabletypes.abstractinput),a.extend(b.prototype,{render:function(){this.setClass()}}),b.defaults=a.extend({},a.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="time">'}),a.fn.editabletypes.time=b}(window.jQuery),function(a){"use strict";var b=function(c){if(this.init("select2",c,b.defaults),c.select2=c.select2||{},this.sourceData=null,c.placeholder&&(c.select2.placeholder=c.placeholder),!c.select2.tags&&c.source){var d=c.source;a.isFunction(c.source)&&(d=c.source.call(c.scope)),"string"==typeof d?(c.select2.ajax=c.select2.ajax||{},c.select2.ajax.data||(c.select2.ajax.data=function(a){return{query:a}}),c.select2.ajax.results||(c.select2.ajax.results=function(a){return{results:a}}),c.select2.ajax.url=d):(this.sourceData=this.convertSource(d),c.select2.data=this.sourceData)}if(this.options.select2=a.extend({},b.defaults.select2,c.select2),this.isMultiple=this.options.select2.tags||this.options.select2.multiple,this.isRemote="ajax"in this.options.select2,this.idFunc=this.options.select2.id,"function"!=typeof this.idFunc){var e=this.idFunc||"id";this.idFunc=function(a){return a[e]}}this.formatSelection=this.options.select2.formatSelection,"function"!=typeof this.formatSelection&&(this.formatSelection=function(a){return a.text})};a.fn.editableutils.inherit(b,a.fn.editabletypes.abstractinput),a.extend(b.prototype,{render:function(){this.setClass(),this.isRemote&&this.$input.on("select2-loaded",a.proxy(function(a){this.sourceData=a.items.results},this)),this.isMultiple&&this.$input.on("change",function(){a(this).closest("form").parent().triggerHandler("resize")})},value2html:function(c,d){var e,f="",g=this;this.options.select2.tags?e=c:this.sourceData&&(e=a.fn.editableutils.itemsByValue(c,this.sourceData,this.idFunc)),a.isArray(e)?(f=[],a.each(e,function(a,b){f.push(b&&"object"==typeof b?g.formatSelection(b):b)})):e&&(f=g.formatSelection(e)),f=a.isArray(f)?f.join(this.options.viewseparator):f,b.superclass.value2html.call(this,f,d)},html2value:function(a){return this.options.select2.tags?this.str2value(a,this.options.viewseparator):null},value2input:function(b){if(a.isArray(b)&&(b=b.join(this.getSeparator())),this.$input.data("select2")?this.$input.val(b).trigger("change",!0):(this.$input.val(b),this.$input.select2(this.options.select2)),this.isRemote&&!this.isMultiple&&!this.options.select2.initSelection){var c=this.options.select2.id,d=this.options.select2.formatSelection;if(!c&&!d){var e=a(this.options.scope);if(!e.data("editable").isEmpty){var f={id:b,text:e.text()};this.$input.select2("data",f)}}}},input2value:function(){return this.$input.select2("val")},str2value:function(b,c){if("string"!=typeof b||!this.isMultiple)return b;c=c||this.getSeparator();var d,e,f;if(null===b||b.length<1)return null;for(d=b.split(c),e=0,f=d.length;f>e;e+=1)d[e]=a.trim(d[e]);return d},autosubmit:function(){this.$input.on("change",function(b,c){c||a(this).closest("form").submit()})},getSeparator:function(){return this.options.select2.separator||a.fn.select2.defaults.separator},convertSource:function(b){if(a.isArray(b)&&b.length&&void 0!==b[0].value)for(var c=0;c<b.length;c++)void 0!==b[c].value&&(b[c].id=b[c].value,delete b[c].value);return b},destroy:function(){this.$input.data("select2")&&this.$input.select2("destroy")}}),b.defaults=a.extend({},a.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="hidden">',select2:null,placeholder:null,source:null,viewseparator:", "}),a.fn.editabletypes.select2=b}(window.jQuery),function(a){var b=function(b,c){return this.$element=a(b),this.$element.is("input")?(this.options=a.extend({},a.fn.combodate.defaults,c,this.$element.data()),this.init(),void 0):(a.error("Combodate should be applied to INPUT element"),void 0)};b.prototype={constructor:b,init:function(){this.map={day:["D","date"],month:["M","month"],year:["Y","year"],hour:["[Hh]","hours"],minute:["m","minutes"],second:["s","seconds"],ampm:["[Aa]",""]},this.$widget=a('<span class="combodate"></span>').html(this.getTemplate()),this.initCombos(),this.$widget.on("change","select",a.proxy(function(b){this.$element.val(this.getValue()).change(),this.options.smartDays&&(a(b.target).is(".month")||a(b.target).is(".year"))&&this.fillCombo("day")},this)),this.$widget.find("select").css("width","auto"),this.$element.hide().after(this.$widget),this.setValue(this.$element.val()||this.options.value)},getTemplate:function(){var b=this.options.template;return a.each(this.map,function(a,c){c=c[0];var d=new RegExp(c+"+"),e=c.length>1?c.substring(1,2):c;b=b.replace(d,"{"+e+"}")}),b=b.replace(/ /g,"&nbsp;"),a.each(this.map,function(a,c){c=c[0];var d=c.length>1?c.substring(1,2):c;b=b.replace("{"+d+"}",'<select class="'+a+'"></select>')}),b},initCombos:function(){for(var a in this.map){var b=this.$widget.find("."+a);this["$"+a]=b.length?b:null,this.fillCombo(a)}},fillCombo:function(a){var b=this["$"+a];if(b){var c="fill"+a.charAt(0).toUpperCase()+a.slice(1),d=this[c](),e=b.val();b.empty();for(var f=0;f<d.length;f++)b.append('<option value="'+d[f][0]+'">'+d[f][1]+"</option>");b.val(e)}},fillCommon:function(a){var b,c=[];if("name"===this.options.firstItem){b=moment.relativeTime||moment.langData()._relativeTime;var d="function"==typeof b[a]?b[a](1,!0,a,!1):b[a];d=d.split(" ").reverse()[0],c.push(["",d])}else"empty"===this.options.firstItem&&c.push(["",""]);return c},fillDay:function(){var a,b,c=this.fillCommon("d"),d=-1!==this.options.template.indexOf("DD"),e=31;if(this.options.smartDays&&this.$month&&this.$year){var f=parseInt(this.$month.val(),10),g=parseInt(this.$year.val(),10);isNaN(f)||isNaN(g)||(e=moment([g,f]).daysInMonth())}for(b=1;e>=b;b++)a=d?this.leadZero(b):b,c.push([b,a]);return c},fillMonth:function(){var a,b,c=this.fillCommon("M"),d=-1!==this.options.template.indexOf("MMMM"),e=-1!==this.options.template.indexOf("MMM"),f=-1!==this.options.template.indexOf("MM");for(b=0;11>=b;b++)a=d?moment().date(1).month(b).format("MMMM"):e?moment().date(1).month(b).format("MMM"):f?this.leadZero(b+1):b+1,c.push([b,a]);return c},fillYear:function(){var a,b,c=[],d=-1!==this.options.template.indexOf("YYYY");for(b=this.options.maxYear;b>=this.options.minYear;b--)a=d?b:(b+"").substring(2),c[this.options.yearDescending?"push":"unshift"]([b,a]);return c=this.fillCommon("y").concat(c)},fillHour:function(){var a,b,c=this.fillCommon("h"),d=-1!==this.options.template.indexOf("h"),e=(-1!==this.options.template.indexOf("H"),-1!==this.options.template.toLowerCase().indexOf("hh")),f=d?1:0,g=d?12:23;for(b=f;g>=b;b++)a=e?this.leadZero(b):b,c.push([b,a]);return c},fillMinute:function(){var a,b,c=this.fillCommon("m"),d=-1!==this.options.template.indexOf("mm");for(b=0;59>=b;b+=this.options.minuteStep)a=d?this.leadZero(b):b,c.push([b,a]);return c},fillSecond:function(){var a,b,c=this.fillCommon("s"),d=-1!==this.options.template.indexOf("ss");for(b=0;59>=b;b+=this.options.secondStep)a=d?this.leadZero(b):b,c.push([b,a]);return c},fillAmpm:function(){var a=-1!==this.options.template.indexOf("a"),b=(-1!==this.options.template.indexOf("A"),[["am",a?"am":"AM"],["pm",a?"pm":"PM"]]);return b},getValue:function(b){var c,d={},e=this,f=!1;return a.each(this.map,function(a){if("ampm"!==a){var b="day"===a?1:0;return d[a]=e["$"+a]?parseInt(e["$"+a].val(),10):b,isNaN(d[a])?(f=!0,!1):void 0}}),f?"":(this.$ampm&&(d.hour=12===d.hour?"am"===this.$ampm.val()?0:12:"am"===this.$ampm.val()?d.hour:d.hour+12),c=moment([d.year,d.month,d.day,d.hour,d.minute,d.second]),this.highlight(c),b=void 0===b?this.options.format:b,null===b?c.isValid()?c:null:c.isValid()?c.format(b):"")},setValue:function(b){function c(b,c){var d={};return b.children("option").each(function(b,e){var f,g=a(e).attr("value");""!==g&&(f=Math.abs(g-c),("undefined"==typeof d.distance||f<d.distance)&&(d={value:g,distance:f}))}),d.value}if(b){var d="string"==typeof b?moment(b,this.options.format):moment(b),e=this,f={};d.isValid()&&(a.each(this.map,function(a,b){"ampm"!==a&&(f[a]=d[b[1]]())}),this.$ampm&&(f.hour>=12?(f.ampm="pm",f.hour>12&&(f.hour-=12)):(f.ampm="am",0===f.hour&&(f.hour=12))),a.each(f,function(a,b){e["$"+a]&&("minute"===a&&e.options.minuteStep>1&&e.options.roundTime&&(b=c(e["$"+a],b)),"second"===a&&e.options.secondStep>1&&e.options.roundTime&&(b=c(e["$"+a],b)),e["$"+a].val(b))}),this.options.smartDays&&this.fillCombo("day"),this.$element.val(d.format(this.options.format)).change())}},highlight:function(a){a.isValid()?this.options.errorClass?this.$widget.removeClass(this.options.errorClass):this.$widget.find("select").css("border-color",this.borderColor):this.options.errorClass?this.$widget.addClass(this.options.errorClass):(this.borderColor||(this.borderColor=this.$widget.find("select").css("border-color")),this.$widget.find("select").css("border-color","red"))},leadZero:function(a){return 9>=a?"0"+a:a},destroy:function(){this.$widget.remove(),this.$element.removeData("combodate").show()}},a.fn.combodate=function(c){var d,e=Array.apply(null,arguments);return e.shift(),"getValue"===c&&this.length&&(d=this.eq(0).data("combodate"))?d.getValue.apply(d,e):this.each(function(){var d=a(this),f=d.data("combodate"),g="object"==typeof c&&c;f||d.data("combodate",f=new b(this,g)),"string"==typeof c&&"function"==typeof f[c]&&f[c].apply(f,e)})},a.fn.combodate.defaults={format:"DD-MM-YYYY HH:mm",template:"D / MMM / YYYY   H : mm",value:null,minYear:1970,maxYear:2015,yearDescending:!0,minuteStep:5,secondStep:1,firstItem:"empty",errorClass:null,roundTime:!0,smartDays:!1}}(window.jQuery),function(a){"use strict";var b=function(c){this.init("combodate",c,b.defaults),this.options.viewformat||(this.options.viewformat=this.options.format),c.combodate=a.fn.editableutils.tryParseJson(c.combodate,!0),this.options.combodate=a.extend({},b.defaults.combodate,c.combodate,{format:this.options.format,template:this.options.template})};a.fn.editableutils.inherit(b,a.fn.editabletypes.abstractinput),a.extend(b.prototype,{render:function(){this.$input.combodate(this.options.combodate),"bs3"===a.fn.editableform.engine&&this.$input.siblings().find("select").addClass("form-control"),this.options.inputclass&&this.$input.siblings().find("select").addClass(this.options.inputclass)},value2html:function(a,c){var d=a?a.format(this.options.viewformat):"";b.superclass.value2html.call(this,d,c)},html2value:function(a){return a?moment(a,this.options.viewformat):null},value2str:function(a){return a?a.format(this.options.format):""},str2value:function(a){return a?moment(a,this.options.format):null},value2submit:function(a){return this.value2str(a)},value2input:function(a){this.$input.combodate("setValue",a)},input2value:function(){return this.$input.combodate("getValue",null)},activate:function(){this.$input.siblings(".combodate").find("select").eq(0).focus()},autosubmit:function(){}}),b.defaults=a.extend({},a.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="text">',inputclass:null,format:"YYYY-MM-DD",viewformat:null,template:"D / MMM / YYYY",combodate:null}),a.fn.editabletypes.combodate=b}(window.jQuery),function(a){"use strict";a.extend(a.fn.editableform.Constructor.prototype,{initButtons:function(){var b=this.$form.find(".editable-buttons");b.append(a.fn.editableform.buttons),"bottom"===this.options.showbuttons&&b.addClass("editable-buttons-bottom"),this.$form.find(".editable-submit").button({icons:{primary:"ui-icon-check"},text:!1}).removeAttr("title"),this.$form.find(".editable-cancel").button({icons:{primary:"ui-icon-closethick"},text:!1}).removeAttr("title")}}),a.fn.editableform.errorGroupClass=null,a.fn.editableform.errorBlockClass="ui-state-error",a.fn.editableform.engine="jquery-ui"}(window.jQuery),function(a){"use strict";a.extend(a.fn.editableContainer.Popup.prototype,{containerName:"tooltip",containerDataName:"ui-tooltip",innerCss:".ui-tooltip-content",defaults:a.ui.tooltip.prototype.options,splitOptions:function(){if(this.containerOptions={},this.formOptions={},!a.ui[this.containerName])return a.error('Please use jQueryUI with "tooltip" widget! http://jqueryui.com/download'),void 0;for(var b in this.options)b in this.defaults?this.containerOptions[b]=this.options[b]:this.formOptions[b]=this.options[b]},initContainer:function(){this.handlePlacement(),a.extend(this.containerOptions,{items:"*",content:" ",track:!1,open:a.proxy(function(){this.container()._on(this.container().element,{mouseleave:function(a){a.stopImmediatePropagation()},focusout:function(a){a.stopImmediatePropagation()}})},this)}),this.call(this.containerOptions),this.container()._off(this.container().element,"mouseover focusin")},tip:function(){return this.container()?this.container()._find(this.container().element):null},innerShow:function(){this.call("open");var b=this.options.title||this.$element.data("ui-tooltip-title")||this.$element.data("originalTitle");this.tip().find(this.innerCss).empty().append(a("<label>").text(b))},innerHide:function(){this.call("close")},innerDestroy:function(){},setPosition:function(){this.tip().position(a.extend({of:this.$element},this.containerOptions.position))},handlePlacement:function(){var a;switch(this.options.placement){case"top":a={my:"center bottom-5",at:"center top",collision:"flipfit"};break;case"right":a={my:"left+5 center",at:"right center",collision:"flipfit"};break;case"bottom":a={my:"center top+5",at:"center bottom",collision:"flipfit"};break;case"left":a={my:"right-5 center",at:"left center",collision:"flipfit"}}this.containerOptions.position=a}})}(window.jQuery),function(a){"use strict";var b=function(a){this.init("dateui",a,b.defaults),this.initPicker(a,b.defaults)};a.fn.editableutils.inherit(b,a.fn.editabletypes.abstractinput),a.extend(b.prototype,{initPicker:function(b,c){this.options.viewformat||(this.options.viewformat=this.options.format),this.options.viewformat=this.options.viewformat.replace("yyyy","yy"),this.options.format=this.options.format.replace("yyyy","yy"),this.options.datepicker=a.extend({},c.datepicker,b.datepicker,{dateFormat:this.options.viewformat})},render:function(){this.$input.datepicker(this.options.datepicker),this.options.clear&&(this.$clear=a('<a href="#"></a>').html(this.options.clear).click(a.proxy(function(a){a.preventDefault(),a.stopPropagation(),this.clear()},this)),this.$tpl.parent().append(a('<div class="editable-clear">').append(this.$clear)))},value2html:function(c,d){var e=a.datepicker.formatDate(this.options.viewformat,c);b.superclass.value2html.call(this,e,d)},html2value:function(b){if("string"!=typeof b)return b;var c;try{c=a.datepicker.parseDate(this.options.viewformat,b)}catch(d){}return c},value2str:function(b){return a.datepicker.formatDate(this.options.format,b)},str2value:function(b){if("string"!=typeof b)return b;var c;try{c=a.datepicker.parseDate(this.options.format,b)}catch(d){}return c},value2submit:function(a){return this.value2str(a)},value2input:function(a){this.$input.datepicker("setDate",a)},input2value:function(){return this.$input.datepicker("getDate")},activate:function(){},clear:function(){this.$input.datepicker("setDate",null),this.isAutosubmit&&this.submit()},autosubmit:function(){this.isAutosubmit=!0,this.$input.on("mouseup","table.ui-datepicker-calendar a.ui-state-default",a.proxy(this.submit,this))},submit:function(){var a=this.$input.closest("form");setTimeout(function(){a.submit()},200)}}),b.defaults=a.extend({},a.fn.editabletypes.abstractinput.defaults,{tpl:'<div class="editable-date"></div>',inputclass:null,format:"yyyy-mm-dd",viewformat:null,datepicker:{firstDay:0,changeYear:!0,changeMonth:!0,showOtherMonths:!0},clear:"&times; clear"}),a.fn.editabletypes.dateui=b}(window.jQuery),function(a){"use strict";var b=function(a){this.init("dateuifield",a,b.defaults),this.initPicker(a,b.defaults)};a.fn.editableutils.inherit(b,a.fn.editabletypes.dateui),a.extend(b.prototype,{render:function(){this.$input.datepicker(this.options.datepicker),a.fn.editabletypes.text.prototype.renderClear.call(this)},value2input:function(b){this.$input.val(a.datepicker.formatDate(this.options.viewformat,b))},input2value:function(){return this.html2value(this.$input.val())},activate:function(){a.fn.editabletypes.text.prototype.activate.call(this)},toggleClear:function(){a.fn.editabletypes.text.prototype.toggleClear.call(this)},autosubmit:function(){}}),b.defaults=a.extend({},a.fn.editabletypes.dateui.defaults,{tpl:'<input type="text"/>',inputclass:null,datepicker:{showOn:"button",buttonImage:"http://jqueryui.com/resources/demos/datepicker/images/calendar.gif",buttonImageOnly:!0,firstDay:0,changeYear:!0,changeMonth:!0,showOtherMonths:!0},clear:!1}),a.fn.editabletypes.dateuifield=b}(window.jQuery);(function(a){if(typeof define==="function"&&define.amd&&define.amd.jQuery){define(["jquery"],a)}else{a(jQuery)}}(function(e){var o="left",n="right",d="up",v="down",c="in",w="out",l="none",r="auto",k="swipe",s="pinch",x="tap",i="doubletap",b="longtap",A="horizontal",t="vertical",h="all",q=10,f="start",j="move",g="end",p="cancel",a="ontouchstart" in window,y="TouchSwipe";var m={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,triggerOnTouchEnd:true,triggerOnTouchLeave:false,allowPageScroll:"auto",fallbackToMouseEvents:true,excludedElements:"label, button, input, select, textarea, a, .noSwipe"};e.fn.swipe=function(D){var C=e(this),B=C.data(y);if(B&&typeof D==="string"){if(B[D]){return B[D].apply(this,Array.prototype.slice.call(arguments,1))}else{e.error("Method "+D+" does not exist on jQuery.swipe")}}else{if(!B&&(typeof D==="object"||!D)){return u.apply(this,arguments)}}return C};e.fn.swipe.defaults=m;e.fn.swipe.phases={PHASE_START:f,PHASE_MOVE:j,PHASE_END:g,PHASE_CANCEL:p};e.fn.swipe.directions={LEFT:o,RIGHT:n,UP:d,DOWN:v,IN:c,OUT:w};e.fn.swipe.pageScroll={NONE:l,HORIZONTAL:A,VERTICAL:t,AUTO:r};e.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,ALL:h};function u(B){if(B&&(B.allowPageScroll===undefined&&(B.swipe!==undefined||B.swipeStatus!==undefined))){B.allowPageScroll=l}if(B.click!==undefined&&B.tap===undefined){B.tap=B.click}if(!B){B={}}B=e.extend({},e.fn.swipe.defaults,B);return this.each(function(){var D=e(this);var C=D.data(y);if(!C){C=new z(this,B);D.data(y,C)}})}function z(a0,aq){var av=(a||!aq.fallbackToMouseEvents),G=av?"touchstart":"mousedown",au=av?"touchmove":"mousemove",R=av?"touchend":"mouseup",P=av?null:"mouseleave",az="touchcancel";var ac=0,aL=null,Y=0,aX=0,aV=0,D=1,am=0,aF=0,J=null;var aN=e(a0);var W="start";var T=0;var aM=null;var Q=0,aY=0,a1=0,aa=0,K=0;var aS=null;try{aN.bind(G,aJ);aN.bind(az,a5)}catch(ag){e.error("events not supported "+G+","+az+" on jQuery.swipe")}this.enable=function(){aN.bind(G,aJ);aN.bind(az,a5);return aN};this.disable=function(){aG();return aN};this.destroy=function(){aG();aN.data(y,null);return aN};this.option=function(a8,a7){if(aq[a8]!==undefined){if(a7===undefined){return aq[a8]}else{aq[a8]=a7}}else{e.error("Option "+a8+" does not exist on jQuery.swipe.options")}return null};function aJ(a9){if(ax()){return}if(e(a9.target).closest(aq.excludedElements,aN).length>0){return}var ba=a9.originalEvent?a9.originalEvent:a9;var a8,a7=a?ba.touches[0]:ba;W=f;if(a){T=ba.touches.length}else{a9.preventDefault()}ac=0;aL=null;aF=null;Y=0;aX=0;aV=0;D=1;am=0;aM=af();J=X();O();if(!a||(T===aq.fingers||aq.fingers===h)||aT()){ae(0,a7);Q=ao();if(T==2){ae(1,ba.touches[1]);aX=aV=ap(aM[0].start,aM[1].start)}if(aq.swipeStatus||aq.pinchStatus){a8=L(ba,W)}}else{a8=false}if(a8===false){W=p;L(ba,W);return a8}else{ak(true)}return null}function aZ(ba){var bd=ba.originalEvent?ba.originalEvent:ba;if(W===g||W===p||ai()){return}var a9,a8=a?bd.touches[0]:bd;var bb=aD(a8);aY=ao();if(a){T=bd.touches.length}W=j;if(T==2){if(aX==0){ae(1,bd.touches[1]);aX=aV=ap(aM[0].start,aM[1].start)}else{aD(bd.touches[1]);aV=ap(aM[0].end,aM[1].end);aF=an(aM[0].end,aM[1].end)}D=a3(aX,aV);am=Math.abs(aX-aV)}if((T===aq.fingers||aq.fingers===h)||!a||aT()){aL=aH(bb.start,bb.end);ah(ba,aL);ac=aO(bb.start,bb.end);Y=aI();aE(aL,ac);if(aq.swipeStatus||aq.pinchStatus){a9=L(bd,W)}if(!aq.triggerOnTouchEnd||aq.triggerOnTouchLeave){var a7=true;if(aq.triggerOnTouchLeave){var bc=aU(this);a7=B(bb.end,bc)}if(!aq.triggerOnTouchEnd&&a7){W=ay(j)}else{if(aq.triggerOnTouchLeave&&!a7){W=ay(g)}}if(W==p||W==g){L(bd,W)}}}else{W=p;L(bd,W)}if(a9===false){W=p;L(bd,W)}}function I(a7){var a8=a7.originalEvent;if(a){if(a8.touches.length>0){C();return true}}if(ai()){T=aa}a7.preventDefault();aY=ao();Y=aI();if(a6()){W=p;L(a8,W)}else{if(aq.triggerOnTouchEnd||(aq.triggerOnTouchEnd==false&&W===j)){W=g;L(a8,W)}else{if(!aq.triggerOnTouchEnd&&a2()){W=g;aB(a8,W,x)}else{if(W===j){W=p;L(a8,W)}}}}ak(false);return null}function a5(){T=0;aY=0;Q=0;aX=0;aV=0;D=1;O();ak(false)}function H(a7){var a8=a7.originalEvent;if(aq.triggerOnTouchLeave){W=ay(g);L(a8,W)}}function aG(){aN.unbind(G,aJ);aN.unbind(az,a5);aN.unbind(au,aZ);aN.unbind(R,I);if(P){aN.unbind(P,H)}ak(false)}function ay(bb){var ba=bb;var a9=aw();var a8=aj();var a7=a6();if(!a9||a7){ba=p}else{if(a8&&bb==j&&(!aq.triggerOnTouchEnd||aq.triggerOnTouchLeave)){ba=g}else{if(!a8&&bb==g&&aq.triggerOnTouchLeave){ba=p}}}return ba}function L(a9,a7){var a8=undefined;if(F()||S()){a8=aB(a9,a7,k)}else{if((M()||aT())&&a8!==false){a8=aB(a9,a7,s)}}if(aC()&&a8!==false){a8=aB(a9,a7,i)}else{if(al()&&a8!==false){a8=aB(a9,a7,b)}else{if(ad()&&a8!==false){a8=aB(a9,a7,x)}}}if(a7===p){a5(a9)}if(a7===g){if(a){if(a9.touches.length==0){a5(a9)}}else{a5(a9)}}return a8}function aB(ba,a7,a9){var a8=undefined;if(a9==k){aN.trigger("swipeStatus",[a7,aL||null,ac||0,Y||0,T]);if(aq.swipeStatus){a8=aq.swipeStatus.call(aN,ba,a7,aL||null,ac||0,Y||0,T);if(a8===false){return false}}if(a7==g&&aR()){aN.trigger("swipe",[aL,ac,Y,T]);if(aq.swipe){a8=aq.swipe.call(aN,ba,aL,ac,Y,T);if(a8===false){return false}}switch(aL){case o:aN.trigger("swipeLeft",[aL,ac,Y,T]);if(aq.swipeLeft){a8=aq.swipeLeft.call(aN,ba,aL,ac,Y,T)}break;case n:aN.trigger("swipeRight",[aL,ac,Y,T]);if(aq.swipeRight){a8=aq.swipeRight.call(aN,ba,aL,ac,Y,T)}break;case d:aN.trigger("swipeUp",[aL,ac,Y,T]);if(aq.swipeUp){a8=aq.swipeUp.call(aN,ba,aL,ac,Y,T)}break;case v:aN.trigger("swipeDown",[aL,ac,Y,T]);if(aq.swipeDown){a8=aq.swipeDown.call(aN,ba,aL,ac,Y,T)}break}}}if(a9==s){aN.trigger("pinchStatus",[a7,aF||null,am||0,Y||0,T,D]);if(aq.pinchStatus){a8=aq.pinchStatus.call(aN,ba,a7,aF||null,am||0,Y||0,T,D);if(a8===false){return false}}if(a7==g&&a4()){switch(aF){case c:aN.trigger("pinchIn",[aF||null,am||0,Y||0,T,D]);if(aq.pinchIn){a8=aq.pinchIn.call(aN,ba,aF||null,am||0,Y||0,T,D)}break;case w:aN.trigger("pinchOut",[aF||null,am||0,Y||0,T,D]);if(aq.pinchOut){a8=aq.pinchOut.call(aN,ba,aF||null,am||0,Y||0,T,D)}break}}}if(a9==x){if(a7===p||a7===g){clearTimeout(aS);if(V()&&!E()){K=ao();aS=setTimeout(e.proxy(function(){K=null;aN.trigger("tap",[ba.target]);if(aq.tap){a8=aq.tap.call(aN,ba,ba.target)}},this),aq.doubleTapThreshold)}else{K=null;aN.trigger("tap",[ba.target]);if(aq.tap){a8=aq.tap.call(aN,ba,ba.target)}}}}else{if(a9==i){if(a7===p||a7===g){clearTimeout(aS);K=null;aN.trigger("doubletap",[ba.target]);if(aq.doubleTap){a8=aq.doubleTap.call(aN,ba,ba.target)}}}else{if(a9==b){if(a7===p||a7===g){clearTimeout(aS);K=null;aN.trigger("longtap",[ba.target]);if(aq.longTap){a8=aq.longTap.call(aN,ba,ba.target)}}}}}return a8}function aj(){var a7=true;if(aq.threshold!==null){a7=ac>=aq.threshold}return a7}function a6(){var a7=false;if(aq.cancelThreshold!==null&&aL!==null){a7=(aP(aL)-ac)>=aq.cancelThreshold}return a7}function ab(){if(aq.pinchThreshold!==null){return am>=aq.pinchThreshold}return true}function aw(){var a7;if(aq.maxTimeThreshold){if(Y>=aq.maxTimeThreshold){a7=false}else{a7=true}}else{a7=true}return a7}function ah(a7,a8){if(aq.allowPageScroll===l||aT()){a7.preventDefault()}else{var a9=aq.allowPageScroll===r;switch(a8){case o:if((aq.swipeLeft&&a9)||(!a9&&aq.allowPageScroll!=A)){a7.preventDefault()}break;case n:if((aq.swipeRight&&a9)||(!a9&&aq.allowPageScroll!=A)){a7.preventDefault()}break;case d:if((aq.swipeUp&&a9)||(!a9&&aq.allowPageScroll!=t)){a7.preventDefault()}break;case v:if((aq.swipeDown&&a9)||(!a9&&aq.allowPageScroll!=t)){a7.preventDefault()}break}}}function a4(){var a8=aK();var a7=U();var a9=ab();return a8&&a7&&a9}function aT(){return !!(aq.pinchStatus||aq.pinchIn||aq.pinchOut)}function M(){return !!(a4()&&aT())}function aR(){var ba=aw();var bc=aj();var a9=aK();var a7=U();var a8=a6();var bb=!a8&&a7&&a9&&bc&&ba;return bb}function S(){return !!(aq.swipe||aq.swipeStatus||aq.swipeLeft||aq.swipeRight||aq.swipeUp||aq.swipeDown)}function F(){return !!(aR()&&S())}function aK(){return((T===aq.fingers||aq.fingers===h)||!a)}function U(){return aM[0].end.x!==0}function a2(){return !!(aq.tap)}function V(){return !!(aq.doubleTap)}function aQ(){return !!(aq.longTap)}function N(){if(K==null){return false}var a7=ao();return(V()&&((a7-K)<=aq.doubleTapThreshold))}function E(){return N()}function at(){return((T===1||!a)&&(isNaN(ac)||ac===0))}function aW(){return((Y>aq.longTapThreshold)&&(ac<q))}function ad(){return !!(at()&&a2())}function aC(){return !!(N()&&V())}function al(){return !!(aW()&&aQ())}function C(){a1=ao();aa=event.touches.length+1}function O(){a1=0;aa=0}function ai(){var a7=false;if(a1){var a8=ao()-a1;if(a8<=aq.fingerReleaseThreshold){a7=true}}return a7}function ax(){return !!(aN.data(y+"_intouch")===true)}function ak(a7){if(a7===true){aN.bind(au,aZ);aN.bind(R,I);if(P){aN.bind(P,H)}}else{aN.unbind(au,aZ,false);aN.unbind(R,I,false);if(P){aN.unbind(P,H,false)}}aN.data(y+"_intouch",a7===true)}function ae(a8,a7){var a9=a7.identifier!==undefined?a7.identifier:0;aM[a8].identifier=a9;aM[a8].start.x=aM[a8].end.x=a7.pageX||a7.clientX;aM[a8].start.y=aM[a8].end.y=a7.pageY||a7.clientY;return aM[a8]}function aD(a7){var a9=a7.identifier!==undefined?a7.identifier:0;var a8=Z(a9);a8.end.x=a7.pageX||a7.clientX;a8.end.y=a7.pageY||a7.clientY;return a8}function Z(a8){for(var a7=0;a7<aM.length;a7++){if(aM[a7].identifier==a8){return aM[a7]}}}function af(){var a7=[];for(var a8=0;a8<=5;a8++){a7.push({start:{x:0,y:0},end:{x:0,y:0},identifier:0})}return a7}function aE(a7,a8){a8=Math.max(a8,aP(a7));J[a7].distance=a8}function aP(a7){if(J[a7]){return J[a7].distance}return undefined}function X(){var a7={};a7[o]=ar(o);a7[n]=ar(n);a7[d]=ar(d);a7[v]=ar(v);return a7}function ar(a7){return{direction:a7,distance:0}}function aI(){return aY-Q}function ap(ba,a9){var a8=Math.abs(ba.x-a9.x);var a7=Math.abs(ba.y-a9.y);return Math.round(Math.sqrt(a8*a8+a7*a7))}function a3(a7,a8){var a9=(a8/a7)*1;return a9.toFixed(2)}function an(){if(D<1){return w}else{return c}}function aO(a8,a7){return Math.round(Math.sqrt(Math.pow(a7.x-a8.x,2)+Math.pow(a7.y-a8.y,2)))}function aA(ba,a8){var a7=ba.x-a8.x;var bc=a8.y-ba.y;var a9=Math.atan2(bc,a7);var bb=Math.round(a9*180/Math.PI);if(bb<0){bb=360-Math.abs(bb)}return bb}function aH(a8,a7){var a9=aA(a8,a7);if((a9<=45)&&(a9>=0)){return o}else{if((a9<=360)&&(a9>=315)){return o}else{if((a9>=135)&&(a9<=225)){return n}else{if((a9>45)&&(a9<135)){return v}else{return d}}}}}function ao(){var a7=new Date();return a7.getTime()}function aU(a7){a7=e(a7);var a9=a7.offset();var a8={left:a9.left,right:a9.left+a7.outerWidth(),top:a9.top,bottom:a9.top+a7.outerHeight()};return a8}function B(a7,a8){return(a7.x>a8.left&&a7.x<a8.right&&a7.y>a8.top&&a7.y<a8.bottom)}}}));
$(document).ready(function() {
	function newencounter() {
		var str = $("#new_encounter_form").serialize();
		if(str){
			$.ajax({
				type: "POST",
				url: "ajaxencounter/new-encounter",
				data: str,
				dataType: "json",
				success: function(data){
					noshdata.eid = data.eid;
					$.jGrowl(data.message);
					$("#new_encounter_form").clearForm();
					$("#new_encounter_dialog").dialog('close');
					noshdata.encounter_active = 'y';
					$("#nosh_chart_div").hide('blind');
					$("#nosh_encounter_div").show('blind');
					openencounter();
				}
			});
		} else {
			$.jGrowl("Please complete the form");
		}
	}
	$.ajax({
		url: "ajaxsearch/provider-select",
		dataType: "json",
		type: "POST",
		success: function(data){
			$("#messages_lab_provider_list").addOption({"":"Select a provider for the order."}, false);
			$("#messages_lab_provider_list").addOption(data, false);
			$("#messages_rad_provider_list").addOption({"":"Select a provider for the order."}, false);
			$("#messages_rad_provider_list").addOption(data, false);
			$("#messages_cp_provider_list").addOption({"":"Select a provider for the order."}, false);
			$("#messages_cp_provider_list").addOption(data, false);
			$("#messages_ref_provider_list").addOption({"":"Select a provider for the order."}, false);
			$("#messages_ref_provider_list").addOption(data, false);
		}
	});
	if (noshdata.encounter_active == 'y') {
		$("#nosh_chart_div").hide('blind');
		$("#nosh_encounter_div").show('blind');
		openencounter();
	} else {
		$("#nosh_encounter_div").hide('blind');
		$("#nosh_chart_div").show('blind');
	}
	$("#new_encounter_accordion").accordion({
		heightStyle: "content",
		activate: function (event, ui) {
			var id = ui.newPanel[0].id;
			$("#" + id + " .text").first().focus();
		}
	});
	$("#new_encounter_accordion .ui-accordion-content").each(function(){
		$(this).find(".text").last().on('keydown', function(e) {
			if (e.which == 9) {
				if (!e.shiftKey) {
					var active = $("#new_encounter_accordion").accordion("option", "active");
					if (active < 2) {
						$("#new_encounter_accordion").accordion("option", "active", active + 1);
					}
				}
			}
		});
	});
	$("#encounter_template").addOption({'standardmedical':'Standard Medical Visit','standardpsych':'Annual Psychiatric Evaluation','standardpsych1':'Psychiatric Encounter','clinicalsupport':'Clinical Support Visit'}, false).tooltip();
	$("#encounter_location").val(noshdata.default_pos);
	$("#encounter_date").mask("99/99/9999").datepicker();
	$("#encounter_time").timepicker({
		'scrollDefaultNow': true,
		'timeFormat': 'h:i A',
		'step': 15
	});
	$("#encounter_provider").change(function() {
		var a = $(this).val();
		if (a != "") {
			$("#encounter_type").removeOption(/./);
			$("#encounter_type").addOption({'':'Choose appointment to associate encounter!'}, false);
			$.ajax({
				type: "POST",
				url: "ajaxsearch/get-appointments/" + a,
				dataType: "json",
				success: function(data){
					$("#encounter_type").addOption(data,false);
				}
			});
		}
	});
	$("#encounter_role").addOption({"":"Choose Provider Role","Primary Care Provider":"Primary Care Provider","Consulting Provider":"Consulting Provider","Referring Provider":"Referring Provider"},false).change(function(){
		if ($(this).val() == "Consulting Provider" || $(this).val() == "Referring Provider") {
			$(".referring_provider_div").show();
		} else {
			$(".referring_provider_div").hide().val('');
		}
	});
	$("#referring_provider_npi").mask("9999999999");
	$("#encounter_cc").val('');
	$("#billing_bill_complex").addOption({"":"","Low Complexity":"Low Complexity","Medium Complexity":"Medium Complexity","High Complexity":"High Complexity"}, false);
	$("#encounter_condition_work").addOption({"":"","No":"No","Yes":"Yes"},false);
	$("#encounter_condition_auto").addOption({"":"","No":"No","Yes":"Yes"},false);
	$("#encounter_condition_other").addOption({"":"","No":"No","Yes":"Yes"},false);
	$("#encounter_condition_auto_state").addOption({"":"State where accident occured.","AL":"Alabama","AK":"Alaska","AS":"America Samoa","AZ":"Arizona","AR":"Arkansas","CA":"California","CO":"Colorado","CT":"Connecticut","DE":"Delaware","DC":"District of Columbia","FM":"Federated States of Micronesia","FL":"Florida","GA":"Georgia","GU":"Guam","HI":"Hawaii","ID":"Idaho","IL":"Illinois","IN":"Indiana","IA":"Iowa","KS":"Kansas","KY":"Kentucky","LA":"Louisiana","ME":"Maine","MH":"Marshall Islands","MD":"Maryland","MA":"Massachusetts","MI":"Michigan","MN":"Minnesota","MS":"Mississippi","MO":"Missouri","MT":"Montana","NE":"Nebraska","NV":"Nevada","NH":"New Hampshire","NJ":"New Jersey","NM":"New Mexico","NY":"New York","NC":"North Carolina","ND":"North Dakota","OH":"Ohio","OK":"Oklahoma","OR":"Oregon","PW":"Palau","PA":"Pennsylvania","PR":"Puerto Rico","RI":"Rhode Island","SC":"South Carolina","SD":"South Dakota","TN":"Tennessee","TX":"Texas","UT":"Utah","VT":"Vermont","VI":"Virgin Island","VA":"Virginia","WA":"Washington","WV":"West Virginia","WI":"Wisconsin","WY":"Wyoming"}, false);
	$("#new_encounter_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 650, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(event, ui) {
			$.ajax({
				type: "POST",
				url: "ajaxsearch/get-copay",
				success: function(data){
					$("#encounter_copay").html(data);
				}
			});
			$("#encounter_provider").removeOption(/./);
			$("#encounter_provider").addOption({'':'Choose Provider'}, false);
			$.ajax({
				type: "POST",
				url: "ajaxsearch/provider-select1",
				dataType: "json",
				success: function(data){
					$("#encounter_provider").addOption(data,false);
					if (noshdata.group_id == '2' || noshdata.group_id == '3') {
						$("#encounter_provider").val(noshdata.user_id);
						$.ajax({
							type: "POST",
							url: "ajaxsearch/get-appointments/" + noshdata.user_id,
							dataType: "json",
							success: function(data){
								$("#encounter_type").addOption(data,false);
							}
						});
					}
				}
			});
			$("#encounter_location").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/pos",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 1
			});
			$("#encounter_cc").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/cc",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#referring_provider").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/all-contacts2",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3,
				select: function(event, ui){
					$("#referring_provider_npi").val(ui.item.npi);
				}
			});
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#new_encounter_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					if($("#new_encounter_dialog_eid").val() == '') {
						if($("#encounter_type").val() == '') {
							if(confirm('Are you sure you want to create a new encounter without an associated appointment?')){
								newencounter();
							}
						} else {
							newencounter();
						}
					} else {
						var str = $("#new_encounter_form").serialize();
						if(str){
							$.ajax({
								type: "POST",
								url: "ajaxencounter/edit-encounter",
								data: str,
								success: function(data){
									$.jGrowl(data);
									$("#new_encounter_form").clearForm();
									$("#new_encounter_dialog").dialog('close');
								}
							});
						} else {
							$.jGrowl("Please complete the form");
						}
					}
				}
			},
			Cancel: function() {
				$("#new_encounter_form").clearForm();
				$("#new_encounter_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#new_encounter").click(function() {
		$("#detail_encounter_number").html("");
		$("#encounter_template").val('standardmedical');
		$("#encounter_location").val(noshdata.default_pos);
		var currentDate = getCurrentDate();
		var currentTime = getCurrentTime();
		$("#encounter_date").val(currentDate);
		$("#encounter_time").val(currentTime);
		$("#encounter_type").removeOption(/./);
		$("#encounter_type").addOption({'':'Choose appointment to associate encounter!'}, false);
		if (noshdata.group_id == '2') {
			$(".new_encounter_dialog_encounter_provider_div").hide();
		} else {
			$(".new_encounter_dialog_encounter_provider_div").show();
		}
		$("#encounter_condition_work").val('No');
		$("#encounter_condition_auto").val('No');
		$("#encounter_condition_other").val('No');
		$(".referring_provider_div").hide();
		$(".detail_encounter_noshow").show();
		$("#new_encounter_dialog").dialog('open');
	});
	$("#new_message").click(function() {
		$("#edit_message_form").clearForm();
		$.ajax({
			url: "ajaxchart/new-message",
			type: "POST",
			success: function(data){
				$("#t_messages_id").val(data);
			}
		});
		var currentDate = getCurrentDate();
		$("#t_messages_dos").val(currentDate);
		reload_grid("messages");
		$("#messages_list_dialog").dialog('open');
		$("#edit_message_fieldset").show();
		$("#t_messages_subject").focus();
		$("#message_view").html('');
		$("#messages_main_dialog").dialog('open');
	});
	$("#new_letter").click(function() {
		$("#letter_dialog").dialog('open');
	});
	$("#new_import_documents_type").addOption({"Laboratory":"Laboratory","Imaging":"Imaging","Cardiopulmonary":"Cardiopulmonary","Endoscopy":"Endoscopy","Referrals":"Referrals","Past Records":"Past Records","Other Forms":"Other Forms"}, false);
	$("#new_import_documents_date").mask("99/99/9999");
	$("#new_import_documents_date").datepicker();
	$("#new_import_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(event, ui) {
			$("#new_import_documents_from").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/document-from",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 2
			});
			$("#new_import_documents_desc").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/document-description",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 2
			});
			$("#new_import_documents_from").focus();
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#new_import_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#new_import_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/documents-upload",
							data: str,
							success: function(data){
								$.jGrowl(data);
								$('#new_import_form').clearForm();
								$("#new_import_message").html('');
								$("#new_import_dialog").dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				var id = $("#new_import_documents_id").val();
				if(id){
					$.ajax({
						type: "POST",
						url: "ajaxchart/delete-upload",
						data: "documents_id=" + id,
						success: function(data){
							$.jGrowl(data);
							$('#new_import_form').clearForm();
							$("#new_import_message").html('');
							$("#new_import_dialog").dialog('close');
						}
					});
				} else {
					$.jGrowl("Error canceling upload!");
				}
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	var myUpload = $("#new_import").upload({
		action: 'documentsupload',
		onComplete: function(data){
			var data1 = JSON.parse(data);
			$.jGrowl(data1.result);
			$("#new_import_message").html(data1.result1);
			$("#new_import_documents_id").val(data1.id);
			$('#new_import1').val('');
			$("#new_import_dialog").dialog('open');
		}
	});
	var myUpload1 = $("#import_ccr").upload({
		action: 'ccrupload',
		onComplete: function(data){
			$.jGrowl(data);
		}
	});
	var myUpload2 = $("#import_ccda").upload({
		action: 'ccdaupload',
		onComplete: function(data){
			var data1 = JSON.parse(data);
			$.jGrowl(data1.message);
			if (data1.result == true) {
				$.ajax({
					type: "POST",
					url: "ajaxchart/get-ccda/" + data1.ccda,
					success: function(data){
						jQuery("#ccda_issues").jqGrid('GridUnload');
						jQuery("#ccda_issues").jqGrid({
							datatype: "local",
							colNames:['ID','Date Active','Issue','Code'],
							colModel:[
								{name:'id',index:'id',width:1,hidden:true},
								{name:'date_range.start',index:'date_range.start',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
								{name:'name',index:'name',width:635},
								{name:'code',index:'code',width:1,hidden:true}
							],
							rowNum:10,
							rowList:[10,20,30],
							pager: jQuery('#ccda_issues_pager'),
							sortname: 'date_range.start',
							viewrecords: true,
							sortorder: "desc",
							caption:"Issues from C-CDA",
							height: "100%"
						}).navGrid('#ccda_issues_pager',{search:false,edit:false,add:false,del:false});
						jQuery("#ccda_medications").jqGrid('GridUnload');
						jQuery("#ccda_medications").jqGrid({
							datatype: "local",
							colNames:['ID','Date Active','Due Date','Medication','SIG Dosage','SIG Unit','Route','Reason','RXNorm','Administration'],
							colModel:[
								{name:'id',index:'id',width:1,hidden:true},
								{name:'date_range.start',index:'date_range.start',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
								{name:'date_range.end',index:'date_range.end',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
								{name:'product.name',index:'product.name',width:320},
								{name:'dose_quantity.value',index:'dose_quantity.value',width:100},
								{name:'dose_quantity.unit',index:'dose_quantity.unit',width:100},
								{name:'route.name',index:'route.name',width:1,hidden:true},
								{name:'reason.name',index:'reason.name',width:1,hidden:true},
								{name:'product.code',index:'product.code',width:1,hidden:true},
								{name:'administration.name',index:'administration.name',width:1,hidden:true}
							],
							rowNum:10,
							rowList:[10,20,30],
							pager: jQuery('#nosh_medications_pager'),
							sortname: 'date_range.start',
							viewrecords: true,
							sortorder: "desc",
							caption:"Medications from C-CDA",
							height: "100%"
						}).navGrid('#ccda_medications_pager',{search:false,edit:false,add:false,del:false});
						jQuery("#ccda_allergies").jqGrid('GridUnload');
						jQuery("#ccda_allergies").jqGrid({
							datatype: "local",
							colNames:['ID','Date Active','Medication','Reason'],
							colModel:[
								{name:'id',index:'id',width:1,hidden:true},
								{name:'date_range.start',index:'date_range.start',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
								{name:'allergen.name',index:'allergen.name',width:310},
								{name:'reaction_type.name',index:'reaction_type.name',width:320}
							],
							rowNum:10,
							rowList:[10,20,30],
							pager: jQuery('#ccda_allergies_pager'),
							sortname: 'date_range.start',
							viewrecords: true,
							sortorder: "desc",
							caption:"Allergies",
							height: "100%",
							jsonReader: { repeatitems : false, id: "0" }
						}).navGrid('#ccda_allergies_pager',{search:false,edit:false,add:false,del:false});
						jQuery("#ccda_imm").jqGrid('GridUnload');
						jQuery("#ccda_imm").jqGrid({
							datatype: "local",
							colNames:['ID','Date Given','Immunization','Route'],
							colModel:[
								{name:'id',index:'id',width:1,hidden:true},
								{name:'date',index:'date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
								{name:'product.name',index:'product.name',width:635},
								{name:'route.name',index:'route.name',width:1,hidden:true}
							],
							rowNum:10,
							rowList:[10,20,30],
							pager: jQuery('#ccda_imm_pager'),
							sortname: 'product.name',
							viewrecords: true,
							sortorder: "asc",
							caption:"Immunizations",
							height: "100%",
							jsonReader: { repeatitems : false, id: "0" }
						}).navGrid('#ccda_imm_pager',{search:false,edit:false,add:false,del:false});
						var bb = BlueButton(data);
						var bb_issues = bb.problems();
						for (var i=0; i<bb_issues.length; i++) {
							bb_issues[i].id = i+1;
							jQuery("#ccda_issues").jqGrid('addRowData',i+1,bb_issues[i]);
						}
						var bb_medications = bb.medications();
						var medications_array = [];
						for (var j=0; j<bb_medications.length; j++) {
							bb_medications[j].id = j+1;
							jQuery("#ccda_medications").jqGrid('addRowData',j+1,bb_medications[j]);
						}
						var bb_allergies = bb.allergies();
						var allergies_array = [];
						for (var k=0; k<bb_allergies.length; k++) {
							bb_allergies[k].id = k+1;
							jQuery("#ccda_allergies").jqGrid('addRowData',k+1,bb_allergies[k]);
						}
						var bb_immunizations = bb.immunizations();
						var immunizations_array = [];
						for (var l=0; l<bb_immunizations.length; l++) {
							bb_immunizations[l].id = l+1;
							jQuery("#ccda_imm").jqGrid('addRowData',l+1,bb_immunizations[l]);
						}
						$("#ccda_dialog").dialog('open');
					}
				});
			}
		}
	});
	var myUpload3 = $("#chart_import_csv").upload({
		action: 'csvupload',
		onComplete: function(data){
			var data1 = JSON.parse(data);
			$.jGrowl(data1.message);
			if (data1.message != 'Error with CSV file!') {
				$("#csv_form").html('');
				$("#csv_form").html(data1.html);
				$("#csv_dialog").dialog('open');
			}
		}
	});
	$("#ccda_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 925, 
		draggable: false,
		resizable: false,
		open: function(event,ui) {
			$("#ccda_accordion").accordion({ heightStyle: "content" });
			jQuery("#nosh_issues").jqGrid('GridUnload');
			jQuery("#nosh_issues").jqGrid({
				url:"ajaxcommon/issues",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Active','Issue'],
				colModel:[
					{name:'issue_id',index:'issue_id',width:1,hidden:true},
					{name:'issue_date_active',index:'issue_date_active',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'issue',index:'issue',width:635}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#nosh_issues_pager'),
				sortname: 'issue_date_active',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Issues",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#nosh_issues_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#nosh_medications").jqGrid('GridUnload');
			jQuery("#nosh_medications").jqGrid({
				url:"ajaxcommon/medications",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Active','Due Date','Medication','Dosage','Unit','SIG','Route','Frequency','Special Instructions','Reason','NDC'],
				colModel:[
					{name:'rxl_id',index:'rxl_id',width:1,hidden:true},
					{name:'rxl_date_active',index:'rxl_date_active',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'rxl_due_date',index:'rxl_due_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'rxl_medication',index:'rxl_medication',width:255},
					{name:'rxl_dosage',index:'rxl_dosage',width:50},
					{name:'rxl_dosage_unit',index:'rxl_dosage_unit',width:50},
					{name:'rxl_sig',index:'rxl_sig',width:50},
					{name:'rxl_route',index:'rxl_route',width:1,hidden:true},
					{name:'rxl_frequency',index:'rxl_frequency',width:105},
					{name:'rxl_instructions',index:'rxl_instructions',width:1,hidden:true},
					{name:'rxl_reason',index:'rxl_reason',width:1,hidden:true},
					{name:'rxl_ndcid',index:'rxl_ndcid',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#nosh_medications_pager'),
				sortname: 'rxl_date_active',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Medications - Click on the Date Active column to get past prescriptions for the medication.",
			 	height: "100%",
			 	onCellSelect: function(id,iCol) {
					if (iCol == 1) {
						var med = jQuery("#nosh_medications").getCell(id,'rxl_medication');
						$.ajax({
							type: "POST",
							url: "ajaxchart/past-medication",
							data: "rxl_medication=" + med,
							dataType: "json",
							success: function(data){
								$.jGrowl(data.item, {sticky:true, header:data.header});
							}
						});
					}
				},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#nosh_medications_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#nosh_allergies").jqGrid('GridUnload');
			jQuery("#nosh_allergies").jqGrid({
				url: "ajaxcommon/allergies",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Active','Medication','Reason'],
				colModel:[
					{name:'allergies_id',index:'allergies_id',width:1,hidden:true},
					{name:'allergies_date_active',index:'allergies_date_active',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'allergies_med',index:'allergies_med',width:310},
					{name:'allergies_reaction',index:'allergies_reaction',width:320}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#nosh_allergies_pager'),
				sortname: 'allergies_date_active',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Allergies",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#nosh_allergies_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#nosh_imm").jqGrid('GridUnload');
			jQuery("#nosh_imm").jqGrid({
				url:"ajaxchart/immunizations",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Given','Immunization','Sequence','Given Elsewhere','Body Site','Dosage','Unit','Route','Lot Number','Manufacturer','Expiration Date','VIS'],
				colModel:[
					{name:'imm_id',index:'imm_id',width:1,hidden:true},
					{name:'imm_date',index:'imm_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'imm_immunization',index:'imm_immunization',width:410},
					{name:'imm_sequence',index:'imm_sequence',width:65},
					{name:'imm_elsewhere',index:'imm_elsewhere',width:150},
					{name:'imm_body_site',index:'imm_body_site',width:1,hidden:true},
					{name:'imm_dosage',index:'imm_dosage',width:1,hidden:true},
					{name:'imm_dosage_unit',index:'imm_dosage_unit',width:1,hidden:true},
					{name:'imm_route',index:'imm_route',width:1,hidden:true},
					{name:'imm_lot',index:'imm_lot',width:1,hidden:true},
					{name:'imm_manufacturer',index:'imm_manufacturer',width:1,hidden:true},
					{name:'imm_expiration',index:'imm_expiration',width:1,hidden:true},
					{name:'imm_vis',index:'imm_vis',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#nosh_imm_pager'),
				sortname: 'imm_immunization',
			 	viewrecords: true,
			 	sortorder: "asc",
			 	caption:"Immunizations",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#nosh_imm_pager',{search:false,edit:false,add:false,del:false});
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#copy_ccda_issues_item").click(function(){
		var item = jQuery("#ccda_issues").getGridParam('selrow');
		if(item){
			$('#edit_issue_form').clearForm();
			var data = jQuery("#ccda_issues").getLocalRow(item);
			var a = data.name + " [" + data.code + "]";
			$('#issue').val(a);
			var data1 = jQuery("#ccda_issues").getCell(item,1);
			var edit_date = editDate(data1);
			$('#issue_date_active').val(edit_date);
			$('#edit_issue_dialog').dialog('option', 'title', "Copy Issue");
			$('#edit_issue_dialog').dialog('open');
		} else {
			$.jGrowl("Please select issue to copy!")
		}
	});
	$("#add_nosh_issue").click(function(){
		$('#edit_issue_form').clearForm();
		var currentDate = getCurrentDate();
		$('#issue_date_active').val(currentDate);
		$('#edit_issue_dialog').dialog('option', 'title', "Add Issue");
		$('#edit_issue_dialog').dialog('open');
		$("#issue").focus();
	});
	$("#edit_nosh_issue").click(function(){
		var item = jQuery("#nosh_issues").getGridParam('selrow');
		if(item){
			jQuery("#nosh_issues").GridToForm(item,"#edit_issue_form");
			var date = $('#issue_date_active').val();
			var edit_date = editDate(date);
			$('#issue_date_active').val(edit_date);
			$('#edit_issue_dialog').dialog('option', 'title', "Edit Issue");
			$('#edit_issue_dialog').dialog('open');
		} else {
			$.jGrowl("Please select issue to edit!")
		}
	});
	$("#inactivate_nosh_issue").click(function(){
		var item = jQuery("#nosh_issues").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxchart/inactivate-issue",
				data: "issue_id=" + item,
				success: function(data){
					$.jGrowl(data);
					reload_grid("nosh_issues");
				}
			});
		} else {
			$.jGrowl("Please select issue to inactivate!")
		}
	});
	$("#copy_ccda_medications_item").click(function(){
		var item = jQuery("#ccda_medications").getGridParam('selrow');
		if(item){
			$('#edit_rx_form').clearForm();
			var data = jQuery("#ccda_medications").getLocalRow(item);
			var medication = jQuery("#ccda_medications").getCell(item,3);
			var dosage = jQuery("#ccda_medications").getCell(item,4);
			var dosage_unit = jQuery("#ccda_medications").getCell(item,5);
			var route = jQuery("#ccda_medications").getCell(item,6);
			var reason = jQuery("#ccda_medications").getCell(item,7);
			var admin = jQuery("#ccda_medications").getCell(item,9);
			var a = '';
			if (dosage != '') {
				a += dosage;
			}
			if (dosage_unit != '') {
				a += ' ' + dosage_unit;
			}
			if (admin != '') {
				a += " " + admin;
			}
			$('#rxl_medication').val(medication);
			$('#rxl_sig').val(a);
			if (route != '') {
				var b = '';
				if (route == "Oropharyngeal Route of Administration") {
					b = "by mouth"; 
				}
				if (route == "Rectal Route of Administration") {
					b = "per rectum"; 
				}
				if (route == "Subcutaneous Route of Administration") {
					b = "subcutaneously"; 
				}
				if (route == "Intravascular Route of Administration") {
					b = "intravenously"; 
				}
				if (route == "Intramuscular Route of Administration") {
					b = "intramuscularly"; 
				}
				$('#rxl_route').val(b);
			}
			$('#rxl_reason').val(reason);
			var date_active = jQuery("#ccda_medications").getCell(item,1);
			var edit_date = editDate(date_active);
			$('#rxl_date_active').val(edit_date);
			$('#edit_medications_dialog').dialog('option', 'title', "Copy Medication");
			$('#edit_medications_dialog').dialog('open');
			$("#rxl_medication").focus();
		} else {
			$.jGrowl("Please select medication to copy!")
		}
	});
	$("#add_nosh_rx").click(function(){
		$('#edit_rx_form').clearForm();
		var currentDate = getCurrentDate();
		$('#rxl_date_active').val(currentDate);
		$('#edit_medications_dialog').dialog('option', 'title', "Add Medication");
		$('#edit_medications_dialog').dialog('open');
		$("#rxl_search").focus();
	});
	$("#edit_nosh_rx").click(function(){
		var item = jQuery("#nosh_medications").getGridParam('selrow');
		if(item){
			jQuery("#nosh_medications").GridToForm(item,"#edit_rx_form");
			var date = $('#rxl_date_active').val();
			var edit_date = editDate(date);
			$('#rxl_date_active').val(edit_date);
			$('#edit_medications_dialog').dialog('option', 'title', "Edit Medication");
			$('#edit_medications_dialog').dialog('open');
			$("#rxl_medication").focus();
		} else {
			$.jGrowl("Please select medication to edit!")
		}
	});
	$("#inactivate_nosh_rx").click(function(){
		var item = jQuery("#nosh_medications").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxchart/inactivate-medication",
				data: "rxl_id=" + item,
				dataType: "json",
				success: function(data){
					$.jGrowl(data.message);
					reload_grid("nosh_medications");
				}
			});
		} else {
			$.jGrowl("Please select medication to inactivate!")
		}
	});
	$("#copy_ccda_allergies_item").click(function(){
		var item = jQuery("#ccda_allergies").getGridParam('selrow');
		if(item){
			$('#edit_allergy_form').clearForm();
			var allergen = jQuery("#ccda_allergies").getCell(item,2);
			var reaction = jQuery("#ccda_allergies").getCell(item,3);
			$('#allergies_med').val(allergen);
			$('#allergies_reaction').val(reaction);
			var date_active = jQuery("#ccda_allergies").getCell(item,1);
			var edit_date = editDate(date_active);
			$('#allergies_date_active').val(edit_date);
			$('#edit_allergy_dialog').dialog('option', 'title', "Edit Allergy");
			$('#edit_allergy_dialog').dialog('open');
			$("#allergies_med").focus();
		} else {
			$.jGrowl("Please select allergy to copy!")
		}
	});
	$("#add_nosh_allergy").click(function(){
		$('#edit_allergy_form').clearForm();
		var currentDate = getCurrentDate();
		$('#allergies_date_active').val(currentDate);
		$('#edit_allergy_dialog').dialog('option', 'title', "Add Allergy");
		$('#edit_allergy_dialog').dialog('open');
		$("#allergies_med").focus();
	});
	$("#edit_nosh_allergy").click(function(){
		var item = jQuery("#nosh_allergies").getGridParam('selrow');
		if(item){
			jQuery("#nosh_allergies").GridToForm(item,"#edit_allergy_form");
			var date = $('#allergies_date_active').val();
			var edit_date = editDate(date);
			$('#allergies_date_active').val(edit_date);
			$('#edit_allergy_dialog').dialog('option', 'title', "Edit Allergy");
			$('#edit_allergy_dialog').dialog('open');
			$("#allergies_med").focus();
		} else {
			$.jGrowl("Please select allergy to edit!")
		}
	});
	$("#inactivate_nosh_allergy").click(function(){
		var item = jQuery("#nosh_allergies").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxchart/inactivate-allergy",
				data: "allergies_id=" + item,
				success: function(data){
					$.jGrowl(data);
					reload_grid("nosh_allergies");
				}
			});
		} else {
			$.jGrowl("Please select allergy to inactivate!")
		}
	});
	$("#copy_ccda_imm_item").click(function(){
		var item = jQuery("#ccda_imm").getGridParam('selrow');
		if(item){
			$('#edit_immunization_form').clearForm();
			var imm = jQuery("#ccda_imm").getCell(item,2);
			var date_active = jQuery("#ccda_imm").getCell(item,1);
			var route = jQuery("#ccda_imm").getCell(item,3);
			$('#imm_immunization').val(imm);
			if (route != null) {
				var b = '';
				if (route == "Oropharyngeal Route of Administration") {
					b = "by mouth"; 
				}
				if (route == "Subcutaneous Route of Administration") {
					b = "subcutaneously"; 
				}
				if (route == "Intravascular Route of Administration") {
					b = "intravenously"; 
				}
				if (route == "Intramuscular Route of Administration") {
					b = "intramuscularly"; 
				}
				$('#imm_route').val(b);
			}
			var edit_date = editDate(date_active);
			$('#imm_date').val(edit_date);
			$$('#edit_immunization_dialog').dialog('option', 'title', "Copy Immunization");
			$('#edit_immunization_dialog').dialog('open');
			$("#imm_immunization").focus();
		} else {
			$.jGrowl("Please select immunization to copy!")
		}
	});
	$("#add_nosh_imm").click(function(){
		$('#edit_immunization_form').clearForm();
		var currentDate = getCurrentDate();
		$('#imm_date').val(currentDate);
		$('#edit_immunization_dialog').dialog('option', 'title', "Add Immunization");
		$('#edit_immunization_dialog').dialog('open');
		$("#imm_immunization").focus();
	});
	$("#edit_nosh_imm").click(function(){
		var item = jQuery("#nosh_imm").getGridParam('selrow');
		if(item){
			jQuery("#nosh_imm").GridToForm(item,"#edit_immunization_form");
			var date = $('#imm_date').val();
			var edit_date = editDate(date);
			$('#imm_date').val(edit_date);
			var expiration = $('#imm_expiration').val();
			var edit_expiration = editDate1(expiration);
			$('#imm_expiration').val(edit_expiration);
			$('#edit_immunization_dialog').dialog('option', 'title', "Edit Immunization");
			$('#edit_immunization_dialog').dialog('open');
			$("#imm_immunization").focus();
		} else {
			$.jGrowl("Please select immunization to edit!")
		}
	});
	$("#print_ccr").click(function() {
		window.open("print_ccr");
	});
	$("#csv_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 925, 
		draggable: false,
		resizable: false,
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#csv_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#csv_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/import-csv",
							data: str,
							success: function(data){
								$.jGrowl(data,{sticky:true});
								$('#csv_form').clearForm();
								$('#csv_dialog').dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#csv_form').clearForm();
				$('#csv_dialog').dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});

	//Encounters section
	$("#preview_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800,
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#preview_encounter").click(function() {
		$("#preview").load('ajaxchart/modal-view2/' + noshdata.eid);
		$("#preview_dialog").dialog('open');
	});
	$('#detail_encounter').click(function(){
		$("#new_encounter_dialog").dialog('open');
		$.ajax({
			type: "POST",
			url: "ajaxencounter/get-encounter",
			dataType: "json",
			success: function(data){
				$('#detail_encounter_number').html(data.eid);
				$(".detail_encounter_noshow").hide();
				$(".new_encounter_dialog_encounter_provider_div").hide();
				if (data.encounter_role == "Consulting Provider" || data.encounter_role == "Referring Provider") {
					$(".referring_provider_div").show();
				} else {
					$(".referring_provider_div").hide();
				}
				$.each(data, function(key, value){
					if (key != "encounter_type") {
						$("#new_encounter_form :input[name='" + key + "']").val(value);
					}
				});
			}
		});
		
	});
	$("#billing_encounter").click(function(){
		$("#billing_eid_1").val(noshdata.eid);
		$("#billing_detail_dialog").dialog('open');
		$.ajax({
			type: "POST",
			url: "ajaxencounter/check-assessment",
			success: function(data){
				if (data == "OK!") {
					$.ajax({
						type: "POST",
						url: "ajaxencounter/compile-billing",
						success: function(data){
							$.jGrowl(data);
							reload_grid("billing_cpt_list");
						}
					});
				} else {
					$.jGrowl(data);
				}
				reload_grid("billing_cpt_list");
			}
		});
	});
	$("#save_draft").click(function() {
		closeencounter();
	});
	$("#sign_encounter").click(function() {
		if(confirm('Are you sure you want to sign?')){ 
			var signed = "Yes";
			$.ajax({
				type: "POST",
				url: "ajaxencounter/check-encounter",
				success: function(data){
					if (data == "") {
						$.ajax({
							type: "POST",
							url: "ajaxencounter/sign-encounter",
							success: function(data){
								$.jGrowl(data);
								reload_grid("encounters");
								if (data == 'Encounter Signed!') {
									closeencounter();
								}
							}
						});
					} else {
						$.jGrowl(data);
					}
				}
			});
		}
	});
	$("#delete_encounter").click(function() {
		if(confirm('Are you sure you want to delete this encounter?')){ 
			$.ajax({
				type: "POST",
				url: "ajaxencounter/delete-encounter",
				data: "eid=" + noshdata.eid,
				success: function(data){
					$.jGrowl(data);
					if (data == 'Encounter deleted!') {
						closeencounter();
					}
				}
			});
		}
	});
	$("#encounter_tags").tagit({
		tagSource: function (req, add){
			$.ajax({
				url: "ajaxsearch/search-tags",
				dataType: "json",
				type: "POST",
				data: req,
				success: function(data){
					if(data.response =='true'){
						add(data.message);
					}
				}
			});
		},
		tagsChanged: function(a, b) {
			if (b == "added") {
				$.ajax({
					type: "POST",
					url: "ajaxsearch/save-tag/eid/" + noshdata.eid,
					data: 'tag=' + a
				});
			}
			if (b == "popped") {
				$.ajax({
					type: "POST",
					url: "ajaxsearch/remove-tag/eid/" + noshdata.eid,
					data: 'tag=' + a
				});
			}
		}
	});
	$("#textdump_group").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 300, 
		width: 400, 
		draggable: false,
		resizable: false,
		focus: function (event, ui) {
			var id = $("#textdump_group_id").val();
			if (id != '') {
				$("#"+id).focus();
			}
		},
		close: function (event, ui) {
			$("#textdump_group_target").val('');
			$("#textdump_group_add").val('');
			$("#textdump_group_html").html('');
		}
	});
	$("#textdump").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 300, 
		width: 400, 
		draggable: false,
		resizable: false,
		close: function (event, ui) {
			$("#textdump_target").val('');
			$("#textdump_input").val('');
			$("#textdump_add").val('');
			$("#textdump_group_item").val('');
			$("#textdump_html").html('');
		},
		buttons: {
			Cancel: function() {
				var id = $("#textdump_target").val();
				var a = $("#textdump_input").val();
				var b = $("#"+id).val();
				var c = b.replace(a, "");
				$("#"+id).val(c);
				$("#textdump").dialog('close');
			}
		}
	});
	$("#textdump_group_html").tooltip();
	$("#textdump_html").tooltip();
	$("#copy_encounter").click(function(){
		$("#copy_encounter_dialog").dialog('open');
	});
	$("#copy_encounter_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 300, 
		width: 550, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(event, ui) {
			$.ajax({
				type: "POST",
				url: "ajaxsearch/previous-encounters",
				dataType: "json",
				success: function(data){
					$("#copy_encounter_from").removeOption(/./);
					$("#copy_encounter_from").addOption(data,false);
				}
			});
		},
		buttons: {
			'Copy': function() {
				if(confirm('Are you sure you want to copy this encounter into the current?')){ 
					var bValid = true;
					$("#copy_encounter_form").find("[required]").each(function() {
						var input_id = $(this).attr('id');
						var id1 = $("#" + input_id); 
						var text = $("label[for='" + input_id + "']").html();
						bValid = bValid && checkEmpty(id1, text);
					});
					if (bValid) {
						var str = $("#copy_encounter_form").serialize();
						if(str){
							$.ajax({
								type: "POST",
								url: "ajaxencounter/copy-encounter",
								data: str,
								success: function(data){
									$.jGrowl(data);
									$("#copy_encounter_form").clearForm();
									$("#copy_encounter_dialog").dialog('close');
								}
							});
						} else {
							$.jGrowl("Please complete the form");
						}
					}
				}
			},
			Cancel: function() {
				$("#copy_encounter_form").clearForm();
				$("#copy_encounter_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#creditcard_type").addOption({"":"Select a credit card type","MasterCard":"MasterCard","Visa":"Visa","Discover":"Discover","Amex":"American Express"}, false);
	$("#creditcard_expiration").mask("99/9999");
	$("#creditcard_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 300, 
		width: 400, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$.ajax({
				type: "POST",
				url: "ajaxchart/get-creditcard",
				dataType: "json",
				success: function(data){
					if (data.message == 'y') {
						$.each(data, function(key, value){
							if (key != 'message') {
								$("#creditcard_form :input[name='" + key + "']").val(value);
							}
						});
					}
				}
			});
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#creditcard_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#creditcard_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/save-creditcard",
							data: str,
							success: function(data){
								$.jGrowl(data);
								$("#creditcard_form").clearForm();
								$("#creditcard_dialog").dialog('close');
								total_balance();
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$("#creditcard_form").clearForm();
				$("#creditcard_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$(".add_creditcard").click(function() {
		$("#creditcard_dialog").dialog('open');
	});
});
$(document).ready(function() {
	$("#demographics_accordion").accordion({
		heightStyle: "content",
		activate: function (event, ui) {
			var id = ui.newPanel[0].id;
			$("#" + id + " .text").first().focus();
		}
	});
	$("#demographics_accordion .ui-accordion-content").each(function(){
		$(this).find(".text").last().on('keydown', function(e) {
			if (e.which == 9) {
				if (!e.shiftKey) {
					var active = $("#demographics_accordion").accordion("option", "active");
					if (active < 3) {
						$("#demographics_accordion").accordion("option", "active", active + 1);
					}
				}
			}
		});
	});
	$("#guardian_import").button().click(function(){
		$('#menu_guardian_address').val($('#menu_address').val());
		$('#menu_guardian_city').val($('#menu_city').val());
		$('#menu_guardian_zip').val($('#menu_zip').val());
		$('#menu_guardian_phone_home').val($('#menu_phone_home').val());
		$('#menu_guardian_phone_cell').val($('#menu_phone_cell').val());
		$('#menu_guardian_phone_work').val($('#menu_phone_work').val());
	});
	$("#demographics_list_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(event, ui) {
			$("#menu_autocomplete_patient").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/demographics-copy",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 1,
				select: function( event, ui ) {
					$.each(ui.item, function(key, value){
						if (key != 'label' || key != 'value') {
							$("#edit_demographics_form :input[name='" + key + "']").val(value);
						}
						
					});
				}
			});
			$(".address_autocomplete").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/address",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$(".city_autocomplete").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/city",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#menu_guardian_relationship").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/guardian-relationship",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3,
				select: function( event, ui ) {
					$("#menu_guardian_code").val(ui.item.code);
				}
			});
			$("#menu_preferred_provider").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/provider",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#menu_preferred_pharmacy").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/pharmacy",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#menu_race").autocomplete({
				source: race_options,
				minLength: 0,
				delay: 0,
				select: function( event, ui ) {
					$("#menu_race_code").val(ui.item.code);
				}
			}).click(function () {
				$(this).autocomplete("search", "");
			});
			$("#menu_ethnicity").autocomplete({
				source: ethnicity_options,
				minLength: 0,
				delay: 0,
				select: function( event, ui ) {
					$("#menu_ethnicity_code").val(ui.item.code);
				}
			}).click(function () {
				$(this).autocomplete("search", "");
			});
			$("#menu_language").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/language",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3,
				select: function( event, ui ) {
					$("#menu_lang_code").val(ui.item.code);
				}
			});
			$.ajax({
				type: "POST",
				url: "ajaxdashboard/demographics",
				dataType: "json",
				success: function(data){
					$.each(data, function(key, value){
						if (key == 'DOB') {
							var value = editDate1(data.DOB);
						}
						$("#edit_demographics_form :input[name='" + key + "']").val(value);
					});
					$("#menu_lastname").focus();
				}
			});
			if (noshdata.group_id != '100') {
				$.ajax({
					type: "POST",
					url: "ajaxdashboard/check-registration-code",
					success: function(data){
						if (data == 'n') {
							$("#register_menu_demographics").show();
						} else {
							$("#register_menu_demographics").hide();
							$("#menu_registration_code").html(data);
						}
					}
				});
			}
		},
		close: function(event, ui) {
			$('#edit_demographics_form').clearForm();
			if(noshdata.group_id != '100') {
				menu_update('demographics');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#demographics_insurance_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		open: function(event, ui) {
			$("#demographics_insurance_details").html("");
			$("#demographics_insurance").jqGrid('GridUnload');
			$("#demographics_insurance").jqGrid({
				url: "ajaxdashboard/insurance",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Insurance','ID Number','Group Number','Priority','Lastname','Firstname','DOB','Gender','Address','City','State','Zip','Phone','Copay','Deductible','Comments','Address ID','Relationship'],
				colModel:[
					{name:'insurance_id',index:'insurance_id',width:1,hidden:true},
					{name:'insurance_plan_name',index:'insurance_plan_name',width:450},
					{name:'insurance_id_num',index:'insurance_id_num',width:100},
					{name:'insurance_group',index:'insurance_group',width:100},
					{name:'insurance_order',index:'insurance_order',width:105},
					{name:'insurance_insu_lastname',index:'insurance_insu_lastname',width:1,hidden:true},
					{name:'insurance_insu_firstname',index:'insurance_insu_firstname',width:1,hidden:true},
					{name:'insurance_insu_dob',index:'insurance_insu_dob',width:1,hidden:true},
					{name:'insurance_insu_gender',index:'insurance_insu_gender',width:1,hidden:true},
					{name:'insurance_insu_address',index:'insurance_insu_address',width:1,hidden:true},
					{name:'insurance_insu_city',index:'insurance_insu_city',width:1,hidden:true},
					{name:'insurance_insu_state',index:'insurance_insu_state',width:1,hidden:true},
					{name:'insurance_insu_zip',index:'insurance_insu_zip',width:1,hidden:true},
					{name:'insurance_insu_phone',index:'insurance_insu_phone',width:1,hidden:true},
					{name:'insurance_copay',index:'insurance_copay',width:1,hidden:true},
					{name:'insurance_deductible',index:'insurance_deductible',width:1,hidden:true},
					{name:'insurance_comments', index:'insurance_comments',width:1,hidden:true},
					{name:'address_id',index:'address_id',width:1,hidden:true},
					{name:'insurance_relationship',index:'insurance_relationship',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: $('#demographics_insurance_pager'),
				sortname: 'insurance_order',
			 	viewrecords: true,
			 	sortorder: "asc",
			 	caption:"Insurance Payors",
			 	height: "100%",
			 	onSelectRow: function(id){
			 		var copay = $("#demographics_insurance").getCell(id,'insurance_copay');
					var deductible = $("#demographics_insurance").getCell(id,'insurance_deductible');
					var comments = $("#demographics_insurance").getCell(id,'insurance_comments');
					var text = '<strong>Additional insurance information for ' + $("#demographics_insurance").getCell(id,'insurance_plan_name') + ":</strong><br>";
					if(copay != ''){
						text += "Copay: " + copay + "<br>";
					}
					if(deductible != ''){
						text += "Deductible: " + deductible + "<br>";
					}
					if (comments != ''){
						text += "Comments: " + comments;
					}
					$("#demographics_insurance_details").html(text);
				},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#demographics_insurance_pager',{search:false,edit:false,add:false,del:false});
			$("#demographics_insurance_inactive").jqGrid('GridUnload')
			$("#demographics_insurance_inactive").jqGrid({
				url: "ajaxdashboard/insurance-inactive",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Insurance','ID Number','Group Number','Priority','Lastname','Firstname','DOB','Gender','Address','City','State','Zip','Copay','Deductible','Comments','Address ID','Relationship'],
				colModel:[
					{name:'insurance_id',index:'insurance_id',width:1,hidden:true},
					{name:'insurance_plan_name',index:'insurance_plan_name',width:450},
					{name:'insurance_id_num',index:'insurance_id_num',width:100},
					{name:'insurance_group',index:'insurance_group',width:100},
					{name:'insurance_order',index:'insurance_order',width:105},
					{name:'insurance_insu_lastname',index:'insurance_insu_lastname',width:1,hidden:true},
					{name:'insurance_insu_firstname',index:'insurance_insu_firstname',width:1,hidden:true},
					{name:'insurance_insu_dob',index:'insurance_insu_dob',width:1,hidden:true},
					{name:'insurance_insu_gender',index:'insurance_insu_gender',width:1,hidden:true},
					{name:'insurance_insu_address',index:'insurance_insu_address',width:1,hidden:true},
					{name:'insurance_insu_city',index:'insurance_insu_city',width:1,hidden:true},
					{name:'insurance_insu_state',index:'insurance_insu_state',width:1,hidden:true},
					{name:'insurance_insu_zip',index:'insurance_insu_zip',width:1,hidden:true},
					{name:'insurance_copay',index:'insurance_copay',width:1,hidden:true},
					{name:'insurance_deductible',index:'insurance_deductible',width:1,hidden:true},
					{name:'insurance_comments', index:'insurance_comments',width:1,hidden:true},
					{name:'address_id',index:'address_id',width:1,hidden:true},
					{name:'insurance_relationship',index:'insurance_relationship',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: $('#demographics_insurance_inactive_pager'),
				sortname: 'insurance_plan_name',
			 	viewrecords: true,
			 	sortorder: "asc",
			 	caption:"Inactive Insurance Payors",
			 	height: "100%",
			 	hiddengrid: true,
			 	onSelectRow: function(id){
			 		var copay = $("#demographics_insurance").getCell(id,'insurance_copay');
					var deductible = $("#demographics_insurance").getCell(id,'insurance_deductible');
					var comments = $("#demographics_insurance").getCell(id,'insurance_comments');
					var text = '<strong>Additional insurance information for ' + $("#demographics_insurance").getCell(id,'insurance_plan_name') + ":</strong><br>";
					if(copay != ''){
						text += "Copay: " + copay + "<br>";
					}
					if(deductible != ''){
						text += "Deductible: " + deductible + "<br>";
					}
					if (comments != ''){
						text += "Comments: " + comments;
					}
					$("#demographics_insurance_details").html(text);
				},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#demographics_insurance_inactive_pager',{search:false,edit:false,add:false,del:false});
			$.ajax({
				url: "ajaxsearch/insurance3",
				dataType: "json",
				type: "POST",
				success: function(data){
					if(data.response =='true'){
						$("#menu_insurance_plan_select").addOption({"":"Select or add insurance provider."}, false);
						$("#menu_insurance_plan_select").addOption(data.message, false);
					} else {
						$("#menu_insurance_plan_select").addOption({"":"No insurance providers.  Click Add."}, false);
					}
				}
			});
		},
		close: function(event, ui) {
			$("#edit_menu_insurance_main_form").clearForm();
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	
	$("#menu_gender").addOption(gender, false);
	$("#menu_marital_status").addOption(marital, false);
	$("#menu_state").addOption(states, false);
	$("#menu_guardian_state").addOption(states, false);
	$("#menu_DOB").mask("99/99/9999");
	$("#menu_DOB").datepicker();
	$("#menu_ss").mask("999-99-9999");
	var race_options = [
		{
			value: "American Indian or Alaska Native",
			label: "American Indian or Alaska Native",
			code: "1002-5"
		},
		{
			value: "Asian",
			label: "Asian",
			code: "2028-9"
		},
		{
			value: "Black or African American",
			label: "Black or African American",
			code: "2054-5"
		},
		{
			value: "Native Hawaiian or Other Pacific Islander",
			label: "Native Hawaiian or Other Pacific Islander",
			code: "2076-8"
		},
		{
			value: "White",
			label: "White",
			code: "2106-3"
		}
	];
	var ethnicity_options = [
		{
			value: "Hispanic or Latino",
			label: "Hispanic or Latino",
			code: "2135-2"
		},
		{
			value: "Not Hispanic or Latino",
			label: "Not Hispanic or Latino",
			code: "2186-5"
		}
	];
	$("#menu_reminder_method").addOption({"":"","Email":"Email","Cellular Phone":"Cellular Phone"}, false);
	$("#menu_cell_carrier").addOption({"":"","txt.att.net":"AT&T","sms.mycricket.com":"Cricket","messaging.nextel.com":"Nextel","qwestmp.com":"Qwest","messaging.sprintpcs.com":"Sprint(PCS)","number@page.nextel.com":"Sprint(Nextel)","tmomail.net":"T-Mobile","email.uscc.net":"US Cellular","vtext.com":"Verizon","vmobl.com":"Virgin Mobile"}, false);
	$("#menu_active").addOption({"1":"Active","0":"Inactive"}, false);
	$(".demographics_list").click(function() {
		$("#demographics_list_dialog").dialog('open');
	});
	$("#patient_demographics").click(function() {
		$("#demographics_list_dialog").dialog('open');
	});
	function save_demographics(type) {
		var a = $("#menu_reminder_method").val();
		var b = $("#menu_cell_carrier").val();
		if (a == "Cellular Phone" && b == "") {
			$.jGrowl("Cellular carrier needs to be completed for cellular phone appointment reminders!");
		} else {
			var str = $("#edit_demographics_form").serialize();
			if(str){
				$.ajax({
					type: "POST",
					url: "ajaxdashboard/edit-demographics",
					data: str,
					success: function(data){
						$.jGrowl('Your information is updated!');
						if (noshdata.group_id != '100') {
							$.ajax({
								type: "POST",
								url: "ajaxchart/demographics-load",
								dataType: "json",
								success: function(data){
									$('#menu_ptname').html(data.ptname);
									$('#menu_nickname').html(data.nickname);
									$('#menu_dob').html(data.dob);
									$('#menu_age').html(data.age);
									$('#menu_gender1').html(data.gender);
									if (type == 'close') {
										$("#demographics_list_dialog").dialog('close');
									}
								}
							});
						}
						if (type == 'close') {
							$("#demographics_list_dialog").dialog('close');
						}
					}
				});
			} else {
				$.jGrowl("Please complete the form.");
			}
		}
	}
	$("#save_menu_demographics").click(function() {
		save_demographics('open');
	});
	$("#save_menu_demographics1").click(function() {
		save_demographics('close');
	});
	$("#cancel_menu_demographics").click(function() {
		$("#edit_demographics_form").clearForm();
		$("#demographics_list_dialog").dialog('close');
	});
	$("#insurance_menu_demographics").button({icons: {primary: "ui-icon-suitcase"}}).click(function() {
		$("#demographics_insurance_dialog").dialog('open');
	});
	$("#demographics_add_insurance").button().click(function(){
		$('#edit_menu_insurance_main_form').clearForm();
		$('#menu_insurance_plan_select').val('');
		$("#add_insurance_plan span").text("Add Insurance Provider");
		$('#menu_insurance_main_dialog').dialog('open');
	});
	$("#demographics_edit_insurance").button().click(function(){
		var item = $("#demographics_insurance").getGridParam('selrow');
		if(item){
			$("#demographics_insurance").GridToForm(item,"#edit_menu_insurance_main_form");
			var dob1 = $("#menu_insurance_insu_dob").val();
			var dob = editDate1(dob1);
			$("#menu_insurance_insu_dob").val(dob);
			$("#menu_insurance_plan_name").val($("#menu_insurance_plan_select option:selected").text());
			$("#add_insurance_plan span").text("Edit Insurance Provider");
			$('#menu_insurance_main_dialog').dialog('open');
		} else {
			$.jGrowl("Please select insurance to edit!")
		}
	});
	function updateinsurance() {
		reload_grid("demographics_insurance");
		reload_grid("demographics_insurance_inactive");
		reload_grid("messages_lab_insurance_grid");
		reload_grid("messages_rad_insurance_grid");
		reload_grid("messages_cp_insurance_grid");
		reload_grid("messages_ref_insurance_grid");
	}
	$("#demographics_inactivate_insurance").button().click(function(){
		var item = $("#demographics_insurance").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxdashboard/inactivate-insurance",
				data: "insurance_id=" + item,
				success: function(data){
					$.jGrowl(data);
					updateinsurance();
				}
			});
			$("#demographics_insurance").delRowData(item);
		} else {
			$.jGrowl("Please select insurance to inactivate!")
		}
	});
	$("#demographics_delete_insurance").button().click(function(){
		var item = $("#demographics_insurance").getGridParam('selrow');
		if(item){
			if(confirm('Are you sure you want to delete this insurance?  This is not recommended unless entering the insurance was a mistake!')){ 
				$.ajax({
					type: "POST",
					url: "ajaxdashboard/delete-insurance",
					data: "insurance_id=" + item,
					success: function(data){
						$.jGrowl(data);
						updateinsurance();
					}
				});
			}
		} else {
			$.jGrowl("Please select insurance to delete!")
		}
	});
	$("#demographics_reactivate_insurance").button().click(function(){
		var item = $("#demographics_insurance_inactive").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxdashboard/reactivate-insurance",
				data: "insurance_id=" + item,
				success: function(data){
					$.jGrowl(data);
					updateinsurance();
				}
			});
		} else {
			$.jGrowl("Please select medication to reactivate!")
		}
	});
	$("#menu_insurance_main_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(event, ui) {
			$(".address_autocomplete").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/address",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$(".city_autocomplete").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/city",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#menu_insurance_plan_select").focus();
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#edit_menu_insurance_main_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_menu_insurance_main_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxdashboard/edit-insurance",
							data: str,
							success: function(data){
								$.jGrowl(data);
								$("#edit_menu_insurance_main_form").clearForm();
								$("#menu_insurance_main_dialog").dialog('close');
								updateinsurance();
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#edit_menu_insurance_main_form').clearForm();
				$("#menu_insurance_main_dialog").dialog('close');
			}
		},
		close: function(event, ui) {
			$('#edit_menu_insurance_main_form').clearForm();
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#demographics_insurance_plan_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(event, ui) {
			$(".address_autocomplete").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/address",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$(".city_autocomplete").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/city",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#menu_insurance_plan_facility").focus();
			var id = $("#menu_insurance_plan_select").val();
			if (id != "") {
				$("#demographics_insurance_plan_dialog").dialog("option", "title", "Edit Insurance Provider");
				$.ajax({
					type: "POST",
					url: "ajaxsearch/insurance1",
					data: "address_id=" + id,
					dataType: "json",
					success: function(data){
						$.each(data, function(key, value){
							$("#edit_menu_insurance_plan_form :input[name='" + key + "']").val(value);
						});
					}
				});
			} else {
				$("#demographics_insurance_plan_dialog").attr("option", "title", "Add Insurance Provider");
				$("#menu_insurance_box_31").val('n');
				$("#menu_insurance_box_32a").val('n');
			}
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#edit_menu_insurance_plan_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_menu_insurance_plan_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxdashboard/edit-insurance-provider",
							data: str,
							dataType: "json",
							success: function(data){
								$.jGrowl(data.message);
								$("#menu_insurance_plan_select").removeOption(/./);
								$.ajax({
									url: "ajaxsearch/insurance3",
									dataType: "json",
									type: "POST",
									success: function(data1){
										if(data1.response =='true'){
											$("#menu_insurance_plan_select").addOption(data1.message);
											$("#menu_insurance_plan_select").val(data.id);
											$("#menu_insurance_plan_name").val($("#menu_insurance_plan_select option:selected").text());
											$("#demographics_insurance_plan_dialog").dialog('close');
											$("#demographics_insurance_plan_dialog").dialog("option", "title", "");
										}
									}
								});
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#edit_menu_insurance_plan_form').clearForm();
				$("#demographics_insurance_plan_dialog").dialog('close');
				$("#demographics_insurance_plan_dialog").dialog("option", "title", "");
			}
		},
		close: function(event, ui) {
			$('#edit_menu_insurance_plan_form').clearForm();
			$("#demographics_insurance_plan_dialog").dialog("option", "title", "");
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#add_insurance_plan").button().click(function(){
		$("#demographics_insurance_plan_dialog").dialog('open');
	});
	$('#menu_insurance_plan_select').change(function() {
		if ($(this).val() != ""){
			$("#menu_insurance_plan_name").val($("#menu_insurance_plan_select option:selected").text());
			$("#add_insurance_plan span").text("Edit Insurance Provider");
		} else {
			$("#add_insurance_plan span").text("Add Insurance Provider");
		}
	});
	$("#menu_insurance_insu_gender").addOption(gender, false);
	$("#menu_insurance_order").addOption({"":"","Primary":"Primary","Secondary":"Secondary","Unassigned":"Unassigned"}, false);
	$("#menu_insurance_relationship").addOption({"":"","Self":"Self","Spouse":"Spouse","Child":"Child","Other":"Other"}, false);
	$("#menu_insurance_plan_type").addOption({"":"","Group Health Plan":"Group Health Plan","Other":"Other","Medicare":"Medicare","Medicaid":"Medicaid","Tricare":"Tricare","ChampVA":"ChampVA","FECA":"FECA"}, false);
	$("#menu_insurance_plan_assignment").addOption({"":"","No":"No","Yes":"Yes"}, false);
	$("#menu_insurance_insu_dob").mask("99/99/9999");
	$("#menu_insurance_insu_dob").datepicker();
	$("#menu_insurance_plan_state").addOption({"":"","AL":"Alabama","AK":"Alaska","AS":"America Samoa","AZ":"Arizona","AR":"Arkansas","CA":"California","CO":"Colorado","CT":"Connecticut","DE":"Delaware","DC":"District of Columbia","FM":"Federated States of Micronesia","FL":"Florida","GA":"Georgia","GU":"Guam","HI":"Hawaii","ID":"Idaho","IL":"Illinois","IN":"Indiana","IA":"Iowa","KS":"Kansas","KY":"Kentucky","LA":"Louisiana","ME":"Maine","MH":"Marshall Islands","MD":"Maryland","MA":"Massachusetts","MI":"Michigan","MN":"Minnesota","MS":"Mississippi","MO":"Missouri","MT":"Montana","NE":"Nebraska","NV":"Nevada","NH":"New Hampshire","NJ":"New Jersey","NM":"New Mexico","NY":"New York","NC":"North Carolina","ND":"North Dakota","OH":"Ohio","OK":"Oklahoma","OR":"Oregon","PW":"Palau","PA":"Pennsylvania","PR":"Puerto Rico","RI":"Rhode Island","SC":"South Carolina","SD":"South Dakota","TN":"Tennessee","TX":"Texas","UT":"Utah","VT":"Vermont","VI":"Virgin Island","VA":"Virginia","WA":"Washington","WV":"West Virginia","WI":"Wisconsin","WY":"Wyoming"}, false);
	$("#menu_insurance_insu_state").addOption({"":"","AL":"Alabama","AK":"Alaska","AS":"America Samoa","AZ":"Arizona","AR":"Arkansas","CA":"California","CO":"Colorado","CT":"Connecticut","DE":"Delaware","DC":"District of Columbia","FM":"Federated States of Micronesia","FL":"Florida","GA":"Georgia","GU":"Guam","HI":"Hawaii","ID":"Idaho","IL":"Illinois","IN":"Indiana","IA":"Iowa","KS":"Kansas","KY":"Kentucky","LA":"Louisiana","ME":"Maine","MH":"Marshall Islands","MD":"Maryland","MA":"Massachusetts","MI":"Michigan","MN":"Minnesota","MS":"Mississippi","MO":"Missouri","MT":"Montana","NE":"Nebraska","NV":"Nevada","NH":"New Hampshire","NJ":"New Jersey","NM":"New Mexico","NY":"New York","NC":"North Carolina","ND":"North Dakota","OH":"Ohio","OK":"Oklahoma","OR":"Oregon","PW":"Palau","PA":"Pennsylvania","PR":"Puerto Rico","RI":"Rhode Island","SC":"South Carolina","SD":"South Dakota","TN":"Tennessee","TX":"Texas","UT":"Utah","VT":"Vermont","VI":"Virgin Island","VA":"Virginia","WA":"Washington","WV":"West Virginia","WI":"Wisconsin","WY":"Wyoming"}, false);
	$("#menu_insurance_relationship").change(function(){
		if($("#menu_insurance_relationship").val() == "Self") {
			$.ajax({
				type: "POST",
				url: "ajaxdashboard/copy-address",
				dataType: "json",
				success: function(data){
					$("#menu_insurance_insu_lastname").val(data.lastname);
					$("#menu_insurance_insu_firstname").val(data.firstname);
					var dob = editDate1(data.DOB);
					$("#menu_insurance_insu_dob").val(dob);
					$("#menu_insurance_insu_gender").val(data.sex);
					$("#menu_insurance_insu_address").val(data.address);
					$("#menu_insurance_insu_city").val(data.city);
					$("#menu_insurance_insu_state").val(data.state);
					$("#menu_insurance_insu_zip").val(data.zip);
					if (data.phone_home != '') {
						$("#menu_insurance_insu_phone").val(data.phone_home);
					} else {
						$("#menu_insurance_insu_phone").val(data.phone_cell);
					}
				}
			});
		}
	});	
	$("#insurance_copy").button().click(function(){
		$.ajax({
			type: "POST",
			url: "ajaxdashboard/copy_address",
			dataType: "json",
			success: function(data){
				$("#menu_insurance_insu_address").val(data.address);
				$("#menu_insurance_insu_city").val(data.city);
				$("#menu_insurance_insu_state").val(data.state);
				$("#menu_insurance_insu_zip").val(data.zip);
				if (data.phone_home != '') {
					$("#menu_insurance_insu_phone").val(data.phone_home);
				} else {
					$("#menu_insurance_insu_phone").val(data.phone_cell);
				}
			}
		});
	});
	$("#menu_insurance_box_31").addOption({"n":"First Last, Title (Default)","y":"Last, First" }, false);
	$("#menu_insurance_box_32a").addOption({"n":"Company NPI (Default)","y":"Personal NPI" }, false);
	$("#register_menu_demographics").button().click(function() {
		$.ajax({
			type: "POST",
			url: "ajaxdashboard/register-patient",
			success: function(data){
				$("#register_menu_demographics").hide();
				$("#menu_registration_code").html(data);
			}
		});
	});
	$("#pregnancy_lmp").datepicker().mask("99/99/9999");
	$("#pregnancy_us").datepicker().mask("99/99/9999");
	$('#edc_lmp').click(function(){
		var a = $("#pregnancy_lmp");
		var b = $("#pregnancy_cycle");
		var bValid = true;
		bValid = bValid && checkEmpty(a,"Last menstrural period");
		bValid = bValid && checkEmpty(a,"Number of days in cycle");
		if (bValid) {
			var codate = new Date();
			var daymsecs = 86400000;
			var c = $('#pregnancy_cycle').val();
			var string = $('#pregnancy_lmp').val();
			var result = string.split("/");
			var starto = new Date();
			starto.setFullYear(result[2]);
			starto.setMonth(result[0] - 1);
			starto.setDate(result[1]);
			starto.setTime(starto.getTime() + ((c * daymsecs) - daymsecs*14));
			codate.setTime(starto.getTime());
			var month = new Array("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12");
			var a = "" + month[starto.getMonth()] + "/" + starto.getDate() + "/" + starto.getFullYear() + ";LMP " + string + " " + c;	
			var a1 = month[starto.getMonth()] + "/" + starto.getDate() + "/" + starto.getFullYear();
			$('#pregnancy_edc').val(a);
			$('#edc_text').html(a1);
		}
	});
	$('#edc_us').click(function(){
		var a = $("#pregnancy_us");
		var bValid = true;
		bValid = bValid && checkEmpty(a,"Ultrasound EDC");
		if (bValid) {
			var a = $('#pregnancy_us').val() + ";Ultrasound";
			$('#pregnancy_edc').val(a);
			$('#edc_text').html($('#pregnancy_us').val());
		}
	});
	function save_prenatal_dialog() {
		var edc = $("#pregnancy_edc");
		var bValid = true;
		bValid = bValid && checkEmpty(edc,"Consensus EDC");
		if (bValid) {
			var edc1 = $("#pregnancy_edc").val();
			$.ajax({
				type: "POST",
				url: "ajaxchart/edit-pregnancy",
				data: "pregnant=" + edc1,
				success: function(data){
					$.jGrowl(data);
					var origin = $("#prenatal_dialog_origin").val();
					var a = $("#pregnancy_edc").val();
					if (a != 'no') {
						var result1 = a.split(";");
						var string = result1[0];
						var result = string.split("/");
						var starto = new Date();
						starto.setFullYear(result[2]);
						starto.setMonth(result[0] - 1);
						starto.setDate(result[1]);
						var daymsecs = 86400000;
						var timenow = new Date();
						var elapsed = Math.round((timenow.getTime()-starto.getTime())/daymsecs);
						var b = "" + (Math.floor(elapsed/7)+2) + " weeks, " + Math.floor(elapsed%7) + " days";
						var duedate = new Date(); 
						duedate.setTime(starto.getTime() + daymsecs*266);
						var month = new Array("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12");
						var c = "" + month[duedate.getMonth()] + "/" + duedate.getDate() + "/" + duedate.getFullYear();
						var intro = "Pregnancy status: Pregnant.\nEstimated date of conception: " + string + "\nEstimated gestational age: " + b + "\nEstimated due date: " + c;
					} else {
						var intro = "Pregnancy status: Not pregnant.";
					}
					if (origin == "1") {
						var old = $("#hpi").val();
						if(old){
							var pos = old.lastIndexOf('\n');
							if (pos == -1) {
								var old1 = old + '\n\n';
							} else {
								var a = old.slice(pos);
								if (a == '') {
									var old1 = old + '\n';
								} else {
									var old1 = old + '\n\n';
								}
							}
						} else {
							var old1 = '';
						}
						$("#hpi").val(old1+intro);
					} else {
						if (a != 'no') {
							$("#prenatal_ega").val(b);
							$("#prenatal_duedate").val(c);
						}
					}
					$("#prenatal_dialog_form").clearForm();
					$("#prenatal_dialog").dialog('close');
				}
			});
		}
	} 
	$("#prenatal_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 500, 
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'OK': function() {
				save_prenatal_dialog();
			},
			'Not Pregnant': function() {
				$('#pregnancy_edc').val('no');
				save_prenatal_dialog();
			},
			Cancel: function() {
				$("#prenatal_dialog_form").clearForm();
				$("#prenatal_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
});
$(document).ready(function() {
	$("#searchpt").focus();
	$("#searchpt").autocomplete({
		source: function (req, add){
			$.ajax({
				url: "ajaxsearch/search",
				dataType: "json",
				type: "POST",
				data: req,
				success: function(data){
					if(data.response =='true'){
						add(data.message);
					}
				}
			});
		},
		minLength: 1,
		select: function(event, ui){
			$("#hidden_pid").val(ui.item.id);
			var oldpt = noshdata.pid;
			if(!oldpt){
				$.ajax({
					type: "POST",
					url: "ajaxsearch/openchart",
					dataType: "json",
					data: "pid=" + ui.item.id,
					success: function(data){
						window.location = data.url;
					}
				});
			} else {
				if(ui.item.id != oldpt){
					$("#search_dialog").dialog('open');
				} else {
					$.jGrowl("Patient chart already open!");
				}
			}
		}
	});
	var gender = {"m":"Male","f":"Female"};
	$("#gender").addOption(gender, false);
	$("#DOB").mask("99/99/9999").datepicker();
	$("#search_dialog").dialog({
		bgiframe: true,
		autoOpen: false,
		resizable: true,
		height:200,
		width:350,
		modal: true,
		buttons: {
			'OK': function() {
				$("#search_dialog").dialog('close');
				var pid = $("#hidden_pid").val();
				var eid = $("#hidden_eid").val();
				if(pid){
					if(eid){
						$.ajax({
							type: "POST",
							url: "ajaxsearch/openchart",
							data: "pid=" + pid,
							dataType: "json",
							success: function(data){
								var eid = $("#hidden_eid").val();
								$.ajax({
									type: "POST",
									url: "ajaxsearch/eidset",
									data: "eid=" + eid,
									dataType: "json",
									success: function(data) {
										$("#hidden_eid").val('');
										window.location = data.url;
									}
								});
							}
						});
					} else {
						$.ajax({
							type: "POST",
							url: "ajaxsearch/openchart",
							data: "pid=" + pid,
							dataType: "json",
							success: function(data){
								$("#hidden_pid").val('');
								window.location = data.url;
							}
						});
					}
				} else {
					$.jGrowl("Please enter patient to open chart!");
				}
			},
			Cancel: function() {
				$("#search_dialog").dialog('close');
			}
		}
	});
	$("#openNewPatient").button({icons: {primary: "ui-icon-plus"}}).click(function() {
		$("#new_patient").dialog('open');
		$("#lastname").focus();
	});
	$("#new_patient").dialog({
		bgiframe: true,
		autoOpen: false,
		resizable: true,
		height:400,
		width:550,
		modal: true,
		buttons: {
			'Add Only': function() {
				var str = $("#new_patient_form").serialize();
				if(str){
					$.ajax({
						type: "POST",
						url: "ajaxsearch/newpatient",
						data: str,
						dataType: "json",
						success: function(data){
							$.jGrowl(data.message);
							$("#new_patient").dialog('close');
							$("#new_patient_form").clearForm();
						}
					});
				} else {
					$.jGrowl("Please complete the form");
				}
			},
			'Add and Open Chart': function() {
				var str = $("#new_patient_form").serialize();
				if(str){
					$.ajax({
						type: "POST",
						url: "ajaxsearch/newpatient",
						data: str,
						dataType: "json",
						success: function(data){
							$.jGrowl(data.message);
							$("#new_patient").dialog('close');
							$("#new_patient_form").clearForm();
							$.ajax({
								type: "POST",
								url: "ajaxsearch/openchart",
								data: "pid=" + data.pid,
								dataType: "json",
								success: function(data){
									$("#hidden_pid").val('');
									window.location = data.url;
								}
							});
						}
					});
				} else {
					$.jGrowl("Please complete the form");
				}
			},
			Cancel: function() {
				$("#new_patient").dialog('close');
			}
		}
	});
	$("#encounter_panel").click(function() {
		noshdata.encounter_active = 'y';
		openencounter();
	});
	$("#chart_panel").click(function() {
		noshdata.encounter_active = 'n';
		$("#nosh_chart_div").show();
		$("#nosh_encounter_div").hide();
	});
});
$(document).ready(function() {
	function targetname (cellvalue, options, rowObject){
		var ret = '';
		$.each(fields, function(key, value){
			if (key == cellvalue) {
				ret = value;
			}
		});
		return ret;
	}
	function untargetname (cellvalue, options, cell){
		var ret = '';
		$.each(fields, function(key, value){
			if (value == cellvalue) {
				ret = key;
			}
		});
		return ret;
	}
	$("#configuration_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		open: function(event, ui) {
			$("#configuration_accordion").accordion({ heightStyle: "content" });
			jQuery("#configuration_orders_labs").jqGrid('GridUnload');
			jQuery("#configuration_orders_labs").jqGrid({
				url:"ajaxdashboard/orders-list/Laboratory/Global",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Group','Category','Description','CPT','SNOMED'],
				colModel:[
					{name:'orderslist_id',index:'orderslist_id',width:1,hidden:true},
					{name:'user_id',index:'user_id',width:1,hidden:true},
					{name:'orders_category',index:'orders_category',width:1,hidden:true},
					{name:'orders_description',index:'orders_description',width:355},
					{name:"cpt",index:"cpt",width:100},
					{name:"snomed",index:"snomed",width:100}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#configuration_orders_labs_pager'),
				sortname: 'orders_description',
			 	viewrecords: true,
			 	sortorder: "asc",
			 	caption:"Global Laboratory Orders List",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#configuration_orders_labs_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#configuration_orders_labs1").jqGrid('GridUnload');
			jQuery("#configuration_orders_labs1").jqGrid({
				url:"ajaxdashboard/orders-list/Laboratory/User",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Group','Category','Description','CPT','SNOMED'],
				colModel:[
					{name:'orderslist_id',index:'orderslist_id',width:1,hidden:true},
					{name:'user_id',index:'user_id',width:1,hidden:true},
					{name:'orders_category',index:'orders_category',width:1,hidden:true},
					{name:'orders_description',index:'orders_description',width:355},
					{name:"cpt",index:"cpt",width:100},
					{name:"snomed",index:"snomed",width:100}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#configuration_orders_labs1_pager'),
				sortname: 'orders_description',
			 	viewrecords: true,
			 	sortorder: "asc",
			 	caption:"Personal Laboratory Orders List",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#configuration_orders_labs1_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#configuration_orders_rad").jqGrid('GridUnload');
			jQuery("#configuration_orders_rad").jqGrid({
				url:"ajaxdashboard/orders-list/Radiology/Global",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Group','Category','Description','CPT','SNOMED'],
				colModel:[
					{name:'orderslist_id',index:'orderslist_id',width:1,hidden:true},
					{name:'user_id',index:'user_id',width:1,hidden:true},
					{name:'orders_category',index:'orders_category',width:1,hidden:true},
					{name:'orders_description',index:'orders_description',width:355},
					{name:"cpt",index:"cpt",width:100},
					{name:"snomed",index:"snomed",width:100}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#configuration_orders_rad_pager'),
				sortname: 'orders_description',
			 	viewrecords: true,
			 	sortorder: "asc",
			 	caption:"Global Imaging Orders List",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#configuration_orders_rad_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#configuration_orders_rad1").jqGrid('GridUnload');
			jQuery("#configuration_orders_rad1").jqGrid({
				url:"ajaxdashboard/orders-list/Radiology/User",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Group','Category','Description','CPT','SNOMED'],
				colModel:[
					{name:'orderslist_id',index:'orderslist_id',width:1,hidden:true},
					{name:'user_id',index:'user_id',width:1,hidden:true},
					{name:'orders_category',index:'orders_category',width:1,hidden:true},
					{name:'orders_description',index:'orders_description',width:355},
					{name:"cpt",index:"cpt",width:100},
					{name:"snomed",index:"snomed",width:100}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#configuration_orders_rad1_pager'),
				sortname: 'orders_description',
			 	viewrecords: true,
			 	sortorder: "asc",
			 	caption:"Personal Imaging Orders List",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#configuration_orders_rad1_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#configuration_orders_cp").jqGrid('GridUnload');
			jQuery("#configuration_orders_cp").jqGrid({
				url:"ajaxdashboard/orders-list/Cardiopulmonary/Global",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Group','Category','Description','CPT','SNOMED'],
				colModel:[
					{name:'orderslist_id',index:'orderslist_id',width:1,hidden:true},
					{name:'user_id',index:'user_id',width:1,hidden:true},
					{name:'orders_category',index:'orders_category',width:1,hidden:true},
					{name:'orders_description',index:'orders_description',width:355},
					{name:"cpt",index:"cpt",width:100},
					{name:"snomed",index:"snomed",width:100}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#configuration_orders_cp_pager'),
				sortname: 'orders_description',
			 	viewrecords: true,
			 	sortorder: "asc",
			 	caption:"Global Cardiopulmonary Orders List",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#configuration_orders_cp_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#configuration_orders_cp1").jqGrid('GridUnload');
			jQuery("#configuration_orders_cp1").jqGrid({
				url:"ajaxdashboard/orders-list/Cardiopulmonary/User",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Group','Category','Description','CPT','SNOMED'],
				colModel:[
					{name:'orderslist_id',index:'orderslist_id',width:1,hidden:true},
					{name:'user_id',index:'user_id',width:1,hidden:true},
					{name:'orders_category',index:'orders_category',width:1,hidden:true},
					{name:'orders_description',index:'orders_description',width:355},
					{name:"cpt",index:"cpt",width:100},
					{name:"snomed",index:"snomed",width:100}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#configuration_orders_cp1_pager'),
				sortname: 'orders_description',
			 	viewrecords: true,
			 	sortorder: "asc",
			 	caption:"Personal Cardiopulmonary Orders List",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#configuration_orders_cp1_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#configuration_orders_ref").jqGrid('GridUnload');
			jQuery("#configuration_orders_ref").jqGrid({
				url:"ajaxdashboard/orders-list/Referral/Global",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Group','Category','Description','CPT','SNOMED'],
				colModel:[
					{name:'orderslist_id',index:'orderslist_id',width:1,hidden:true},
					{name:'user_id',index:'user_id',width:1,hidden:true},
					{name:'orders_category',index:'orders_category',width:1,hidden:true},
					{name:'orders_description',index:'orders_description',width:355},
					{name:"cpt",index:"cpt",width:100},
					{name:"snomed",index:"snomed",width:100}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#configuration_orders_ref_pager'),
				sortname: 'orders_description',
			 	viewrecords: true,
			 	sortorder: "asc",
			 	caption:"Global Referral Orders List",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#configuration_orders_ref_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#configuration_orders_ref1").jqGrid('GridUnload');
			jQuery("#configuration_orders_ref1").jqGrid({
				url:"ajaxdashboard/orders-list/Referral/User",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Group','Category','Description','CPT','SNOMED'],
				colModel:[
					{name:'orderslist_id',index:'orderslist_id',width:1,hidden:true},
					{name:'user_id',index:'user_id',width:1,hidden:true},
					{name:'orders_category',index:'orders_category',width:1,hidden:true},
					{name:'orders_description',index:'orders_description',width:355},
					{name:"cpt",index:"cpt",width:100},
					{name:"snomed",index:"snomed",width:100}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#configuration_orders_ref1_pager'),
				sortname: 'orders_description',
			 	viewrecords: true,
			 	sortorder: "asc",
			 	caption:"Personal Referral Orders List",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#configuration_orders_ref1_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#cpt_list_config").jqGrid({
				url:"ajaxdashboard/cpt-list",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Relate ID','CPT Code','Description','Charge','Favorite','Unit'],
				colModel:[
					{name:'cpt_id',index:'cpt_id',width:1,hidden:true},
					{name:'cpt_relate_id',index:'cpt_relate_id',width:1,hidden:true, editrules : {edithidden:true}},
					{name:'cpt',index:'cpt',width:100,editable:true,editrules:{required:true},formoptions:{elmsuffix:"(*)"}},
					{name:'cpt_description',index:'cpt_description',width:350,editable:true,editrules:{required:true},edittype:"textarea",editoptions:{rows:"4",cols:"50"},formoptions:{elmsuffix:"(*)"}},
					{name:'cpt_charge',index:'cpt_charge',width:100,editable:true,editrules:{required:true},formoptions:{elmsuffix:"(*)"}},
					{name:'favorite',index:'favorite',width:1,hidden:true},
					{name:'unit',index:'unit',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#cpt_list_config_pager'),
				sortname: 'cpt',
				viewrecords: true,
				sortorder: "asc",
				caption:"CPT Codes",
				emptyrecords:"No CPT codes",
				height: "100%",
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#cpt_list_config_pager',{edit:false,add:false,del:false});
			jQuery("#patient_forms_list").jqGrid({
				url:"ajaxdashboard/patient-forms-list",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Form','Gender','Group','Age','Scoring'],
				colModel:[
					{name:'template_id',index:'template_id',width:1,hidden:true},
					{name:'template_name',index:'template_name',width:300},
					{name:'sex',index:'sex',width:100},
					{name:'group',index:'group',width:100},
					{name:'age',index:'age',width:1,hidden:true},
					{name:'scoring',index:'scoring',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#patient_forms_list_pager'),
				sortname: 'template_id',
				viewrecords: true,
				sortorder: "asc",
				caption:"Patient Forms",
				emptyrecords:"No forms",
				height: "100%",
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#patient_forms_list_pager',{edit:false,add:false,del:false});
			jQuery("#hpi_forms_list").jqGrid({
				url:"ajaxdashboard/hpi-forms-list",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Form','Gender','Group','Age'],
				colModel:[
					{name:'template_id',index:'template_id',width:1,hidden:true},
					{name:'template_name',index:'template_name',width:300},
					{name:'sex',index:'sex',width:100},
					{name:'group',index:'group',width:100},
					{name:'age',index:'age',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#hpi_forms_list_pager'),
				sortname: 'template_id',
				viewrecords: true,
				sortorder: "asc",
				caption:"HPI Forms",
				emptyrecords:"No forms",
				height: "100%",
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#hpi_forms_list_pager',{edit:false,add:false,del:false});
			jQuery("#ros_forms_list").jqGrid({
				url:"ajaxdashboard/ros-forms-list",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Form','Gender','Group','Age','Default'],
				colModel:[
					{name:'template_id',index:'template_id',width:1,hidden:true},
					{name:'template_name',index:'template_name',width:250},
					{name:'sex',index:'sex',width:100},
					{name:'group',index:'group',width:100},
					{name:'age',index:'age',width:1,hidden:true},
					{name:'default',index:'default',width:50}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#ros_forms_list_pager'),
				sortname: 'template_id',
				viewrecords: true,
				sortorder: "asc",
				caption:"ROS Forms",
				emptyrecords:"No forms",
				height: "100%",
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#ros_forms_list_pager',{edit:false,add:false,del:false});
			jQuery("#pe_forms_list").jqGrid({
				url:"ajaxdashboard/pe-forms-list",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Form','Gender','Group','Age','Default'],
				colModel:[
					{name:'template_id',index:'template_id',width:1,hidden:true},
					{name:'template_name',index:'template_name',width:250},
					{name:'sex',index:'sex',width:100},
					{name:'group',index:'group',width:100},
					{name:'age',index:'age',width:1,hidden:true},
					{name:'default',index:'default',width:50}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#pe_forms_list_pager'),
				sortname: 'template_id',
				viewrecords: true,
				sortorder: "asc",
				caption:"PE Forms",
				emptyrecords:"No forms",
				height: "100%",
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#pe_forms_list_pager',{edit:false,add:false,del:false});
			jQuery("#textdump_list").jqGrid({
				url:"ajaxdashboard/textdump-list",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Target Field','Group'],
				colModel:[
					{name:'template_id',index:'template_id',width:1,hidden:true},
					{name:'template_name',index:'template_name',width:200,formatter:targetname,unformat:untargetname},
					{name:'group',index:'group',width:400}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#textdump_list_pager'),
				sortname: 'template_id',
				viewrecords: true,
				sortorder: "asc",
				caption:"Text Template Groups",
				emptyrecords:"No text templates",
				height: "100%",
				jsonReader: { repeatitems : false, id: "0" },
				subGrid: true,
				subGridRowExpanded: function(subgrid_id, row_id) {
					var group_id = row_id;
					var subgrid_table_id, pager_id;
					subgrid_table_id = subgrid_id+"_t";
					pager_id = "p_"+subgrid_table_id;
					$("#"+subgrid_id).html("<table id='"+subgrid_table_id+"' class='scroll'></table><div id='"+pager_id+"' class='scroll'></div>");
					jQuery("#"+subgrid_table_id).jqGrid({
						url: "ajaxdashboard/textdump-list1/"+row_id,
						datatype: "json",
						mtype: "POST",
						colNames:['ID','Target Field','Template Text','Group','Default'],
						colModel:[
							{name:'template_id',index:'template_id',width:1,hidden:true},
							{name:'template_name',index:'template_name',width:200,formatter:targetname,unformat:untargetname},
							{name:'array',index:'array',width:400},
							{name:'group',index:'group',width:1,hidden:true},
							{name:'default',index:'default',width:1,hidden:true}
						],
						rowNum:10,
						pager: pager_id,
						sortname: 'template_id', 
						sortorder: "asc", 
						height: '100%',
						jsonReader: { repeatitems : false, id: "0" }
					});
					jQuery("#"+subgrid_table_id).jqGrid('navGrid',"#"+pager_id,{
						search:false,
						edit:false,
						add:false,
						del:false
					}).jqGrid('navButtonAdd',"#"+pager_id,{
						caption:"Add", 
						buttonicon:"ui-icon-plus", 
						onClickButton: function(){ 
							jQuery("#textdump_list").GridToForm(group_id,"#configuration_textdump_form");
							$("#configuration_textdump_template_id").val('');
							$("#configuration_textdump_subgrid_table_id").val(subgrid_table_id);
							$('#configuration_textdump_dialog').dialog('open');
							$('#configuration_textdump_dialog').dialog('option', 'title', "Add Template Text");
						}, 
						position:"last"
					}).jqGrid('navButtonAdd',"#"+pager_id,{
						caption:"Edit", 
						buttonicon:"ui-icon-pencil", 
						onClickButton: function(){ 
							var id = jQuery(this).getGridParam('selrow');
							if(id){
				 				jQuery(this).GridToForm(id,"#configuration_textdump_form");
				 				$("#configuration_textdump_subgrid_table_id").val(subgrid_table_id);
								$('#configuration_textdump_dialog').dialog('open');
								$('#configuration_textdump_dialog').dialog('option', 'title', "Edit Template Text");
							} else {
								$.jGrowl('Choose item to edit!');
							}
						}, 
						position:"last"
					}).jqGrid('navButtonAdd',"#"+pager_id,{
						caption:"Delete", 
						buttonicon:"ui-icon-trash", 
						onClickButton: function(){ 
							var id = jQuery(this).getGridParam('selrow');
							if(id){
				 				if(confirm('Are you sure you want to delete this text?')){
									$.ajax({
										type: "POST",
										url: "ajaxsearch/deletetextdump/" + id,
										success: function(data){
											$.jGrowl(data);
											jQuery(this).trigger("reloadGrid");
										}
									});
								}
							} else {
								$.jGrowl('Choose item to delete!');
							}
						}, 
						position:"last"
					});
				}
			}).navGrid('#textdump_list_pager',{edit:false,add:false,del:false});
			$("#configuration_textdump_group_template_name").addOption(fields,false);
			$("#configuration_textdump_default").addOption({"":"No","normal":"Yes"},false);
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#nosh_configuration").click(function() {
		$("#configuration_dialog").dialog('open');
	});
	$("#configuration_order").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Save': function() {
				var a = $("#configuration_orders_description");
				var bValid = true;
				bValid = bValid && checkEmpty(a,"Orders Description");
				if (bValid) {
					var str = $("#configuration_order_form").serialize();
					$.ajax({
						type: "POST",
						url: "ajaxdashboard/add-orderslist",
						data: str,
						success: function(data){
							$.jGrowl(data);
							var b = $("#configuration_orderslist_table").val();
							jQuery("#" + b).trigger("reloadGrid");
							$("#configuration_order_form").clearForm();
							$("#configuration_order").dialog('close');
						}
					});
				}
			},
			Cancel: function() {
				$("#configuration_order_form").clearForm();
				$("#configuration_order").dialog('close');
			}
		},
		open: function(event, ui) {
			$.ajax({
				url: "ajaxdashboard/check-snomed-extension",
				type: "POST",
				success: function(data){
					if(data =='y'){
						$("#configuration_snomed_div").show();
						$("#configuration_snomed_tree").jstree({
							"plugins" : [ "json_data", "sort", "ui", "themeroller" ],
							"json_data" : {
								"ajax" : {
									"type": 'POST',
									"url": function (node) {
										var nodeId = "";
										var url = "";
										var type1 = $("#configuration_orders_categrory").val();
										if (type1 == "Laboratory") {
											var type = "lab";
										}
										if (type1 == "Radiology") {
											var type = "imaging";
										}
										if (type1 == "Cardiopulmonary") {
											var type = "cp";
										}
										if (type1 == "Referral") {
											var type = "ref";
										}
										if (node == -1) {
											url = "ajaxsearch/snomed-parent/" + type;
										} else {
											nodeId = node.attr('id');
											url = "ajaxsearch/snomed-child/" + nodeId;
										}
										return url;
									},
									"success": function (new_data) {
										return new_data;
									}
								}
							},
							"themeroller" : {
								"item" : 'ui-widget-content'
							}
						}).bind("select_node.jstree", function (event, data) {
							$("#configuration_snomed").val(data.rslt.obj.attr("id"));
						});
						$("#configuration_snomed").autocomplete({
								source: function (req, add){
								$.ajax({
									url: "ajaxsearch/snomed/procedure",
									dataType: "json",
									type: "POST",
									data: req,
									success: function(data){
										if(data.response =='true'){
											add(data.message);
										}
									}
								});
							},
							minLength: 3
						});
					} else {
						$("#configuration_snomed_div").hide();
					}
				}
			});
			$("#configuration_cpt").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/cpt",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#configuration_orders_description").focus();
		},
		close: function(event, ui) {
			$("#configuration_order_form").clearForm();
			$('#configuration_order').dialog('option', 'title', "");
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$(".configuration_orders_button").click(function(){
		var id = $(this).attr("id");
		var parts = id.split('_');
		var parent_id_table = parts[0] + '_' + parts[1] + '_' + parts[2];
		if (parts[2] == 'labs' || parts[2] == 'labs1') {
			var type = "Laboratory";
		}
		if (parts[2] == 'rad' || parts[2] == 'rad1') {
			var type = "Radiology";
		}
		if (parts[2] == 'cp' || parts[2] == 'cp1') {
			var type = "Cardiopulmonary";
		}
		if (parts[2] == 'labs' || parts[2] == 'rad' || parts[2] == 'cp') {
			var group = '0';
		} else {
			var group = noshdata.user_id;
		}
		if (parts[3] == 'add') {
			$("#configuration_order_form").clearForm();
			$("#configuration_orders_categrory").val(type);
			$("#configuration_orderslist_table").val(parent_id_table);
			$("#configuration_user_id").val(group);
			$('#configuration_order').dialog('open');
			$('#configuration_order').dialog('option', 'title', "Add Order");
		}
		if (parts[3] == 'edit') {
			var item = jQuery("#" + parent_id_table).getGridParam('selrow');
			if(item){
				jQuery("#" + parent_id_table).GridToForm(item,"#configuration_order_form");
				$("#configuration_orderslist_table").val(parent_id_table);
				$('#configuration_order').dialog('open');
				$('#configuration_order').dialog('option', 'title', "Edit Order");
			} else {
				$.jGrowl("Please select order to edit!");
			}
		}
		if (parts[3] == 'delete') {
			var item = jQuery("#" + parent_id_table).getGridParam('selrow');
			if(item){
				if(confirm('Are you sure you want to delete this order?')){
					$.ajax({
						type: "POST",
						url: "ajaxdashboard/delete-orders-list",
						data: "orderslist_id=" + item,
						success: function(data){
							$.jGrowl(data);
							jQuery("#" + parent_id_table).trigger("reloadGrid");
						}
					});
				}
			} else {
				$.jGrowl("Please select order to delete!");
			}
		}
	});
	$("#add_cpt").click(function(){
		$("#configuration_cpt_form").clearForm();
		$("#configuration_unit").val('1');
		$("#configuration_favorite").val('0');
		$('#configuration_cpt_dialog').dialog('open');
		$('#configuration_cpt_dialog').dialog('option', 'title', "Add CPT Code");
	});
	$("#edit_cpt").click(function(){
		var item = jQuery("#cpt_list_config").getGridParam('selrow');
		if(item){ 
			jQuery("#cpt_list_config").GridToForm(item,"#configuration_cpt_form");
			$('#configuration_cpt_dialog').dialog('open');
			$('#configuration_cpt_dialog').dialog('option', 'title', "Edit CPT Code");
		} else {
			$.jGrowl("Please select CPT code to edit!");
		}
	});
	$("#delete_cpt").click(function(){
		var item = jQuery("#cpt_list_config").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxdashboard/delete-cpt",
				data: "cpt_id=" + item,
				success: function(data){
					reload_grid("cpt_list_config");
				}
			});
		} else {
			$.jGrowl("Please select CPT code to delete!");
		}
	});
	$("#configuration_cpt_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 400, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#configuration_cpt_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#configuration_cpt_form").serialize();
					$.ajax({
						type: "POST",
						url: "ajaxdashboard/edit-cpt-list",
						data: str,
						dataType: 'json',
						success: function(data){
							$.jGrowl(data.message);
							reload_grid("cpt_list_config");
							var origin = $("#configuration_cpt_origin").val();
							var cpt = $("#configuration_cpt_code").val();
							if (origin != "") {
								var parts = origin.split('_');
								if (parts[0] == 'billing') {
									if (parts[1] == 'cpt') {
										$('#' + origin + "_charge").val(data.charge);
									}
									if (parts[1] == 'cpt1') {
										$('#' + origin + "_charge1").val(data.charge);
									}
								}
								$('#' + origin).val(cpt);
							}
							$("#configuration_cpt_form").clearForm();
							$("#configuration_cpt_dialog").dialog('close');
						}
					});
				}
			},
			Cancel: function() {
				var origin = $("#configuration_cpt_origin").val();
				var cpt = $("#configuration_cpt_code").val();
				if (origin != "") {
					$('#' + origin).val("");
				}
				$("#configuration_cpt_form").clearForm();
				$("#configuration_cpt_dialog").dialog('close');
			}
		},
		open: function (event, ui) {
			$("#configuration_cpt").focus();
		},
		close: function (event, ui) {
			$("#configuration_cpt_form").clearForm();
			$('#configuration_cpt_dialog').dialog('option', 'title', "");
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#configuration_favorite").addOption({"0":"No","1":"Yes"});
	$("#add_patient_forms").click(function(){
		$("#configuration_patient_forms_form").clearForm();
		$("#configuration_patient_forms_gender").val('b');
		$("#configuration_patient_forms_age_group").val('');
		$("#configuration_patient_forms_destination").val('');
		$('#configuration_patient_forms_dialog').dialog('open');
		$('#configuration_patient_forms_dialog').dialog('option', 'title', "Add Patient Form");
	});
	$("#edit_patient_forms").click(function(){
		var item = jQuery("#patient_forms_list").getGridParam('selrow');
		if(item){ 
			jQuery("#patient_forms_list").GridToForm(item,"#configuration_patient_forms_form");
			$.ajax({
				type: "POST",
				url: "ajaxdashboard/get-template",
				data: "template_id=" + item,
				success: function(data){
					$("#configuration_patient_forms_json").val(data);
					$('#configuration_patient_forms_dialog').dialog('open');
					$('#configuration_patient_forms_dialog').dialog('option', 'title', "Edit Patient Form");
				}
			});
		} else {
			$.jGrowl("Please select form to edit!");
		}
	});
	$("#delete_patient_forms").click(function(){
		var item = jQuery("#patient_forms_list").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxdashboard/delete-template",
				data: "template_id=" + item,
				success: function(data){
					reload_grid("patient_forms_list");
					$.jGrowl(data);
				}
			});
		} else {
			$.jGrowl("Please select form to delete!");
		}
	});
	$("#export_patient_forms").click(function(){
		var item = jQuery("#patient_forms_list").getGridParam('selrow');
		if(item){
			window.open("templatedownload/"+item);
		} else {
			$.jGrowl("Please select form to export!");
		}
	});
	$("#add_hpi_forms").click(function(){
		$("#configuration_hpi_forms_form").clearForm();
		$("#configuration_hpi_forms_gender").val('b');
		$("#configuration_hpi_forms_age_group").val('');
		$('#configuration_hpi_forms_dialog').dialog('open');
		$('#configuration_hpi_forms_dialog').dialog('option', 'title', "Add HPI Form");
	});
	$("#edit_hpi_forms").click(function(){
		var item = jQuery("#hpi_forms_list").getGridParam('selrow');
		if(item){ 
			jQuery("#hpi_forms_list").GridToForm(item,"#configuration_hpi_forms_form");
			$.ajax({
				type: "POST",
				url: "ajaxdashboard/get-template",
				data: "template_id=" + item,
				success: function(data){
					$("#configuration_hpi_forms_json").val(data);
					$('#configuration_hpi_forms_dialog').dialog('open');
					$('#configuration_hpi_forms_dialog').dialog('option', 'title', "Edit HPI Form");
				}
			});
		} else {
			$.jGrowl("Please select form to edit!");
		}
	});
	$("#delete_hpi_forms").click(function(){
		var item = jQuery("#hpi_forms_list").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxdashboard/delete-template",
				data: "template_id=" + item,
				success: function(data){
					reload_grid("hpi_forms_list");
					$.jGrowl(data);
				}
			});
		} else {
			$.jGrowl("Please select form to delete!");
		}
	});
	$("#export_hpi_forms").click(function(){
		var item = jQuery("#hpi_forms_list").getGridParam('selrow');
		if(item){
			window.open("templatedownload/"+item);
		} else {
			$.jGrowl("Please select form to export!");
		}
	});
	$("#add_ros_forms").click(function(){
		$("#configuration_ros_forms_form").clearForm();
		$("#configuration_ros_forms_gender").val('b');
		$("#configuration_ros_forms_age_group").val('');
		$('#configuration_ros_forms_dialog').dialog('open');
		$('#configuration_ros_forms_dialog').dialog('option', 'title', "Add ROS Form");
	});
	$("#edit_ros_forms").click(function(){
		var item = jQuery("#ros_forms_list").getGridParam('selrow');
		if(item){ 
			jQuery("#ros_forms_list").GridToForm(item,"#configuration_ros_forms_form");
			$.ajax({
				type: "POST",
				url: "ajaxdashboard/get-template",
				data: "template_id=" + item,
				success: function(data){
					$("#configuration_ros_forms_json").val(data);
					$('#configuration_ros_forms_dialog').dialog('open');
					$('#configuration_ros_forms_dialog').dialog('option', 'title', "Edit ROS Form");
				}
			});
		} else {
			$.jGrowl("Please select form to edit!");
		}
	});
	$("#delete_ros_forms").click(function(){
		var item = jQuery("#ros_forms_list").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxdashboard/delete-template",
				data: "template_id=" + item,
				success: function(data){
					reload_grid("ros_forms_list");
					$.jGrowl(data);
				}
			});
		} else {
			$.jGrowl("Please select form to delete!");
		}
	});
	$("#default_ros_forms").click(function(){
		var item = jQuery("#ros_forms_list").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxdashboard/default-template",
				data: "template_id=" + item,
				success: function(data){
					reload_grid("ros_forms_list");
					$.jGrowl(data);
					ros_template_renew();
				}
			});
		} else {
			$.jGrowl("Please select form to make default!");
		}
	});
	$("#export_ros_forms").click(function(){
		var item = jQuery("#ros_forms_list").getGridParam('selrow');
		if(item){
			window.open("templatedownload/"+item);
		} else {
			$.jGrowl("Please select form to export!");
		}
	});
	$("#add_pe_forms").click(function(){
		$("#configuration_pe_forms_form").clearForm();
		$("#configuration_pe_forms_gender").val('b');
		$("#configuration_pe_forms_age_group").val('');
		$('#configuration_pe_forms_dialog').dialog('open');
		$('#configuration_pe_forms_dialog').dialog('option', 'title', "Add PE Form");
	});
	$("#edit_pe_forms").click(function(){
		var item = jQuery("#pe_forms_list").getGridParam('selrow');
		if(item){ 
			jQuery("#pe_forms_list").GridToForm(item,"#configuration_pe_forms_form");
			$.ajax({
				type: "POST",
				url: "ajaxdashboard/get-template",
				data: "template_id=" + item,
				success: function(data){
					$("#configuration_pe_forms_json").val(data);
					$('#configuration_pe_forms_dialog').dialog('open');
					$('#configuration_pe_forms_dialog').dialog('option', 'title', "Edit PE Form");
				}
			});
		} else {
			$.jGrowl("Please select form to edit!");
		}
	});
	$("#delete_pe_forms").click(function(){
		var item = jQuery("#pe_forms_list").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxdashboard/delete-template",
				data: "template_id=" + item,
				success: function(data){
					reload_grid("pe_forms_list");
					$.jGrowl(data);
				}
			});
		} else {
			$.jGrowl("Please select form to delete!");
		}
	});
	$("#default_pe_forms").click(function(){
		var item = jQuery("#pe_forms_list").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxdashboard/default-template",
				data: "template_id=" + item,
				success: function(data){
					reload_grid("pe_forms_list");
					$.jGrowl(data);
					pe_template_renew();
				}
			});
		} else {
			$.jGrowl("Please select form to make default!");
		}
	});
	$("#export_pe_forms").click(function(){
		var item = jQuery("#pe_forms_list").getGridParam('selrow');
		if(item){
			window.open("templatedownload/"+item);
		} else {
			$.jGrowl("Please select form to export!");
		}
	});
	$(".configuration_gender").addOption({"b":"Both","m":"Male","f":"Female"});
	$(".configuration_age_group").addOption({"":"All","adult":"Adult","child":"Child"});
	$("#configuration_patient_forms_destination").addOption({"":"Select Encounter/Chart Destination.","HPI":"History of Present Illness","PMH":"Past Medical History","PSH":"Past Surgical History","FH":"Family History","SH":"Social History"});
	$(".configuration_fieldtype").addOption({"":"Select Field Type.","text":"Text","radio":"Radio Buttons - User can select only one option.","checkbox":"Checkbox - User can select multiple options.","select":"Drop down list"}).on("change", function(){
		var a = $(this).val();
		var id = $(this).attr("id");
		var id_parts = id.split("_");
		var id_main1 = id_parts[1] + "_" + id_parts[2];
		var id2 = id_parts[2].replace("s", "");
		var id_main2 = id_parts[1] + "_" + id2;
		if (a == 'radio' || a == 'checkbox' || a == 'select') {
			$("#" + id_main1 + "_template_div_options").html('<div class="pure-control-group"><label for="configuration_' + id_main1 + '_option_1">Option: <a href="#" id="configuration_' + id_main1 + '_add_option">[Add]</a></label><input type="text" id="configuration_' + id_main1 + '_option_1" style="width:290px" class="text ' + id_main1 + '_option"/></div>');
			$("#configuration_" + id_main1 + "_add_option").on("click",function() {
				var a = $("." + id_main1 + "_option:last").attr("id");
				var a1 = a.split("_");
				var count = parseInt(a1[4]) + 1;
				$("#" + id_main1 + "_template_div_options").append('<div class="pure-control-group"><label for="configuration_' + id_main1 + '_option_' + count + '">Option: <a href="#" id="configuration_' + id_main1 + '_option_' + count +'_remove"class="' + id_main1 + '_remove_option">[Remove]</a></label><input type="text" id="configuration_' + id_main1 + '_option_' + count + '" style="width:290px" class="text ' + id_main1 + '_option"/></div>');
				$('#configuration_' + id_main1 + '_option_' + count).focus();
				$("." + id_main1 + "_remove_option").on("click",function() {
					$(this).parents(".pure-control-group").remove();
				});
			});
		} else {
			$("#" + id_main1 + "_template_div_options").html('');
		}
	});
	$(".element_save").click(function(){
		var id = $(this).attr("id");
		var id_parts = id.split("_");
		var id_main1 = id_parts[0] + "_" + id_parts[1];
		var id2 = id_parts[1].replace("s", "");
		var id_main2 = id_parts[0] + "_" + id2;
		var json_flat = $("#configuration_" + id_main1 + "_json").val();
		var json_object = JSON.parse(json_flat);
		var json_array = [json_object];
		console.log(json_array[0]['html'].length);
		var div_id = $("#" + id_main1 + "_div_id").val();
		if (div_id != '') {
			for (var i = 0; i < json_array[0]['html'].length; i++) {
				var a = json_array[0]['html'][i].id;
				if (a == div_id) {
					json_array[0]['html'][i]['html'][0]['html'] = $("#configuration_" + id_main1 + "_label").val();
					var f = json_array[0]['html'][i]['html'].length-2;
					json_array[0]['html'][i]['html'].splice(2,f);
					if ($("#configuration_" + id_main1 + "_fieldtype").val() == "radio" || $("#configuration_" + id_main1 + "_fieldtype").val() == "checkbox") {
						var h = 2;
						var g = h-2;
						$("." + id_main1 + "_option").each(function(){
							json_array[0]['html'][i]['html'][h] = {};
							json_array[0]['html'][i]['html'][h]['type']= $("#configuration_" + id_main1 + "_fieldtype").val();
							json_array[0]['html'][i]['html'][h]['id']= $("#" + id_main1 + "_div_id").val() + "_" + $("#configuration_" + id_main1 + "_fieldtype").val() + "_" + g;
							json_array[0]['html'][i]['html'][h]['name'] = $("#" + id_main1 + "_div_id").val();
							json_array[0]['html'][i]['html'][h]['value']= $("#configuration_" + id_main1 + "_label").val() + ": " + $(this).val();
							json_array[0]['html'][i]['html'][h]['caption'] = $(this).val();
							if (id_parts[0] != "patient" && h==2) {
								json_array[0]['html'][i]['html'][h]['class'] = id_parts[0] + "_normal";
							}
							h++;
							g++;
						});
						json_array[0]['html'][i]['class'] = id_main2 + "_div " + id_main2 + "_buttonset";
					} else {
						json_array[0]['html'][i]['html'][2] = {};
						json_array[0]['html'][i]['html'][2]['type'] = $("#configuration_" + id_main1 + "_fieldtype").val();
						json_array[0]['html'][i]['html'][2]['id'] = $("#" + id_main1 + "_div_id").val() + "_" + $("#configuration_" + id_main1 + "_fieldtype").val();
						json_array[0]['html'][i]['html'][2]['name'] = $("#" + id_main1 + "_div_id").val();
						if ($("#configuration_" + id_main1 + "_fieldtype").val() == "select") {
							if ($("#configuration_" + id_main1 + "_option_1").val() != "") {
								json_array[0]['html'][i]['html'][2]['options'] = {};
								$("." + id_main1 + "_option").each(function(){
									var value = $(this).val();
									var key = $("#configuration_" + id_main1 + "_label").val() + ": " + $(this).val();
									json_array[0]['html'][i]['html'][2]['options'][key] = value;
								});
								json_array[0]['html'][i]['class'] = id_main2 + "_div";
							}
						} else {
							json_array[0]['html'][i]['class'] = id_main2 + "_div " + id_main2 + "_text";
						}
					}
				}
			}
		} else {
			var j = json_array[0]['html'].length;
			if (id_parts[0] == 'patient') {
				var l = j-3;
			} else {
				var l = j+1;
			}
			if ($("#configuration_" + id_main1 + "_fieldtype").val() == 'text') {
				var k = id_main2 + "_div " + id_main2 + "_text";
				json_array[0]['html'][j] = {"type":"div","class":id_main2 + "_div " + id_main2 + "_text","id":id_main2 + "_div"+l,"html":[{"type":"span","id":id_main2 + "_div"+l+"_label","html":$("#configuration_" + id_main1 + "_label").val()},{"type":"br"},{"type":$("#configuration_" + id_main1 + "_fieldtype").val(),"id":id_main2 + "_div"+l+"_"+$("#configuration_" + id_main1 + "_fieldtype").val(),"name":id_main2 + "_div"+l,"value":""}]};
			}
			if ($("#configuration_" + id_main1 + "_fieldtype").val() == 'radio' || $("#configuration_" + id_main1 + "_fieldtype").val() == 'checkbox') {
				var m = 2;
				var n = m-2;
				json_array[0]['html'][j] = {"type":"div","class":id_main2 + "_div " + id_main2 + "_buttonset","id":id_main2 + "_div"+l,"html":[{"type":"span","id":id_main2 + "_div"+l+"_label","html":$("#configuration_" + id_main1 + "_label").val()},{"type":"br"}]};
				$("." + id_main1 + "_option").each(function(){
					json_array[0]['html'][j]['html'][m] = {"type":$("#configuration_" + id_main1 + "_fieldtype").val(),"id":id_main2 + "_div"+l+"_"+$("#configuration_" + id_main1 + "_fieldtype").val()+"_"+n,"name":id_main2 + "_div"+l,"value":$("#configuration_" + id_main1 + "_label").val()+": "+$(this).val(),"caption":$(this).val()};
					m++;
					n++;
				});
			}
			if ($("#configuration_" + id_main1 + "_fieldtype").val() == 'select') {
				json_array[0]['html'][j] = {"type":"div","class":id_main2 + "_div","id":id_main2 + "_div"+l,"html":[{"type":"span","id":id_main2 + "_div"+l+"_label","html":$("#configuration_" + id_main1 + "_label").val()},{"type":"br"},{"type":$("#configuration_" + id_main1 + "_fieldtype").val(),"id":id_main2 + "_div"+l+"_"+ $("#configuration_" + id_main1 + "_fieldtype").val(),"name":id_main2 + "_div"+l,"options":{}}]};
				$("." + id_main1 + "_option").each(function(){
					var value = $(this).val();
					var key = $("#configuration_" + id_main1 + "_label").val() + ": " + $(this).val();
					json_array[0]['html'][j]['html'][2]['options'][key] = value;
				});
			}
		}
		var json_flat1 = JSON.stringify(json_array[0]);
		$("#configuration_" + id_main1 + "_json").val(json_flat1);
		preview_form(id_main1);
		$("#" + id_main1 + "_template_div").clearDiv();
		$("#" + id_main1 + "_template_div_options").html('');
		$("#" + id_main1 + "_template_surround_div").hide();
	});
	$(".element_cancel").click(function(){
		var id = $(this).attr("id");
		var id_parts = id.split("_");
		var id_main1 = id_parts[0] + "_" + id_parts[1];
		var id2 = id_parts[1].replace("s", "");
		var id_main2 = id_parts[0] + "_" + id2;
		$("#" + id_main1 + "_template_div").clearDiv();
		$("#" + id_main1 + "_template_div_options").html('');
		$("#" + id_main1 + "_template_surround_div").hide();
		$("." + id_main2 + "_div").removeClass("ui-state-error");
	});
	$(".element_delete").click(function(){
		var id = $(this).attr("id");
		var id_parts = id.split("_");
		var id_main1 = id_parts[0] + "_" + id_parts[1];
		var id2 = id_parts[1].replace("s", "");
		var id_main2 = id_parts[0] + "_" + id2;
		var json_flat = $("#configuration_" + id_main1 + "_json").val();
		var json_object = JSON.parse(json_flat);
		var json_array = [json_object];
		var div_id = $("#" + id_main1 + "_div_id").val();
		for (var i = 0; i < json_array[0]['html'].length; i++) {
			var a = json_array[0]['html'][i].id;
			if (a == div_id) {
				json_array[0]['html'].splice(i,1);
			}
		}
		var json_flat1 = JSON.stringify(json_array[0]);
		$("#configuration_" + id_main1 + "_json").val(json_flat1);
		preview_form(id_main1);
		$("#" + id_main1 + "_template_div").clearDiv();
		$("#" + id_main1 + "_template_div_options").html('');
		$("#" + id_main1 + "_template_surround_div").hide();
	});
	$("#configuration_patient_forms_scoring").tooltip({ content: "Fill this field if you wish to create a scoring algorithm for this form.  The score value for a radio button or checkbox is determined automatically based on the order of the list that you create.  The first selection always starts with a value of 0, the second selection is 1, and so on." });
	$("#configuration_patient_forms_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function() {
			$("#configuration_patient_forms_title").focus();
			$("#patient_forms_template_surround_div").hide();
			preview_form('patient_forms');
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#configuration_patient_forms_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var json_flat = $("#configuration_patient_forms_json").val();
					var json_object = JSON.parse(json_flat);
					json_object.html[2].value = $("#configuration_patient_forms_title").val();
					json_object.html[3].value = $("#configuration_patient_forms_destination").val();
					var json_flat1 = JSON.stringify(json_object);
					$("#configuration_patient_forms_json").val(json_flat1);
					var str = $("#configuration_patient_forms_form").serialize();
					$.ajax({
						type: "POST",
						url: "ajaxdashboard/save-patient-form/global",
						data: str,
						success: function(data){
							$.jGrowl(data);
							reload_grid("patient_forms_list");
							$("#configuration_patient_forms_form").clearForm();
							$("#configuration_patient_forms_dialog").dialog('close');
						}
					});
				}
			},
			Cancel: function() {
				$("#configuration_patient_forms_form").clearForm();
				$("#configuration_patient_forms_dialog").dialog('close');
			}
		},
		close: function (event, ui) {
			$("#configuration_patient_forms_form").clearForm();
			$('#configuration_patient_forms_dialog').dialog('option', 'title', "");
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#patient_forms_add_element").button({icons: {primary: "ui-icon-plus"}}).click(function() {
		if($("#patient_forms_template_surround_div").is(":hidden")) {
			$("#patient_forms_template_div").clearDiv();
			$("#patient_forms_template_div_options").html('');
			$("#configuration_patient_forms_fieldtype").val('');
			$("#patient_forms_template_surround_div").show();
			$("#configuration_patient_forms_label").focus();
		} else {
			$.jGrowl("Finish editing current form element!");
		}
	});
	$("#configuration_hpi_forms_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function() {
			$("#configuration_hpi_forms_title").focus();
			$("#hpi_forms_template_surround_div").hide();
			preview_form('hpi_forms');
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#configuration_hpi_forms_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var json_flat = $("#configuration_hpi_forms_json").val();
					var json_object = JSON.parse(json_flat);
					var json_flat1 = JSON.stringify(json_object);
					$("#configuration_hpi_forms_json").val(json_flat1);
					var str = $("#configuration_hpi_forms_form").serialize();
					$.ajax({
						type: "POST",
						url: "ajaxdashboard/save-hpi-form/global",
						data: str,
						success: function(data){
							$.jGrowl(data);
							reload_grid("hpi_forms_list");
							$("#configuration_hpi_forms_form").clearForm();
							$("#configuration_hpi_forms_dialog").dialog('close');
						}
					});
				}
			},
			Cancel: function() {
				$("#configuration_hpi_forms_form").clearForm();
				$("#configuration_hpi_forms_dialog").dialog('close');
			}
		},
		close: function (event, ui) {
			$("#configuration_hpi_forms_form").clearForm();
			$('#configuration_hpi_forms_dialog').dialog('option', 'title', "");
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#hpi_forms_add_element").button({icons: {primary: "ui-icon-plus"}}).click(function() {
		if($("#hpi_forms_template_surround_div").is(":hidden")) {
			$("#hpi_forms_template_div").clearDiv();
			$("#hpi_forms_template_div_options").html('');
			$("#configuration_hpi_forms_fieldtype").val('');
			$("#hpi_forms_template_surround_div").show();
			$("#configuration_hpi_forms_label").focus();
		} else {
			$.jGrowl("Finish editing current form element!");
		}
	});
	$("#configuration_ros_forms_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function() {
			$("#configuration_ros_forms_title").focus();
			$("#ros_forms_template_surround_div").hide();
			preview_form('ros_forms');
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#configuration_ros_forms_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var json_flat = $("#configuration_ros_forms_json").val();
					var json_object = JSON.parse(json_flat);
					var json_flat1 = JSON.stringify(json_object);
					$("#configuration_ros_forms_json").val(json_flat1);
					var str = $("#configuration_ros_forms_form").serialize();
					$.ajax({
						type: "POST",
						url: "ajaxdashboard/save-ros-form/global",
						data: str,
						success: function(data){
							$.jGrowl(data);
							reload_grid("ros_forms_list");
							$("#configuration_ros_forms_form").clearForm();
							$("#configuration_ros_forms_dialog").dialog('close');
							ros_template_renew();
						}
					});
				}
			},
			Cancel: function() {
				$("#configuration_ros_forms_form").clearForm();
				$("#configuration_ros_forms_dialog").dialog('close');
			}
		},
		close: function (event, ui) {
			$("#configuration_ros_forms_form").clearForm();
			$('#configuration_ros_forms_dialog').dialog('option', 'title', "");
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#configuration_ros_forms_group").addOption({"ros_gen":"General","ros_eye":"Eye","ros_ent":"Ear, Nose, and Throat","ros_resp":"Respiratory","ros_cv":"Cardiovascular","ros_gi":"Gastrointestinal","ros_gu":"Genitourinary","ros_mus":"Musculoskeletal","ros_neuro":"Neurological","ros_psych":"Psychological","ros_heme":"Hematological/Lymphatic","ros_endocrine":"Endocrine","ros_skin":"Skin","ros_wcc":"Well Child Check","ros_psych1":"Depression","ros_psych2":"Anxiety","ros_psych3":"Bipolar","ros_psych4":"Mood Disorders","ros_psych5":"ADHD","ros_psych6":"PTSD","ros_psych7":"Substance Related Disorder","ros_psych8":"Obsessive Compulsive Disorder","ros_psych9":"Social Anxiety Disorder","ros_psych10":"Autistic Disorder","ros_psych11":"Asperger's Disorder"});
	$("#ros_forms_add_element").button({icons: {primary: "ui-icon-plus"}}).click(function() {
		if($("#ros_forms_template_surround_div").is(":hidden")) {
			$("#ros_forms_template_div").clearDiv();
			$("#ros_forms_template_div_options").html('');
			$("#configuration_ros_forms_fieldtype").val('');
			$("#ros_forms_template_surround_div").show();
			$("#configuration_ros_forms_label").focus();
		} else {
			$.jGrowl("Finish editing current form element!");
		}
	});
	$("#configuration_pe_forms_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function() {
			$("#configuration_pe_forms_title").focus();
			$("#pe_forms_template_surround_div").hide();
			preview_form('pe_forms');
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#configuration_pe_forms_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var json_flat = $("#configuration_pe_forms_json").val();
					var json_object = JSON.parse(json_flat);
					var json_flat1 = JSON.stringify(json_object);
					$("#configuration_pe_forms_json").val(json_flat1);
					var str = $("#configuration_pe_forms_form").serialize();
					$.ajax({
						type: "POST",
						url: "ajaxdashboard/save-pe-form/global",
						data: str,
						success: function(data){
							$.jGrowl(data);
							reload_grid("pe_forms_list");
							$("#configuration_pe_forms_form").clearForm();
							$("#configuration_pe_forms_dialog").dialog('close');
							pe_template_renew();
						}
					});
				}
			},
			Cancel: function() {
				$("#configuration_pe_forms_form").clearForm();
				$("#configuration_pe_forms_dialog").dialog('close');
			}
		},
		close: function (event, ui) {
			$("#configuration_pe_forms_form").clearForm();
			$('#configuration_pe_forms_dialog').dialog('option', 'title', "");
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#configuration_pe_forms_group").addOption({"pe_gen1":"General","pe_eye1":"Eye: Conjunctiva and Lids","pe_eye2":"Eye: Pupil and Iris","pe_eye3":"Eye: Fundoscopic","pe_ent1":"Ears, Nose, Throat: External Ear and Nose","pe_ent2":"Ears, Nose, Throat: Canals and Tympanic Membrane","pe_ent3":"Ears, Nose, Throat: Hearing Assessment","pe_ent4":"Ears, Nose, Throat: Sinuses, Mucosa, Septum, and Turbinates","pe_ent5":"Ears, Nose, Throat: Lips, Teeth, and Gums","pe_ent6":"Ears, Nose, Throat: Oropharynx","pe_neck1":"Neck: General","pe_neck2":"Neck: Thyroid","pe_resp1":"Respiratory: Effort","pe_resp2":"Respiratory: Percussion","pe_resp3":"Respiratory: Palpation","pe_resp4":"Respiratory: Auscultation","pe_cv1":"Cardiovascular: Palpation","pe_cv2":"Cardiovascular: Auscultation","pe_cv3":"Cardiovascular: Carotid Arteries","pe_cv4":"Cardiovascular: Abdominal Aorta","pe_cv5":"Cardiovascular: Femoral Arteries","pe_cv6":"Cardiovascular: Extremities","pe_ch1":"Chest: Inspection","pe_ch2":"Chest: Palpation","pe_gi1":"Gastrointestinal: Masses and Tenderness","pe_gi2":"Gastrointestinal: Liver and Spleen","pe_gi3":"Gastrointestinal: Hernia","pe_gi4":"Gastrointestinal: Anus, Perineum, and Rectum","pe_gu1":"Genitourinary (female): Genitalia","pe_gu2":"Genitourinary (female): Urethra","pe_gu3":"Genitourinary (female): Bladder","pe_gu4":"Genitourinary (female): Cervix","pe_gu5":"Genitourinary (female): Uterus","pe_gu6":"Genitourinary (female): Adnexa","pe_gu7":"Genitourinary (male): Scrotum","pe_gu8":"Genitourinary (male): Penis","pe_gu9":"Genitourinary (male): Prostate","pe_lymph1":"Lymphatic: Neck","pe_lymph2":"Lymphatic: Axillae","pe_lymph3":"Lymphatic: Groin","pe_ms1":"Musculoskeletal: Gait and Station","pe_ms2":"Musculoskeletal: Digits and Nails","pe_ms3":"Musculoskeletal: Bones, Joints, and Muscles - Shoulder","pe_ms4":"Musculoskeletal: Bones, Joints, and Muscles - Elbow","pe_ms5":"Musculoskeletal: Bones, Joints, and Muscles - Wrist","pe_ms6":"Musculoskeletal: Bones, Joints, and Muscles - Hand","pe_ms7":"Musculoskeletal: Bones, Joints, and Muscles - Hip","pe_ms8":"Musculoskeletal: Bones, Joints, and Muscles - Knee","pe_ms9":"Musculoskeletal: Bones, Joints, and Muscles - Ankle","pe_ms10":"Musculoskeletal: Bones, Joints, and Muscles - Foot","pe_ms11":"Musculoskeletal: Bones, Joints, and Muscles - Cervical Spine","pe_ms12":"Musculoskeletal: Bones, Joints, and Muscles - Thoracic and Lumbar Spine","pe_neuro1":"Neurological: Cranial Nerves","pe_neuro2":"Neurological: Deep Tendon Reflexes","pe_neuro3":"Neurological: Sensation and Motor","pe_psych1":"Psychological: Judgement and Insight","pe_psych2":"Psychological: Orientation","pe_psych3":"Psychological: Memory","pe_psych4":"Psychological: Mood and Affect","pe_skin1":"Skin: Inspection","pe_skin2":"Skin: Palpation","pe_constitutional1":"Constitutional","pe_mental1":"Mental Status Examination"});
	$("#pe_forms_add_element").button({icons: {primary: "ui-icon-plus"}}).click(function() {
		if($("#pe_forms_template_surround_div").is(":hidden")) {
			$("#pe_forms_template_div").clearDiv();
			$("#pe_forms_template_div_options").html('');
			$("#configuration_pe_forms_fieldtype").val('');
			$("#pe_forms_template_surround_div").show();
			$("#configuration_pe_forms_label").focus();
		} else {
			$.jGrowl("Finish editing current form element!");
		}
	});
	function preview_form(type) {
		var type1 = type.replace("forms", "form");
		if ($("#configuration_" + type + "_json").val() == '') {
			if (type == 'patient_forms') {
				var default_json = '{"html":[{"type":"hidden","class":"' + type1 + '_hidden","value":"","id":"form_template_id","name":"template_id"},{"type":"hidden","class":"' + type1 + '_hidden","value":"","id":"form_forms_content","name":"forms_content"},{"type":"hidden","class":"' + type1 + '_hidden","value":"","id":"form_forms_title","name":"forms_title"},{"type":"hidden","class":"' + type1 + '_hidden","value":"","id":"form_forms_destination","name":"forms_destination"},{"type":"div","class":"' + type1 + '_div ' + type1 + '_buttonset","id":"' + type1 + '_div1","html":[{"type":"span","id":"' + type1 + '_div1_label","html":"Radio Button Question"},{"type":"br"},{"type":"radio","id":"' + type1 + '_div1_radio_0","name":"' + type1 + '_div1","value":"Radio Button Question: No","caption":"No"},{"type":"radio","id":"' + type1 + '_div1_radio_1","name":"' + type1 + '_div1","value":"Radio Button Question: Yes","caption":"Yes"}]},{"type":"div","class":"' + type1 + '_div ' + type1 + '_text","id":"' + type1 + '_div2","html":[{"type":"span","id":"' + type1 + '_div2_label","html":"Text Question"},{"type":"br"},{"type":"text","id":"' + type1 + '_div2_text","name":"' + type1 + '_div2","value":""}]},{"type":"div","class":"' + type1 + '_div","id":"' + type1 + '_div3","html":[{"type":"span","id":"' + type1 + '_div3_label","html":"Select List Question"},{"type":"br"},{"type":"select","id":"' + type1 + '_div3_select","name":"' + type1 + '_div3","options":{"Select List Question: No":"No","Select List Question: Yes":"Yes"}}]}]}';
			} else {
				var default_json = '{"html":[{"type":"div","class":"' + type1 + '_div ' + type1 + '_buttonset","id":"' + type1 + '_div1","html":[{"type":"span","id":"' + type1 + '_div1_label","html":"Radio Button Question"},{"type":"br"},{"type":"radio","id":"' + type1 + '_div1_radio_0","name":"' + type1 + '_div1","value":"Radio Button Question: No","caption":"No"},{"type":"radio","id":"' + type1 + '_div1_radio_1","name":"' + type1 + '_div1","value":"Radio Button Question: Yes","caption":"Yes"}]},{"type":"div","class":"' + type1 + '_div ' + type1 + '_text","id":"' + type1 + '_div2","html":[{"type":"span","id":"' + type1 + '_div2_label","html":"Text Question"},{"type":"br"},{"type":"text","id":"' + type1 + '_div2_text","name":"' + type1 + '_div2","value":""}]},{"type":"div","class":"' + type1 + '_div","id":"' + type1 + '_div3","html":[{"type":"span","id":"' + type1 + '_div3_label","html":"Select List Question"},{"type":"br"},{"type":"select","id":"' + type1 + '_div3_select","name":"' + type1 + '_div3","options":{"Select List Question: No":"No","Select List Question: Yes":"Yes"}}]}]}';
			}
			$("#configuration_" + type + "_json").val(default_json);
		} else {
			var default_json = $("#configuration_" + type + "_json").val();
		}
		var default_json_object = JSON.parse(default_json);
		$("#" + type + "_preview").html('');
		$("#" + type + "_preview").dform(default_json_object);
		$("." + type1 + "_buttonset").buttonset();
		$('.' + type1 + '_text input[type="text"]').css("width","280px");
		$('.' + type1 + '_div select').addClass("text ui-widget-content ui-corner-all");
		if (type == 'patient_forms') {
			if (default_json_object.html[2].value != "") {
				$("#configuration_" + type + "_title").val(default_json_object.html[2].value);
			}
			if (default_json_object.html[3].value != "") {
				$("#configuration_" + type + "_destination").val(default_json_object.html[3].value);
			}
		}
		$("." + type1 + "_div").css("padding","5px").on("click", function(){
			if($("#" + type + "_template_surround_div").is(":hidden")) {
				$(this).addClass("ui-state-error");
				$(this).siblings().removeClass("ui-state-error");
				var div_id = $(this).attr('id');
				$("#" + type + "_div_id").val(div_id);
				var json_flat = $("#configuration_" + type + "_json").val();
				var json_object = JSON.parse(json_flat);
				for (var i = 0; i < Object.size(json_object.html); i++) {
					var a = json_object.html[i].id;
					if (a == div_id) {
						$("#configuration_" + type + "_label").val(json_object.html[i].html[0].html);
						$("#configuration_" + type + "_fieldtype").val(json_object.html[i].html[2].type);
						if (json_object.html[i].html[2].type != "text") {
							$("#" + type + "_template_div_options").html('<div class="pure-control-group"><label for="configuration_' + type + '_option_1">Option: <a href="#" id="configuration_' + type + '_add_option">[Add]</a></label><input type="text" id="configuration_' + type + '_option_1" style="width:290px" class="text ' + type + '_option"/></div>');
							$("#configuration_" + type + "_add_option").on("click", function() {
								var a = $("." + type + "_option:last").attr("id");
								var a1 = a.split("_");
								var count = parseInt(a1[4]) + 1;
								$("#" + type + "_template_div_options").append('<div class="pure-control-group"><label for="configuration_' + type + '_option_' + count + '">Option: <a href="#" id="configuration_' + type + '_option_' + count +'_remove" class="' + type + '_remove_option">[Remove]</a></label><input type="text" id="configuration_' + type + '_option_' + count + '" style="width:290px" class="text ' + type + '_option"/></div>');
								$("#configuration_" + type + "_option_" + count).focus();
								$("." + type + "_remove_option").on("click",function() {
									$(this).parents(".pure-control-group").remove();
								});
							});
							if (json_object.html[i].html[2].type == "select") {
								var j = 1;
								$.each(json_object.html[i].html[2].options, function(k, v) {
									if (j > 1) {
										$("#" + type + "_template_div_options").append('<div class="pure-control-group"><label for="configuration_' + type + '_option_' + j + '">Option: <a href="#" id="configuration_' + type + '_option_' + j +'_remove" class="' + type + '_remove_option">[Remove]</a></label><input type="text" id="configuration_' + type + '_option_' + j + '" style="width:290px" class="text ' + type + '_option"/></div>');
										$("." + type + "_remove_option").on("click",function() {
											$(this).parents(".pure-control-group").remove();
										});
									}
									$("#configuration_" + type + "_option_" + j).val(v);
									j++;
								});
							} else {
								var l = 1;
								for (var k = 2; k < Object.size(json_object.html[i].html); k++) {
									if (l > 1) {
										$("#" + type + "_template_div_options").append('<div class="pure-control-group"><label for="configuration_' + type + '_option_' + l + '">Option: <a href="#" id="configuration_' + type + '_option_' + l +'_remove" class="' + type + '_remove_option">[Remove]</a></label><input type="text" id="configuration_' + type + '_option_' + l + '" style="width:290px" class="text ' + type + '_option"/></div>');
										$("." + type + "_remove_option").on("click",function() {
											$(this).parents(".pure-control-group").remove();
										});
									}
										$("#configuration_" + type + "_option_" + l).val(json_object.html[i].html[k].caption);
									l++;
								}
							}
						} else {
							$("#" + type + "_template_div_options").html('');
						}
					}
				}
				$("#" + type + "_template_surround_div").show();
			} else {
				$.jGrowl("Finish editing current form element!");
			}
		});
	}
	Object.size = function(obj) {
		var size = 0, key;
		for (key in obj) {
			if (obj.hasOwnProperty(key)) size++;
		}
		return size;
	};
	var myTemplateUpload = $("#import_template").upload({
		action: 'templateupload',
		onComplete: function(data){
			$.jGrowl(data);
			reload_grid("hpi_forms_list");
			reload_grid("ros_forms_list");
			reload_grid("pe_forms_list");
		}
	});
	$("#configuration_textdump_group_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 300, 
		width: 400, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#configuration_textdump_group_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#configuration_textdump_group_form").serialize();
					$.ajax({
						type: "POST",
						url: "ajaxdashboard/save-textdumpgroup",
						data: str,
						success: function(data){
							$.jGrowl(data);
							reload_grid("textdump_list");
							$("#configuration_textdump_group_form").clearForm();
							$("#configuration_textdump_group_dialog").dialog('close');
						}
					});
				}
			},
			Cancel: function() {
				$("#configuration_textdump_group_form").clearForm();
				$("#configuration_textdump_group_dialog").dialog('close');
			}
		},
		close: function (event, ui) {
			$("#configuration_textdump_group_form").clearForm();
			$('#configuration_textdump_group_dialog').dialog('option', 'title', "");
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#configuration_textdump_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 300, 
		width: 400, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#configuration_textdump_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#configuration_textdump_form").serialize();
					$.ajax({
						type: "POST",
						url: "ajaxdashboard/save-textdump",
						data: str,
						success: function(data){
							$.jGrowl(data);
							var subgrid_table_id = $("#configuration_textdump_subgrid_table_id").val();
							reload_grid(subgrid_table_id);
							$("#configuration_textdump_form").clearForm();
							$("#configuration_textdump_dialog").dialog('close');
						}
					});
				}
			},
			Cancel: function() {
				$("#configuration_textdump_form").clearForm();
				$("#configuration_textdump_dialog").dialog('close');
			}
		},
		close: function (event, ui) {
			$("#configuration_textdump_form").clearForm();
			$('#configuration_textdump_dialog').dialog('option', 'title', "");
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#add_textdump_group").click(function(){
		$("#configuration_textdump_group_form").clearForm();
		$('#configuration_textdump_group_dialog').dialog('open');
		$('#configuration_textdump_group_dialog').dialog('option', 'title', "Add Template Group");
	});
	$("#edit_textdump_group").click(function(){
		var item = jQuery("#textdump_list").getGridParam('selrow');
		if(item){ 
			jQuery("#textdump_list").GridToForm(item,"#configuration_textdump_group_form");
			$('#configuration_textdump_group_dialog').dialog('open');
			$('#configuration_textdump_group_dialog').dialog('option', 'title', "Edit Template Group");
		} else {
			$.jGrowl("Please select group to edit!");
		}
	});
	$("#delete_textdump_group").click(function(){
		var item = jQuery("#textdump_list").getGridParam('selrow');
		if(item){
			if(confirm('Are you sure you want to delete this text?')){
				$.ajax({
					type: "POST",
					url: "ajaxsearch/deletetextdump/" + item,
					success: function(data){
						$.jGrowl(data);
						jQuery("#textdump_list").trigger("reloadGrid");
					}
				});
			}
		} else {
			$.jGrowl("Please select group to delete!");
		}
	});
	$("#export_textdump").click(function(){
		var item = jQuery("#textdump_list").getGridParam('selrow');
		if(item){
			window.open("texttemplatedownload/"+item);
		} else {
			$.jGrowl("Please select group to export!");
		}
	});
});
var timeoutHnd;
function doSearch(ev){ 
	if(timeoutHnd) 
		clearTimeout(timeoutHnd);
		timeoutHnd = setTimeout(gridReload,500);
}
function gridReload(){ 
	var mask = jQuery("#search_all_cpt").val();
	if (mask != '') {
		jQuery("#cpt_list_config").setGridParam({url:"ajaxdashboard/cpt-list/"+mask,page:1}).trigger("reloadGrid");
	} else {
		jQuery("#cpt_list_config").trigger("reloadGrid");
	}
}
$(document).ready(function() {
	//var windowHeight = $(window).height() - 115;
	//$('#menucontainer').css('max-height', windowHeight);
	$.ajax({
		type: "POST",
		url: "ajaxchart/demographics-load",
		dataType: "json",
		success: function(data){
			$('#menu_ptname').html(data.ptname);
			$('#menu_nickname').html(data.nickname);
			$('#menu_dob').html(data.dob);
			$('#menu_age').html(data.age);
			$('#menu_gender1').html(data.gender);
			if (data.new == 'Y') {
				$("#demographics_list_dialog").dialog('open');
			}
		}
	});
	$("#menu_accordion").accordion({
		//heightStyle: "fill",
		activate: function (event, ui) {
			var id = ui.newPanel[0].id;
			if (id != "menu_accordion_chart") {
				$("#" + id + "_load").show();
				var id1 = id.replace("menu_accordion_", "");
				$.ajax({
					type: "POST",
					url: "ajaxchart/" + id1,
					success: function(data){
						$("#" + id + "_content").html(data);
						$("#" + id + "_load").hide();
					}
				});
			}
		},
		active: false,
		collpasible: true
	});
	$("#prevention_list_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		close: function(event, ui) {
			$('#prevention_items').html('');
			$('#prevention_load').show();
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#prevention_list").click(function() {
		$.ajax({
			type: "POST",
			url: "ajaxchart/prevention",
			success: function(data){
				$('#prevention_items').html(data);
				$('#prevention_load').hide();
			}
		});	
		$("#prevention_list_dialog").dialog('open');
	});
});
$(document).ready(function() {
	$("#issues_list_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		open: function(event,ui) {
			jQuery("#issues").jqGrid('GridUnload');
			jQuery("#issues").jqGrid({
				url:"ajaxcommon/issues",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Active','Issue'],
				colModel:[
					{name:'issue_id',index:'issue_id',width:1,hidden:true},
					{name:'issue_date_active',index:'issue_date_active',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'issue',index:'issue',width:635}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#issues_pager'),
				sortname: 'issue_date_active',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Issues",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#issues_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#issues_inactive").jqGrid('GridUnload');
			jQuery("#issues_inactive").jqGrid({
				url:"ajaxcommon/issues-inactive",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Active','Issue'],
				colModel:[
					{name:'issue_id',index:'issue_id',width:1,hidden:true},
					{name:'issue_date_active',index:'issue_date_active',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'issue',index:'issue',width:635}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#issues_inactive_pager'),
				sortname: 'issue_date_active',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption: "Inactive Issues",
			 	hiddengrid: true,
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#issues_inactive_pager',{search:false,edit:false,add:false,del:false});
		},
		close: function(event, ui) {
			$('#edit_issue_form').clearForm();
			$('#issues_pmh_header').hide();
			$('#issues_psh_header').hide();
			menu_update('issues');
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$(".issues_list").click(function() {
		$("#issues_list_dialog").dialog('open');
		$('#issues_pmh_header').hide();
		$('#issues_psh_header').hide();
		$('#issues_assessment_header').hide();
	});
	$("#dashboard_issues").click(function() {
		$("#issues_list_dialog").dialog('open');
		$('#issues_pmh_header').hide();
		$('#issues_psh_header').hide();
		$('#issues_assessment_header').hide();
	});
	$("#issue_date_active").mask("99/99/9999");
	$("#issue_date_active").datepicker();
	$("#add_issue").click(function(){
		$('#edit_issue_form').clearForm();
		var currentDate = getCurrentDate();
		$('#issue_date_active').val(currentDate);
		$('#edit_issue_dialog').dialog('option', 'title', "Add Issue");
		$('#edit_issue_dialog').dialog('open');
		$("#issue").focus();
	});
	$("#edit_issue").click(function(){
		var item = jQuery("#issues").getGridParam('selrow');
		if(item){
			jQuery("#issues").GridToForm(item,"#edit_issue_form");
			var date = $('#issue_date_active').val();
			var edit_date = editDate(date);
			$('#issue_date_active').val(edit_date);
			$('#edit_issue_dialog').dialog('option', 'title', "Edit Issue");
			$('#edit_issue_dialog').dialog('open');
		} else {
			$.jGrowl("Please select issue to edit!")
		}
	});
	$("#inactivate_issue").click(function(){
		var item = jQuery("#issues").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxchart/inactivate-issue",
				data: "issue_id=" + item,
				success: function(data){
					$.jGrowl(data);
					reload_grid("issues");
					reload_grid("issues_inactive");
				}
			});
		} else {
			$.jGrowl("Please select issue to inactivate!")
		}
	});
	$("#delete_issue").click(function(){
		var item = jQuery("#issues").getGridParam('selrow');
		if(item){
			if(confirm('Are you sure you want to delete this issue?')){
				$.ajax({
					type: "POST",
					url: "ajaxchart/delete-issue",
					data: "issue_id=" + item,
					success: function(data){
						$.jGrowl(data);
						reload_grid("issues");
					}
				});
			}
		} else {
			$.jGrowl("Please select issue to delete!")
		}
	});
	$("#reactivate_issue").click(function(){
		var item = jQuery("#issues_inactive").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxchart/reactivate-issue",
				data: "issue_id=" + item,
				success: function(data){
					$.jGrowl(data);
					reload_grid("issues_inactive");
					reload_grid("issues");
				}
			});
		} else {
			$.jGrowl("Please select issue to inactivate!")
		}
	});
	$("#edit_issue_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 300, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#issue").autocomplete({
				source: function (req, add){
					if (req.term in issue_cache){
						add(issue_cache[req.term]);
						return;
					}
					$.ajax({
						url: "ajaxsearch/icd",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								issue_cache[req.term] = data.message;
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#edit_issue_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_issue_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/edit-issue",
							data: str,
							success: function(data){
								$.jGrowl(data);
								reload_grid("issues");
								reload_grid("nosh_issues");
								$('#edit_issue_form').clearForm();
								$('#edit_issue_dialog').dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#edit_issue_form').clearForm();
				$('#edit_issue_dialog').dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#copy_oh_pmh_all_issues").button({icons: {primary: "ui-icon-arrowthickstop-1-s"}}).click(function(){
		$.ajax({
			type: "POST",
			url: "ajaxencounter/copy-issues",
			success: function(data){
				if (data == 'No') {
					$.jGrowl('No active issues!');
					$('#issues_header').html('');
					$("#issues_list_dialog").dialog('close');
				} else {
					var old = $("#oh_pmh").val();
					if(old){
						var pos = old.lastIndexOf('\n');
						if (pos == -1) {
							var old1 = old + '\n';
						} else {
							var a = old.slice(pos);
							if (a == '') {
								var old1 = old;
							} else {
								var old1 = old + '\n';
							}
						}
					} else {
						var old1 = '';
					}
					var issues1 = data.replace(/,/g,"\n");
					var len = issues1.length;
					var len1 = len - 1;
					var issues = issues1.slice(0, len1);
					$("#oh_pmh").val(old1+issues);
					$.jGrowl('All active issues copied!');
					$('#issues_pmh_header').hide();
					$("#issues_list_dialog").dialog('close');
				}
			}
		});
	});
	$("#copy_oh_pmh_one_issue").button({icons: {primary: "ui-icon-arrowthickstop-1-s"}}).click(function(){
		var item = jQuery("#issues").getGridParam('selrow');
		if(item){
			var issue = jQuery("#issues").getCell(item,'issue');
			var old = $("#oh_pmh").val();
			if(old){
				var pos = old.lastIndexOf('\n');
				if (pos == -1) {
					var old1 = old + '\n';
				} else {
					var a = old.slice(pos);
					if (a == '') {
						var old1 = old;
					} else {
						var old1 = old + '\n';
					}
				}
			} else {
				var old1 = '';
			}
			$("#oh_pmh").val(old1+issue);
			$.jGrowl('Issue copied!');
		} else {
			$.jGrowl("Please select issue to copy!");
		}
	});
	$("#copy_oh_psh_all_issues").button({icons: {primary: "ui-icon-arrowthickstop-1-s"}}).click(function(){
		$.ajax({
			type: "POST",
			url: "ajaxencounter/copy-issues",
			success: function(data){
				if (data == 'No') {
					$.jGrowl('No active issues!');
					$('#issues_header').html('');
					$("#issues_list_dialog").dialog('close');
				} else {
					var old = $("#oh_psh").val();
					if(old){
						var pos = old.lastIndexOf('\n');
						if (pos == -1) {
							var old1 = old + '\n';
						} else {
							var a = old.slice(pos);
							if (a == '') {
								var old1 = old;
							} else {
								var old1 = old + '\n';
							}
						}
					} else {
						var old1 = '';
					}
					var issues1 = data.replace(/,/g,"\n");
					var len = issues1.length;
					var len1 = len - 1;
					var issues = issues1.slice(0, len1);
					$("#oh_psh").val(old1+issues);
					$.jGrowl('All active issues copied!');
					$('#issues_psh_header').hide('fast');
					$("#issues_list_dialog").dialog('close');
				}
			}
		});
	});
	$("#copy_oh_psh_one_issue").button({icons: {primary: "ui-icon-arrowthickstop-1-s"}}).click(function(){
		var item = jQuery("#issues").getGridParam('selrow');
		if(item){
			var issue = jQuery("#issues").getCell(item,'issue');
			var old = $("#oh_psh").val();
			if(old){
				var pos = old.lastIndexOf('\n');
				if (pos == -1) {
					var old1 = old + '\n';
				} else {
					var a = old.slice(pos);
					if (a == '') {
						var old1 = old;
					} else {
						var old1 = old + '\n';
					}
				}
			} else {
				var old1 = '';
			}
			$("#oh_psh").val(old1+issue);
			$.jGrowl('Issue copied!');
		} else {
			$.jGrowl("Please select issue to copy!");
		}
	});
	$("#copy_lab_all_issues").button({icons: {primary: "ui-icon-arrowthickstop-1-s"}}).click(function(){
		$.ajax({
			type: "POST",
			url: "ajaxencounter/copy-issues",
			success: function(data){
				if (data == 'No') {
					$.jGrowl('No active issues!');
					$('#issues_header').html('');
					$("#issues_list_dialog").dialog('close');
				} else {
					var terms = split($("#messages_lab_codes").val());
					var issues1 = data.replace(/,/g,"\n");
					var len = issues1.length;
					var len1 = len - 1;
					var issue = issues1.slice(0, len1);
					terms.pop();
					terms.push( issue );
					terms.push( "" );
					var new_terms = terms.join( "\n" );
					$("#messages_lab_codes").val(new_terms);
					$.jGrowl('All active issues copied!');
					$('#issues_lab_header').hide('fast');
					$("#issues_list_dialog").dialog('close');
				}
			}
		});
	});
	$("#copy_lab_one_issue").button({icons: {primary: "ui-icon-arrowthickstop-1-s"}}).click(function(){
		var item = jQuery("#issues").getGridParam('selrow');
		if(item){
			var issue = jQuery("#issues").getCell(item,'issue');
			var terms = split($("#messages_lab_codes").val());
			terms.pop();
			terms.push( issue );
			terms.push( "" );
			var new_terms = terms.join( "\n" );
			$("#messages_lab_codes").val(new_terms);
			$.jGrowl('Issue copied!');
		} else {
			$.jGrowl("Please select issue to copy!");
		}
	});
	$("#copy_rad_all_issues").button({icons: {primary: "ui-icon-arrowthickstop-1-s"}}).click(function(){
		$.ajax({
			type: "POST",
			url: "ajaxencounter/copy-issues",
			success: function(data){
				if (data == 'No') {
					$.jGrowl('No active issues!');
					$('#issues_header').html('');
					$("#issues_list_dialog").dialog('close');
				} else {
					var terms = split($("#messages_rad_codes").val());
					var issues1 = data.replace(/,/g,"\n");
					var len = issues1.length;
					var len1 = len - 1;
					var issue = issues1.slice(0, len1);
					terms.pop();
					terms.push( issue );
					terms.push( "" );
					var new_terms = terms.join( "\n" );
					$("#messages_rad_codes").val(new_terms);
					$.jGrowl('All active issues copied!');
					$('#issues_rad_header').hide('fast');
					$("#issues_list_dialog").dialog('close');
				}
			}
		});
	});
	$("#copy_rad_one_issue").button({icons: {primary: "ui-icon-arrowthickstop-1-s"}}).click(function(){
		var item = jQuery("#issues").getGridParam('selrow');
		if(item){
			var issue = jQuery("#issues").getCell(item,'issue');
			var terms = split($("#messages_rad_codes").val());
			terms.pop();
			terms.push( issue );
			terms.push( "" );
			var new_terms = terms.join( "\n" );
			$("#messages_rad_codes").val(new_terms);
			$.jGrowl('Issue copied!');
		} else {
			$.jGrowl("Please select issue to copy!");
		}
	});
	$("#copy_cp_all_issues").button({icons: {primary: "ui-icon-arrowthickstop-1-s"}}).click(function(){
		$.ajax({
			type: "POST",
			url: "ajaxencounter/copy-issues",
			success: function(data){
				if (data == 'No') {
					$.jGrowl('No active issues!');
					$('#issues_header').html('');
					$("#issues_list_dialog").dialog('close');
				} else {
					var terms = split($("#messages_cp_codes").val());
					var issues1 = data.replace(/,/g,"\n");
					var len = issues1.length;
					var len1 = len - 1;
					var issue = issues1.slice(0, len1);
					terms.pop();
					terms.push( issue );
					terms.push( "" );
					var new_terms = terms.join( "\n" );
					$("#messages_cp_codes").val(new_terms);
					$.jGrowl('All active issues copied!');
					$('#issues_cp_header').hide('fast');
					$("#issues_list_dialog").dialog('close');
				}
			}
		});
	});
	$("#copy_cp_one_issue").button({icons: {primary: "ui-icon-arrowthickstop-1-s"}}).click(function(){
		var item = jQuery("#issues").getGridParam('selrow');
		if(item){
			var issue = jQuery("#issues").getCell(item,'issue');
			var terms = split($("#messages_cp_codes").val());
			terms.pop();
			terms.push( issue );
			terms.push( "" );
			var new_terms = terms.join( "\n" );
			$("#messages_cp_codes").val(new_terms);
			$.jGrowl('Issue copied!');
		} else {
			$.jGrowl("Please select issue to copy!");
		}
	});
	$("#copy_ref_all_issues").button({icons: {primary: "ui-icon-arrowthickstop-1-s"}}).click(function(){
		$.ajax({
			type: "POST",
			url: "ajaxencounter/copy-issues",
			success: function(data){
				if (data == 'No') {
					$.jGrowl('No active issues!');
					$('#issues_header').html('');
					$("#issues_list_dialog").dialog('close');
				} else {
					var terms = split($("#messages_ref_codes").val());
					var issues1 = data.replace(/,/g,"\n");
					var len = issues1.length;
					var len1 = len - 1;
					var issue = issues1.slice(0, len1);
					terms.pop();
					terms.push( issue );
					terms.push( "" );
					var new_terms = terms.join( "\n" );
					$("#messages_ref_codes").val(new_terms);
					$.jGrowl('All active issues copied!');
					$('#issues_ref_header').hide('fast');
					$("#issues_list_dialog").dialog('close');
				}
			}
		});
	});
	$("#copy_ref_one_issue").button({icons: {primary: "ui-icon-arrowthickstop-1-s"}}).click(function(){
		var item = jQuery("#issues").getGridParam('selrow');
		if(item){
			var issue = jQuery("#issues").getCell(item,'issue');
			var terms = split($("#messages_ref_codes").val());
			terms.pop();
			terms.push( issue );
			terms.push( "" );
			var new_terms = terms.join( "\n" );
			$("#messages_ref_codes").val(new_terms);
			$.jGrowl('Issue copied!');
		} else {
			$.jGrowl("Please select issue to copy!");
		}
	});
	$(".copy_assessment_issue_class").button({icons: {primary: "ui-icon-arrowthickstop-1-s"}}).click(function(){
		var id = $(this).attr('id');
		var id_num = id.replace("copy_assessment_issue_", '');
		if (id_num != '9' || id_num != '10') {
			var item = jQuery("#issues").getGridParam('selrow');
			if(item){
				var issue = jQuery("#issues").getCell(item,'issue');
				var pos = issue.indexOf('[');
				if (pos == -1) {
					$.jGrowl('Please select issue to copy!');
				} else {
					var icd1 = issue.slice(pos);
					var icd2 = icd1.replace("[", "");
					var icd = icd2.replace("]", "");
					$("#assessment_icd" + id_num).val(icd);
					$("#assessment_" + id_num).val(issue);
					var label = '<strong>Diagnosis #' + id_num + ':</strong> ' + issue;
					$("#assessment_icd" + id_num + "_div").html(label);
					$("#assessment_icd" + id_num + "_div_button").show();
					$.jGrowl('Issue copied to Diagnosis #' + id_num + '!');
				}
			} else {
				$.jGrowl("Please select issue to copy!");
			}
		} else {
			var item = jQuery("#issues").getGridParam('selrow');
			if(item){
				var issue = jQuery("#issues").getCell(item,'issue');
				if (id_num == '9') {
					var old = $("#assessment_other").val();
				} else {
					var old = $("#assessment_ddx").val();
				}
				if(old){
					var pos = old.lastIndexOf('\n');
					if (pos == -1) {
						var old1 = old + '\n';
					} else {
						var a = old.slice(pos);
						if (a == '') {
							var old1 = old;
						} else {
							var old1 = old + '\n';
						}
					}
				} else {
					var old1 = '';
				}
				if (id_num == '9') {
					$("#assessment_other").val(old1+issue);
				} else {
					$("#assessment_ddx").val(old1+issue);
				}
				$.jGrowl('Issue copied!');
			} else {
				$.jGrowl("Please select issue to copy!");
			}
		}
	});
});
$(document).ready(function() {
	function signedlabel (cellvalue, options, rowObject){
		if (cellvalue == 'No') {
			return 'Draft';
		}
		if (cellvalue == 'Yes') {
			return 'Signed';
		}
	}
	function typelabel (cellvalue, options, rowObject){
		if (cellvalue == 'standardmedical') {
			return 'Standard Medical Visit';
		}
		if (cellvalue == 'clinicalsupport') {
			return 'Clinical Support Visit';
		}
		if (cellvalue == 'standardpsych') {
			return 'Annual Psychiatric Evaluation';
		}
		if (cellvalue == 'standardpsych1') {
			return 'Psychiatric Encounter';
		}
	}
	$("#encounter_view_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#encounter_list_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		open: function (event, ui) {
			jQuery("#encounters").jqGrid({
				url:"ajaxcommon/encounters",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','Chief Complaint','Type','Status'],
				colModel:[
					{name:'eid',index:'eid',width:1,hidden:true},
					{name:'encounter_DOS',index:'encounter_DOS',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'encounter_cc',index:'encounter_cc',width:350},
					{name:'encounter_template',index:'encounter_template',width:150,formatter:typelabel},
					{name:'encounter_signed',index:'encounter_signed',width:100,formatter:signedlabel}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#encounters_pager'),
				sortname: 'encounter_DOS',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Encounters",
			 	height: "100%",
			 	onSelectRow: function(id) {
			 		if (noshdata.group_id != '100') {
						var status = jQuery("#encounters").getCell(id,'encounter_signed');
						var acl = false;
						if (noshdata.group_id == '2' || noshdata.group_id == '3') {
							acl = true;
						}
						if (status == "Draft") {
							if (acl) {
								$.ajax({
									type: "POST",
									url: "ajaxchart/encounter-id-set",
									data: "eid=" + id,
									success: function(data) {
										noshdata.encounter_active = 'y';
										noshdata.eid = id
										openencounter();
										$("#nosh_chart_div").hide();
										$("#nosh_encounter_div").show();
										$("#encounter_list_dialog").dialog('close');
									}
								});
							} else {
								$.jGrowl('You do not have permissions to view draft encounters.');
							}
						}
						if (status == "Signed") {
							if (acl) {
								$("#encounter_view").load('ajaxchart/modal-view/' + id);
							} else {
								$("#encounter_view").load('ajaxchart/modal-view2/' + id);
							}
							$("#encounter_view_dialog").dialog('open');
						}
					} else {
						$.ajax({
							type: "POST",
							url: "ajaxcommon/patient-instructions/" + id,
							dataType: "json",
							success: function(data){
								$("#embedURL").html(data.html);
								$("#document_filepath").val(data.filepath);
								$("#documents_view_dialog").dialog('open');
							}
						});
					}
			 	},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#encounters_pager',{search:false,edit:false,add:false,del:false});
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#encounter_list").click(function() {
		$("#encounter_list_dialog").dialog('open');
	});
	$("#dashboard_encounters").click(function() {
		$("#encounter_list_dialog").dialog('open');
	});
});
$(document).ready(function() {
	$.ajax({
		url: "ajaxdashboard/check-fax",
		type: "POST",
		success: function(data){
			if (data == "Yes") {
				$(".fax_button").show();
			} else {
				$(".fax_button").hide();
			}
		}
	});
	$("#medications_list_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		open: function(event, ui) {
			jQuery("#medications").jqGrid('GridUnload');
			jQuery("#medications").jqGrid({
				url:"ajaxcommon/medications",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Active','Due Date','Medication','Dosage','Unit','SIG','Route','Frequency','Special Instructions','Reason','NDC'],
				colModel:[
					{name:'rxl_id',index:'rxl_id',width:1,hidden:true},
					{name:'rxl_date_active',index:'rxl_date_active',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'rxl_due_date',index:'rxl_due_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'rxl_medication',index:'rxl_medication',width:255},
					{name:'rxl_dosage',index:'rxl_dosage',width:50},
					{name:'rxl_dosage_unit',index:'rxl_dosage_unit',width:50},
					{name:'rxl_sig',index:'rxl_sig',width:50},
					{name:'rxl_route',index:'rxl_route',width:1,hidden:true},
					{name:'rxl_frequency',index:'rxl_frequency',width:105},
					{name:'rxl_instructions',index:'rxl_instructions',width:1,hidden:true},
					{name:'rxl_reason',index:'rxl_reason',width:1,hidden:true},
					{name:'rxl_ndcid',index:'rxl_ndcid',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#medications_pager'),
				sortname: 'rxl_date_active',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Medications - Click on the Date Active column to get past prescriptions for the medication.",
			 	height: "100%",
			 	onCellSelect: function(id,iCol) {
					if (iCol == 1) {
						var med = jQuery("#medications").getCell(id,'rxl_medication');
						$.ajax({
							type: "POST",
							url: "ajaxchart/past-medication",
							data: "rxl_medication=" + med,
							dataType: "json",
							success: function(data){
								$.jGrowl(data.item, {sticky:true, header:data.header});
							}
						});
					}
				},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#medications_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#medications_inactive").jqGrid('GridUnload');
			jQuery("#medications_inactive").jqGrid({
				url:"ajaxcommon/medications-inactive",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Active','Due Date','Medication','Dosage','Unit','SIG','Route','Frequency','Special Instructions','Reason'],
				colModel:[
					{name:'rxl_id',index:'rxl_id',width:1,hidden:true},
					{name:'rxl_date_active',index:'rxl_date_active',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'rxl_due_date',index:'rxl_due_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'rxl_medication',index:'rxl_medication',width:255},
					{name:'rxl_dosage',index:'rxl_dosage',width:50},
					{name:'rxl_dosage_unit',index:'rxl_dosage_unit',width:50},
					{name:'rxl_sig',index:'rxl_sig',width:50},
					{name:'rxl_route',index:'rxl_route',width:1,hidden:true},
					{name:'rxl_frequency',index:'rxl_frequency',width:105},
					{name:'rxl_instructions',index:'rxl_instructions',width:1,hidden:true},
					{name:'rxl_reason',index:'rxl_reason',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#medications_inactive_pager'),
				sortname: 'rxl_date_active',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Inactive Medications",
			 	height: "100%",
			 	hiddengrid: true,
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#medications_inactive_pager',{search:false,edit:false,add:false,del:false});
		},
		close: function(event, ui) {
			$('#oh_meds_header').hide();
			menu_update('medications');
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$(".medications_list").click(function() {
		$("#medications_list_dialog").dialog('open');
		$("#oh_meds_header").hide();
	});
	$("#dashboard_rx").click(function() {
		$("#medications_list_dialog").dialog('open');
		$("#oh_meds_header").hide();
	});
	$("#rxl_date_active").mask("99/99/9999");
	$("#rxl_date_active").datepicker();
	$("#rxl_route").addOption({"by mouth":"PO","per rectum":"PR","subcutaneously":"SC","intramuscularly":"IM","intravenously":"IV"}, false);
	$("#rxl_route").selectOptions();
	$("#rxl_dosage").focus(function(){
		var rx_name = $("#rxl_name").val();
		if (rx_name == '') {
			$.jGrowl('Medication field empty!');
		} else {
			rx_name = rx_name + ";" + $("#rxl_form").val();
			$("#rxl_dosage").autocomplete("search", rx_name);
		}
	});
	$("#add_rx").click(function(){
		$('#edit_rx_form').clearForm();
		var currentDate = getCurrentDate();
		$('#rxl_date_active').val(currentDate);
		$('#edit_medications_dialog').dialog('option', 'title', "Add Medication");
		$('#edit_medications_dialog').dialog('open');
		$("#rxl_search").focus();
	});
	$("#edit_rx").click(function(){
		var item = jQuery("#medications").getGridParam('selrow');
		if(item){
			jQuery("#medications").GridToForm(item,"#edit_rx_form");
			var date = $('#rxl_date_active').val();
			var edit_date = editDate(date);
			$('#rxl_date_active').val(edit_date);
			$('#edit_medications_dialog').dialog('option', 'title', "Edit Medication");
			$('#edit_medications_dialog').dialog('open');
			$("#rxl_medication").focus();
		} else {
			$.jGrowl("Please select medication to edit!")
		}
	});
	$("#inactivate_rx").click(function(){
		var item = jQuery("#medications").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxchart/inactivate-medication",
				data: "rxl_id=" + item,
				dataType: "json",
				success: function(data){
					$.jGrowl(data.message);
					reload_grid("medications");
					reload_grid("medications_inactive");
				}
			});
		} else {
			$.jGrowl("Please select medication to inactivate!")
		}
	});
	$("#delete_rx").click(function(){
		var item = jQuery("#medications").getGridParam('selrow');
		if(item){
			if(confirm('Are you sure you want to delete this medication?  This is not recommended unless entering the medication was a mistake!')){ 
				$.ajax({
					type: "POST",
					url: "ajaxchart/delete-medication",
					data: "rxl_id=" + item,
					success: function(data){
						$.jGrowl(data);
						reload_grid("medications");
						reload_grid("medications_inactive");
					}
				});
			}
		} else {
			$.jGrowl("Please select medication to inactivate!")
		}
	});
	$("#reactivate_rx").click(function(){
		var item = jQuery("#medications_inactive").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxchart/reactivate-medication",
				data: "rxl_id=" + item,
				dataType: "json",
				success: function(data){
					$.jGrowl(data.message);
					reload_grid("medications_inactive");
					reload_grid("medications");
				}
			});
		} else {
			$.jGrowl("Please select medication to reactivate!")
		}
	});
	$("#edit_medications_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 400, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#rxl_medication").autocomplete({
				source: function (req, add){
					var term = req.term;
					if (term in medcache1) {
						add(medcache1[term]);
						return;
					}
					$.ajax({
						url: "ajaxsearch/rx-name",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								medcache1[term] = data.message;
								add(data.message);
							}
						}
					});
				},
				minLength: 3,
				select: function(event, ui){
					$('#rxl_name').val(ui.item.name);
					$('#rxl_form').val(ui.item.form);
					$('#rxl_dosage').val('');
					$('#rxl_dosage_unit').val('');
				}
			});
			$("#rxl_dosage").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/rx-dosage",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 0,
				select: function(event, ui){
					$("#rxl_dosage_unit").val(ui.item.unit);
					$.ajax({
						url: "ajaxsearch/rx-ndc-convert/" + ui.item.ndc,
						type: "POST",
						success: function(data){
							$("#rxl_ndcid").val(data);
						}
					});
				}
			});
			$(".search_sig").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/rx-search/rxl_sig",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 1
			});
			$(".search_frequency").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/rx-search/rxl_frequency",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 1
			});
			$(".search_instructions").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/rx-search/rxl_instructions",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$(".search_reason").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/rx-search/rxl_reason",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#edit_rx_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_rx_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/edit-medication",
							data: str,
							success: function(data){
								$.jGrowl(data);
								reload_grid("medications");
								reload_grid("nosh_medications");
								$('#edit_rx_form').clearForm();
								$('#edit_medications_dialog').dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#edit_rx_form').clearForm();
				$('#edit_medications_dialog').dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#interactions_load").dialog({
		height: 100,
		autoOpen: false,
		overlay: {
			backgroundColor: '#000',
			opacity: 50
		},
		closeOnEscape: false,
		dialogClass: "noclose",
		modal: true,
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messages_action_rx_dialog").dialog({
		bgiframe: true,
		autoOpen: false,
		height: 200,
		width: 400,
		closeOnEscape: false,
		dialogClass: "noclose",
		modal: true,
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messages_rx_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800,
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(event, ui) {
			jQuery("#messages_medications").jqGrid('GridUnload');
			jQuery("#messages_medications").jqGrid({
				url:"ajaxcommon/medications",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Active','Date Prescribed','Due Date','Medication','Dosage','Unit','SIG','Route','Frequency','Special Instructions','Reason','Days','Quantity','Refills','NDC','Provider ID'],
				colModel:[
					{name:'rxl_id',index:'rxl_id',width:1,hidden:true},
					{name:'rxl_date_active',index:'rxl_date_active',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'rxl_date_prescribed',index:'rxl_date_prescribed',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'rxl_due_date',index:'rxl_due_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'rxl_medication',index:'rxl_medication',width:180},
					{name:'rxl_dosage',index:'rxl_dosage',width:50},
					{name:'rxl_dosage_unit',index:'rxl_dosage_unit',width:50},
					{name:'rxl_sig',index:'rxl_sig',width:50},
					{name:'rxl_route',index:'rxl_route',width:1,hidden:true},
					{name:'rxl_frequency',index:'rxl_frequency',width:75},
					{name:'rxl_instructions',index:'rxl_instructions',width:1,hidden:true},
					{name:'rxl_reason',index:'rxl_reason',width:1,hidden:true},
					{name:'rxl_days',index:'rxl_days',width:1,hidden:true},
					{name:'rxl_quantity',index:'rxl_quantity',width:1,hidden:true},
					{name:'rxl_refill',index:'rxl_refill',width:1,hidden:true},
					{name:'rxl_ndcid',index:'rxl_ndcid',width:1,hidden:true},
					{name:'id',index:'id',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#messages_medications_pager'),
				sortname: 'rxl_date_active',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Medications - Click on Date Active column to get previous prescription dates.",
			 	height: "100%",
			 	onCellSelect: function(id,iCol) {
					if (iCol == 1) {
						var med = jQuery("#messages_medications").getCell(id,'rxl_medication');
						$.ajax({
							type: "POST",
							url: "ajaxchart/past-medication",
							data: "rxl_medication=" + med,
							dataType: "json",
							success: function(data){
								$.jGrowl(data.item, {sticky:true, header:data.header});
							}
						});
					}
				},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#messages_medications_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#messages_medications_inactive").jqGrid('GridUnload');
			jQuery("#messages_medications_inactive").jqGrid({
				url:"ajaxcommon/medications-inactive",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Active','Date Prescribed','Due Date','Medication','Dosage','Unit','SIG','Route','Frequency','Special Instructions','Reason','Days'],
				colModel:[
					{name:'rxl_id',index:'rxl_id',width:1,hidden:true},
					{name:'rxl_date_active',index:'rxl_date_active',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'rxl_date_prescribed',index:'rxl_date_prescribed',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'rxl_due_date',index:'rxl_due_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'rxl_medication',index:'rxl_medication',width:180},
					{name:'rxl_dosage',index:'rxl_dosage',width:50},
					{name:'rxl_dosage_unit',index:'rxl_dosage_unit',width:50},
					{name:'rxl_sig',index:'rxl_sig',width:50},
					{name:'rxl_route',index:'rxl_route',width:1,hidden:true},
					{name:'rxl_frequency',index:'rxl_frequency',width:75},
					{name:'rxl_instructions',index:'rxl_instructions',width:1,hidden:true},
					{name:'rxl_reason',index:'rxl_reason',width:1,hidden:true},
					{name:'rxl_days',index:'rxl_days',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#messages_medications_inactive_pager'),
				sortname: 'rxl_date_active',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Inactive Medications",
			 	height: "100%",
			 	hiddengrid: true,
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#messages_medications_inactive_pager',{search:false,edit:false,add:false,del:false});
		},
		close: function (event,ui) {
			menu_update('medications');
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	function prescribe_medication() {
		var str = $("#messages_edit_rx_form").serialize();
		$.ajax({
			type: "POST",
			url: "ajaxchart/prescribe-medication",
			data: str,
			dataType: "json",
			success: function(data){
				if(data.id) {
					$.jGrowl(data.message);
					reload_grid("messages_medications");
					reload_grid("medications");
					$('#prescribe_id').val(data.id);
					var old = $('#messages_rx_text').val();
					$('#messages_rx_text').val(old + '\n' + data.medtext);
					$('#prescribe_choice').html(data.med);
					$('#messages_edit_rx_form').clearForm();
					$("#messages_edit_rx_dialog").dialog('close');
					$("#rx_dialog_confirm").dialog("close");
					$('#messages_action_rx_dialog').dialog('open');
				} else {
					$.jGrowl(data.message);
				}
			}
		});
	}
	$("#messages_edit_rx_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 650, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(event, ui) {
			$("#messages_rxl_medication").catcomplete({
				source: function (req, add){
					var term = req.term;
					if (term in medcache) {
						add(medcache[term]);
						return;
					}
					$.ajax({
						url: "ajaxsearch/rx-name/1",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								medcache[term] = data.message;
								add(data.message);
							}
						}
					});
				},
				minLength: 3,
				delay: 500,
				select: function(event, ui){
					if (ui.item.category == "Previously Prescribed") {
						$("#messages_rxl_dosage").val(ui.item.dosage);
						$("#messages_rxl_dosage_unit").val(ui.item.dosage_unit);
						$("#messages_rxl_ndcid").val(ui.item.rxl_ndcid);
						$("#messages_rxl_name").val('');
						$("#messages_rxl_form").val('');
					} else {
						$("#messages_rxl_dosage").val('');
						$("#messages_rxl_dosage_unit").val('');
						$("#messages_rxl_ndcid").val('');
						$("#messages_rxl_name").val(ui.item.name);
						$("#messages_rxl_form").val(ui.item.form);
					}
				}
			});
			$("#messages_rxl_dosage").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/rx-dosage",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 0,
				select: function(event, ui){
					$("#messages_rxl_dosage_unit").val(ui.item.unit);
					$.ajax({
						url: "ajaxsearch/rx-ndc-convert/" + ui.item.ndc,
						type: "POST",
						success: function(data){
							$("#messages_rxl_ndcid").val(data);
						}
					});
				}
			});
			$(".search_sig").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/rx-search/rxl_sig",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 1
			});
			$(".search_frequency").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/rx-search/rxl_frequency",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 1
			});
			$(".search_instructions").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/rx-search/rxl_instructions",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$(".search_reason").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/rx-search/rxl_reason",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#messages_rx_provider").removeOption(/./);
			$("#messages_rx_provider").addOption({'':'Choose Provider'});
			$.ajax({
				type: "POST",
				url: "ajaxsearch/provider-select",
				dataType: "json",
				success: function(data){
					$("#messages_rx_provider").addOption(data,false);
					if (noshdata.group_id == '2') {
						$("#messages_rx_provider").val(noshdata.user_id);
					}
				}
			});
		},
		buttons: {
			'Prescribe': function() {
				var bValid = true;
				$("#messages_edit_rx_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#messages_edit_rx_form").serialize();
					if(str){
						$("#interactions_load").dialog('open');
						$.ajax({
							type: "POST",
							url: "ajaxchart/interactions-medication",
							data: str,
							dataType: "json",
							success: function(data){
								if (data.message == 'Allergies') {
									$("#rx_dialog_confirm_text").html(data.info);
									$("#rx_dialog_confirm").dialog("open");
								}
								if (data.message == 'Multiple') {
									$("#rx_dialog_confirm_text").html(data.info);
									$("#rx_dialog_confirm").dialog("open");
								}
								if (data.message == 'None') {
									prescribe_medication();
								}
							}
						});
						$("#interactions_load").ajaxStop(function(){
							$(this).dialog("close");
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#messages_edit_rx_form').clearForm();
				$("#messages_edit_rx_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#rx_dialog_confirm").dialog({
		resizable: false,
		height:400,
		width: 400,
		modal: true,
		bgiframe: true, 
		autoOpen: false, 
		draggable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			"Prescribe": function() {
				prescribe_medication();
			},
			Cancel: function() {
				$(this).dialog("close");
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	function closerxorders() {
		$('#messages_edit_rx_form').clearForm();
		$("#messages_rx_text").val('');
		$("#messages_rx_eie_text").val('');
		$("#messages_rx_inactivate_text").val('');
		$("#messages_rx_reactivate_text").val('');
		$("#orders_rx_header").hide();
		$("#messages_rx_header").hide();
		$("#messages_rx_dialog").dialog('close');
	}
	$('#save_orders_rx').click(function(){
		var str = $("#messages_rx_main_form").serialize();
		if(str){
			$.ajax({
				type: "POST",
				url: "ajaxencounter/orders-rx-save",
				data: str,
				success: function(data){
					$.jGrowl(data);
					closerxorders();
					checkorders();
				}
			});
		}
	});
	$("#cancel_orders_rx_helper").click(function() {
		var a = $("#messages_rx_text").val();
		var b = $("#messages_rx_eie_text").val();
		var c = $("#messages_rx_inactivate_text").val();
		var d = $("#messages_rx_reactivate_text").val();
		if(a != '' || b != '' || c != '' || d != ''){
			if(confirm('Changes have not been saved.  Are you sure you want to close this window?  If not, press Cancel and press Import to save the form fields.')){ 
				closerxorders();
				return true;
			} else {
				return false;
			}
		} else {
			closerxorders();
		}	
	});
	$("#save_rx_helper").click(function() {
		var old = $("#t_messages_message").val();
		var old1 = old.trim();
		var a = $("#messages_rx_text").val();
		var b = $("#messages_rx_eie_text").val();
		var c = $("#messages_rx_inactivate_text").val();
		var d = $("#messages_rx_reactivate_text").val();
		if(a){
			var a1 = 'PRESCRIBED MEDICATIONS:  ' + a + '\n\n';
		} else {
			var a1 = '';
		}
		if(b){
			var b1 = 'ENTERED MEDICATIONS IN ERROR:  ' + b + '\n\n';
		} else {
			var b1 = '';
		}
		if(c){
			var c1 = 'DISCONTINUED MEDICATIONS:  ' + c + '\n\n';
		} else {
			var c1 = '';
		}
		if(d){
			var d1 = 'REINSTATED MEDICATIONS:  ' + d + '\n\n';
		} else {
			var d1 = '';
		}
		if (old1 != '') {
			var e = old1+'\n\n'+a1+b1+c1+d1;
		} else {
			var e = a1+b1+c1+d1;
		}
		$("#t_messages_message").val(e);
		closerxorders();
	});
	$("#cancel_rx_helper").click(function() {
		var a = $("#messages_rx_text").val();
		var b = $("#messages_rx_eie_text").val();
		var c = $("#messages_rx_inactivate_text").val();
		var d = $("#messages_rx_reactivate_text").val();
		if(a != '' || b != '' || c != '' || d != ''){
			if(confirm('Changes have not been saved.  Are you sure you want to close this window?  If not, press Cancel and press Import to save the form fields.')){ 
				closerxorders();
				return true;
			} else {
				return false;
			}
		} else {
			closerxorders();
		}
	});
	$('#save_oh_meds').click(function(){
		$.ajax({
			type: "POST",
			url: "ajaxencounter/oh-save1/meds",
			success: function(data){
				$.jGrowl(data);
				$("#oh_meds_header").hide();
				$("#medications_list_dialog").dialog('close');
				check_oh_status();
			}
		});
	});
	$("#messages_rxl_date_prescribed").mask("99/99/9999");
	$("#messages_rxl_date_prescribed").datepicker();
	$("#messages_rxl_route").addOption({"by mouth":"PO","per rectum":"PR","subcutaneously":"SC","intramuscularly":"IM","intravenously":"IV"}, false);
	$("#messages_rxl_route").selectOptions();
	$("#messages_rxl_dosage").focus(function(){
		var rx_name = $("#messages_rxl_name").val();
		if (rx_name != '') {
			rx_name = rx_name + ";" + $("#messages_rxl_form").val();
			$("#messages_rxl_dosage").autocomplete("search", rx_name);
		}
	});
	$("#messages_add_rx").click(function(){
		$('#messages_edit_rx_form').clearForm();
		var currentDate = getCurrentDate();
		$('#messages_rxl_date_prescribed').val(currentDate);
		if (noshdata.group_id == '2') {
			$(".messages_rx_provider_div").hide();
		} else {
			$(".messages_rx_provider_div").show();
		}
		$('#messages_edit_rx_dialog').dialog('option', 'title', "Add Prescription");
		$('#messages_edit_rx_dialog').dialog('open');
		$('#messages_rxl_medication').focus();
	});
	$("#messages_edit_rx").click(function(){
		var item = jQuery("#messages_medications").getGridParam('selrow');
		if(item){
			jQuery("#messages_medications").GridToForm(item,"#messages_edit_rx_form");
			var currentDate = getCurrentDate();
			$('#messages_rxl_date_prescribed').val(currentDate);
			if (noshdata.group_id == '2') {
				$(".messages_rx_provider_div").hide();
			} else {
				$(".messages_rx_provider_div").show();
			}
			$('#messages_edit_rx_dialog').dialog('option', 'title', "Refill Prescription");
			$('#messages_edit_rx_dialog').dialog('open');
			$('#messages_rxl_quantity').focus();
		} else {
			$.jGrowl("Please select medication to edit!");
		}
	});
	$("#messages_eie_rx").click(function(){
		var item = jQuery("#messages_medications").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxchart/eie-medication",
				data: "rxl_id=" + item,
				dataType: 'json',
				success: function(data){
					$.jGrowl(data.message);
					var old = $('#messages_rx_eie_text').val();
					$('#messages_rx_eie_text').val(old + '\n' + data.medtext);
					$('#messages_action_rx_form').clearForm();
					$('#messages_action_rx_form').hide('fast');
					reload_grid("messages_medications");
					reload_grid("messages_medications_inactive");
					reload_grid("medications");
					reload_grid("medications_inactive");
				}
			});
		} else {
			$.jGrowl("Please select medication!");
		}
	});
	$("#messages_inactivate_rx").click(function(){
		var item = jQuery("#messages_medications").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxchart/inactivate-medication",
				data: "rxl_id=" + item,
				dataType: "json",
				success: function(data){
					$.jGrowl(data.message);
					var old = $('#messages_rx_inactivate_text').val();
					$('#messages_rx_inactivate_text').val(old + '\n' + data.medtext);
					reload_grid("messages_medications");
					reload_grid("messages_medications_inactive");
					reload_grid("medications");
					reload_grid("medications_inactive");
				}
			});
		} else {
			$.jGrowl("Please select medication to inactivate!");
		}
	});
	$("#messages_delete_rx").click(function(){
		var item = jQuery("#messages_medications").getGridParam('selrow');
		if(item){
			if(confirm('Are you sure you want to delete this medication?  This is not recommended unless entering the medication was a mistake!')){ 
				$.ajax({
					type: "POST",
					url: "ajaxchart/delete-medication",
					data: "rxl_id=" + item,
					success: function(data){
						$.jGrowl(data);
						reload_grid("messages_medications");
						reload_grid("messages_medications_inactive");
						reload_grid("medications");
						reload_grid("medications_inactive");
					}
				});
			}
		} else {
			$.jGrowl("Please select medication to inactivate!");
		}
	});
	$("#messages_reactivate_rx").click(function(){
		var item = jQuery("#messages_medications_inactive").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxchart/reactivate-medication",
				data: "rxl_id=" + item,
				dataType: "json",
				success: function(data){
					$.jGrowl(data.message);
					var old = $('#messages_rx_reactivate_text').val();
					$('#messages_rx_reactivate_text').val(old + '\n' + data.medtext);
					reload_grid("messages_medications_inactive");
					reload_grid("messages_medications");
					reload_grid("medications");
					reload_grid("medications_inactive");
				}
			});
		} else {
			$.jGrowl("Please select medication to reactivate!")
		}
	});
	$.extend({
		rx: {
			callback: function (result) {
				var id = result["references"][0]["id"];
				var a = $("#messages_rxl_medication_list").val();
				if (a == '') {
					$("#messages_rxl_medication_list").val(id);
				} else {
					$("#messages_rxl_medication_list").val(a + ',' + id);
				}
			}
		}
	});
	$("#messages_rx_fax_dialog").dialog({
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800,
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(event, ui) {
			jQuery("#messages_rx_fax_list").jqGrid('GridUnload');
			jQuery("#messages_rx_fax_list").jqGrid({
				url:"ajaxchart/rx-fax-list",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','File','Pages','Full Path'],
				colModel:[
					{name:'pages_id',index:'pages_id',width:1,hidden:true},
					{name:'file_original',index:'file_original',width:555},
					{name:'pagecount',index:'pagecount',width:100},
					{name:'file',index:'file',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#messages_rx_fax_list_pager'),
				sortname: 'file_original',
				viewrecords: true,
				sortorder: "desc",
				caption:"Fax Queue",
				emptyrecords:"No pages",
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#messages_rx_fax_list_pager',{search:false,edit:false,add:false,del:false});
		},
		buttons: {
			'Send Fax Queue': function() {
				var medication = $("#prescribe_id");
				var id = $("#prescribe_id").val();
				$('#fax_prescribe_id').val(id);
				var bValid = true;
				bValid = bValid && checkEmpty(medication,"Prescription ID");
				$("#messages_rx_fax_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#messages_rx_fax_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/send-fax-medication",
							data: str,
							success: function(data){
								$.jGrowl(data);
								$('#messages_rx_fax_form').clearForm();
								$("#messages_rx_fax_dialog").dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			'Save Fax Queue to Send Later': function() {
				$("#fax_prescribe_id").val('');
				$('#messages_rx_fax_dialog').dialog('close');
			},
			'Cancel Fax Queue': function() {
				$.ajax({
					type: "POST",
					url: "ajaxchart/cancel-fax-medication",
					success: function(data){
						$.jGrowl(data);
						$('#messages_rx_fax_form').clearForm();
						$('#messages_rx_fax_dialog').dialog('close');
					}
				});
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messages_print_medication").click(function(){
		var medication = $("#prescribe_id");
		var bValid = true;
		bValid = bValid && checkEmpty(medication,"Prescription ID");
		if (bValid) {
			var prescribe_id = $("#prescribe_id").val();
			window.open("print_medication/" + prescribe_id);
		}
	});
	$("#messages_eprescribe_medication").click(function(){
	});
	$("#messages_fax_medication").click(function(){
		var medication = $("#prescribe_id");
		var bValid = true;
		bValid = bValid && checkEmpty(medication,"Prescription ID");
		if (bValid) {
			var id = $("#prescribe_id").val();
			$("#fax_prescribe_id").val(id);
			var str = $("#messages_rx_fax_form").serialize();
			if(str){
				$.ajax({
					type: "POST",
					url: "ajaxchart/start-fax-medication",
					data: str,
					dataType: "json",
					success: function(data){
						$.jGrowl(data.message);
						$('#messages_fax_id').html(data.id);
						$("#messages_rx_fax_dialog").dialog('open');
					}
				});
			} else {
				$.jGrowl("Please complete the form");
			}
		}
	});
	$("#messages_done_medication").click(function(){
		$('#messages_action_rx_form').clearForm();
		$('#messages_action_rx_dialog').dialog('close');
	});
	$("#messages_pharmacy_fax_number").mask("(999) 999-9999");
	$("#messages_pharmacy_name").autocomplete({
		source: function (req, add){
			$.ajax({
				url: "ajaxsearch/pharmacy",
				dataType: "json",
				type: "POST",
				data: req,
				success: function(data){
					if(data.response =='true'){
						add(data.message);
					}
				}
			});
		},
		minLength: 3,
		select: function(event, ui){
			$("#messages_pharmacy_fax_number").val(ui.item.fax);
		}
	});
	$("#messages_add_fax_contact").click(function(){
		var bValid = true;
		$("#messages_rx_fax_form").find("[required]").each(function() {
			var input_id = $(this).attr('id');
			var id1 = $("#" + input_id); 
			var text = $("label[for='" + input_id + "']").html();
			bValid = bValid && checkEmpty(id1, text);
		});
		if (bValid) {
			var str = $("#messages_rx_fax_form").serialize();
			if(str){
				$.ajax({
					type: "POST",
					url: "ajaxchart/add-pharmacy",
					data: str,
					success: function(data){
						$.jGrowl(data);
					}
				});
			} else {
				$.jGrowl("Please complete the form");
			}
		}
	});
	$("#messages_print_rx").click(function() {
		window.open("print_medication_list");
	});
	$("#messages_rx_fax_viewpage").click(function(){
		var click_id = jQuery("#messages_rx_fax_list").getGridParam('selrow');
		if(click_id){
			window.open("view_faxpage/" + click_id);
		}
	});
	$("#rcopia_orders_rx").button({icons: {primary: "ui-icon-link"}}).click(function() {
		$.ajax({
			type: "POST",
			url: "ajaxchart/rcopia-update-medication/encounter",
			dataType: "json",
			success: function(data){
				if (data.response == 'Error connecting to DrFirst RCopia.  Try again later.' || data.response == 'No updated prescriptions.') {
					$.jGrowl(data.response);
				} else {
					$.jGrowl(data.response);
					var old = $('#messages_rx_text').val();
					$('#messages_rx_text').val(old + '\n' + data.medtext);
					reload_grid("messages_medications");
					reload_grid("medications");
				}
			}
		});
	});
	$("#rcopia_rx_helper").button({icons: {primary: "ui-icon-link"}}).click(function() {
		$.ajax({
			type: "POST",
			url: "ajaxchart/rcopia-update-medication/message",
			dataType: "json",
			success: function(data){
				if (data.response == 'Error connecting to DrFirst RCopia.  Try again later.' || data.response == 'No updated prescriptions.') {
					$.jGrowl(data.response);
				} else {
					var old = $("#t_messages_message").val();
					if(old){
						var pos = old.lastIndexOf('\n');
						if (pos == -1) {
							var old1 = old + '\n\n';
						} else {
							var a = old.slice(pos);
							if (a == '') {
								var old1 = old + '\n';
							} else {
								var old1 = old + '\n\n';
							}
						}
					} else {
						var old1 = '';
					}
					$("#t_messages_message").val(old1+data.medtext);
					$('#messages_edit_rx_form').hide('fast');
					$('#messages_edit_rx_form').clearForm();
					$("#messages_rx_text").val('');
					$("#messages_rx_eie_text").val('');
					$("#messages_rx_inactivate_text").val('');
					$("#messages_rx_reactivate_text").val('');
					$("#messages_rx_dialog").dialog('close');
				}
			}
		});
	});
});
$(document).ready(function() {
	$("#supplements_list_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		open: function(event, ui) {
			var a = $("#supplement_origin_orders").val();
			if (a == "N") {
				$("#edit_sup").attr("value", "Edit Supplement");
				$("#orders_supplements_header").hide();
				$("#messages_supplements_header").hide();
			}
			jQuery("#supplements").jqGrid('GridUnload');
			jQuery("#supplements").jqGrid({
				url:"ajaxcommon/supplements",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Active','Supplement','Dosage','Unit','SIG','Route','Frequency','Special Instructions','Reason','Supplement ID','Provider ID'],
				colModel:[
					{name:'sup_id',index:'sup_id',width:1,hidden:true},
					{name:'sup_date_active',index:'sup_date_active',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'sup_supplement',index:'sup_supplement',width:260},
					{name:'sup_dosage',index:'sup_dosage',width:50},
					{name:'sup_dosage_unit',index:'sup_dosage_unit',width:50},
					{name:'sup_sig',index:'sup_sig',width:50},
					{name:'sup_route',index:'sup_route',width:1,hidden:true},
					{name:'sup_frequency',index:'sup_frequency',width:205},
					{name:'sup_instructions',index:'sup_instructions',width:1,hidden:true},
					{name:'sup_reason',index:'sup_reason',width:1,hidden:true},
					{name:'supplement_id',index:'supplement_id',width:1,hidden:true},
					{name:'id',index:'id',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#supplements_pager'),
				sortname: 'sup_date_active',
				viewrecords: true,
				sortorder: "desc",
				caption:"Supplements",
				height: "100%",
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#supplements_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#supplements_inactive").jqGrid('GridUnload');
			jQuery("#supplements_inactive").jqGrid({
				url:"ajaxcommon/supplements-inactive",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Active','Supplement','Dosage','Unit','SIG','Route','Frequency','Special Instructions','Reason',"Supplement ID"],
				colModel:[
					{name:'sup_id',index:'sup_id',width:1,hidden:true},
					{name:'sup_date_active',index:'sup_date_active',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'sup_supplement',index:'sup_supplement',width:260},
					{name:'sup_dosage',index:'sup_dosage',width:50},
					{name:'sup_dosage_unit',index:'sup_dosage_unit',width:50},
					{name:'sup_sig',index:'sup_sig',width:50},
					{name:'sup_route',index:'sup_route',width:1,hidden:true},
					{name:'sup_frequency',index:'sup_frequency',width:205},
					{name:'sup_instructions',index:'sup_instructions',width:1,hidden:true},
					{name:'sup_reason',index:'sup_reason',width:1,hidden:true},
					{name:'supplement_id',index:'supplement_id',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#supplements_inactive_pager'),
				sortname: 'sup_date_active',
				viewrecords: true,
				sortorder: "desc",
				caption:"Inactive Medications",
				height: "100%",
				hiddengrid: true,
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#supplements_inactive_pager',{search:false,edit:false,add:false,del:false});
		},
		close: function(event, ui) {
			$('#edit_sup_form').clearForm();
			$("#edit_sup").attr("value", "Reorder Supplement");
			$("#orders_supplements_header").hide();
			$("#messages_supplements_header").hide();
			$("#oh_supplements_header").hide();
			$("#supplement_origin_orders").val("N");
			$("#supplement_origin_orders1").val("N");
			menu_update('supplements');
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$(".supplements_list").click(function() {
		$("#supplement_origin_orders").val("N");
		$("#supplement_origin_orders1").val("N");
		$("#supplements_list_dialog").dialog('open');
		$("#edit_sup").attr("value", "Edit Supplement");
		$("#oh_supplements_header").hide();
		$("#orders_supplements_header").hide();
	});
	$("#dashboard_supplements").click(function() {
		$("#supplement_origin_orders").val("N");
		$("#supplement_origin_orders1").val("N");
		$("#supplements_list_dialog").dialog('open');
		$("#edit_sup").attr("value", "Edit Supplement");
		$("#oh_supplements_header").hide();
		$("#orders_supplements_header").hide();
	});
	$("#edit_sup_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 650, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(event, ui) {
			$("#sup_supplement").catcomplete({
				source: function (req, add){
					var a = $("#supplement_origin_orders").val();
					$.ajax({
						url: "ajaxsearch/supplements/" + a,
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3,
				select: function(event, ui) {
					$("#sup_dosage").val(ui.item.dosage);
					$("#sup_dosage_unit").val(ui.item.dosage_unit);
					$("#supplement_id").val(ui.item.supplement_id);
				}
			});
			$("#sup_dosage").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/sup-dosage",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 0,
				select: function(event, ui){
					$("#sup_dosage_unit").val(ui.item.unit);
				}
			});
			$("#sup_sig").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/sup-sig",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 1
			});
			$("#sup_frequency").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/sup-frequency",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 1
			});
			$("#sup_instructions").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/sup-instructions",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#sup_reason").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/sup-reason",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#messages_sup_provider").removeOption(/./);
			$("#messages_sup_provider").addOption({'':'Choose Provider'});
			$.ajax({
				type: "POST",
				url: "ajaxsearch/provider-select",
				dataType: "json",
				success: function(data){
					$("#messages_sup_provider").addOption(data,false);
					if (noshdata.group_id == '2') {
						$("#messages_sup_provider").val(noshdata.user_id);
					}
				}
			});
			var a = $("#supplement_origin_orders").val();
			if (a == "N") {
				$(this).siblings('.ui-dialog-buttonpane').find('button').eq(0).hide();
			} else {
				$(this).siblings('.ui-dialog-buttonpane').find('button').eq(0).show();
			}
		},
		buttons: {
			'Purchase': function() {
				var bValid = true;
				$("#edit_sup_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var a = $("#supplement_id").val();
					if(a) {
						$.ajax({
							type: "POST",
							url: "ajaxchart/check-supplement-inventory",
							data: "supplement_id=" + a,
							success: function(data){
								if (data == "OK") {
									$("#supplement_inventory_dialog").dialog('open');
								} else {
									$.jGrowl(data);
								}
							}
						});
						
					} else {
						$.jGrowl("Ensure that the supplement chosen is in the inventory!");
					}
				}
			},
			'Save': function() {
				var bValid = true;
				$("#edit_sup_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_sup_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/edit-supplement/N",
							data: str,
							dataType: "json",
							success: function(data){
								$.jGrowl(data.message);
								var old = $('#supplement_text').val();
								$('#supplement_text').val(old + '\n' + data.medtext);
								$('#review_orders_supplements').html($('#supplement_text').val() + "\n" + $('#supplement_text1').val());
								reload_grid("supplements");
								$('#edit_sup_form').clearForm();
								$('#edit_sup_dialog').dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#edit_sup_form').clearForm();
				$('#edit_sup_dialog').dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#sup_date_active").mask("99/99/9999");
	$("#sup_date_active").datepicker();
	$("#sup_route").addOption({"by mouth":"PO","per rectum":"PR","subcutaneously":"SC","intramuscularly":"IM","intravenously":"IV"}, false);
	$("#sup_route").selectOptions();
	$("#sup_dosage").click(function(){
		var sup_name = $("#sup_supplement").val();
		if (sup_name == '') {
			$.jGrowl('Supplement field empty!');
		} else {
			$("#sup_dosage").autocomplete("search", sup_name);
		}
	});
	$("#add_sup").click(function(){
		$('#edit_sup_form').clearForm();
		var currentDate = getCurrentDate();
		$('#sup_date_active').val(currentDate);
		$('#edit_sup_dialog').dialog('option', 'title', "Add Supplement");
		$('#edit_sup_dialog').dialog('open');
		$("#sup_supplement").focus();
	});
	$("#edit_sup").click(function(){
		var item = jQuery("#supplements").getGridParam('selrow');
		if(item){
			jQuery("#supplements").GridToForm(item,"#edit_sup_form");
			var date = $('#sup_date_active').val();
			var edit_date = editDate(date);
			$('#sup_date_active').val(edit_date);
			$('#edit_sup_dialog').dialog('option', 'title', "Edit Supplement");
			$('#edit_sup_dialog').dialog('open');
			$("#sup_supplement").focus();
		} else {
			$.jGrowl("Please select supplement to edit!")
		}
	});
	$("#inactivate_sup").click(function(){
		var item = jQuery("#supplements").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxchart/inactivate-supplement",
				data: "sup_id=" + item,
				dataType: "json",
				success: function(data){
					$.jGrowl(data.message);
					var old = $('#supplement_inactivate_text').val();
					$('#supplement_inactivate_text').val(old + '\n' + data.medtext);
					reload_grid("supplements");
					reload_grid("supplements_inactive");
				}
			});
		} else {
			$.jGrowl("Please select supplement to inactivate!")
		}
	});
	$("#delete_sup").click(function(){
		var item = jQuery("#supplements").getGridParam('selrow');
		if(item){
			if(confirm('Are you sure you want to delete this supplement?  This is not recommended unless entering the supplement was a mistake!')){ 
				$.ajax({
					type: "POST",
					url: "ajaxchart/delete-supplement",
					data: "sup_id=" + item,
					success: function(data){
						$.jGrowl(data);
						reload_grid("supplements");
						reload_grid("supplements_inactive");
					}
				});
			}
		} else {
			$.jGrowl("Please select supplement to inactivate!")
		}
	});
	$("#reactivate_sup").click(function(){
		var item = jQuery("#supplements_inactive").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxchart/reactivate-supplement",
				data: "sup_id=" + item,
				dataType: "json",
				success: function(data){
					$.jGrowl(data.message);
					var old = $('#supplement_reactivate_text').val();
					$('#supplement_reactivate_text').val(old + '\n' + data.medtext);
					reload_grid("supplements_inactive");
					reload_grid("supplements");
				}
			});
		} else {
			$.jGrowl("Please select supplement to reactivate!")
		}
	});
	$("#search_db_supplement").click(function(){
		window.open("http://www.dsld.nlm.nih.gov/dsld/");
	});
	$("#supplement_inventory_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 200, 
		width: 500, 
		modal: true,
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Save': function() {
				var a = $("#supplement_inventory_dialog_amount");
				var bValid = true;
				bValid = bValid && checkEmpty(a,"Quantity");
				if (bValid) {
					var b = $("#supplement_inventory_dialog_amount").val();
					$("#sup_amount").val(b);
					$("#supplement_inventory_dialog_amount").val('');
					$("#supplement_inventory_dialog").dialog('close');
					var str = $("#edit_sup_form").serialize();
					if(str){
						var c = $("#supplement_origin_orders1").val();
						$.ajax({
							type: "POST",
							url: "ajaxchart/edit-supplement/" + c,
							data: str,
							dataType: "json",
							success: function(data){
								$.jGrowl(data.message);
								var old = $('#supplement_text1').val();
								$('#supplement_text1').val(old + '\n' + data.medtext);
								reload_grid("supplements");
								$('#edit_sup_form').clearForm();
								$('#edit_sup_dialog').dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$("#supplement_inventory_dialog_amount").val('');
				$("#supplement_inventory_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$('#save_orders_supplements').click(function(){
		var str = $("#messages_supplements_main_form").serialize();
		if(str){
			$.ajax({
				type: "POST",
				url: "ajaxchart/orders-sup-save",
				data: str,
				success: function(data){
					$.jGrowl(data);
					$("#messages_supplements_main_form").clearForm();
					$("#supplement_origin_orders").val('');
					$("#orders_supplements_header").hide();
					$("#supplements_list_dialog").dialog('close');
					checkorders();
				}
			});
		} else {
			$.jGrowl("Please complete the form");
		}
	});
	$("#cancel_orders_supplements_helper").click(function() {
		$("#messages_supplements_main_form").clearForm();
		$("#supplement_origin_orders").val('');
		$("#orders_supplements_header").hide();
		$("#supplements_list_dialog").dialog('close');
	});
	$('#save_orders_supplements1').click(function(){
		var old = $("#t_messages_message").val();
		var old1 = old.trim();
		var a = $("#supplement_text").val();
		var b = $("#supplement_text1").val();
		var c = $("#supplement_inactivate_text").val();
		var d = $("#supplement_reactivate_text").val();
		if(a){
			var a1 = 'SUPPLEMENTS ADVISED:  ' + a + '\n\n';
		} else {
			var a1 = '';
		}
		if(b){
			var b1 = 'SUPPLEMENTS PURCHASED BY PATIENT:  ' + b + '\n\n';
		} else {
			var b1 = '';
		}
		if(c){
			var c1 = 'DISCONTINUED SUPPLEMENTS:  ' + c + '\n\n';
		} else {
			var c1 = '';
		}
		if(d){
			var d1 = 'REINSTATED SUPPLEMENTS:  ' + d + '\n\n';
		} else {
			var d1 = '';
		}
		if (old1 != '') {
			var e = old1+'\n\n'+a1+b1+c1+d1;
		} else {
			var e = a1+b1+c1+d1;
		}
		$("#t_messages_message").val(e);
		$("#messages_supplements_main_form").clearForm();
		$("#supplement_origin_orders").val('');
		$("#messages_supplements_header").hide();
		$("#supplements_list_dialog").dialog('close');
	});
	$("#cancel_orders_supplements_helper1").click(function() {
		$("#messages_supplements_main_form").clearForm();
		$("#supplement_origin_orders").val('');
		$("#messages_supplements_header").hide();
		$("#supplements_list_dialog").dialog('close');
	});
	$('#save_oh_supplements').click(function(){
		$.ajax({
			type: "POST",
			url: "ajaxencounter/oh-save1/supplements",
			success: function(data){
				$.jGrowl(data);
				$("#supplement_origin_orders").val('');
				$("#oh_supplements_header").hide('fast');
				$("#supplements_list_dialog").dialog('close');
				check_oh_status();
			}
		});
	});
});
$(document).ready(function() {
	$("#allergies_list_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		open: function(event, ui) {
			jQuery("#allergies").jqGrid('GridUnload');
			jQuery("#allergies").jqGrid({
				url: "ajaxcommon/allergies",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Active','Medication','Reason'],
				colModel:[
					{name:'allergies_id',index:'allergies_id',width:1,hidden:true},
					{name:'allergies_date_active',index:'allergies_date_active',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'allergies_med',index:'allergies_med',width:310},
					{name:'allergies_reaction',index:'allergies_reaction',width:320}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#allergies_pager'),
				sortname: 'allergies_date_active',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Allergies",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#allergies_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#allergies_inactive").jqGrid('GridUnload');
			jQuery("#allergies_inactive").jqGrid({
				url: "ajaxcommon/allergies-inactive",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Active','Medication','Reason'],
				colModel:[
					{name:'allergies_id',index:'allergies_id',width:1,hidden:true},
					{name:'allergies_date_active',index:'allergies_date_active',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'allergies_med',index:'allergies_med',width:310},
					{name:'allergies_reaction',index:'allergies_reaction',width:320}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#allergies_inactive_pager'),
				sortname: 'allergies_date_active',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption: "Inactive Allergies",
			 	hiddengrid: true,
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#allergies_inactive_pager',{search:false,edit:false,add:false,del:false});
		},
		close: function(event, ui) {
			$('#edit_allergy_form').clearForm();
			menu_update('allergies');
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#edit_allergy_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 300, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#allergies_med").autocomplete({
				source: function (req, add){
					if (req.term in allergies_cache){
						add(allergies_cache[req.term]);
						return;
					}
					$.ajax({
						url: "ajaxsearch/rx-name",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								allergies_cache[req.term] = data.message;
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#allergies_reaction").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/reaction",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#edit_allergy_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_allergy_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/edit-allergy",
							data: str,
							dataType: "json",
							success: function(data){
								$.jGrowl(data.message);
								reload_grid('allergies');
								reload_grid('nosh_allergies');
								$('#edit_allergy_form').clearForm();
								$('#edit_allergy_dialog').dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#edit_allergy_form').clearForm();
				$('#edit_allergy_dialog').dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#rcopia_update_allergies").button({icons: {primary: "ui-icon-link"}}).click(function() {
		$.ajax({
			type: "POST",
			url: "ajaxchart/rcopia-update-allergy",
			success: function(data){
				$.jGrowl(data);
				reload_grid('allergies');
				reload_grid('allergies_inactive');
			}
		});
	});
	$(".allergies_list").click(function() {
		$("#allergies_list_dialog").dialog('open');
	});
	$("#allergies_date_active").mask("99/99/9999");
	$("#allergies_date_active").datepicker();
	$("#add_allergy").click(function(){
		$('#edit_allergy_form').clearForm();
		var currentDate = getCurrentDate();
		$('#allergies_date_active').val(currentDate);
		$('#edit_allergy_dialog').dialog('option', 'title', "Add Allergy");
		$('#edit_allergy_dialog').dialog('open');
		$("#allergies_med").focus();
	});
	$("#edit_allergy").click(function(){
		var item = jQuery("#allergies").getGridParam('selrow');
		if(item){
			jQuery("#allergies").GridToForm(item,"#edit_allergy_form");
			var date = $('#allergies_date_active').val();
			var edit_date = editDate(date);
			$('#allergies_date_active').val(edit_date);
			$('#edit_allergy_dialog').dialog('option', 'title', "Edit Allergy");
			$('#edit_allergy_dialog').dialog('open');
			$("#allergies_med").focus();
		} else {
			$.jGrowl("Please select allergy to edit!")
		}
	});
	$("#inactivate_allergy").click(function(){
		var item = jQuery("#allergies").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxchart/inactivate-allergy",
				data: "allergies_id=" + item,
				success: function(data){
					$.jGrowl(data);
					reload_grid('allergies');
					reload_grid('allergies_inactive');
				}
			});
		} else {
			$.jGrowl("Please select allergy to inactivate!")
		}
	});
	$("#delete_allergy").click(function(){
		var item = jQuery("#allergies").getGridParam('selrow');
		if(item){
			if(confirm('Are you sure you want to delete this allergy?')){
				$.ajax({
					type: "POST",
					url: "ajaxchart/delete-allergy",
					data: "allergies_id=" + item,
					success: function(data){
						$.jGrowl(data);
						reload_grid('allergies');
					}
				});
			}
		} else {
			$.jGrowl("Please select allergy to delete!")
		}
	});
	$("#reactivate_allergy").click(function(){
		var item = jQuery("#allergies_inactive").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxchart/reactivate-allergy",
				data: "allergies_id=" + item,
				success: function(data){
					$.jGrowl(data);
					reload_grid('allergies');
					reload_grid('allergies_inactive');
				}
			});
		} else {
			$.jGrowl("Please select allergy to inactivate!")
		}
	});
	$('#save_oh_allergies').click(function(){
		$.ajax({
			type: "POST",
			url: "ajaxencounter/oh-save1/allergies",
			success: function(data){
				$.jGrowl(data);
				$("#save_oh_allergies").hide();
				$("#allergies_list_dialog").dialog('close');
				check_oh_status();
			}
		});
	});
});
$(document).ready(function() {
	$("#alerts_list_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		open: function(event, ui) {
			jQuery("#alerts").jqGrid('GridUnload');
			jQuery("#alerts").jqGrid({
				url:"ajaxchart/alerts",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Due Date','Alert','Description'],
				colModel:[
					{name:'alert_id',index:'alert_id',width:1,hidden:true},
					{name:'alert_date_active',index:'alert_date_active',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'alert',index:'alert',width:200},
					{name:'alert_description',index:'alert_description',width:430}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#alerts_pager1'),
				sortname: 'alert_date_active',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Pending Alerts and Tasks",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#alerts_pager1',{search:false,edit:false,add:false,del:false});
			jQuery("#alerts_complete").jqGrid('GridUnload');
			jQuery("#alerts_complete").jqGrid({
				url:"ajaxchart/alerts-complete",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Due Date','Alert','Description'],
				colModel:[
					{name:'alert_id',index:'alert_id',width:1,hidden:true},
					{name:'alert_date_active',index:'alert_date_active',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'alert',index:'alert',width:200},
					{name:'alert_description',index:'alert_description',width:430}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#alerts_complete_pager'),
				sortname: 'alert_date_active',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Completed Alerts and Tasks",
			 	height: "100%",
			 	hiddengrid: true,
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#alerts_complete_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#alerts_not_complete").jqGrid('GridUnload');
			jQuery("#alerts_not_complete").jqGrid({
				url:"ajaxchart/alerts-not-complete",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Due Date','Alert','Description','Reason'],
				colModel:[
					{name:'alert_id',index:'alert_id',width:1,hidden:true},
					{name:'alert_date_active',index:'alert_date_active',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'alert',index:'alert',width:150},
					{name:'alert_description',index:'alert_description',width:280},
					{name:'alert_reason_not_complete',index:'alert_reason_not_complete',width:195}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#alerts_not_complete_pager'),
				sortname: 'alert_date_active',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Alerts and Tasks Not Completed",
			 	hiddengrid: true,
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#alerts_not_complete_pager',{search:false,edit:false,add:false,del:false});
		},
		close: function(event, ui) {
			menu_update('alerts');
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#edit_alert_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 300, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#edit_alert_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_alert_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/edit-alert",
							data: str,
							success: function(data){
								$.jGrowl(data);
								reload_grid('alerts');
								$('#edit_alert_form').clearForm();
								$('#edit_alert_dialog').dialog('close');
								noshdata.alert_id = '';
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#edit_alert_form').clearForm();
				$('#edit_alert_dialog').dialog('close');
				noshdata.alert_id = '';
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#edit_alert_dialog1").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 300, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#alert").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/alert",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#alert_provider").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/users1",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3,
				select: function(event, ui){
					$('#alert_provider_id').val(ui.item.id);
				}
			});
			$("#alert_description").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/alert-description",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#alert_reason_not_complete").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/alert-reason-not-complete",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#edit_alert_form1").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_alert_form1").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/incomplete-alert",
							data: str,
							success: function(data){
								$.jGrowl(data);
								reload_grid('alerts');
								reload_grid('alerts_not_complete');
								var item = $("#alert_id1").val();
								$('#edit_alert_form1').clearForm();
								$('#edit_alert_dialog1').dialog('close');
								noshdata.alert_id = '';
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#edit_alert_form1').clearForm();
				$('#edit_alert_dialog1').dialog('close');
				noshdata.alert_id = '';
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$(".alerts_list").click(function() {
		$("#alerts_list_dialog").dialog('open');
	});
	$("#alert_date_active").mask("99/99/9999");
	$("#alert_date_active").datepicker();
	$(".add_alert").click(function(){
		$('#edit_alert_form').clearForm();
		var currentDate = getCurrentDate();
		$('#alert_date_active').val(currentDate);
		$('#edit_alert_dialog').dialog('open');
		$("#alert").focus();
	});
	$("#edit_alert").click(function(){
		var item = jQuery("#alerts").getGridParam('selrow');
		if(item){
			jQuery("#alerts").GridToForm(item,"#edit_alert_form");
			var date = $('#alert_date_active').val();
			var edit_date = editDate(date);
			$('#alert_date_active').val(edit_date);
			$('#edit_alert_dialog').dialog('open');
			$("#alert").focus();
		} else {
			$.jGrowl("Please select alert to edit!")
		}
	});
	$("#complete_alert").click(function(){
		var item = jQuery("#alerts").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxchart/complete-alert",
				data: "alert_id=" + item,
				success: function(data){
					$.jGrowl(data);
					reload_grid('alerts');
					reload_grid('alerts_complete');
				}
			});
		} else {
			$.jGrowl("Please select alert to mark as complete!")
		}
	});
	$("#incomplete_alert").click(function(){
		var item = jQuery("#alerts").getGridParam('selrow');
		if(item){
			$("#alert_id1").val(item);
			$('#edit_alert_dialog1').dialog('open');
		} else {
			$.jGrowl("Please select alert to mark as incomplete!")
		}
	});
	$("#delete_alert").click(function(){
		var item = jQuery("#alerts").getGridParam('selrow');
		if(item){
			if(confirm('Are you sure you want to delete this alert?')){
				$.ajax({
					type: "POST",
					url: "ajaxchart/delete-alert",
					data: "alert_id=" + item,
					success: function(data){
						$.jGrowl(data);
						reload_grid('alerts');
					}
				});
			}
		} else {
			$.jGrowl("Please select alert to delete!")
		}
	});
	if (noshdata.alert_id != '') {
		$("#alerts_list_dialog").dialog('open');
		$.ajax({
			type: "POST",
			url: "ajaxdashboard/get-alert/" + noshdata.alert_id,
			dataType: "json",
			success: function(data){
				$.each(data, function(key, value){
					$("#edit_alert_form :input[name='" + key + "']").val(value);
				});
				var date = $('#alert_date_active').val();
				var edit_date = editDate1(date);
				$('#alert_date_active').val(edit_date);
				$('#edit_alert_dialog').dialog('open');
				$("#alert").focus();
				noshdata.alert_id = '';
			}
		});
	}
	$("#alerts_pending_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		open: function(event, ui) {
			jQuery("#alerts_pending").jqGrid('GridUnload');
			jQuery("#alerts_pending").jqGrid({
				url:"ajaxchart/alerts-pending",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Due Date','Alert','Description','Orders ID'],
				colModel:[
					{name:'alert_id',index:'alert_id',width:1,hidden:true},
					{name:'alert_date_active',index:'alert_date_active',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'alert',index:'alert',width:1,hidden:true},
					{name:'alert_description',index:'alert_description',width:630},
					{name:'orders_id',index:'orders_id',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#alerts_pending_pager'),
				sortname: 'alert_date_active',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Pending Orders",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#alerts_pending_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#past_orders_lab").jqGrid('GridUnload');
			jQuery("#past_orders_lab").jqGrid({
				url: "ajaxchart/orders-list/labs",
				postData: {t_messages_id:'all'},
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Tests','Diagnosis','Location1','Location','Obtained','Insurance','Provider','Order Date'],
				colModel:[
					{name:'orders_id',index:'orders_id',width:1,hidden:true},
					{name:'orders_labs',index:'orders_labs',width:430},
					{name:'orders_labs_icd',index:'orders_labs_icd',width:200},
					{name:'address_id',index:'address_id',hidden:true},
					{name:'displayname',index:'displayname',width:100},
					{name:'orders_labs_obtained',index:'orders_labs_obtained',width:1,hidden:true},
					{name:'orders_insurance',index:'orders_insurance',hidden:true},
					{name:'encounter_provider',index:'encounter_provider',hidden:true},
					{name:'orders_pending_date',index:'orders_pending_date',hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#past_orders_lab_pager'),
				sortname: 'orders_id',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Past Lab Orders - Click on Tests column to resend the order.",
			 	height: "100%",
			 	hiddengrid: true,
			 	jsonReader: { repeatitems : false, id: "0" },
			 	onCellSelect: function(rowid,iCol,cellcontent,e){
			 		if (iCol == 1) {
						$("#messages_lab_orders_id").val(rowid);
						$('#messages_lab_choice').html("Choose an action for the lab order, reference number " + rowid);
						$("#messages_lab_action_dialog").dialog('open');
			 		}
				}
			}).navGrid('#past_orders_lab_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#past_orders_rad").jqGrid('GridUnload');
			jQuery("#past_orders_rad").jqGrid({
				url: "ajaxchart/orders-list/radiology",
				postData: {t_messages_id:'all'},
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Tests','Diagnosis','Location1','Location','Obtained','Insurance','Provider','Order Date'],
				colModel:[
					{name:'orders_id',index:'orders_id',width:1,hidden:true},
					{name:'orders_radiology',index:'orders_radiology',width:430},
					{name:'orders_radiology_icd',index:'orders_radiology_icd',width:200},
					{name:'address_id',index:'address_id',hidden:true},
					{name:'displayname',index:'displayname',width:100},
					{name:'orders_labs_obtained',index:'orders_labs_obtained',width:1,hidden:true},
					{name:'orders_insurance',index:'orders_insurance',hidden:true},
					{name:'encounter_provider',index:'encounter_provider',hidden:true},
					{name:'orders_pending_date',index:'orders_pending_date',hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#past_orders_rad_pager'),
				sortname: 'orders_id',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Past Imaging Orders - Click on Tests column to resend the order.",
			 	height: "100%",
			 	hiddengrid: true,
			 	jsonReader: { repeatitems : false, id: "0" },
			 	onCellSelect: function(rowid,iCol,cellcontent,e){
			 		if (iCol == 1) {
						$("#messages_rad_orders_id").val(rowid);
						$('#messages_rad_choice').html("Choose an action for the radiology order, reference number " + rowid);
						$("#messages_rad_action_dialog").dialog('open');
			 		}
				}
			}).navGrid('#past_orders_rad_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#past_orders_cp").jqGrid('GridUnload');
			jQuery("#past_orders_cp").jqGrid({
				url: "ajaxchart/orders-list/cp",
				postData: {t_messages_id:'all'},
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Tests','Diagnosis','Location1','Location','Obtained','Insurance','Provider','Order Date'],
				colModel:[
					{name:'orders_id',index:'orders_id',width:1,hidden:true},
					{name:'orders_cp',index:'orders_cp',width:430},
					{name:'orders_cp_icd',index:'orders_cp_icd',width:200},
					{name:'address_id',index:'address_id',hidden:true},
					{name:'displayname',index:'displayname',width:100},
					{name:'orders_labs_obtained',index:'orders_labs_obtained',width:1,hidden:true},
					{name:'orders_insurance',index:'orders_insurance',hidden:true},
					{name:'encounter_provider',index:'encounter_provider',hidden:true},
					{name:'orders_pending_date',index:'orders_pending_date',hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#past_orders_cp_pager'),
				sortname: 'orders_id',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Past Cardiopulmonary Orders - Click on Tests column to resend the order.",
			 	height: "100%",
			 	hiddengrid: true,
			 	jsonReader: { repeatitems : false, id: "0" },
			 	onCellSelect: function(rowid,iCol,cellcontent,e){
			 		if (iCol == 1) {
						$("#messages_cp_orders_id").val(rowid);
						$('#messages_cp_choice').html("Choose an action for the cardiopulmonary order, reference number " + rowid);
						$("#messages_cp_action_dialog").dialog('open');
			 		}
				}
			}).navGrid('#past_orders_cp_pager',{search:false,edit:false,add:false,del:false});
		},
		close: function(event, ui) {
			menu_update('alerts');
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#order_list").click(function(){
		$("#process_pending_order").hide();
		$("#pending_create_encounter").show();
		$("#alerts_pending_dialog").dialog('open');
	});
	$("#process_pending_order").click(function(){
		var item = jQuery("#alerts_pending").getGridParam('selrow');
		noshdata.pending_orders_id = jQuery("#alerts_pending").getCell(item, 4);
		pending_order_load(noshdata.pending_orders_id);
	});
	$("#pending_create_encounter").click(function(){
		var item = jQuery("#alerts_pending").getGridParam('selrow');
		if (item) {
			noshdata.pending_orders_id = jQuery("#alerts_pending").getCell(item, 4);
			$("#detail_encounter_number").html("");
			$("#encounter_template").val('clinicalsupport');
			$("#encounter_location").val(noshdata.default_pos);
			var currentDate = getCurrentDate();
			var currentTime = getCurrentTime();
			$("#encounter_date").val(currentDate);
			$("#encounter_time").val(currentTime);
			$("#encounter_type").removeOption(/./);
			$("#encounter_type").addOption({'':'Choose appointment to associate encounter!'}, false);
			if (noshdata.group_id == '2') {
				$(".new_encounter_dialog_encounter_provider_div").hide();
			} else {
				$(".new_encounter_dialog_encounter_provider_div").show();
			}
			$("#encounter_condition_work").val('No');
			$("#encounter_condition_auto").val('No');
			$("#encounter_condition_other").val('No');
			$(".referring_provider_div").hide();
			$(".detail_encounter_noshow").show();
			$("#alerts_pending_dialog").dialog('close');
			$("#new_encounter_dialog").dialog('open');
		} else {
			$.jGrowl('Select an order!');
		}
	});
});
$(document).ready(function() {
	$("#immunizations_list_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		open: function(event, ui) {
			jQuery("#immunizations").jqGrid('GridUnload');
			jQuery("#immunizations").jqGrid({
				url:"ajaxchart/immunizations",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Given','Immunization','Sequence','Given Elsewhere','Body Site','Dosage','Unit','Route','Lot Number','Manufacturer','Expiration Date','VIS'],
				colModel:[
					{name:'imm_id',index:'imm_id',width:1,hidden:true},
					{name:'imm_date',index:'imm_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'imm_immunization',index:'imm_immunization',width:410},
					{name:'imm_sequence',index:'imm_sequence',width:65},
					{name:'imm_elsewhere',index:'imm_elsewhere',width:150},
					{name:'imm_body_site',index:'imm_body_site',width:1,hidden:true},
					{name:'imm_dosage',index:'imm_dosage',width:1,hidden:true},
					{name:'imm_dosage_unit',index:'imm_dosage_unit',width:1,hidden:true},
					{name:'imm_route',index:'imm_route',width:1,hidden:true},
					{name:'imm_lot',index:'imm_lot',width:1,hidden:true},
					{name:'imm_manufacturer',index:'imm_manufacturer',width:1,hidden:true},
					{name:'imm_expiration',index:'imm_expiration',width:1,hidden:true},
					{name:'imm_vis',index:'imm_vis',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#immunizations_pager'),
				sortname: 'imm_immunization',
			 	viewrecords: true,
			 	sortorder: "asc",
			 	caption:"Immunizations",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#immunizations_pager',{search:false,edit:false,add:false,del:false});
			$.ajax({
				type: "POST",
				url: "ajaxchart/get-imm-notes",
				success: function(data){
					$('#imm_notes_div').html(data);
				}
			});
		},
		close: function(event, ui) {
			$('#edit_immunization_form').clearForm();
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#immunizations_vis_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 600, 
		draggable: false,
		resizable: false,
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$(".immunizations_list").click(function() {
		$("#immunizations_list_dialog").dialog('open');
		$('#orders_imm_header').hide();
		$('#imm_order').hide();
		$('#imm_menu').show();
	});
	$(".class_imm_date").mask("99/99/9999").datepicker();
	$(".class_imm_expiration").mask("99/99/9999").datepicker();
	$(".class_imm_route").addOption({"":"","intramuscularly":"IM","subcutaneously":"SC","by mouth":"PO","intravenously":"IV"}, false).selectOptions();
	$(".class_imm_sequence").addOption({"":"","1":"First","2":"Second","3":"Third","4":"Fourth","5":"Fifth"}, false).selectOptions();
	$(".class_imm_body_site").addOption({"Right Deltoid":"Right Deltoid","Left Deltoid":"Left Deltoid","Right Thigh":"Right Thigh","Left Thigh":"Left Thigh"}, false).selectOptions();
	$("#imm_immunization1").click(function(){
		$("#imm_immunization1").autocomplete("search", " ");
	});
	$("#add_immunization").click(function(){
		$('#edit_immunization_form').clearForm();
		var currentDate = getCurrentDate();
		$('#imm_date').val(currentDate);
		$('#edit_immunization_dialog').dialog('option', 'title', "Add Immunization");
		$('#edit_immunization_dialog').dialog('open');
		$("#imm_immunization").focus();
	});
	$("#edit_immunization").click(function(){
		var item = jQuery("#immunizations").getGridParam('selrow');
		if(item){
			jQuery("#immunizations").GridToForm(item,"#edit_immunization_form");
			var date = $('#imm_date').val();
			var edit_date = editDate(date);
			$('#imm_date').val(edit_date);
			var expiration = $('#imm_expiration').val();
			var edit_expiration = editDate1(expiration);
			$('#imm_expiration').val(edit_expiration);
			$('#edit_immunization_dialog').dialog('option', 'title', "Edit Immunization");
			$('#edit_immunization_dialog').dialog('open');
			$("#imm_immunization").focus();
		} else {
			$.jGrowl("Please select immunization to edit!")
		}
	});
	$("#delete_immunization").click(function(){
		var item = jQuery("#immunizations").getGridParam('selrow');
		if(item){
			if(confirm('Are you sure you want to delete this immunization?')){
				$.ajax({
					type: "POST",
					url: "ajaxchart/delete-immunization",
					data: "imm_id=" + item,
					success: function(data){
						$.jGrowl(data);
						reload_grid("immunizations");
					}
				});
			}
		} else {
			$.jGrowl("Please select immunization to delete!")
		}
	});
	$("#add_immunization1").click(function(){
		$('#edit_immunization_form1').clearForm();
		var currentDate = getCurrentDate();
		$('#imm_date1').val(currentDate);
		$('#edit_immunization_dialog1').dialog('option', 'title', "Add Immunization");
		$('#edit_immunization_dialog1').dialog('open');
		$("#imm_immunization1").focus();
	});
	$("#edit_immunization1").click(function(){
		var item = jQuery("#immunizations").getGridParam('selrow');
		if(item){
			jQuery("#immunizations").GridToForm(item,"#edit_immunization_form1");
			var date = $('#imm_date1').val();
			var edit_date = editDate(date);
			$('#imm_date1').val(edit_date);
			$('#edit_immunization_dialog1').dialog('option', 'title', "Edit Immunization");
			$('#edit_immunization_dialog1').dialog('open');
			$("#imm_immunization1").focus();
		} else {
			$.jGrowl("Please select immunization to edit!")
		}
	});
	$("#delete_immunization1").click(function(){
		var item = jQuery("#immunizations").getGridParam('selrow');
		if(item){
			if(confirm('Are you sure you want to delete this immunization?')){
				$.ajax({
					type: "POST",
					url: "ajaxchart/delete-immunization",
					data: "imm_id=" + item,
					success: function(data){
						$.jGrowl(data);
						reload_grid("immunizations");
					}
				});
			}
		} else {
			$.jGrowl("Please select immunization to delete!")
		}
	});
	$("#vis_immunization1").click(function(){
		$("#immunizations_vis_dialog").dialog('open');
	});
	$("#consent_immunization1").click(function(){
		var item = $("#consent_vaccine_list").val();
		if(item) {
			$.ajax({
				type: "POST",
				url: "ajaxchart/consent-immunizations",
				data: "vaccine_list=" + item,
				async: false,
				success: function(data){
					if (data == "OK") {
						noshdata.success_doc = true;
					} else {
						$.jGrowl(data);
					}
				}
			});
			if (noshdata.success_doc == true) {
				window.open("print_consent");
				noshdata.success_doc = false;
			}
		} else {
			$.jGrowl("Please click at least one vaccine information sheet!")
		}
	});
	$("#vis_dtap").click(function(){
		var old = $("#consent_vaccine_list").val();
		if (old != '') {
			var a = ', ';
		} else {
			var a = '';
		}
		var b = 'DTaP';
		$("#consent_vaccine_list").val(old+a+b);
	});
	$("#vis_hep_a").click(function(){
		var old = $("#consent_vaccine_list").val();
		if (old != '') {
			var a = ', ';
		} else {
			var a = '';
		}
		var b = 'Hepatitis A';
		$("#consent_vaccine_list").val(old+a+b);
	});
	$("#vis_hep_b").click(function(){
		var old = $("#consent_vaccine_list").val();
		if (old != '') {
			var a = ', ';
		} else {
			var a = '';
		}
		var b = 'Hepatitis B';
		$("#consent_vaccine_list").val(old+a+b);
	});
	$("#vis_hib").click(function(){
		var old = $("#consent_vaccine_list").val();
		if (old != '') {
			var a = ', ';
		} else {
			var a = '';
		}
		var b = 'Hib';
		$("#consent_vaccine_list").val(old+a+b);
	});
	$(".vis_hpv").click(function(){
		var old = $("#consent_vaccine_list").val();
		if (old != '') {
			var a = ', ';
		} else {
			var a = '';
		}
		var b = 'HPV';
		$("#consent_vaccine_list").val(old+a+b);
	});
	$("#vis_flulive").click(function(){
		var old = $("#consent_vaccine_list").val();
		if (old != '') {
			var a = ', ';
		} else {
			var a = '';
		}
		var b = 'Flu (intranasal, live)';
		$("#consent_vaccine_list").val(old+a+b);
	});
	$("#vis_flu").click(function(){
		var old = $("#consent_vaccine_list").val();
		if (old != '') {
			var a = ', ';
		} else {
			var a = '';
		}
		var b = 'Flu (inactivated)';
		$("#consent_vaccine_list").val(old+a+b);
	});
	$("#vis_mmr").click(function(){
		var old = $("#consent_vaccine_list").val();
		if (old != '') {
			var a = ', ';
		} else {
			var a = '';
		}
		var b = 'MMR';
		$("#consent_vaccine_list").val(old+a+b);
	});
	$("#vis_mening").click(function(){
		var old = $("#consent_vaccine_list").val();
		if (old != '') {
			var a = ', ';
		} else {
			var a = '';
		}
		var b = 'Meningococcal';
		$("#consent_vaccine_list").val(old+a+b);
	});
	$("#vis_pcv").click(function(){
		var old = $("#consent_vaccine_list").val();
		if (old != '') {
			var a = ', ';
		} else {
			var a = '';
		}
		var b = 'PCV13';
		$("#consent_vaccine_list").val(old+a+b);
	});
	$("#vis_ppv").click(function(){
		var old = $("#consent_vaccine_list").val();
		if (old != '') {
			var a = ', ';
		} else {
			var a = '';
		}
		var b = 'Pneumococcal';
		$("#consent_vaccine_list").val(old+a+b);
	});
	$("#vis_ipv").click(function(){
		var old = $("#consent_vaccine_list").val();
		if (old != '') {
			var a = ', ';
		} else {
			var a = '';
		}
		var b = 'Polio';
		$("#consent_vaccine_list").val(old+a+b);
	});
	$("#vis_rotavirus").click(function(){
		var old = $("#consent_vaccine_list").val();
		if (old != '') {
			var a = ', ';
		} else {
			var a = '';
		}
		var b = 'Rotavirus';
		$("#consent_vaccine_list").val(old+a+b);
	});
	$("#vis_shingles").click(function(){
		var old = $("#consent_vaccine_list").val();
		if (old != '') {
			var a = ', ';
		} else {
			var a = '';
		}
		var b = 'Shingles';
		$("#consent_vaccine_list").val(old+a+b);
	});
	$("#vis_tdap").click(function(){
		var old = $("#consent_vaccine_list").val();
		if (old != '') {
			var a = ', ';
		} else {
			var a = '';
		}
		var b = 'Tdap';
		$("#consent_vaccine_list").val(old+a+b);
	});
	$("#vis_td").click(function(){
		var old = $("#consent_vaccine_list").val();
		if (old != '') {
			var a = ', ';
		} else {
			var a = '';
		}
		var b = 'Td';
		$("#consent_vaccine_list").val(old+a+b);
	});
	$("#vis_varicella").click(function(){
		var old = $("#consent_vaccine_list").val();
		if (old != '') {
			var a = ', ';
		} else {
			var a = '';
		}
		var b = 'Varicella';
		$("#consent_vaccine_list").val(old+a+b);
	});
	
	$("#edit_immunization_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#imm_immunization").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/imm",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3,
				select: function(event, ui){
					$("#imm_cvxcode").val(ui.item.cvx);
				}
			});
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#edit_immunization_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_immunization_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/edit-immunization",
							data: str,
							dataType: "json",
							success: function(data){
								$.jGrowl(data.message);
								reload_grid("immunizations");
								reload_grid("nosh_imm");
								$('#edit_immunization_form').clearForm();
								$('#edit_immunization_dialog').dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#edit_immunization_form').clearForm();
				$('#edit_immunization_dialog').dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#edit_immunization_dialog1").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#imm_immunization1").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/imm1",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 0,
				select: function(event, ui){
					if (ui.item.value != '') {
						$("#imm_cpt").val(ui.item.cpt);
						var edit_date = editDate1(ui.item.expiration);
						$("#imm_expiration1").val(edit_date);
						$("#imm_manufacturer1").val(ui.item.manufacturer);
						$("#imm_lot1").val(ui.item.lot);
						$("#imm_cvxcode1").val(ui.item.cvx);
						$("#imm_vaccine_id").val(ui.item.vaccine_id);
					}
				}
			});
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#edit_immunization_form1").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_immunization_form1").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/edit-immunization1",
							data: str,
							dataType: "json",
							success: function(data){
								$.jGrowl(data.message);
								reload_grid("immunizations");
								var old = $('#imm_text').val();
								$('#imm_text').val(old + '\n' + data.medtext);
								$('#edit_immunization_form1').clearForm();
								$('#edit_immunization_dialog1').dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#edit_immunization_form1').clearForm();
				$('#edit_immunization_dialog1').dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$('#save_orders_imm').click(function(){
		var a = $("#imm_text").val();
		if(a){
			var a1 = a + '\n\n';
		} else {
			var a1 = '';
		}
		$.ajax({
			type: "POST",
			url: "ajaxencounter/orders-imm-save",
			data: "rx_immunizations=" + a1,
			success: function(data){
				$.jGrowl(data);
				$("#orders_imm_header").hide();
				$("#imm_text").val('');
				$('#imm_order').hide();
				$('#imm_menu').hide();
				$("#immunizations_list_dialog").dialog('close');
				checkorders();
			}
		});
	});
	$("#cancel_orders_imm_helper").click(function() {
		$("#orders_imm_header").hide('fast');
		$('#edit_immunization_form1').clearForm();
		$("#imm_text").val('');
		$('#imm_order').hide('fast');
		$('#imm_menu').hide('fast');
		$("#immunizations_list_dialog").dialog('close');
	});
	$("#print_immunizations").click(function() {
		window.open("print_immunization_list");
	});
	$("#print_immunizations1").click(function() {
		window.open("print_immunization_list");
	});
	$("#csv_immunizations").click(function() {
		window.open("csv_immunization");
	});
	$("#csv_immunizations1").click(function() {
		window.open("csv_immunization");
	});
	$("#imm_notes_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 300, 
		width: 600, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$('#imm_notes_form').clearForm();
			$.ajax({
				type: "POST",
				url: "ajaxchart/get-imm-notes1",
				success: function(data){
					$('#imm_notes').val(data.trim());
					$('#imm_notes_old').val(data.trim())
				}
			});
		},
		buttons: {
			'Save': function() {
				var str = $("#imm_notes_form").serialize();
				if(str){
					$.ajax({
						type: "POST",
						url: "ajaxchart/edit-imm-notes",
						data: str,
						success: function(data){
							$.jGrowl(data);
							$.ajax({
								type: "POST",
								url: "ajaxchart/get-imm-notes",
								success: function(data){
									$('#imm_notes_div').html(data);
								}
							});
							$('#imm_notes_form').clearForm();
							$('#imm_notes_dialog').dialog('close');
						}
					});
				} else {
					$.jGrowl("Please complete the form");
				}
			},
			Cancel: function() {
				$('#imm_notes_form').clearForm();
				$('#imm_notes_dialog').dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#imm_notes_button").click(function(){
		$('#imm_notes_dialog').dialog('open');
	});
});
$(document).ready(function() {
	function update_release_stats(hippa_id) {
		$.ajax({
			type: "POST",
			url: "ajaxchart/get-release-stats",
			data: "hippa_id=" + hippa_id,
			success: function(data){
				$("#print_release_stats").html(data);
			}
		});
	}
	$("#print_list_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		open: function(event, ui) {
			jQuery("#records_release").jqGrid('GridUnload');
			jQuery("#records_release").jqGrid({
				url: "ajaxchart/records-release",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','Reason','Released To','Role'],
				colModel:[
					{name:'hippa_id',index:'hippa_id',width:1,hidden:true},
					{name:'hippa_date_release',index:'hippa_date_release',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'hippa_reason',index:'hippa_reason',width:400},
					{name:'hippa_provider',index:'hippa_provider',width:200},
					{name:'hippa_role',index:'hippa_role',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#records_release_pager'),
				sortname: 'hippa_date_release',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"View Past Records Releases",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#records_release_pager',{search:false,edit:false,add:false,del:false});
			$.ajax({
				url: "ajaxsearch/ref-provider1/all",
				dataType: "json",
				type: "POST",
				success: function(data){
					$("#print_chart_form_provider").html(data.html);
					loadbuttons();
				}
			});
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#print_all_records").click(function(){
		$("#nosh_print1").show();
		$("#nosh_print2").hide();
		$("#nosh_print3").hide();
		$("#print_accordion_action").hide();
		$("#print_accordion").accordion("option", "active", 2);
	});
	$("#print_1year_records").click(function(){
		$("#nosh_print1").hide();
		$("#nosh_print2").show();
		$("#nosh_print3").hide();
		$("#print_accordion_action").hide();
		$("#print_accordion").accordion("option", "active", 2);
	});
	$("#print_queue_records").click(function(){
		$("#nosh_print1").hide();
		$("#nosh_print2").hide();
		$("#nosh_print3").show();
		$("#print_accordion_action").hide();
		$("#print_accordion").accordion("option", "active", 1);
	});
	$("#print_ccda").click(function(){
		var hippa_id = $("#print_hippa_id").val();
		window.open("ccda/" + hippa_id);
	});
	$("#print_list").click(function() {
		$("#print_list_dialog").dialog('open');
	});
	$("#print_chart").click(function() {
		var currentDate = getCurrentDate();
		$('#hippa_date_release').val(currentDate);
		$("#print_chart_dialog").dialog('open');
		$('#hippa_reason').focus();
	});
	$("#new_records_release").click(function() {
		var currentDate = getCurrentDate();
		$('#hippa_date_release').val(currentDate);
		$("#print_chart_dialog").dialog('open');
		$('#hippa_reason').focus();
	});
	$("#edit_records_release").click(function() {
		var item = jQuery("#records_release").getGridParam('selrow');
		if(item){
			$("#print_hippa_id").val(item);
			$("#print_accordion").accordion("option", "active", 0);
			$("#print_chart2_dialog").dialog('open');
		} else {
			$.jGrowl("Please select item!");
		}
	});
	$("#print_accordion").accordion({
		heightStyle: "content",
		activate: function (event, ui) {
			var id = ui.newPanel[0].id;
			$("#" + id + " .text").first().focus();
		}
	});
	$("#print_chart_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 300, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#hippa_reason1").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/hippa-reason",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#hippa_reason").focus();
		},
		buttons: {
			'Continue': function() {
				var bValid = true;
				$("#print_chart_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#print_chart_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/print-chart-save",
							data: str,
							success: function(data){
								$("#print_hippa_id").val(data.trim());
								$("#print_chart_form").clearForm();
								$("#print_chart_dialog").dialog('close');
								reload_grid("records_release");
								if ($("#print_chart2_dialog").dialog("isOpen")===true) {
									update_release_stats(data);
								} else {
									$("#print_accordion").accordion("option", "active", 0);
									$("#print_chart2_dialog").dialog('open');
								}
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$("#print_chart_form").clearForm();
				$("#print_chart_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#print_chart2_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		open: function (event, ui) {
			$("#print_accordion_action").show();
			var hippa_id = $("#print_hippa_id").val()
			jQuery("#print_items_queue").jqGrid('GridUnload');
			jQuery("#print_items_queue").jqGrid({
				url:"ajaxchart/print-queue/" + hippa_id,
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','Type','Description'],
				colModel:[
					{name:'hippa_id',index:'hippa_id',width:1,hidden:true},
					{name:'date',index:'date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'type',index:'type',width:200},
					{name:'description',index:'description',width:400}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#print_items_queue_pager'),
				sortname: 'hippa_id',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Print Items Queue",
			 	height: "100%"
			}).navGrid('#print_items_queue_pager',{search:false,edit:false,add:false,del:false});
			update_release_stats(hippa_id);
			jQuery("#print_encounters").jqGrid('GridUnload');
			jQuery("#print_encounters").jqGrid({
				url:"ajaxchart/print-encounters",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','Chief Complaint','Provider'],
				colModel:[
					{name:'eid',index:'eid',width:1,hidden:true},
					{name:'encounter_DOS',index:'encounter_DOS',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'encounter_cc',index:'encounter_cc',width:475},
					{name:'encounter_provider',index:'encounter_provider', width:100}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#print_encounters_pager'),
				sortname: 'encounter_DOS',
				viewrecords: true,
				sortorder: "desc",
				caption:"Encounters",
				height: "100%",
				multiselect: true,
				multiboxonly: true,
				hiddengrid: true,
				onCellSelect: function(id,iCol) {
					if (iCol > 0) {
						$("#print_encounter_view").load('ajaxchart/modal-view2/' + id);
						$("#print_encounter_view_dialog").dialog('open');
					}
				},
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#print_encounters_pager',{search:false,edit:false,add:false,del:false
			}).navButtonAdd('#print_encounters_pager',{
				caption:"Add Selected to Print Queue", 
				buttonicon:"ui-icon-plus", 
				onClickButton: function(){ 
					var id = jQuery("#print_encounters").getGridParam('selarrrow');
					var hippa_id = $("#print_hippa_id").val();
					if(id){
						var count = id.length;
						for (var i = 0; i < count; i++) {
							$.ajax({
								type: "POST",
								url: "ajaxchart/add-print-queue1",
								data: "eid=" + id[i] + "&hippa_id=" + hippa_id,
								success: function(data){
									$.jGrowl(data);
								}
							});
						}
						reload_grid("print_items_queue");
					} else {
						$.jGrowl('Choose document(s) to print!');
					}
				}, 
				position:"last"
			});
			jQuery("#print_messages").jqGrid('GridUnload');
			jQuery("#print_messages").jqGrid({
				url:"ajaxchart/print-messages",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date of Service','Subject','Message','Provider','To'],
				colModel:[
					{name:'t_messages_id',index:'t_messages_id',width:1,hidden:true},
					{name:'t_messages_dos',index:'t_messages_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'t_messages_subject',index:'t_messages_subject',width:475},
					{name:'t_messages_message',index:'t_messages_message',width:1,hidden:true},
					{name:'t_messages_provider',index:'t_messages_provider',width:100},
					{name:'t_messages_to',index:'t_messages_to',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#print_messages_pager'),
				sortname: 't_messages_dos',
				viewrecords: true,
				sortorder: "desc",
				caption:"Telephone Messages",
				height: "100%",
				multiselect: true,
				multiboxonly: true,
				hiddengrid: true,
				onCellSelect: function(id,iCol) {
					if (iCol > 0) {
						var row = jQuery("#print_messages").getRowData(id);
						var text = '<br><strong>Date:</strong>  ' + row['t_messages_dos'] + '<br><br><strong>Subject:</strong>  ' + row['t_messages_subject'] + '<br><br><strong>Message:</strong> ' + row['t_messages_message']; 
						$("#print_message_view_dialog").html(text);
						$("#print_message_view_dialog").dialog('open');
					}
				},
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#print_messages_pager',{search:false,edit:false,add:false,del:false
			}).navButtonAdd('#print_messages_pager',{
				caption:"Add Selected to Print Queue", 
				buttonicon:"ui-icon-plus", 
				onClickButton: function(){ 
					var id = jQuery("#print_messages").getGridParam('selarrrow');
					var hippa_id = $("#print_hippa_id").val();
					if(id){
						var count = id.length;
						for (var i = 0; i < count; i++) {
							$.ajax({
								type: "POST",
								url: "ajaxchart/add-print-queue2",
								data: "t_messages_id=" + id[i] + "&hippa_id=" + hippa_id,
								success: function(data){
									$.jGrowl(data);
								}
							});
						}
						reload_grid("print_items_queue");
					} else {
						$.jGrowl('Choose document(s) to print!');
					}
				}, 
				position:"last"
			});
			jQuery("#print_labs").jqGrid('GridUnload');
			jQuery("#print_labs").jqGrid({
				url: "ajaxcommon/documents/Laboratory",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','From','Description','URL'],
				colModel:[
					{name:'documents_id',index:'documents_id',width:1,hidden:true},
					{name:'documents_date',index:'documents_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'documents_from',index:'documents_from',width:275},
					{name:'documents_desc',index:'documents_desc',width:300},
					{name:'documents_url',index:'documents_url',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#print_pager8'),
				sortname: 'documents_date',
				viewrecords: true,
				sortorder: "desc",
				caption:"Labs",
				hiddengrid: true,
				height: "100%",
				multiselect: true,
				multiboxonly: true,
				onSelectRow: function(id,iCol){
					if (iCol > 0) {
						$.ajax({
							type: "POST",
							url: "ajaxcommon/view-documents1/" + id,
							dataType: "json",
							success: function(data){
								//$('#embedURL').PDFDoc( { source : data.html } );
								$("#embedURL").html(data.html);
								$("#document_filepath").val(data.filepath);
								$("#documents_view_dialog").dialog('open');
							}
						});
					}
				},
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#print_pager8',{search:false,edit:false,add:false,del:false
			}).navButtonAdd('#print_pager8',{
				caption:"Add Selected to Print Queue", 
				buttonicon:"ui-icon-plus", 
				onClickButton: function(){ 
					var id = jQuery("#print_labs").getGridParam('selarrrow');
					var hippa_id = $("#print_hippa_id").val();
					if(id){
						var count = id.length;
						for (var i = 0; i < count; i++) {
							$.ajax({
								type: "POST",
								url: "ajaxchart/add-print-queue",
								data: "documents_id=" + id[i] + "&hippa_id=" + hippa_id,
								success: function(data){
								}
							});
						}
						$.jGrowl('Added ' + i + ' documents to the queue!');
						reload_grid("print_items_queue");
					} else {
						$.jGrowl('Choose document(s) to print!');
					}
				}, 
				position:"last"
			});
			jQuery("#print_radiology").jqGrid('GridUnload');
			jQuery("#print_radiology").jqGrid({
				url: "ajaxcommon/documents/Imaging",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','From','Description','URL'],
				colModel:[
					{name:'documents_id',index:'documents_id',width:1,hidden:true},
					{name:'documents_date',index:'documents_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'documents_from',index:'documents_from',width:275},
					{name:'documents_desc',index:'documents_desc',width:300},
					{name:'documents_url',index:'documents_url',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#print_pager9'),
				sortname: 'documents_date',
				viewrecords: true,
				sortorder: "desc",
				caption:"Imaging",
				hiddengrid: true,
				height: "100%",
				multiselect: true,
				multiboxonly: true,
				onSelectRow: function(id,iCol){
					if (iCol > 0) {
						$.ajax({
							type: "POST",
							url: "ajaxcommon/view-documents1/" + id,
							dataType: "json",
							success: function(data){
								//$('#embedURL').PDFDoc( { source : data.html } );
								$("#embedURL").html(data.html);
								$("#document_filepath").val(data.filepath);
								$("#documents_view_dialog").dialog('open');
							}
						});
					}
				},
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#print_pager9',{search:false,edit:false,add:false,del:false
			}).navButtonAdd('#print_pager9',{
				caption:"Add Selected to Print Queue", 
				buttonicon:"ui-icon-plus", 
				onClickButton: function(){ 
					var id = jQuery("#print_radiology").getGridParam('selarrrow');
					var hippa_id = $("#print_hippa_id").val();
					if(id){
						var count = id.length;
						for (var i = 0; i < count; i++) {
							$.ajax({
								type: "POST",
								url: "ajaxchart/add-print-queue",
								data: "documents_id=" + id[i] + "&hippa_id=" + hippa_id,
								success: function(data){
								}
							});
						}
						$.jGrowl('Added ' + i + ' documents to the queue!');
						reload_grid("print_items_queue");
					} else {
						$.jGrowl('Choose document(s) to print!');
					}
				}, 
				position:"last"
			});
			jQuery("#print_cardiopulm").jqGrid('GridUnload');
			jQuery("#print_cardiopulm").jqGrid({
				url: "ajaxcommon/documents/Cardiopulmonary",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','From','Description','URL'],
				colModel:[
					{name:'documents_id',index:'documents_id',width:1,hidden:true},
					{name:'documents_date',index:'documents_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'documents_from',index:'documents_from',width:275},
					{name:'documents_desc',index:'documents_desc',width:300},
					{name:'documents_url',index:'documents_url',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#print_pager10'),
				sortname: 'documents_date',
				viewrecords: true,
				sortorder: "desc",
				caption:"Cardiopulmonary",
				hiddengrid: true,
				height: "100%",
				multiselect: true,
				multiboxonly: true,
				onSelectRow: function(id,iCol){
					if (iCol > 0) {
						$.ajax({
							type: "POST",
							url: "ajaxcommon/view-documents1/" + id,
							dataType: "json",
							success: function(data){
								//$('#embedURL').PDFDoc( { source : data.html } );
								$("#embedURL").html(data.html);
								$("#document_filepath").val(data.filepath);
								$("#documents_view_dialog").dialog('open');
							}
						});
					}
				},
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#print_pager10',{search:false,edit:false,add:false,del:false
			}).navButtonAdd('#print_pager10',{
				caption:"Add Selected to Print Queue", 
				buttonicon:"ui-icon-plus", 
				onClickButton: function(){ 
					var id = jQuery("#print_cardiopulm").getGridParam('selarrrow');
					var hippa_id = $("#print_hippa_id").val();
					if(id){
						var count = id.length;
						for (var i = 0; i < count; i++) {
							$.ajax({
								type: "POST",
								url: "ajaxchart/add-print-queue",
								data: "documents_id=" + id[i] + "&hippa_id=" + hippa_id,
								success: function(data){
								}
							});
						}
						$.jGrowl('Added ' + i + ' documents to the queue!');
						reload_grid("print_items_queue");
					} else {
						$.jGrowl('Choose document(s) to print!');
					}
				}, 
				position:"last"
			});
			jQuery("#print_endoscopy").jqGrid('GridUnload');
			jQuery("#print_endoscopy").jqGrid({
				url: "ajaxcommon/documents/Endoscopy",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','From','Description','URL'],
				colModel:[
					{name:'documents_id',index:'documents_id',width:1,hidden:true},
					{name:'documents_date',index:'documents_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'documents_from',index:'documents_from',width:275},
					{name:'documents_desc',index:'documents_desc',width:300},
					{name:'documents_url',index:'documents_url',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#print_pager11'),
				sortname: 'documents_date',
				viewrecords: true,
				sortorder: "desc",
				caption:"Endoscopy",
				hiddengrid: true,
				height: "100%",
				multiselect: true,
				multiboxonly: true,
				onSelectRow: function(id,iCol){
					if (iCol > 0) {
						$.ajax({
							type: "POST",
							url: "ajaxcommon/view-documents1/" + id,
							dataType: "json",
							success: function(data){
								//$('#embedURL').PDFDoc( { source : data.html } );
								$("#embedURL").html(data.html);
								$("#document_filepath").val(data.filepath);
								$("#documents_view_dialog").dialog('open');
							}
						});
					}
				},
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#print_pager11',{search:false,edit:false,add:false,del:false
			}).navButtonAdd('#print_pager11',{
				caption:"Add Selected to Print Queue", 
				buttonicon:"ui-icon-plus", 
				onClickButton: function(){ 
					var id = jQuery("#print_endoscopy").getGridParam('selarrrow');
					var hippa_id = $("#print_hippa_id").val();
					if(id){
						var count = id.length;
						for (var i = 0; i < count; i++) {
							$.ajax({
								type: "POST",
								url: "ajaxchart/add-print-queue",
								data: "documents_id=" + id[i] + "&hippa_id=" + hippa_id,
								success: function(data){
								}
							});
						}
						$.jGrowl('Added ' + i + ' documents to the queue!');
						reload_grid("print_items_queue");
					} else {
						$.jGrowl('Choose document(s) to print!');
					}
				}, 
				position:"last"
			});
			jQuery("#print_referrals").jqGrid('GridUnload');
			jQuery("#print_referrals").jqGrid({
				url: "ajaxcommon/documents/Referrals",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','From','Description','URL'],
				colModel:[
					{name:'documents_id',index:'documents_id',width:1,hidden:true},
					{name:'documents_date',index:'documents_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'documents_from',index:'documents_from',width:275},
					{name:'documents_desc',index:'documents_desc',width:300},
					{name:'documents_url',index:'documents_url',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#print_pager12'),
				sortname: 'documents_date',
				viewrecords: true,
				sortorder: "desc",
				caption:"Referrals",
				hiddengrid: true,
				height: "100%",
				multiselect: true,
				multiboxonly: true,
				onSelectRow: function(id,iCol){
					if (iCol > 0) {
						$.ajax({
							type: "POST",
							url: "ajaxcommon/view-documents1/" + id,
							dataType: "json",
							success: function(data){
								//$('#embedURL').PDFDoc( { source : data.html } );
								$("#embedURL").html(data.html);
								$("#document_filepath").val(data.filepath);
								$("#documents_view_dialog").dialog('open');
							}
						});
					}
				},
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#print_pager12',{search:false,edit:false,add:false,del:false
			}).navButtonAdd('#print_pager12',{
				caption:"Add Selected to Print Queue", 
				buttonicon:"ui-icon-plus", 
				onClickButton: function(){ 
					var id = jQuery("#print_referrals").getGridParam('selarrrow');
					var hippa_id = $("#print_hippa_id").val();
					if(id){
						var count = id.length;
						for (var i = 0; i < count; i++) {
							$.ajax({
								type: "POST",
								url: "ajaxchart/add-print-queue",
								data: "documents_id=" + id[i] + "&hippa_id=" + hippa_id,
								success: function(data){
								}
							});
						}
						$.jGrowl('Added ' + i + ' documents to the queue!');
						reload_grid("print_items_queue");
					} else {
						$.jGrowl('Choose document(s) to print!');
					}
				}, 
				position:"last"
			});
			jQuery("#print_past_records").jqGrid('GridUnload');
			jQuery("#print_past_records").jqGrid({
				url: "ajaxcommon/documents/Past_Records",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','From','Description','URL'],
				colModel:[
					{name:'documents_id',index:'documents_id',width:1,hidden:true},
					{name:'documents_date',index:'documents_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'documents_from',index:'documents_from',width:275},
					{name:'documents_desc',index:'documents_desc',width:300},
					{name:'documents_url',index:'documents_url',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#print_pager13'),
				sortname: 'documents_date',
				viewrecords: true,
				sortorder: "desc",
				caption:"Past Records",
				hiddengrid: true,
				height: "100%",
				multiselect: true,
				multiboxonly: true,
				onSelectRow: function(id,iCol){
					if (iCol > 0) {
						$.ajax({
							type: "POST",
							url: "ajaxcommon/view-documents1/" + id,
							dataType: "json",
							success: function(data){
								//$('#embedURL').PDFDoc( { source : data.html } );
								$("#embedURL").html(data.html);
								$("#document_filepath").val(data.filepath);
								$("#documents_view_dialog").dialog('open');
							}
						});
					}
				},
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#print_pager13',{search:false,edit:false,add:false,del:false
			}).navButtonAdd('#print_pager13',{
				caption:"Add Selected to Print Queue", 
				buttonicon:"ui-icon-plus", 
				onClickButton: function(){ 
					var id = jQuery("#print_past_records").getGridParam('selarrrow');
					var hippa_id = $("#print_hippa_id").val();
					if(id){
						var count = id.length;
						for (var i = 0; i < count; i++) {
							$.ajax({
								type: "POST",
								url: "ajaxchart/add-print-queue",
								data: "documents_id=" + id[i] + "&hippa_id=" + hippa_id,
								success: function(data){
								}
							});
						}
						$.jGrowl('Added ' + i + ' documents to the queue!');
						reload_grid("print_items_queue");
					} else {
						$.jGrowl('Choose document(s) to print!');
					}
				}, 
				position:"last"
			});
			jQuery("#print_outside_forms").jqGrid('GridUnload');
			jQuery("#print_outside_forms").jqGrid({
				url: "ajaxcommon/documents/Other_Forms",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','From','Description','URL'],
				colModel:[
					{name:'documents_id',index:'documents_id',width:1,hidden:true},
					{name:'documents_date',index:'documents_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'documents_from',index:'documents_from',width:275},
					{name:'documents_desc',index:'documents_desc',width:300},
					{name:'documents_url',index:'documents_url',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#print_pager14'),
				sortname: 'documents_date',
				viewrecords: true,
				sortorder: "desc",
				caption:"Other Forms",
				hiddengrid: true,
				height: "100%",
				multiselect: true,
				multiboxonly: true,
				onSelectRow: function(id,iCol){
					if (iCol > 0) {
						$.ajax({
							type: "POST",
							url: "ajaxcommon/view-documents1/" + id,
							dataType: "json",
							success: function(data){
								//$('#embedURL').PDFDoc( { source : data.html } );
								$("#embedURL").html(data.html);
								$("#document_filepath").val(data.filepath);
								$("#documents_view_dialog").dialog('open');
							}
						});
					}
				},
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#print_pager14',{search:false,edit:false,add:false,del:false
			}).navButtonAdd('#print_pager14',{
				caption:"Add Selected to Print Queue", 
				buttonicon:"ui-icon-plus", 
				onClickButton: function(){ 
					var id = jQuery("#print_outside_forms").getGridParam('selarrrow');
					var hippa_id = $("#print_hippa_id").val();
					if(id){
						var count = id.length;
						for (var i = 0; i < count; i++) {
							$.ajax({
								type: "POST",
								url: "ajaxchart/add-print-queue",
								data: "documents_id=" + id[i] + "&hippa_id=" + hippa_id,
								success: function(data){
								}
							});
						}
						$.jGrowl('Added ' + i + ' documents to the queue!');
						reload_grid("print_items_queue");
					} else {
						$.jGrowl('Choose document(s) to print!');
					}
				}, 
				position:"last"
			});
			jQuery("#print_letters").jqGrid('GridUnload');
			jQuery("#print_letters").jqGrid({
				url: "ajaxcommon/documents/Letters",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','From','Description','URL'],
				colModel:[
					{name:'documents_id',index:'documents_id',width:1,hidden:true},
					{name:'documents_date',index:'documents_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'documents_from',index:'documents_from',width:275},
					{name:'documents_desc',index:'documents_desc',width:300},
					{name:'documents_url',index:'documents_url',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#print_pager15'),
				sortname: 'documents_date',
				viewrecords: true,
				sortorder: "desc",
				caption:"Letters",
				hiddengrid: true,
				height: "100%",
				multiselect: true,
				multiboxonly: true,
				onSelectRow: function(id,iCol){
					if (iCol > 0) {
						$.ajax({
							type: "POST",
							url: "ajaxcommon/view-documents1/" + id,
							dataType: "json",
							success: function(data){
								//$('#embedURL').PDFDoc( { source : data.html } );
								$("#embedURL").html(data.html);
								$("#document_filepath").val(data.filepath);
								$("#documents_view_dialog").dialog('open');
							}
						});
					}
				},
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#print_pager15',{search:false,edit:false,add:false,del:false
			}).navButtonAdd('#print_pager15',{
				caption:"Add Selected to Print Queue", 
				buttonicon:"ui-icon-plus", 
				onClickButton: function(){ 
					var id = jQuery("#print_letters").getGridParam('selarrrow');
					var hippa_id = $("#print_hippa_id").val();
					if(id){
						var count = id.length;
						for (var i = 0; i < count; i++) {
							$.ajax({
								type: "POST",
								url: "ajaxchart/add-print-queue",
								data: "documents_id=" + id[i] + "&hippa_id=" + hippa_id,
								success: function(data){
								}
							});
						}
						$.jGrowl('Added ' + i + ' documents to the queue!');
						reload_grid("print_items_queue");
					} else {
						$.jGrowl('Choose document(s) to print!');
					}
				}, 
				position:"last"
			});
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#print_fax_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 300, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#print_fax_recipient").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/all-contacts",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3,
				select: function(event, ui){
					$("#print_fax_faxnumber").val(ui.item.fax);
				}
			});
		},
		buttons: {
			'Add Contact to Address Book and Send Fax': function() {
				var bValid = true;
				$("#print_fax_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#print_fax_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/add-all-contact",
							data: str,
							success: function(data){
								$.jGrowl(data);
								var hippa_id = $("#print_hippa_id").val();
								var type = $("#print_fax_type").val();
								$.ajax({
									type: "POST",
									url: "ajaxchart/fax-chart/" + hippa_id + "/" + type,
									data: str,
									dataType: "json",
									success: function(data){
										$.jGrowl(data.message);
										$('#print_fax_form').clearForm();
										$('#print_fax_dialog').dialog('close');
									}
								});
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			'Send Fax': function() {
				var bValid = true;
				$("#print_fax_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#print_fax_form").serialize();
					var hippa_id = $("#print_hippa_id").val();
					var type = $("#print_fax_type").val();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/fax-chart/" + hippa_id + "/" + type,
							data: str,
							dataType: "json",
							success: function(data){
								$.jGrowl(data.message);
								$('#print_fax_form').clearForm();
								$('#print_fax_dialog').dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#print_fax_form').clearForm();
				$('#print_fax_dialog').dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#hippa_date_release1").mask("99/99/9999");
	$("#hippa_date_release1").datepicker();
	$("#print_fax_faxnumber").mask("(999) 999-9999");
	$("#hippa_role1").addOption({"":"","Primary Care Provider":"Primary Care Provider","Consulting Provider":"Consulting Provider","Referring Provider":"Referring Provider"},false);
	$("#edit_hippa").click(function(){
		var hippa_id = $("#print_hippa_id").val();
		$.ajax({
			type: "POST",
			url: "ajaxchart/get-release/" + hippa_id,
			dataType: "json",
			success: function(data){
				$.each(data, function(key, value){
					$("#print_chart_form :input[name='" + key + "']").val(value);
				});
				var date = $('#hippa_date_release1').val();
				var edit_date = editDate1(date);
				$('#hippa_date_release1').val(edit_date);
				$("#print_chart_dialog").dialog('open');
				$('#hippa_reason').focus();
			}
		});
	});
	$("#print_all").click(function(){
		var hippa_id = $("#print_hippa_id").val();
		window.open("print_chart/" + hippa_id + "/all");
	});
	$("#fax_all").click(function(){
		$("#print_fax_type").val('all');
		$("#print_fax_dialog").dialog('open');
		$("#print_fax_recipient").focus();
	});
	$("#print_1year").click(function(){
		var hippa_id = $("#print_hippa_id").val();
		window.open("print_chart/" + hippa_id + "/1year");
	});
	$("#fax_1year").click(function(){
		$("#print_fax_type").val('1year');
		$("#print_fax_dialog").dialog('open');
		$("#print_fax_recipient").focus();
	});
	$("#print_queue").click(function(){
		var hippa_id = $("#print_hippa_id").val();
		window.open("print_chart/" + hippa_id + "/queue");
	});
	$("#fax_queue").click(function(){
		$("#print_fax_type").val('queue');
		$("#print_fax_dialog").dialog('open');
		$("#print_fax_recipient").focus();
	});
	$("#remove_item").click(function(){
		var item = jQuery("#print_items_queue").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxchart/delete-chart-item",
				data: "hippa_id=" + item,
				success: function(data){
					$.jGrowl(data);
					reload_grid("print_items_queue"); 
				}
			});
		} else {
			$.jGrowl("Please select item to remove from the queue!");
		}
	});
	$("#clear_queue").click(function(){
		var item = $("#print_hippa_id").val();
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxchart/clear-queue",
				data: "other_hippa_id=" + item,
				success: function(data){
					$.jGrowl(data);
					reload_grid("print_items_queue"); 
				}
			});
		} else {
			$.jGrowl("Please select item to remove from the queue!");
		}
	});
	$("#print_encounter_view_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#print_message_view_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#print_to_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(event, ui) {
			$("#print_to_specialty").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/specialty1",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#print_to_city").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/city",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#print_to_lastname").focus();
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#print_to_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#print_to_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/edit-orders-provider/Referral",
							data: str,
							dataType: "json",
							success: function(data){
								$.jGrowl(data.message);
								$("#print_to_form").clearForm();
								$("#print_to_dialog").dialog('close');
								$.ajax({
									url: "ajaxsearch/ref-provider1/all",
									dataType: "json",
									type: "POST",
									success: function(data1){
										$("#print_chart_form_provider").html(data1.html);
										loadbuttons();
										$("#hippa_address_id").val(data.id);
										var a = $("#hippa_address_id").find("option:selected").first().text();
										$("#hippa_provider1").val(a);
									}
								});
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$("#print_to_form").clearForm();
				$("#print_to_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#print_to_state").addOption(states, false);
	$("#print_to_phone").mask("(999) 999-9999");
	$("#print_to_fax").mask("(999) 999-9999");
});
$(document).ready(function() {
	function billing_detail_save() {
		var bValid = true;
		var a = $("#billing_eid_1");
		var b = $("#billing_insurance_id_1");
		bValid = bValid && checkEmpty(a, "Encounter");
		bValid = bValid && checkEmpty(b, "Primary Insurance"); 
		if (bValid) {
			var str = $("#billing_detail_form").serialize();
			if(str){
				$.ajax({
					type: "POST",
					url: "ajaxchart/billing-save1",
					data: str,
					success: function(data){
						$.jGrowl(data);
						total_balance();
						reload_grid("billing_encounters");
					}
				});
			} else {
				$.jGrowl("Please complete the form");
			}
		}
	}
	function get_insurance_info() {
		var a = $("#billing_insurance_id_1").val();
		var b = $("#billing_insurance_id_2").val();
		$.ajax({
			type: "POST",
			url: "ajaxchart/get-insurance-info",
			data: "insurance_id_1=" + a + "&insurance_id_2=" + b,
			dataType: "json",
			success: function(data){
				$("#billing_insuranceinfo1").html(data.result1);
				$("#billing_insuranceinfo2").html(data.result2);
			}
		});
	}
	$("#billing_list_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 825, 
		draggable: false,
		resizable: false,
		open: function(event, ui) {
			total_balance();
			jQuery("#billing_encounters").jqGrid('GridUnload');
			jQuery("#billing_encounters").jqGrid({
				url: "ajaxchart/billing-encounters",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','Chief Complaint','Charges','Balance'],
				colModel:[
					{name:'eid',index:'eid',width:1,hidden:true},
					{name:'encounter_DOS',index:'encounter_DOS',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'encounter_cc',index:'encounter_cc',width:355},
					{name:"charges",index:"charges",width:100,formatter:'currency',formatoptions:{decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "$ "}},
					{name:"balance",index:"balance",width:100,formatter:'currency',formatoptions:{decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "$ "}}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#billing_encounters_pager'),
				sortname: 'encounter_DOS',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Bills from Encounters - Expand Row for Payment History",
			 	height: "100%",
			 	loadComplete: function(data) {
			 		var id1 = $('#billing_list_eid').val();
			 		var id2 = $('#billing_list_other_billing_id').val();
			 		if (id1 != '') {
			 			jQuery("#billing_encounters").expandSubGridRow(id1);
			 			$('#billing_list_eid').val('');
			 		}
			 		if (id2 != '') {
			 			jQuery("#billing_other").expandSubGridRow(id2);
			 			$('#billing_list_other_billing_id').val('');
			 		}
			 	},
			 	subGrid: true,
			 	subGridRowExpanded: function(subgrid_id, row_id) {
			 		var subgrid_table_id, pager_id;
			 		subgrid_table_id = subgrid_id+"_t";
			 		pager_id = "p_"+subgrid_table_id;
			 		$("#"+subgrid_id).html("<table id='"+subgrid_table_id+"' class='scroll'></table><div id='"+pager_id+"' class='scroll'></div>");
			 		jQuery("#"+subgrid_table_id).jqGrid({
			 			url: "ajaxchart/billing-payment-history1/"+row_id,
			 			datatype: "json",
			 			mtype: "POST",
			 			colNames:['ID','Date of Payment','Payment Amount','Payment Type'],
			 			colModel:[
			 				{name:"billing_core_id",index:"billing_core_id",width:1,hidden:true},
			 				{name:"dos_f",index:"dos_f",width:100,formatter:'date',formatoptions:{srcformat:"m/d/Y", newformat: "ISO8601Short"}},
			 				{name:"payment",index:"payment",width:200,formatter:'currency',formatoptions:{decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "$ "}},
			 				{name:"payment_type",index:"payment_type",width:300,align:"right"}
			 			], 
			 			rowNum:10,
			 			pager: pager_id,
			 			sortname: 'dos_f', 
			 			sortorder: "desc", 
			 			height: '100%',
			 			footerrow : true,
			 			userDataOnFooter : true,
			 			onSelectRow: function(id) {
			 				$('#billing_billing_core_id').val(id);
			 				$.ajax({
								type: "POST",
								url: "ajaxchart/get-payment",
								data: "id=" + id,
								dataType: "json",
								success: function(data){
									$.each(data, function(key, value){
										$("#billing_payment_form :input[name='" + key + "']").val(value);
										var input_id = $("#billing_payment_form :input[name='" + key + "']").attr('id');
										$("#" + input_id + "_old").val(value);
									});
									$('#billing_payment_dialog').dialog('open');
								}
							});
			 			},
			 			jsonReader: { repeatitems : false, id: "0" }
			 		});
			 		jQuery("#"+subgrid_table_id).jqGrid('navGrid',"#"+pager_id,{
			 			search:false,
			 			edit:false,
			 			add:false,
			 			del:false
			 		}).jqGrid('navButtonAdd',"#"+pager_id,{
			 			caption:"Delete Payment", 
						buttonicon:"ui-icon-trash", 
						onClickButton: function(){ 
							var id = jQuery(this).getGridParam('selrow');
							if(id){
				 				$('#billing_billing_core_id').val(id);
				 				$.ajax({
									type: "POST",
									url: "ajaxchart/get-payment",
									data: "id=" + id,
									dataType: "json",
									success: function(data){
										$('#billing_list_eid').val(data.eid);
									}
								});
				 				if(confirm('Are you sure you want to delete this payment?')){
									$.ajax({
										type: "POST",
										url: "ajaxchart/delete-payment1",
										data: "id=" + id,
										dataType: 'json',
										success: function(data){
											$.jGrowl(data.message);
											$("#billing_encounters").setCell(data.id,"balance",data.balance); 
										}
									});
									jQuery(this).trigger("reloadGrid");
									total_balance();
								}
							} else {
								$.jGrowl('Choose payment to delete!');
							}
						}, 
						position:"last"
					});
			 	}
			}).navGrid('#billing_encounters_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#billing_other").jqGrid('GridUnload');
			jQuery("#billing_other").jqGrid({
				url: "ajaxchart/billing-other",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','Reason','Charge','Balance'],
				colModel:[
					{name:'other_billing_id',index:'other_billing_id',width:1,hidden:true},
					{name:'dos_f',index:'dos_f',width:100,formatter:'date',formatoptions:{srcformat:"m/d/Y", newformat: "ISO8601Short"},unformat:editDate},
					{name:'reason',index:'reason',width:355},
					{name:'cpt_charge',index:'cpt_charge',width:100,formatter:'currency',formatoptions:{decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "$ "}},		
					{name:"balance",index:"balance",width:100,formatter:'currency',formatoptions:{decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "$ "}}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#billing_other_pager'),
				sortname: 'dos_f',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Miscellaneous Bills - Expand Row for Payment History",
			 	height: "100%",
			 	loadComplete: function(data) {
			 		var id1 = $('#billing_list_eid').val();
			 		var id2 = $('#billing_list_other_billing_id').val();
			 		if (id1 != '') {
			 			jQuery("#billing_encounters").expandSubGridRow(id1);
			 			$('#billing_list_eid').val('');
			 		}
			 		if (id2 != '') {
			 			jQuery("#billing_other").expandSubGridRow(id2);
			 			$('#billing_list_other_billing_id').val('');
			 		}
			 	},
			 	subGrid: true,
			 	subGridRowExpanded: function(subgrid_id, row_id) {
			 		var subgrid_table_id, pager_id;
			 		subgrid_table_id = subgrid_id+"_t1";
			 		pager_id = "p1_"+subgrid_table_id;
			 		$("#"+subgrid_id).html("<table id='"+subgrid_table_id+"' class='scroll'></table><div id='"+pager_id+"' class='scroll'></div>");
			 		jQuery("#"+subgrid_table_id).jqGrid({
			 			url:"ajaxchart/billing-payment-history2/"+row_id,
			 			datatype: "json",
			 			mtype: "POST",
			 			colNames:['ID','Date of Payment','Payment Amount','Payment Type'],
			 			colModel:[
			 				{name:"billing_core_id",index:"billing_core_id",width:1,hidden:true},
			 				{name:"dos_f",index:"dos_f",width:100,formatter:'date',formatoptions:{srcformat:"m/d/Y", newformat: "ISO8601Short"}},
			 				{name:"payment",index:"payment",width:200,formatter:'currency',formatoptions:{decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "$ "}},
			 				{name:"payment_type",index:"payment_type",width:300,align:"right"}
			 			], 
			 			rowNum:10,
			 			pager: pager_id,
			 			sortname: 'dos_f', 
			 			sortorder: "desc", 
			 			height: '100%',
			 			footerrow : true,
			 			userDataOnFooter : true,
			 			onSelectRow: function(id) {
			 				$('#billing_billing_core_id').val(id);
			 				$.ajax({
								type: "POST",
								url: "ajaxchart/get-payment",
								data: "id=" + id,
								dataType: "json",
								success: function(data){
									$.each(data, function(key, value){
										$("#billing_payment_form :input[name='" + key + "']").val(value);
										var input_id = $("#billing_payment_form :input[name='" + key + "']").attr('id');
										$("#" + input_id + "_old").val(value);
									});
									$('#billing_payment_dialog').dialog('open');
								}
							});
			 			},
			 			jsonReader: { repeatitems : false, id: "0" }
			 		});
			 		jQuery("#"+subgrid_table_id).jqGrid('navGrid',"#"+pager_id,{
			 			search:false,
			 			edit:false,
			 			add:false,
			 			del:false
			 		}).jqGrid('navButtonAdd',"#"+pager_id,{
			 			caption:"Delete Payment", 
						buttonicon:"ui-icon-trash", 
						onClickButton: function(){ 
							var id = jQuery(this).getGridParam('selrow');
							if(id){
				 				$('#billing_billing_core_id').val(id);
				 				$.ajax({
									type: "POST",
									url: "ajaxchart/get-payment",
									data: "id=" + id,
									dataType: "json",
									success: function(data){
										$('#billing_list_eid').val(data.eid);
									}
								});
				 				if(confirm('Are you sure you want to delete this payment?')){
									$.ajax({
										type: "POST",
										url: "ajaxchart/delete-payment2",
										data: "id=" + id,
										dataType: 'json',
										success: function(data){
											$.jGrowl(data.message);
											$("#billing_other").setCell(data.id,"balance",data.balance); 
										}
									});
									jQuery(this).trigger("reloadGrid");
									total_balance();
								}
							} else {
								$.jGrowl('Choose payment to delete!');
							}
						}, 
						position:"last"
					});
			 	}
			}).navGrid('#billing_other_pager',{search:false,edit:false,add:false,del:false});
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#billing_list").click(function() {
		$("#billing_list_dialog").dialog('open');
	});
	$("#billing_detail_accordion").accordion({
		heightStyle: "content",
		activate: function (event, ui) {
			var id = ui.newPanel[0].id;
			$("#" + id + " .text").first().focus();
			var active = $("#billing_detail_accordion").accordion("option", "active");
			if (active != 0) {
				billing_detail_save();
			}
		}
	});
	$("#billing_detail_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 840, 
		draggable: false,
		resizable: false,
		open: function(event, ui) {
			var id = $("#billing_eid_1").val();
			$.ajax({
				type: "POST",
				url: "ajaxchart/get-billing/" + id,
				dataType: "json",
				success: function(data){
					if (data.message = "OK") {
						$("#billing_icd1").addOption(data, false).removeOption("message").trigger("liszt:updated");
					} else {
						$.jGrowl(data.message);
					}
				}
			});
			$.ajax({
				type: "POST",
				url: "ajaxchart/get-prevention/" + id,
				dataType: "json",
				success: function(data){
					$("#established_prevent1").attr("value", data.prevent_established1);
					$("#new_prevent1").attr("value", data.prevent_new1);
					$("#established_prevent1_text").html(data.prevent_established1);
					$("#new_prevent1_text").html(data.prevent_new1);
				}
			});	
			$.ajax({
				type: "POST",
				url: "ajaxchart/get-insurance-id/" + id,
				dataType: "json",
				success: function(data){
					$("#billing_insurance_id_1").val(data.insurance_id_1);
					$("#billing_insurance_id_2").val(data.insurance_id_2);
					$("#billing_insurance_id_1_old").val(data.insurance_id_1);
					$("#billing_insurance_id_2_old").val(data.insurance_id_2);
					if (data.insurance_id_1 == '') {
						$("#billing_insuranceinfo1").html("No primary insurance chosen");
					}
					if (data.insurance_id_2 == '') {
						$("#billing_insuranceinfo2").html("No secondary insurance chosen");
					}
					get_insurance_info();
				}
			});
			$.ajax({
				type: "POST",
				url: "ajaxchart/get-assessment/" + id,
				dataType: "json",
				success: function(data){
					if (data != '') {
						if(data.assessment_1.length!=0){
							var label1 = '<strong>Diagnosis A:</strong> ' + data.assessment_1;
						}
						if(data.assessment_2.length!=0){
							label1 += '<br><strong>Diagnosis B:</strong> ' + data.assessment_2;
						}
						if(data.assessment_3.length!=0){
							label1 += '<br><strong>Diagnosis C:</strong> ' + data.assessment_3;
						}
						if(data.assessment_4.length!=0){
							label1 += '<br><strong>Diagnosis D:</strong> ' + data.assessment_4;
						}
						if(data.assessment_5.length!=0){
							label1 += '<br><strong>Diagnosis E:</strong> ' + data.assessment_5;
						}
						if(data.assessment_6.length!=0){
							label1 += '<br><strong>Diagnosis F:</strong> ' + data.assessment_6;
						}
						if(data.assessment_7.length!=0){
							label1 += '<br><strong>Diagnosis G:</strong> ' + data.assessment_7;
						}
						if(data.assessment_8.length!=0){
							label1 += '<br><strong>Diagnosis H:</strong> ' + data.assessment_8;
						}
						if(data.assessment_9.length!=0){
							label1 += '<br><strong>Diagnosis I:</strong> ' + data.assessment_9;
						}
						if(data.assessment_10.length!=0){
							label1 += '<br><strong>Diagnosis J:</strong> ' + data.assessment_10;
						}
						if(data.assessment_11.length!=0){
							label1 += '<br><strong>Diagnosis K:</strong> ' + data.assessment_11;
						}
						if(data.assessment_12.length!=0){
							label1 += '<br><strong>Diagnosis L:</strong> ' + data.assessment_12;
						}
						$("#billing_icd9").html(label1);
					}
				}
			});
			jQuery("#billing_cpt_list").jqGrid('GridUnload');
			jQuery("#billing_cpt_list").jqGrid({
				url:"ajaxchart/procedure-codes/" + id,
				datatype: "json",
				mtype: "POST",
				colNames:['ID','CPT','CPT Description','Charge','Units','Modifier','ICD Pointer','DOS From','DOS To'],
				colModel:[
					{name:'billing_core_id',index:'billing_core_id',width:1,hidden:true},
					{name:'cpt',index:'cpt',width:50},
					{name:'cpt_description',index:'cpt_description',width:200},
					{name:'cpt_charge',index:'cpt_charge',width:100,formatter:'currency',formatoptions:{decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "$ "}},
					{name:'unit',index:'unit',width:50},
					{name:'modifier',index:'modifier',width:50},
					{name:'icd_pointer',index:'icd_pointer',width:50,edittype: 'select'},
					{name:'dos_f',index:'dos_f',width:75},
					{name:'dos_t',index:'dos_t',width:75}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#billing_cpt_list_pager'),
				sortname: 'cpt_charge',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Procedure codes for this encounter - Click on ICD Pointer column to get diagnosis codes for each procedure.",
			 	height: "100%",
			 	onCellSelect: function(id,iCol) {
					if (iCol == 6) {
						var item = jQuery("#billing_cpt_list").getCell(id,'icd_pointer');
						$.ajax({
							type: "POST",
							url: "ajaxchart/define-icd/" + id,
							data: "icd=" + item,
							dataType: "json",
							success: function(data){
								$.jGrowl(data.item, {sticky:true});	
							}
						});
					}
				},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#billing_cpt_list_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#billing_insurance_list1").jqGrid('GridUnload');
			jQuery("#billing_insurance_list1").jqGrid({
				url: "ajaxdashboard/insurance",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Insurance','ID Number','Group Number','Priority','Lastname','Firstname','DOB','Gender','Address','City','State','Zip','Copay','Deductible','Comments','Address ID','Relationship'],
				colModel:[
					{name:'insurance_id',index:'insurance_id',width:1,hidden:true},
					{name:'insurance_plan_name',index:'insurance_plan_name',width:270},
					{name:'insurance_id_num',index:'insurance_id_num',width:100},
					{name:'insurance_group',index:'insurance_group',width:100},
					{name:'insurance_order',index:'insurance_order',width:100},
					{name:'insurance_insu_lastname',index:'insurance_insu_lastname',width:1,hidden:true},
					{name:'insurance_insu_firstname',index:'insurance_insu_firstname',width:1,hidden:true},
					{name:'insurance_insu_dob',index:'insurance_insu_dob',width:1,hidden:true},
					{name:'insurance_insu_gender',index:'insurance_insu_gender',width:1,hidden:true},
					{name:'insurance_insu_address',index:'insurance_insu_address',width:1,hidden:true},
					{name:'insurance_insu_city',index:'insurance_insu_city',width:1,hidden:true},
					{name:'insurance_insu_state',index:'insurance_insu_state',width:1,hidden:true},
					{name:'insurance_insu_zip',index:'insurance_insu_zip',width:1,hidden:true},
					{name:'insurance_copay',index:'insurance_copay',width:1,hidden:true},
					{name:'insurance_deductible',index:'insurance_deductible',width:1,hidden:true},
					{name:'insurance_comments', index:'insurance_comments',width:1,hidden:true},
					{name:'address_id',index:'address_id',width:1,hidden:true},
					{name:'insurance_relationship',index:'insurance_relationship',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#billing_insurance_pager1'),
				sortname: 'insurance_order',
				viewrecords: true,
				sortorder: "asc",
				caption:"Insurance Payors",
				height: "100%",
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#billing_insurance_pager1',{search:false,edit:false,add:false,del:false});
		},
		beforeClose: function(event, ui) {
			var bValid = true;
			var a = $("#billing_eid_1");
			var b = $("#billing_insurance_id_1");
			bValid = bValid && checkEmpty(a, "Encounter");
			bValid = bValid && checkEmpty(b, "Primary Insurance"); 
			if (bValid) {
				billing_detail_save();
				$("#billing_detail_form").clearForm();
				$("#billing_icd9").html('');
				$("#billing_insuranceinfo1").html('');
				$("#billing_insuranceinfo2").html('');
				return true;
			} else {
				return false;
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#billing_other_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 200, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#billing_other_reason1").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/billing-reason",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
		},
		buttons: {
			"Save": function() {
				var bValid = true;
				$("#billing_other_form1").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#billing_other_form1").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/billing-other-save",
							data: str,
							dataType: "json",
							success: function(data){
								$.jGrowl(data.message);
								$('#billing_other_form1').clearForm();
								reload_grid("billing_other");
								$("#billing_other_dialog").dialog('close');
								total_balance();
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#billing_other_form1').clearForm();
				$("#billing_other_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#billing_notes_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 300, 
		width: 600, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(event, ui) {
			$.ajax({
				type: "POST",
				url: "ajaxchart/get-billing-notes",
				success: function(data){
					$('#billing_billing_notes').val(data);
					$('#billing_billing_notes_old').val(data)
				}
			});
		},
		buttons: {
			'Save': function() {
				var str = $("#billing_notes_form").serialize();
				if(str){
					$.ajax({
						type: "POST",
						url: "ajaxchart/edit-billing-notes",
						data: str,
						success: function(data){
							$.jGrowl(data);
							total_balance();
							$('#billing_notes_form').clearForm();
							$('#billing_notes_dialog').dialog('close');
						}
					});
				} else {
					$.jGrowl("Please complete the form");
				}
			},
			Cancel: function() {
				$('#billing_notes_form').clearForm();
				$('#billing_notes_dialog').dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#billing_notes").click(function(){
		$('#billing_notes_dialog').dialog('open');
	});
	$("#billing_other_dos_f1").mask("99/99/9999").datepicker();
	$("#billing_payment_dos_f").mask("99/99/9999").datepicker();
	$("#billing_payment_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 250, 
		width: 500, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#billing_payment_payment_type").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/payment-type",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 0
			});
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#billing_payment_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#billing_payment_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/payment-save",
							data: str,
							dataType: "json",
							success: function(data){
								$.jGrowl(data.message);
								if (data.eid != ''){
									$('#billing_list_eid').val(data.eid);
									reload_grid("billing_encounters");
									total_balance();
								}
								if (data.other_billing_id != ''){
									$('#billing_list_other_billing_id').val(data.other_billing_id);
									reload_grid("billing_other");
									total_balance();
								}
								$("#billing_payment_form").clearForm();
								$("#billing_payment_dialog").dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$("#billing_payment_form").clearForm();
				$("#billing_payment_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#billing_payment_payment_type").focus(function(){
		$("#billing_payment_payment_type").autocomplete("search", '1');
	});
	$("#edit_encounter_charge").click(function(){
		var id = jQuery("#billing_encounters").getGridParam('selrow');
		if(id){
			$("#billing_eid_1").val(id);
			$("#billing_detail_dialog").dialog('open');
		} else {
			$.jGrowl("Please select encounter to edit billing details!");
		}
	});
	$("#payment_encounter_charge").click(function(){
		var item = jQuery("#billing_encounters").getGridParam('selrow');
		if(item){
			$('#billing_payment_eid').val(item);
			var currentDate = getCurrentDate();
			$('#billing_payment_dos_f').val(currentDate);
			$('#billing_payment_dialog').dialog('open');
			$("#billing_payment_payment").focus();
		} else {
			$.jGrowl("Please select encounter to add payment!");
		}
	});
	$("#invoice_encounter_charge").click(function(){
		var item = jQuery("#billing_encounters").getGridParam('selrow');
		if(item){
			window.open("print_invoice1/" + item + "/0/0");
		} else {
			$.jGrowl("Please select encounter to print invoice!");
		}
	});
	$("#add_charge").click(function(){
		var currentDate = getCurrentDate();
		$('#billing_other_dos_f1').val(currentDate);
		$('#billing_other_dialog').dialog('open');
		$("#billing_other_reason1").focus();
	});
	$("#edit_charge").click(function(){
		var item = jQuery("#billing_other").getGridParam('selrow');
		if(item){
			jQuery("#billing_other").GridToForm(item,"#billing_other_form1");
			$('#billing_other_dialog').dialog('open');
			$("#billing_other_reason1").focus();
		} else {
			$.jGrowl("Please select miscellaneous bill to edit!");
		}
	});
	$("#payment_charge").click(function(){
		var item = jQuery("#billing_other").getGridParam('selrow');
		if(item){
			$('#billing_payment_other_billing_id').val(item);
			var currentDate = getCurrentDate();
			$('#billing_payment_dos_f').val(currentDate);
			$('#billing_payment_dialog').dialog('open');
			$("#billing_payment_payment").focus();
		} else {
			$.jGrowl("Please select miscellaneous bill to add payment!");
		}
	});
	$("#invoice_charge").click(function(){
		var item = jQuery("#billing_other").getGridParam('selrow');
		if(item){
			window.open("print_invoice2/" + item);
		} else {
			$.jGrowl("Please select encounter to print invoice!");
		}
	});
	$("#delete_charge").click(function(){
		var item = jQuery("#billing_other").getGridParam('selrow');
		if(item){
			if(confirm('Are you sure you want to delete this miscellaneous bill?')){
				$.ajax({
					type: "POST",
					url: "ajaxchart/delete-other-bill",
					data: "billing_core_id=" + item,
					success: function(data){
						$.jGrowl(data);
						reload_grid("billing_other");
					}
				});
			}
		} else {
			$.jGrowl("Please select miscellaneous bill to delete!");
		}
	});
	$("#billing_modifier1").addOption({"":"","25":"25 - Significant, Separately Identifiable E & M Service.","52":"52 - Reduced Service .","59":"59 - Distinct Procedural Service."}, false);
	$("#cpt_helper_items1").accordion({active: false, fillSpace: true});
	$("#cpt_helper_dialog1").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		close: function(event, ui) {
			var b = $("input[name='billing_cpt_helper1']:checked").val();
			if (b != '') {
				$("#billing_cpt1").val(b);
				$.ajax({
					type: "POST",
					url: "ajaxchart/get-cpt-charge",
					data: "cpt=" + b,
					success: function(data){
						$("#billing_cpt_charge1").val(data);
					}
				});
			} else {
				$("#billing_cpt1").val('');
				$("#billing_cpt_charge1").val('');
			}
			$('#cpt_helper_items1').clearDiv();
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#print_invoice1").click(function(){
		var ins1 = $("#billing_insurance_id_1").val();
		var ins2 = $("#billing_insurance_id_2").val();
		if (ins2 == '') {
			ins2 = '0';
		}
		var eid = $("#billing_eid_1").val();
		window.open("print_invoice1/" + eid + "/" + ins1 + "/" + ins2);
		total_balance();
		reload_grid("billing_encounters");
	});
	$("#print_hcfa1").click(function(){
		var a = $("#billing_insurance_id_1");
		var bValid = true;
		bValid = bValid && checkEmpty(a,"Primary Insurance");
		if (bValid) {
			var ins1 = $("#billing_insurance_id_1").val();
			var ins2 = $("#billing_insurance_id_2").val();
			var eid = $("#billing_eid_1").val();
			if (ins1 == '' || ins1 == '0') {
				$.jGrowl("No HCFA-1500 printed due to no primary insurance!");
			} else {
				window.open("generate_hcfa1/n/" + eid + "/" + ins1 + "/" + ins2);
				total_balance();
				reload_grid("billing_encounters");
			}
		}
	});
	$("#print_hcfa2").click(function(){
		var a = $("#billing_insurance_id_1");
		var bValid = true;
		bValid = bValid && checkEmpty(a,"Primary Insurance");
		if (bValid) {
			var ins1 = $("#billing_insurance_id_1").val();
			var ins2 = $("#billing_insurance_id_2").val();
			var eid = $("#billing_eid_1").val();
			if (ins1 == '' || ins1 == '0') {
				$.jGrowl("No HCFA-1500 printed due to no primary insurance!");
			} else {
				window.open("generate_hcfa1/y/" + eid + "/" + ins1 + "/" + ins2);
				total_balance();
				reload_grid("billing_encounters");
			}
		}
	});
	$("#billing_icd1").chosen();
	$("#add_billing_cpt1").click(function(){
		$('#billing_form1').clearForm();
		$("#billing_unit1").val('1');
		$("#billing_modifier1").val('');
		var eid = $("#billing_eid_1").val();
		$.ajax({
			type: "POST",
			url: "ajaxchart/get-encounter-date/" + eid,
			success: function(data){
				var a = editDate1(data);
				$("#billing_dos_f1").val(a);
				$("#billing_dos_t1").val(a);
			}
		});
		$("#billing_icd1").selectOptions('', true);
		$("#billing_icd1").trigger("liszt:updated");
		$("#cpt_billing_dialog1").dialog('open');
		$("#billing_cpt1").focus();
	});
	$("#edit_billing_cpt1").click(function(){
		var item = jQuery("#billing_cpt_list").getGridParam('selrow');
		if(item){
			jQuery("#billing_cpt_list").GridToForm(item,"#billing_form1");
			var dx = jQuery("#billing_cpt_list").getCell(item,"icd_pointer");
			var icd_array = String(dx).split("");
			var length = icd_array.length;
			for (var i = 0; i < length; i++) {
				$("#billing_icd1").selectOptions(icd_array[i], true);
			}
			$("#billing_icd1").trigger("liszt:updated");
			$("#cpt_billing_dialog1").dialog('open');
			$("#billing_cpt_charge1").focus();
		} else {
			$.jGrowl("Please select row to edit!");
		}
	});
	$("#remove_billing_cpt1").click(function(){
		var item = jQuery("#billing_cpt_list").getGridParam('selrow');
		if(item){
			$.ajax({
				url: "ajaxchart/remove-cpt",
				type: "POST",
				data: "billing_core_id=" + item,
				success: function(data){
					$.jGrowl(data);
					reload_grid("billing_cpt_list");
				}
			});
		} else {
			$.jGrowl("Please select row to remove!");
		}
	});
	$("#cpt_billing_dialog1").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		modal: true,
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#billing_cpt1").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/cpt1",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							} else {
								var addterm = [{"label": req.term + ": Select to add CPT to database.", "value":"*/add/*", "value1": req.term}];
								add(addterm);
							}
						}
					});
				},
				minLength: 3,
				select: function(event, ui){
					if (ui.item.value == "*/add/*") {
						$("#configuration_cpt_form").clearForm();
						if (ui.item.value1.length > 5) {
							$("#configuration_cpt_description").val(ui.item.value1);
						} else {
							$("#configuration_cpt_code").val(ui.item.value1);
						}
						$('#configuration_cpt_origin').val("billing_cpt");
						$('#configuration_cpt_dialog').dialog('open');
						$('#configuration_cpt_dialog').dialog('option', 'title', "Add CPT Code");
					} else {
						$("#billing_cpt_charge1").val(ui.item.charge);
					}
				},
				change: function (event, ui) {
					if(!ui.item){
						$.jGrowl("CPT code must be selected from the database!");
						$("#billing_cpt").addClass("ui-state-error");
					} else {
						$("#billing_cpt").removeClass("ui-state-error");
					}
				}
			});
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#billing_form1").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#billing_form1").serialize();
					var eid = $("#billing_eid_1").val();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/billing-save/" + eid,
							data: str,
							success: function(data){
								$.jGrowl(data);
								$("#billing_form1").clearForm();
								$("#cpt_billing_dialog1").dialog('close');
								reload_grid("billing_cpt_list");
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$("#billing_form1").clearForm();
				$("#cpt_billing_dialog1").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$('#cpt_helper1').click(function(){
		$("#cpt_helper_dialog1").dialog('open');
	});
	$('#update_cpt_charge1').click(function(){
		var item = $("#billing_cpt1").val();
		if(item != ''){
			var item2 = $("#billing_cpt_charge1").val();
			$.ajax({
				url: "ajaxchart/update-cpt-charge",
				type: "POST",
				data: "cpt=" + item + "&cpt_charge=" + item2,
				success: function(data){
					$.jGrowl(data);
				}
			});
		} else {
			$.jGrowl("Please enter a CPT code to update!");
		}
	});
	$("#billing_dos_f1").mask("99/99/9999").datepicker();
	$("#billing_dos_t1").mask("99/99/9999").datepicker();
	$("#billing_select_insurance1").click(function(){
		var item = jQuery("#billing_insurance_list1").getGridParam('selrow');
		if(item){
			$("#billing_insurance_id_1").val(item);
			get_insurance_info();
		} else {
			$.jGrowl("Please select insurance!");
		}
	});
	$("#billing_select_insurance2").click(function(){
		var item = jQuery("#billing_insurance_list1").getGridParam('selrow');
		if(item){
			$("#billing_insurance_id_2").val(item);
			get_insurance_info();
		} else {
			$.jGrowl("Please select insurance!");
		}
	});
	$("#billing_select_self_pay").click(function(){
		$("#billing_insurance_id_1").val('0');
		$("#billing_insurance_id_2").val('');
		get_insurance_info();
	});
	$("#billing_clear_insurance1").click(function(){
		$("#billing_insurance_id_1").val('');
		get_insurance_info();
	});
	$("#billing_clear_insurance2").click(function(){
		$("#billing_insurance_id_2").val('');
		get_insurance_info();
	});
	$(".insurance_billing").click(function() {
		$("#demographics_insurance_dialog").dialog('open');
	});
	$("#cpt_link1").click(function(){
		$("#configuration_dialog").dialog('open');
		$("#configuration_accordion").accordion("option", "active", 7);
	});
	if (noshdata.financial != '') {
		$("#billing_list_dialog").dialog('open');
		$.ajax({
			type: "POST",
			url: "ajaxfinancial/reset-session",
			success: function(data){
				noshdata.financial = '';
			}
		});
	}
});
$(document).ready(function() {
	$("#documents_list_dialog").dialog({ 
		bgiframe: true,
		autoOpen: false,
		height: 580,
		width: 800,
		open: function() {
			jQuery("#labs").jqGrid('GridUnload');
			jQuery("#labs").jqGrid({
				url: "ajaxcommon/documents/Laboratory",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','From','Description','Type','URL'],
				colModel:[
					{name:'documents_id',index:'documents_id',width:1,hidden:true},
					{name:'documents_date',index:'documents_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'documents_from',index:'documents_from',width:300},
					{name:'documents_desc',index:'documents_desc',width:325},
					{name:'documents_type',index:'documents_type',width:1,hidden:true},
					{name:'documents_url',index:'documents_url',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#pager8'),
				sortname: 'documents_date',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Labs",
			 	hiddengrid: true,
			 	height: "100%",
			 	onCellSelect: function(id,iCol) {
					if (iCol > 1) {
				 		$("#view_document_id").val(id);
				 		$.ajax({
							type: "POST",
							url: "ajaxcommon/view-documents1/" + id,
							dataType: "json",
							success: function(data){
								//$('#embedURL').PDFDoc( { source : data.html } );
								$("#embedURL").html(data.html);
								$("#document_filepath").val(data.filepath);
								documents_view_tags();
								$("#documents_view_dialog").dialog('open');
							}
						});
					}
			 	},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#pager8',{search:false,edit:false,add:false,del:false});
			jQuery("#radiology").jqGrid('GridUnload');
			jQuery("#radiology").jqGrid({
				url: "ajaxcommon/documents/Imaging",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','From','Description','Type','URL'],
				colModel:[
					{name:'documents_id',index:'documents_id',width:1,hidden:true},
					{name:'documents_date',index:'documents_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'documents_from',index:'documents_from',width:300},
					{name:'documents_desc',index:'documents_desc',width:325},
					{name:'documents_type',index:'documents_type',width:1,hidden:true},
					{name:'documents_url',index:'documents_url',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#pager9'),
				sortname: 'documents_date',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Imaging",
			 	hiddengrid: true,
			 	height: "100%",
			 	onCellSelect: function(id,iCol) {
					if (iCol > 1) {
				 		$("#view_document_id").val(id);
				 		$.ajax({
							type: "POST",
							url: "ajaxcommon/view-documents1/" + id,
							dataType: "json",
							success: function(data){
								//$('#embedURL').PDFDoc( { source : data.html } );
								$("#embedURL").html(data.html);
								$("#document_filepath").val(data.filepath);
								documents_view_tags();
								$("#documents_view_dialog").dialog('open');
							}
						});
					}
			 	},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#pager9',{search:false,edit:false,add:false,del:false});
			jQuery("#cardiopulm").jqGrid('GridUnload');
			jQuery("#cardiopulm").jqGrid({
				url: "ajaxcommon/documents/Cardiopulmonary",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','From','Description','Type','URL'],
				colModel:[
					{name:'documents_id',index:'documents_id',width:1,hidden:true},
					{name:'documents_date',index:'documents_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'documents_from',index:'documents_from',width:300},
					{name:'documents_desc',index:'documents_desc',width:325},
					{name:'documents_type',index:'documents_type',width:1,hidden:true},
					{name:'documents_url',index:'documents_url',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#pager10'),
				sortname: 'documents_date',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Cardiopulmonary",
			 	hiddengrid: true,
			 	height: "100%",
			 	onCellSelect: function(id,iCol) {
					if (iCol > 1) {
				 		$("#view_document_id").val(id);
				 		$.ajax({
							type: "POST",
							url: "ajaxcommon/view-documents1/" + id,
							dataType: "json",
							success: function(data){
								//$('#embedURL').PDFDoc( { source : data.html } );
								$("#embedURL").html(data.html);
								$("#document_filepath").val(data.filepath);
								documents_view_tags();
								$("#documents_view_dialog").dialog('open');
							}
						});
					}
			 	},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#pager10',{search:false,edit:false,add:false,del:false});
			jQuery("#endoscopy").jqGrid('GridUnload');
			jQuery("#endoscopy").jqGrid({
				url: "ajaxcommon/documents/Endoscopy",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','From','Description','Type','URL'],
				colModel:[
					{name:'documents_id',index:'documents_id',width:1,hidden:true},
					{name:'documents_date',index:'documents_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'documents_from',index:'documents_from',width:300},
					{name:'documents_desc',index:'documents_desc',width:325},
					{name:'documents_type',index:'documents_type',width:1,hidden:true},
					{name:'documents_url',index:'documents_url',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#pager11'),
				sortname: 'documents_date',
				viewrecords: true,
				sortorder: "desc",
				caption:"Endoscopy: " + $('#endoscopy_count').val(),
				hiddengrid: true,
				height: "100%",
				onCellSelect: function(id,iCol) {
					if (iCol > 1) {
				 		$("#view_document_id").val(id);
				 		$.ajax({
							type: "POST",
							url: "ajaxcommon/view-documents1/" + id,
							dataType: "json",
							success: function(data){
								//$('#embedURL').PDFDoc( { source : data.html } );
								$("#embedURL").html(data.html);
								$("#document_filepath").val(data.filepath);
								documents_view_tags();
								$("#documents_view_dialog").dialog('open');
							}
						});
					}
			 	},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#pager11',{search:false,edit:false,add:false,del:false});
			jQuery("#referrals").jqGrid('GridUnload');
			jQuery("#referrals").jqGrid({
				url: "ajaxcommon/documents/Referrals",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','From','Description','Type','URL'],
				colModel:[
					{name:'documents_id',index:'documents_id',width:1,hidden:true},
					{name:'documents_date',index:'documents_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'documents_from',index:'documents_from',width:300},
					{name:'documents_desc',index:'documents_desc',width:325},
					{name:'documents_type',index:'documents_type',width:1,hidden:true},
					{name:'documents_url',index:'documents_url',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#pager12'),
				sortname: 'documents_date',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Referrals",
			 	hiddengrid: true,
			 	height: "100%",
			 	onCellSelect: function(id,iCol) {
					if (iCol > 1) {
				 		$("#view_document_id").val(id);
				 		$.ajax({
							type: "POST",
							url: "ajaxcommon/view-documents1/" + id,
							dataType: "json",
							success: function(data){
								//$('#embedURL').PDFDoc( { source : data.html } );
								$("#embedURL").html(data.html);
								$("#document_filepath").val(data.filepath);
								documents_view_tags();
								$("#documents_view_dialog").dialog('open');
							}
						});
					}
			 	},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#pager12',{search:false,edit:false,add:false,del:false});
			jQuery("#past_records").jqGrid('GridUnload');
			jQuery("#past_records").jqGrid({
				url: "ajaxcommon/documents/Past_Records",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','From','Description','Type','URL'],
				colModel:[
					{name:'documents_id',index:'documents_id',width:1,hidden:true},
					{name:'documents_date',index:'documents_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'documents_from',index:'documents_from',width:300},
					{name:'documents_desc',index:'documents_desc',width:325},
					{name:'documents_type',index:'documents_type',width:1,hidden:true},
					{name:'documents_url',index:'documents_url',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#pager13'),
				sortname: 'documents_date',
				viewrecords: true,
				sortorder: "desc",
				caption:"Past Records",
				hiddengrid: true,
				height: "100%",
				onCellSelect: function(id,iCol) {
					if (iCol > 1) {
				 		$("#view_document_id").val(id);
				 		$.ajax({
							type: "POST",
							url: "ajaxcommon/view-documents1/" + id,
							dataType: "json",
							success: function(data){
								//$('#embedURL').PDFDoc( { source : data.html } );
								$("#embedURL").html(data.html);
								$("#document_filepath").val(data.filepath);
								documents_view_tags();
								$("#documents_view_dialog").dialog('open');
							}
						});
					}
			 	},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#pager13',{search:false,edit:false,add:false,del:false});
			jQuery("#outside_forms").jqGrid('GridUnload');
			jQuery("#outside_forms").jqGrid({
				url: "ajaxcommon/documents/Other_Forms",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','From','Description','Type','URL'],
				colModel:[
					{name:'documents_id',index:'documents_id',width:1,hidden:true},
					{name:'documents_date',index:'documents_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'documents_from',index:'documents_from',width:300},
					{name:'documents_desc',index:'documents_desc',width:325},
					{name:'documents_type',index:'documents_type',width:1,hidden:true},
					{name:'documents_url',index:'documents_url',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#pager14'),
				sortname: 'documents_date',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Other Forms",
			 	hiddengrid: true,
			 	height: "100%",
			 	onCellSelect: function(id,iCol) {
					if (iCol > 1) {
				 		$("#view_document_id").val(id);
				 		$.ajax({
							type: "POST",
							url: "ajaxcommon/view-documents1/" + id,
							dataType: "json",
							success: function(data){
								//$('#embedURL').PDFDoc( { source : data.html } );
								$("#embedURL").html(data.html);
								$("#document_filepath").val(data.filepath);
								documents_view_tags();
								$("#documents_view_dialog").dialog('open');
							}
						});
					}
			 	},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#pager14',{search:false,edit:false,add:false,del:false});
			jQuery("#letters").jqGrid('GridUnload');
			jQuery("#letters").jqGrid({
				url: "ajaxcommon/documents/Letters",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','From','Description','Type','URL'],
				colModel:[
					{name:'documents_id',index:'documents_id',width:1,hidden:true},
					{name:'documents_date',index:'documents_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'documents_from',index:'documents_from',width:300},
					{name:'documents_desc',index:'documents_desc',width:325},
					{name:'documents_type',index:'documents_type',width:1,hidden:true},
					{name:'documents_url',index:'documents_url',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#pager15'),
				sortname: 'documents_date',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Letters",
			 	hiddengrid: true,
			 	height: "100%",
			 	onCellSelect: function(id,iCol) {
					if (iCol > 1) {
				 		$("#view_document_id").val(id);
				 		$.ajax({
							type: "POST",
							url: "ajaxcommon/view-documents1/" + id,
							dataType: "json",
							success: function(data){
								//$('#embedURL').PDFDoc( { source : data.html } );
								$("#embedURL").html(data.html);
								$("#document_filepath").val(data.filepath);
								documents_view_tags();
								$("#documents_view_dialog").dialog('open');
							}
						});
					}
			 	},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#pager15',{search:false,edit:false,add:false,del:false});
			jQuery("#ccdas").jqGrid('GridUnload');
			jQuery("#ccdas").jqGrid({
				url: "ajaxcommon/documents/ccda",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','From','Description','Type','URL'],
				colModel:[
					{name:'documents_id',index:'documents_id',width:1,hidden:true},
					{name:'documents_date',index:'documents_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'documents_from',index:'documents_from',width:300},
					{name:'documents_desc',index:'documents_desc',width:325},
					{name:'documents_type',index:'documents_type',width:1,hidden:true},
					{name:'documents_url',index:'documents_url',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#pager16'),
				sortname: 'documents_date',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Consolidated Clinical Documents (C-CDA's)",
			 	hiddengrid: true,
			 	height: "100%",
			 	onCellSelect: function(id,iCol) {
					if (iCol > 1) {
				 		window.open("bluebutton/" + id);
					}
			 	},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#pager16',{search:false,edit:false,add:false,del:false});
			if (noshdata.group_id == '2' || noshdata.group_id == '3') {
				jQuery("#labs").navButtonAdd('#pager8',{
					caption:"Edit", 
					buttonicon:"ui-icon-pencil", 
					onClickButton: function(){ 
						var id = jQuery("#labs").getGridParam('selrow');
						if(id){
							jQuery("#labs").GridToForm(id,"#documents_edit_form");
							var date = $('#menu_documents_date').val();
							var edit_date = editDate(date);
							$('#menu_documents_date').val(edit_date);
							documents_tags();
							$('#documents_edit_dialog').dialog('open');
							$("#menu_documents_from").focus();
						} else {
							$.jGrowl('Choose document to edit!');
						}
					}, 
					position:"last"
				}).navButtonAdd('#pager8',{
					caption:"Delete", 
					buttonicon:"ui-icon-trash", 
					onClickButton: function(){ 
						var id = jQuery("#labs").getGridParam('selrow');
						if(id){
							if(confirm('Are you sure you want to delete this document?')){ 
								$.ajax({
									type: "POST",
									url: "ajaxchart/delete-document",
									data: "documents_id=" + id,
									success: function(data){
										$.jGrowl(data);
										reload_grid("labs");
										refresh_documents();
									}
								});
							}
						} else {
							$.jGrowl('Choose document to delete!');
						}
					}, 
					position:"last"
				});
				jQuery("#radiology").navButtonAdd('#pager9',{
					caption:"Edit", 
					buttonicon:"ui-icon-pencil", 
					onClickButton: function(){ 
						var id = jQuery("#radiology").getGridParam('selrow');
						if(id){
							jQuery("#radiology").GridToForm(id,"#documents_edit_form");
							var date = $('#menu_documents_date').val();
							var edit_date = editDate(date);
							$('#menu_documents_date').val(edit_date);
							documents_tags();
							$('#documents_edit_dialog').dialog('open');
							$("#menu_documents_from").focus();
						} else {
							$.jGrowl('Choose document to edit!');
						}
					}, 
					position:"last"
				}).navButtonAdd('#pager9',{
					caption:"Delete", 
					buttonicon:"ui-icon-trash", 
					onClickButton: function(){ 
						var id = jQuery("#radiology").getGridParam('selrow');
						if(id){
							if(confirm('Are you sure you want to delete this document?')){ 
								$.ajax({
									type: "POST",
									url: "ajaxchart/delete-document",
									data: "documents_id=" + id,
									success: function(data){
										$.jGrowl(data);
										reload_grid("radiology");
										refresh_documents();
									}
								});
							}
						} else {
							$.jGrowl('Choose document to delete!');
						}
					}, 
					position:"last"
				});
				jQuery("#cardiopulm").navButtonAdd('#pager10',{
					caption:"Edit", 
					buttonicon:"ui-icon-pencil", 
					onClickButton: function(){ 
						var id = jQuery("#cardiopulm").getGridParam('selrow');
						if(id){
							jQuery("#cardiopulm").GridToForm(id,"#documents_edit_form");
							var date = $('#menu_documents_date').val();
							var edit_date = editDate(date);
							$('#menu_documents_date').val(edit_date);
							documents_view_tags();
							$('#documents_edit_dialog').dialog('open');
							$("#menu_documents_from").focus();
						} else {
							$.jGrowl('Choose document to edit!');
						}
					}, 
					position:"last"
				}).navButtonAdd('#pager10',{
					caption:"Delete", 
					buttonicon:"ui-icon-trash", 
					onClickButton: function(){ 
						var id = jQuery("#cardiopulm").getGridParam('selrow');
						if(id){
							if(confirm('Are you sure you want to delete this document?')){ 
								$.ajax({
									type: "POST",
									url: "ajaxchart/delete-document",
									data: "documents_id=" + id,
									success: function(data){
										$.jGrowl(data);
										reload_grid("cardiopulm");
										refresh_documents();
									}
								});
							}
						} else {
							$.jGrowl('Choose document to delete!');
						}
					}, 
					position:"last"
				});
				jQuery("#endoscopy").navButtonAdd('#pager11',{
					caption:"Edit", 
					buttonicon:"ui-icon-pencil", 
					onClickButton: function(){ 
						var id = jQuery("#endoscopy").getGridParam('selrow');
						if(id){
							jQuery("#endoscopy").GridToForm(id,"#documents_edit_form");
							var date = $('#menu_documents_date').val();
							var edit_date = editDate(date);
							$('#menu_documents_date').val(edit_date);
							documents_tags();
							$('#documents_edit_dialog').dialog('open');
							$("#menu_documents_from").focus();
						} else {
							$.jGrowl('Choose document to edit!');
						}
					}, 
					position:"last"
				}).navButtonAdd('#pager11',{
					caption:"Delete", 
					buttonicon:"ui-icon-trash", 
					onClickButton: function(){ 
						var id = jQuery("#endoscopy").getGridParam('selrow');
						if(id){
							if(confirm('Are you sure you want to delete this document?')){ 
								$.ajax({
									type: "POST",
									url: "ajaxchart/delete-document",
									data: "documents_id=" + id,
									success: function(data){
										$.jGrowl(data);
										reload_grid("endosocpy");
										refresh_documents();
									}
								});
							}
						} else {
							$.jGrowl('Choose document to delete!');
						}
					}, 
					position:"last"
				});
				jQuery("#referrals").navButtonAdd('#pager12',{
					caption:"Edit", 
					buttonicon:"ui-icon-pencil", 
					onClickButton: function(){ 
						var id = jQuery("#referrals").getGridParam('selrow');
						if(id){
							jQuery("#referrals").GridToForm(id,"#documents_edit_form");
							var date = $('#menu_documents_date').val();
							var edit_date = editDate(date);
							$('#menu_documents_date').val(edit_date);
							documents_tags();
							$('#documents_edit_dialog').dialog('open');
							$("#menu_documents_from").focus();
						} else {
							$.jGrowl('Choose document to edit!');
						}
					}, 
					position:"last"
				}).navButtonAdd('#pager12',{
					caption:"Delete", 
					buttonicon:"ui-icon-trash", 
					onClickButton: function(){ 
						var id = jQuery("#referrals").getGridParam('selrow');
						if(id){
							if(confirm('Are you sure you want to delete this document?')){ 
								$.ajax({
									type: "POST",
									url: "ajaxchart/delete-document",
									data: "documents_id=" + id,
									success: function(data){
										$.jGrowl(data);
										reload_grid("referrals");
										refresh_documents();
									}
								});
							}
						} else {
							$.jGrowl('Choose document to delete!');
						}
					}, 
					position:"last"
				});
				jQuery("#past_records").navButtonAdd('#pager13',{
					caption:"Edit", 
					buttonicon:"ui-icon-pencil", 
					onClickButton: function(){ 
						var id = jQuery("#past_records").getGridParam('selrow');
						if(id){
							jQuery("#past_records").GridToForm(id,"#documents_edit_form");
							var date = $('#menu_documents_date').val();
							var edit_date = editDate(date);
							$('#menu_documents_date').val(edit_date);
							documents_tags();
							$('#documents_edit_dialog').dialog('open');
							$("#menu_documents_from").focus();
						} else {
							$.jGrowl('Choose document to edit!');
						}
					}, 
					position:"last"
				}).navButtonAdd('#pager13',{
					caption:"Delete", 
					buttonicon:"ui-icon-trash", 
					onClickButton: function(){ 
						var id = jQuery("#past_records").getGridParam('selrow');
						if(id){
							if(confirm('Are you sure you want to delete this document?')){ 
								$.ajax({
									type: "POST",
									url: "ajaxchart/delete-document",
									data: "documents_id=" + id,
									success: function(data){
										$.jGrowl(data);
										reload_grid("past_records");
										refresh_documents();
									}
								});
							}
						} else {
							$.jGrowl('Choose document to delete!');
						}
					}, 
					position:"last"
				});
				jQuery("#outside_forms").navButtonAdd('#pager14',{
					caption:"Edit", 
					buttonicon:"ui-icon-pencil", 
					onClickButton: function(){ 
						var id = jQuery("#outside_forms").getGridParam('selrow');
						if(id){
							jQuery("#outside_forms").GridToForm(id,"#documents_edit_form");
							var date = $('#menu_documents_date').val();
							var edit_date = editDate(date);
							$('#menu_documents_date').val(edit_date);
							documents_tags();
							$('#documents_edit_dialog').dialog('open');
							$("#menu_documents_from").focus();
						} else {
							$.jGrowl('Choose document to edit!');
						}
					}, 
					position:"last"
				}).navButtonAdd('#pager14',{
					caption:"Delete", 
					buttonicon:"ui-icon-trash", 
					onClickButton: function(){ 
						var id = jQuery("#outside_forms").getGridParam('selrow');
						if(id){
							if(confirm('Are you sure you want to delete this document?')){ 
								$.ajax({
									type: "POST",
									url: "ajaxchart/delete-document",
									data: "documents_id=" + id,
									success: function(data){
										$.jGrowl(data);
										reload_grid("outside_forms");
										refresh_documents();
									}
								});
							}
						} else {
							$.jGrowl('Choose document to delete!');
						}
					}, 
					position:"last"
				});
				jQuery("#letters").navButtonAdd('#pager15',{
					caption:"Edit", 
					buttonicon:"ui-icon-pencil", 
					onClickButton: function(){ 
						var id = jQuery("#letters").getGridParam('selrow');
						if(id){
							jQuery("#letters").GridToForm(id,"#documents_edit_form");
							var date = $('#menu_documents_date').val();
							var edit_date = editDate(date);
							$('#menu_documents_date').val(edit_date);
							documents_tags();
							$('#documents_edit_dialog').dialog('open');
							$("#menu_documents_from").focus();
						} else {
							$.jGrowl('Choose document to edit!');
						}
					}, 
					position:"last"
				}).navButtonAdd('#pager15',{
					caption:"Delete", 
					buttonicon:"ui-icon-trash", 
					onClickButton: function(){ 
						var id = jQuery("#letters").getGridParam('selrow');
						if(id){
							if(confirm('Are you sure you want to delete this document?')){ 
								$.ajax({
									type: "POST",
									url: "ajaxchart/delete-document",
									data: "documents_id=" + id,
									success: function(data){
										$.jGrowl(data);
										reload_grid("letters");
										refresh_documents()
									}
								});
							}
						} else {
							$.jGrowl('Choose document to delete!');
						}
					}, 
					position:"last"
				});
				jQuery("#ccdas").navButtonAdd('#pager16',{
					caption:"Edit", 
					buttonicon:"ui-icon-pencil", 
					onClickButton: function(){ 
						var id = jQuery("#ccdas").getGridParam('selrow');
						if(id){
							jQuery("#ccdas").GridToForm(id,"#documents_edit_form");
							var date = $('#menu_documents_date').val();
							var edit_date = editDate(date);
							$('#menu_documents_date').val(edit_date);
							documents_tags();
							$('#documents_edit_dialog').dialog('open');
							$("#menu_documents_from").focus();
						} else {
							$.jGrowl('Choose document to edit!');
						}
					}, 
					position:"last"
				}).navButtonAdd('#pager16',{
					caption:"Delete", 
					buttonicon:"ui-icon-trash", 
					onClickButton: function(){ 
						var id = jQuery("#ccdas").getGridParam('selrow');
						if(id){
							if(confirm('Are you sure you want to delete this document?')){ 
								$.ajax({
									type: "POST",
									url: "ajaxchart/delete-document",
									data: "documents_id=" + id,
									success: function(data){
										$.jGrowl(data);
										reload_grid("ccdas");
										refresh_documents()
									}
								});
							}
						} else {
							$.jGrowl('Choose document to delete!');
						}
					}, 
					position:"last"
				});
			}
			refresh_documents();
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#documents_view_dialog").dialog({ 
		bgiframe: true,
		autoOpen: false,
		height: 500,
		width: 800,
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Download': function() {
				var id = $("#view_document_id").val();
				window.open("view_documents/" + id);
			},
			'Close' : function() {
				var a = $("#document_filepath").val();
				$.ajax({
					type: "POST",
					url: "ajaxcommon/close-document",
					data: "document_filepath=" + a,
					success: function(data){
						$("#embedURL").html('');
						$("#document_filepath").val('');
						$("#view_document_id").val('');
						$("#documents_view_dialog").dialog('close');
					}
				});
				
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#documents_list").click(function() {
		$("#documents_list_dialog").dialog('open');
	});
	$("#dashboard_health_record").click(function() {
		$("#documents_list_dialog").dialog('open');
	});
	$("#menu_documents_type").addOption({"Laboratory":"Laboratory","Imaging":"Imaging","Cardiopulmonary":"Cardiopulmonary","Endoscopy":"Endoscopy","Referrals":"Referrals","Past Records":"Past Records","Other Forms":"Other Forms","Letters":"Letters"}, false);
	$("#menu_documents_date").mask("99/99/9999");
	$("#menu_documents_date").datepicker();
	$("#documents_edit_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#menu_documents_from").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/document-from",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 2
			});
			$("#menu_documents_desc").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/document-description",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 2
			});
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#documents_edit_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#documents_edit_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/edit-document",
							data: str,
							success: function(data){
								$.jGrowl(data);
								$('#documents_edit_form').clearForm();
								$('#documents_edit_dialog').dialog('close');
								reload_grid("labs");
								reload_grid("radiology");
								reload_grid("cardiopulm");
								reload_grid("endoscopy");
								reload_grid("referrals");
								reload_grid("past_records");
								reload_grid("outside_forms");
								reload_grid("letters");
								refresh_documents();
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#documents_edit_form').clearForm();
				$('#documents_edit_dialog').dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#menu_new_letter").click(function() {
		$("#letter_dialog").dialog('open');
	});
	$("#letter_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#letter_to").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/all_contacts1",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 2,
				select: function(event, ui){
					$('#letter_to_id').val(ui.item.id);
				}
			});
			$.ajax({
				type: "POST",
				url: "ajaxchart/letter-template-select-list",
				dataType: "json",
				success: function(data){
					$('#letter_template_choose_id').addOption({"":"*Select a template"});
					$('#letter_template_choose_id').addOption(data.options);
					$('#letter_template_choose_id').sortOptions();
					$('#letter_template_choose_id').val("");
				}
			});
		},
		buttons: {
			'Save': function() {
				var str = $("#letter_form").serialize();
				$.ajax({
					type: "POST",
					url: "ajaxchart/print-letter",
					data: str,
					dataType: 'json',
					async: false,
					success: function(data){
						if (data.message == 'OK') {
							$.ajax({
								type: "POST",
								url: "ajaxcommon/view-documents1/" + data.id,
								dataType: "json",
								success: function(data){
									//$('#embedURL').PDFDoc( { source : data.html } );
									$("#view_document_id").val(data.id);
									$("#embedURL").html(data.html);
									$("#document_filepath").val(data.filepath);
									$("#documents_view_dialog").dialog('open');
								}
							});
						} else {
							$.jGrowl(data.message);
						}
					}
				});
				var eid = $("#letter_eid").val();
				if (eid != '') {
					var to = $("#letter_to").val();
					var body = $("#letter_body").val();
					var send = "Letter Written:\nTo: " + to + "\n" + body;
					var old = $("#orders_plan").val();
						if(old){
							var pos = old.lastIndexOf('\n');
							if (pos == -1) {
								var old1 = old + '\n';
							} else {
								var a = old.slice(pos);
								if (a == '') {
									var old1 = old;
								} else {
									var old1 = old + '\n';
								}
							}
						} else {
							var old1 = '';
						}
						$("#orders_plan").val(old1+send);
				}
				$('#letter_form').clearForm();
				$('#letter_template_form').clearForm();
				$('#letter_template').hide();
				$('#letter_dialog').dialog('close');
			},
			Cancel: function() {
				$('#letter_form').clearForm();
				$('#letter_template_form').clearForm();
				$('#letter_template').hide();
				$('#letter_dialog').dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#letter_to_whom").button();
	$("#letter_to_whom").click(function() {
		$('#letter_to').val('To whom it may concern');
	});
	$('#letter_template_choose_id').change(function(){
		var a = $(this).val();
		$('#letter_template_form').html('');
		if (a != '') {
			$.ajax({
				type: "POST",
				url: "ajaxchart/get-letter-template/" + a,
				dataType: "json",
				success: function(data){
					$('#letter_template_form').dform(data);
					$(".letter_date").mask("99/99/9999").datepicker();
					$('#letter_template_form').find('.letter_buttonset').buttonset();
					$(".letter_select").chosen();
					$('#letter_template_form').find('input').first().focus();
				}
			});
		}
	});
	$("#letter_template_save").button({icons: {primary: "ui-icon-arrowthick-1-w"}}).click(function(){
		$.ajax({
			type: "POST",
			url: "ajaxchart/letter-template-construct",
			dataType: "json",
			success: function(data){
				var b = $(".letter_hidden").val();
				var start_date = $.datepicker.formatDate('MM d, yy', parse_date1($('.letter_start_date').val()));
				var return_date = $.datepicker.formatDate('MM d, yy', parse_date1($('.letter_return_date').val()));
				var end_date = $.datepicker.formatDate('MM d, yy', parse_date1($('.letter_end_date').val()));
				b = b.replace('_firstname', data.firstname);
				b = b.replace('  _firstname', '  ' + data.firstname);
				b = b.replace('_start_date', start_date);
				b = b.replace('_return_date', return_date);
				b = b.replace('_end_date', end_date);
				var c_array = $('.letter_select').val();
				if (c_array) {
					var c = c_array.join("");
					b = b + "\n" + c;
				}
				var a = $("#letter_body").val();
				a = a.replace(data.start, '');
				if (a == '') {
					$('#letter_body').val(data.start + b);
				} else {
					$('#letter_body').val(a + "\n" + data.start + b);
				}
				$('#letter_template_form').clearForm();
			}
		});
		
	});
	$('#letter_reset').button({icons: {primary: "ui-icon-close"}}).click(function(){
		$("#letter_body").val('');
		$('#letter_template_form').clearForm();
	});
	
	$("#menu_tests").button({
		icons: {
			primary: "ui-icon-image"
		}
	});
	$("#menu_tests").click(function() {
		$("#tests_dialog").dialog('open');
	});
	$("#tests_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800,
		open: function(event, ui) {
			$("#chart_loading").hide();
			jQuery("#tests_list").jqGrid('GridUnload');
			jQuery("#tests_list").jqGrid({
				url:"ajaxchart/tests",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','Test','Result','Unit','Range','Flags','Type'],
				colModel:[
					{name:'tests_id',index:'tests_id',width:1,hidden:true},
					{name:'test_datetime',index:'test_datetime',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'test_name',index:'test_name',width:120},
					{name:'test_result',index:'test_result',width:310},
					{name:'test_units',index:'test_units',width:50},
					{name:'test_reference',index:'test_reference',width:100},
					{name:'test_flags',index:'test_flags',width:50,
						cellattr: function (rowId, val, rawObject, cm, rdata) {
							if (rawObject.test_flags == "L") {
								var response = "Below low normal";
							}
							if (rawObject.test_flags == "H") {
								var response = "Above high normal";
							}
							if (rawObject.test_flags == "LL") {
								var response = "Below low panic limits";
							}
							if (rawObject.test_flags == "HH") {
								var response = "Above high panic limits";
							}
							if (rawObject.test_flags == "<") {
								var response = "Below absolute low-off instrument scale";
							}
							if (rawObject.test_flags == ">") {
								var response = "Above absolute high-off instrument scale";
							}
							if (rawObject.test_flags == "N") {
								var response = "Normal";
							}
							if (rawObject.test_flags == "A") {
								var response = "Abnormal";
							}
							if (rawObject.test_flags == "AA") {
								var response = "Very abnormal";
							}
							if (rawObject.test_flags == "U") {
								var response = "Significant change up";
							}
							if (rawObject.test_flags == "D") {
								var response = "Significant change down";
							}
							if (rawObject.test_flags == "B") {
								var response = "Better";
							}
							if (rawObject.test_flags == "W") {
								var response = "Worse";
							}
							if (rawObject.test_flags == "S") {
								var response = "Susceptible";
							}
							if (rawObject.test_flags == "R") {
								var response = "Resistant";
							}
							if (rawObject.test_flags == "I") {
								var response = "Intermediate";
							}
							if (rawObject.test_flags == "MS") {
								var response = "Moderately susceptible";
							}
							if (rawObject.test_flags == "VS") {
								var response = "Very susceptible";
							}
							if (rawObject.test_flags == "") {
								var response = "";
							}
							return 'title="' + response + '"';
						}
					},
					{name:'test_type',index:'test_type',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#tests_list_pager'),
				sortname: 'test_datetime',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Test Results",
			 	height: "100%",
			 	gridview: true,
			 	rowattr: function (rd) {
					if (rd.test_flags == "HH" || rd.test_flags == "LL" || rd.test_flags == "H" || rd.test_flags == "L") {
						return {"class": "myAltRowClass"};
					}
				},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#tests_list_pager',{search:false,edit:false,add:false,del:false});
			$("#chart_results").button().click(function() {
				var item = jQuery("#tests_list").getGridParam('selrow');
				if (item) {
					$("#chart_loading").show();
					var options = {
						chart: {
							renderTo: 'tests_container',
							defaultSeriesType: 'line',
							marginRight: 130,
							marginBottom: 50,
							width: 750
						},
						title: {
							text: '',
							x: -20
						},
						xAxis: {
							title: {
								text: ''
							},
							type: 'datetime'
						},
						yAxis: {
							title: {
								text: ''
							},
							plotLines: [{
								value: 0,
								width: 1,
								color: '#808080'
							}]
						},
						legend: {
							layout: 'vertical',
							align: 'right',
							verticalAlign: 'top',
							x: -10,
							y: 100,
							borderWidth: 0
						},
						series: [
							{type: 'line', data: []}
						],
						credits: {
							href: 'http://noshemr.wordpress.com',
							text: 'NOSH ChartingSystem'
						}
					};
					$.ajax({
						type: "POST",
						url: "ajaxchart/chart-test/" + item,
						dataType: "json",
						success: function(data){
							options.title.text = data.title;
							options.xAxis.title.text = data.xaxis;
							options.yAxis.title.text = data.yaxis;
							options.series[0].name = data.name;
							newData = [];
							for (i in data.patient) {
								newData.push( [ new Date(data.patient[i][0]).getTime(), parseFloat(data.patient[i][1]) ] );
							}
							options.series[0].data = newData;
							var chart = new Highcharts.Chart(options);
							$("#chart_loading").hide();
						}
					});
				} else {
					$.jGrowl('Choose item to chart!');
				}
			});
		},
		close: function (event, ui) {
			$("#tests_container").html('');
		}
	});
	$("#documents_view_tags").tagit({
		tagSource: function (req, add){
			$.ajax({
				url: "ajaxsearch/search-tags",
				dataType: "json",
				type: "POST",
				data: req,
				success: function(data){
					if(data.response =='true'){
						add(data.message);
					}
				}
			});
		},
		tagsChanged: function(a, b) {
			if (b == "added") {
				$.ajax({
					type: "POST",
					url: "ajaxsearch/save-tag/documents_id/" + $("#view_document_id").val(),
					data: 'tag=' + a
				});
			}
			if (b == "popped") {
				$.ajax({
					type: "POST",
					url: "ajaxsearch/remove-tag/documents_id/" + $("#view_document_id").val(),
					data: 'tag=' + a
				});
			}
		}
	});
	function documents_view_tags() {
		var id = $("#view_document_id").val();
		$.ajax({
			type: "POST",
			url: "ajaxsearch/get-tags/documents_id/" + id,
			dataType: "json",
			success: function(data){
				$("#documents_view_tags").tagit("fill",data);
			}
		});
	}
	$("#documents_tags").tagit({
		tagSource: function (req, add){
			$.ajax({
				url: "ajaxsearch/search-tags",
				dataType: "json",
				type: "POST",
				data: req,
				success: function(data){
					if(data.response =='true'){
						add(data.message);
					}
				}
			});
		},
		tagsChanged: function(a, b) {
			if (b == "added") {
				$.ajax({
					type: "POST",
					url: "ajaxsearch/save-tag/documents_id/" + $("#menu_documents_id").val(),
					data: 'tag=' + a
				});
			}
			if (b == "popped") {
				$.ajax({
					type: "POST",
					url: "ajaxsearch/remove-tag/documents_id/" + $("#menu_documents_id").val(),
					data: 'tag=' + a
				});
			}
		}
	});
	function documents_tags() {
		var id = $("#menu_documents_id").val();
		$.ajax({
			type: "POST",
			url: "ajaxsearch/get-tags/documents_id/" + id,
			dataType: "json",
			success: function(data){
				$("#documents_tags").tagit("fill",data);
			}
		});
	}
});
var timeoutHnd1;
function doSearch1(ev){ 
	if(timeoutHnd1) 
		clearTimeout(timeoutHnd1);
		timeoutHnd1 = setTimeout(gridReload1,500);
}
function gridReload1(){ 
	var mask = jQuery("#search_all_tests").val();
	jQuery("#tests_list").setGridParam({url:"ajaxchart/tests/"+mask,page:1}).trigger("reloadGrid");
}
$(document).ready(function() {
	function importreply() {
		var old = $("#t_messages_message").val();
		if(old){
			var pos = old.lastIndexOf('\n');
			if (pos == -1) {
				var old1 = old + '\n\n';
			} else {
				var a = old.slice(pos);
				if (a == '') {
					var old1 = old + '\n';
				} else {
					var old1 = old + '\n\n';
				}
			}
		} else {
			var old1 = '';
		}
		var a = $("#message_reply_tests_performed").val();
		var b = $("#message_reply_message").val();
		var c = $("#message_reply_followup").val();
		if(c){
			var c1 = 'Followup recommendations:  ' + c;
			if(b){
				var b1 = 'Conclusion:  ' + b + '\n\n';
				if(a != ""){
					var a1 = 'The following tests were performed: ' + a + '\n\n';
				} else {
					var a1 = '';
				}	
			} else {
				var b1 = '';
				if(a){
					var a1 = 'The following tests were performed: ' + a;
				} else {
					var a1 = '';
				}
			}
		} else {
			var c1 = '';
			if(b){
				var b1 = 'Conclusion:  ' + b;
				if(a){
					var a1 = 'The following tests were performed: ' + a + '\n\n';
				} else {
					var a1 = '';
				}	
			} else {
				var b1 = '';
				if(a){
					var a1 = 'The following tests were performed: ' + a;
				} else {
					var a1 = '';
				}
			}
		}
		$("#t_messages_message").val(old1+a1+b1+c1);
		var response = a1+b1+c1;
		return response;
	}
	function t_messages_tags() {
		var id = $("#t_messages_id").val();
		$.ajax({
			type: "POST",
			url: "ajaxsearch/get-tags/t_messages_id/" + id,
			dataType: "json",
			success: function(data){
				$(".t_messages_tags").tagit("fill",data);
			}
		});
	}
	$("#messages_list_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		open: function(event, ui) {
			jQuery("#messages").jqGrid('GridUnload');
			jQuery("#messages").jqGrid({
				url:"ajaxchart/messages",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date of Service','Subject','Message','Provider','Signed','To'],
				colModel:[
					{name:'t_messages_id',index:'t_messages_id',width:1,hidden:true},
					{name:'t_messages_dos',index:'t_messages_date',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'t_messages_subject',index:'t_messages_subject',width:425},
					{name:'t_messages_message',index:'t_messages_message',width:1,hidden:true},
					{name:'t_messages_provider',index:'t_messages_provider',width:100},
					{name:'t_messages_signed',index:'t_messages_signed',width:100},
					{name:'t_messages_to',index:'t_messages_to',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#messages_pager'),
				sortname: 't_messages_dos',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Messages",
			 	height: "100%",
			 	onSelectRow: function(id) {
			 		var item = jQuery("#messages").getGridParam('selrow');
		 			var signed = jQuery("#messages").getCell(id,'t_messages_signed');
		 			if (signed == 'No') {
						jQuery("#messages").GridToForm(id,"#edit_message_form");
						var date = $('#t_messages_dos').val();
						var edit_date = editDate(date);
						$('#t_messages_dos').val(edit_date);
						t_messages_tags();
						$("#messages_main_dialog").dialog('open');
					}
					if (signed == 'Yes') {
						$("#edit_message_fieldset").hide('fast');
						var row = jQuery("#messages").getRowData(id);
						var text = '<br><strong>Date:</strong>  ' + row['t_messages_dos'] + '<br><br><strong>Subject:</strong>  ' + row['t_messages_subject'] + '<br><br><strong>Message:</strong> ' + row['t_messages_message']; 
						$("#message_view").html(text);
						$("#t_messages_id").val(row['t_messages_id']);
						t_messages_tags();
						$("#messages_view_dialog").dialog('open');
					}
				},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#messages_pager',{search:false,edit:false,add:false,del:false});
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messages_telephone_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Import': function() {
				var old = $("#t_messages_message").val();
				if(old){
					var pos = old.lastIndexOf('\n');
					if (pos == -1) {
						var old1 = old + '\n\n';
					} else {
						var a = old.slice(pos);
						if (a == '') {
							var old1 = old + '\n';
						} else {
							var old1 = old + '\n\n';
						}
					}
				} else {
					var old1 = '';
				}
				var a = $("#message_subjective").val();
				var b = $("#message_assessment").val();
				var c = $("#message_plan").val();
				if(c){
					var c1 = 'PLAN:  ' + c;
					if(b){
						var b1 = 'ASSESSMENT:  ' + b + '\n\n';
						if(a != ""){
							var a1 = 'SUBJECTIVE:  ' + a + '\n\n';
						} else {
							var a1 = '';
						}	
					} else {
						var b1 = '';
						if(a){
							var a1 = 'SUBJECTIVE:  ' + a;
						} else {
							var a1 = '';
						}
					}
				} else {
					var c1 = '';
					if(b){
						var b1 = 'ASSESSMENT:  ' + b;
						if(a){
							var a1 = 'SUBJECTIVE:  ' + a + '\n\n';
						} else {
							var a1 = '';
						}	
					} else {
						var b1 = '';
						if(a){
							var a1 = 'SUBJECTIVE:  ' + a;
						} else {
							var a1 = '';
						}
					}
				}
				$("#t_messages_message").val(old1+a1+b1+c1);
				$('#edit_message_telephone_form').clearForm();
				$("#messages_telephone_dialog").dialog('close');
			},
			Cancel: function() {
				$('#edit_message_telephone_form').clearForm();
				$("#messages_telephone_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messages_reply_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(event, ui) {
			$("#message_reply_tests_performed").focus();
			jQuery("#messages_reply_alerts").jqGrid('GridUnload');
			jQuery("#messages_reply_alerts").jqGrid({
				url:"ajaxchart/alerts1",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Due Date','Alert','Description'],
				colModel:[
					{name:'alert_id',index:'alert_id',width:1,hidden:true},
					{name:'alert_date_active',index:'alert_date_active',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'alert',index:'alert',width:200},
					{name:'alert_description',index:'alert',width:400}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#messages_reply_alerts_pager1'),
				sortname: 'alert_date_active',
				viewrecords: true,
				sortorder: "desc",
				caption:"Pending Orders",
				height: "100%",
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#messages_reply_alerts_pager1',{search:false,edit:false,add:false,del:false});
		},
		close: function(event, ui) {
			$('#edit_message_reply_form').clearForm();
		},
		buttons: {
			'Import Only': function() {
				importreply();
				$('#edit_message_reply_form').clearForm();
				$("#messages_reply_dialog").dialog('close');
			},
			'E-mail/Patient Portal Message': function() {
				var response = importreply();
				var body = encodeURIComponent(response);
				$.ajax({
					type: "POST",
					url: "ajaxchart/internal-message-reply",
					data: "body=" + body,
					success: function(data){
						$.jGrowl(data);
						$('#edit_message_reply_form').clearForm();
						$("#messages_reply_dialog").dialog('close');
					}
				});
			},
			'Send Letter': function() {
				var response = importreply();
				var body = encodeURIComponent(response);
				$.ajax({
					type: "POST",
					url: "ajaxchart/letter-reply",
					data: "body=" + body,
					dataType: "json",
					async: false,
					success: function(data){
						if (data.message == 'OK') {
							noshdata.success_doc = true;
							noshdata.id_doc = data.id;
						} else {
							$.jGrowl(data.message);
						}
					}
				});
				if (noshdata.success_doc == true) {
					window.open("view_documents/" + noshdata.id_doc);
					noshdata.success_doc = false;
					noshdata.id_doc = '';
				}
				$('#edit_message_reply_form').clearForm();
				$("#messages_reply_dialog").dialog('close');
			},
			Cancel: function() {
				$('#edit_message_reply_form').clearForm();
				$("#messages_reply_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messages_list").click(function() {
		$("#messages_list_dialog").dialog('open');
	});
	$(".new_telephone_message").click(function() {
		$("#edit_message_form").clearForm();
		$.ajax({
			url: "ajaxchart/new-message",
			dataType: "json",
			type: "POST",
			success: function(data){
				$("#t_messages_id").val(data);
				var currentDate = getCurrentDate();
				$("#t_messages_dos").val(currentDate);
				reload_grid("messages");
				t_messages_tags();
				$("#messages_main_dialog").dialog('open');
			}
		});
	});
	$("#t_messages_dos").mask("99/99/9999");
	$("#t_messages_dos").datepicker();
	$("#message_telephone").click(function() {
		$("#messages_telephone_dialog").dialog('open');
		$("#message_subjective").focus();
	});
	$("#message_rx").click(function() {
		$("#orders_rx_header").hide();
		$("#messages_rx_header").show();
		$("#messages_rx_main").show();
		$("#messages_rx_dialog").dialog('open');
	});
	$("#message_sup").click(function() {
		$("#supplement_origin_orders").val("Y");
		$("#supplement_origin_orders1").val("N");
		$("#supplements_list_dialog").dialog('open');
		$("#messages_supplements_header").show();
		$("#orders_supplements").focus();
	});
	$("#message_lab").click(function() {
		$("#save_lab_helper_label").html('Import to Message');
		$("#messages_lab_origin").val('message');
		var id = $("#t_messages_id").val();
		$("#messages_lab_t_messages_id_origin").val(id);
		$("#messages_lab_header").show();
		$("#messages_lab_dialog").dialog('open');
	});
	$("#message_rad").click(function() {
		$("#save_rad_helper_label").html('Import to Message');
		$("#messages_rad_origin").val('message');
		var id = $("#t_messages_id").val();
		$("#messages_rad_t_messages_id_origin").val(id);
		$("#messages_rad_header").show();
		$("#messages_rad_dialog").dialog('open');
	});
	$("#message_cp").click(function() {
		$("#save_cp_helper_label").html('Import to Message');
		$("#messages_cp_origin").val('message');
		var id = $("#t_messages_id").val();
		$("#messages_cp_t_messages_id_origin").val(id);
		$("#messages_cp_header").show();
		$("#messages_cp_dialog").dialog('open');
	});
	$("#message_ref").click(function() {
		$("#save_ref_helper_label").html('Import to Message');
		$("#messages_ref_origin").val('message');
		var id = $("#t_messages_id").val();
		$("#messages_ref_t_messages_id_origin").val(id);
		$("#messages_ref_header").show();
		$("#messages_ref_dialog").dialog('open');
	});
	$("#message_reply").click(function() {
		$("#messages_reply_dialog").dialog('open');
	});
	$("#complete_message_reply_alert").click(function(){
		var item = jQuery("#messages_reply_alerts").getGridParam('selrow');
		var row = jQuery("#messages_reply_alerts").getRowData(item);
		var test = row['alert_description'];
		var test1 = test.split(":");
		var test2 = $.trim(test1[1]);
		var old = $("#message_reply_tests_performed").val();
		if (old == '') {
			$("#message_reply_tests_performed").val(test2);
		} else {
			$("#message_reply_tests_performed").val(old + '\n' + test2);
		}
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxchart/complete-alert",
				data: "alert_id=" + item,
				success: function(data){
					$.jGrowl(data);
					reload_grid("messages_reply_alerts");
					reload_grid("alerts");
					reload_grid("alerts_complete");
				}
			});
		} else {
			$.jGrowl("Please select order to mark as complete!")
		}
	});
	$("#messages_view_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messages_main_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(event, ui) {
			$("#t_messages_subject").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/subject",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 2
			});
			$("#t_messages_to").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/users",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 2
			});
			if (noshdata.group_id == "4") {
				$(this).siblings('.ui-dialog-buttonpane').find('button').eq(1).hide();
			} else {
				$(this).siblings('.ui-dialog-buttonpane').find('button').eq(1).show();
			}
		},
		buttons: {
			'Save Draft': function() {
				var bValid = true;
				$("#edit_message_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_message_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/edit-message",
							data: str,
							success: function(data){
								$.jGrowl(data);
								reload_grid("messages");
								$("#edit_message_form").clearForm();
								$("#messages_main_dialog").dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			'Sign': function() {
				var bValid = true;
				$("#edit_message_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_message_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/sign-message",
							data: str,
							success: function(data){
								if(data) {
									$.jGrowl(data);
									reload_grid("messages");
									$("#edit_message_form").clearForm();
									$("#messages_main_dialog").dialog('close');
								} else {
									$.jGrowl(data);
								}
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#edit_message_form').clearForm();
				$("#messages_main_dialog").dialog('close');
			},
			'Delete': function() {
				var str = $("#t_messages_id").val();
				if(str != ''){
					$.ajax({
						type: "POST",
						url: "ajaxchart/delete-message",
						data: "t_messages_id=" + str,
						success: function(data){
							if(data) {
								$.jGrowl(data);
								reload_grid("messages");
								$("#edit_message_form").clearForm();
								$("#messages_main_dialog").dialog('close');
							} else {
								$.jGrowl(data);
							}
						}
					});
				} else {
					$.jGrowl("No message to delete!  Message has not been saved previously!");
				}
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$(".t_messages_tags").tagit({
		tagSource: function (req, add){
			$.ajax({
				url: "ajaxsearch/search-tags",
				dataType: "json",
				type: "POST",
				data: req,
				success: function(data){
					if(data.response =='true'){
						add(data.message);
					}
				}
			});
		},
		tagsChanged: function(a, b) {
			if (b == "added") {
				$.ajax({
					type: "POST",
					url: "ajaxsearch/save-tag/t_messages_id/" + $("#t_messages_id").val(),
					data: 'tag=' + a
				});
			}
			if (b == "popped") {
				$.ajax({
					type: "POST",
					url: "ajaxsearch/remove-tag/t_messages_id/" + $("#t_messages_id").val(),
					data: 'tag=' + a
				});
			}
		}
	});
	if (noshdata.t_messages_id != '') {
		$("#messages_list_dialog").dialog('open');
		$.ajax({
			type: "POST",
			url: "ajaxdashboard/get-draft-message/" + noshdata.t_messages_id,
			dataType: "json",
			success: function(data){
				$.each(data, function(key, value){
					$("#edit_message_form :input[name='" + key + "']").val(value);
				});
				var date = $('#t_messages_dos').val();
				var edit_date = editDate1(date);
				$('#t_messages_dos').val(edit_date);
				t_messages_tags();
				$("#messages_main_dialog").dialog('open');
				noshdata.t_messages_id = '';
			}
		});
	}
});
$(document).ready(function() {
	$("#messages_lab_accordion").accordion({ 
		heightStyle: "content" ,
		activate: function (event, ui) {
			var id = ui.newPanel[0].id;
			$("#" + id + " .text").first().focus();
		}
	});
	$("#messages_lab_accordion .ui-accordion-content").each(function(){
		$(this).find(".text").last().on('keydown', function(e) {
			if (e.which == 9) {
				if (!e.shiftKey) {
					var active = $("#messages_lab_accordion").accordion("option", "active");
					if (active < 4) {
						$("#messages_lab_accordion").accordion("option", "active", active + 1);
					}
				}
			}
		});
	});
	$("#messages_lab_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(){
			jQuery("#messages_lab_list").jqGrid('GridUnload');
			jQuery("#messages_lab_list").jqGrid({
				url: "ajaxchart/orders-list/labs",
				postData: {t_messages_id: function(){return $("#messages_lab_t_messages_id_origin").val();}},
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Tests','Diagnosis','Location1','Location','Obtained','Insurance','Provider','Order Date'],
				colModel:[
					{name:'orders_id',index:'orders_id',width:1,hidden:true},
					{name:'orders_labs',index:'orders_labs',width:300},
					{name:'orders_labs_icd',index:'orders_labs_icd',width:200},
					{name:'address_id',index:'address_id',hidden:true},
					{name:'displayname',index:'displayname',width:100},
					{name:'orders_labs_obtained',index:'orders_labs_obtained',width:1,hidden:true},
					{name:'orders_insurance',index:'orders_insurance',hidden:true},
					{name:'encounter_provider',index:'encounter_provider',hidden:true},
					{name:'orders_pending_date',index:'orders_pending_date',hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#messages_lab_list_pager'),
				sortname: 'orders_id',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Lab Orders",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#messages_lab_list_pager',{search:false,edit:false,add:false,del:false});
		},
		buttons: {
			'Save': function() {
				var origin = $("#messages_lab_origin").val();
				if (origin == 'message') {
					var id = $("#t_messages_id").val();
					$.ajax({
						type: "POST",
						url: "ajaxchart/import-orders/labs",
						data: "t_messages_id=" + id,
						success: function(data){
							var old = $("#t_messages_message").val();
							var old1 = old.trim();
							if(data != ''){
								if (old1 != '') {
									var a = old1+'\n\n'+data;
								} else {
									var a = data;
								}
								$("#t_messages_message").val(a);
							}
						}
					});
				} else {
					checkorders();
				}
				$("#messages_lab_origin").val('');
				$("#messages_lab_t_messages_id_origin").val('');
				$("#messages_lab_dialog").dialog('close');
			},
			Cancel: function() {
				$("#messages_lab_origin").val('');
				$("#messages_lab_t_messages_id_origin").val('');
				$("#messages_lab_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messages_add_lab").click(function(){
		load_outside_providers('lab','add');
		var a = $("#messages_lab_t_messages_id_origin").val();
		if (a == '') {
			$("#messages_lab_eid").val(noshdata.eid);
		} else {
			$("#messages_lab_t_messages_id").val(a);
		}
		$("#messages_lab_status").html('');
		$("#messages_lab_location").val('');
		if ($("#messages_lab_provider_list").val() == '' && noshdata.group_id == '2') {
			$("#messages_lab_provider_list").val(noshdata.user_id);
		}
		var currentDate = getCurrentDate();
		$('#messages_lab_orders_pending_date').val(currentDate);
		$("#messages_lab_edit_fields").dialog("option", "title", "Add Lab Order");
		$("#messages_lab_edit_fields").dialog('open');
	});
	$("#messages_edit_lab").click(function(){
		var item = jQuery("#messages_lab_list").getGridParam('selrow');
		if(item){
			load_outside_providers('lab','edit');
			jQuery("#messages_lab_list").GridToForm(item,"#edit_messages_lab_form");
			var status = 'Details for Lab Order #' + item;
			$("#messages_lab_status").html(status);
			if ($("#messages_lab_provider_list").val() == '' && noshdata.group_id == '2') {
				$("#messages_lab_provider_list").val(noshdata.user_id);
			}
			var date = $('#messages_lab_orders_pending_date').val();
			var edit_date = editDate1(date);
			$('#messages_lab_orders_pending_date').val(edit_date);
			var a = $("#messages_lab_t_messages_id_origin").val();
			if (a == '') {
				$("#messages_lab_eid").val(noshdata.eid);
			} else {
				$("#messages_lab_t_messages_id").val(a);
			}
			$("#messages_lab_edit_fields").dialog("option", "title", "Edit Lab Order");
			$("#messages_lab_edit_fields").dialog('open');
		} else {
			$.jGrowl("Please select order to edit!");
		}
	});
	$("#messages_resend_lab").click(function(){
		var item = jQuery("#messages_lab_list").getGridParam('selrow');
		if(item){
			$("#messages_lab_orders_id").val(item);
			$('#messages_lab_choice').html("Choose an action for the lab order, reference number " + item);
			$("#messages_lab_action_dialog").dialog('open');
		} else {
			$.jGrowl("Please select order to edit!");
		}
	});
	$("#messages_delete_lab").click(function(){
		var item = jQuery("#messages_lab_list").getGridParam('selrow');
		if(item){
			$.ajax({
				url: "ajaxchart/delete-orders/Laboratory",
				type: "POST",
				data: "orders_id=" + item,
				success: function(data){
					$.jGrowl(data);
					reload_grid("messages_lab_list");
				}
			});
		} else {
			$.jGrowl("Please select order to delete!");
		}
	});
	$("#messages_lab_edit_fields").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(){
			jQuery("#messages_lab_insurance_grid").jqGrid('GridUnload');
			jQuery("#messages_lab_insurance_grid").jqGrid({
				url: "ajaxdashboard/insurance",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Insurance','ID Number','Group Number','Priority','Lastname','Firstname','DOB','Gender','Address','City','State','Zip','Copay','Deductible','Comments','Address ID','Relationship'],
				colModel:[
					{name:'insurance_id',index:'insurance_id',width:1,hidden:true},
					{name:'insurance_plan_name',index:'insurance_plan_name',width:350},
					{name:'insurance_id_num',index:'insurance_id_num',width:100},
					{name:'insurance_group',index:'insurance_group',width:100},
					{name:'insurance_order',index:'insurance_order',width:105},
					{name:'insurance_insu_lastname',index:'insurance_insu_lastname',width:1,hidden:true},
					{name:'insurance_insu_firstname',index:'insurance_insu_firstname',width:1,hidden:true},
					{name:'insurance_insu_dob',index:'insurance_insu_dob',width:1,hidden:true},
					{name:'insurance_insu_gender',index:'insurance_insu_gender',width:1,hidden:true},
					{name:'insurance_insu_address',index:'insurance_insu_address',width:1,hidden:true},
					{name:'insurance_insu_city',index:'insurance_insu_city',width:1,hidden:true},
					{name:'insurance_insu_state',index:'insurance_insu_state',width:1,hidden:true},
					{name:'insurance_insu_zip',index:'insurance_insu_zip',width:1,hidden:true},
					{name:'insurance_copay',index:'insurance_copay',width:1,hidden:true},
					{name:'insurance_deductible',index:'insurance_deductible',width:1,hidden:true},
					{name:'insurance_comments', index:'insurance_comments',width:1,hidden:true},
					{name:'address_id',index:'address_id',width:1,hidden:true},
					{name:'insurance_relationship',index:'insurance_relationship',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#messages_lab_insurance_pager'),
				sortname: 'insurance_order',
			 	viewrecords: true,
			 	sortorder: "asc",
			 	caption:"Insurance Payors - Click to select insurance for lab order",
			 	height: "100%",
			 	onSelectRow: function(id){
			 		var insurance_plan_name = jQuery("#messages_lab_insurance_grid").getCell(id,'insurance_plan_name');
					var insurance_id_num = jQuery("#messages_lab_insurance_grid").getCell(id,'insurance_id_num');
					var insurance_group = jQuery("#messages_lab_insurance_grid").getCell(id,'insurance_group');
					var insurance_insu_lastname = jQuery("#messages_lab_insurance_grid").getCell(id,'insurance_insu_lastname');
					var insurance_insu_firstname = jQuery("#messages_lab_insurance_grid").getCell(id,'insurance_insu_firstname');
					var address_id = jQuery("#messages_lab_insurance_grid").getCell(id,'address_id');
					$.ajax({
						url: "ajaxsearch/payor-id/" + address_id,
						type: "POST",
						success: function(data){
							var text = insurance_plan_name + '; Payor ID: ' + data + '; ID: ' + insurance_id_num;
							if(insurance_group != ''){
								text += "; Group: " + insurance_group;
							}
							text += "; " + insurance_insu_lastname + ", " + insurance_insu_firstname;
							var old = $("#messages_lab_insurance").val();
							if(old){
								var pos = old.lastIndexOf('\n');
								if (pos == -1) {
									var old1 = old + '\n';
								} else {
									var a = old.slice(pos);
									if (a == '') {
										var old1 = old;
									} else {
										var old1 = old + '\n';
									}
								}
							} else {
								var old1 = '';
							}
							$("#messages_lab_insurance").val(old1+text);
						}
					});
				},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#messages_lab_insurance_pager',{search:false,edit:false,add:false,del:false});
			var currentTime = getCurrentTime();
			var currentDate = getCurrentDate();
			$("#messages_lab_time_obtained").val(currentTime);
			$("#messages_lab_date_obtained").val(currentDate);
			if (noshdata.group_id == '2') {
				$(".nosh_provider_exclude").hide();
			} else {
				$(".nosh_provider_exclude").show();
			}
			$("#messages_lab_codes").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/icd",
						dataType: "json",
						type: "POST",
						data: "term=" + extractLast(req.term),
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				search: function() {
					var term = extractLast( this.value );
					if ( term.length < 2 ) {
						return false;
					}
				},
				focus: function() {
					return false;
				},
				select: function(event, ui){
					var terms = split( this.value );
					terms.pop();
					terms.push( ui.item.value );
					terms.push( "" );
					this.value = terms.join( "\n" );
					return false;
				}
			});
			$("#messages_lab_orders").catcomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/lab",
						dataType: "json",
						type: "POST",
						data: "term=" + extractLast(req.term),
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							} else {
								var addterm = [{"label": extractLast(req.term) + ": Select to add order to database.", "value":"*/add/*", "value1": extractLast(req.term), "category":"New Item"}];
								add(addterm);
							}
						}
					});
				},
				search: function() {
					var term = extractLast( this.value );
					if ( term.length < 2 ) {
						return false;
					}
				},
				focus: function() {
					return false;
				},
				select: function(event, ui){
					if (ui.item.value == "*/add/*") {
						$("#messages_lab").val(ui.item.value1);
						$("#messages_lab_orders_text").val(this.value);
						$("#add_test_cpt").dialog('open');
					} else {
						if (!ui.item.aoe_code) {
							var terms = split( this.value );
							terms.pop();
							terms.push( ui.item.value );
							terms.push( "" );
							this.value = terms.join( "\n" );
							return false;
						} else {
							var aoe_code = ui.item.aoe_code;
							var aoe_field = ui.item.aoe_field;
							if (aoe_code.indexOf(";") > -1) {
								var codes = aoe_code.split(";");
								var fields = aoe_field.split(";");
								for (var i=0;i<codes.length;i++) {
									$("#" + fields[i]).val(codes[i]);
									var parent_id = fields[i].replace("_code", "");
									$("#" + parent_id).show();
									$("#" + parent_id).addClass("aoe_required");
								}
							} else {
								$("#" + aoe_field).val(aoe_code);
								var parent_id = aoe_field.replace("_code", "");
								$("#" + parent_id).show();
								$("#" + parent_id).addClass("aoe_required");
							}
							$("#aoe_value").val(ui.item.value);
							$("#messages_lab_orders_text").val(this.value);
							$("#messages_lab_aoe_dialog").dialog('open');
						}
					}
				}
			});
			$("#messages_lab_accordion").accordion("option", "active", 0);
			$("#messages_lab_orders").focus();
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#edit_messages_lab_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_messages_lab_form").serialize();
					$.ajax({
						type: "POST",
						url: "ajaxchart/add-orders/labs",
						data: str,
						dataType: "json",
						success: function(data){
							$.jGrowl(data.message);
							$('#messages_lab_choice').html(data.choice);
							$("#messages_lab_action_dialog").dialog('open');
							$("#edit_messages_lab_form").clearForm();
							$("#messages_lab_orders_id").val(data.id);
							$("#messages_lab_edit_fields").dialog('close');
							reload_grid("alerts");
							reload_grid("messages_lab_list");
							if(noshdata.pending_orders_id != '') {
								var old = $("#situation").val();
								if (old != '') {
									var b = old + '\n\n' + data.pending;
								} else {
									var b = data.pending;
								}
								$("#situation").val(b);
								$.ajax({
									type: "POST",
									url: "ajaxchart/complete-alert-order/" + noshdata.pending_orders_id,
									success: function(data){
										$.jGrowl(data);
										noshdata.pending_orders_id = '';
										reload_grid("alerts_pending");
									}
								});
							}
						}
					});
				}
			},
			Cancel: function() {
				$("#edit_messages_lab_form").clearForm();
				$("#messages_lab_edit_fields").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messages_lab_action_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 200, 
		width: 500, 
		modal: true,
		closeOnEscape: false,
		dialogClass: "noclose",
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$(".messages_lab_button_clear").click(function(){
		var id = $(this).attr('id');
		var parent_id = id.replace('_clear', '');
		$("#" + parent_id).val('');
	});
	$("#messages_lab_issues").click(function() {
		$("#issues_list_dialog").dialog('open');
		$('#issues_pmh_header').hide();
		$('#issues_psh_header').hide();
		$('#issues_lab_header').show();
		$('#issues_rad_header').hide();
		$('#issues_cp_header').hide();
		$('#issues_ref_header').hide();
		$('#issues_assessment_header').hide();
	});
	$("#messages_select_lab_location2").click(function (){
		$("#messages_edit_lab_location").dialog('open');
	});
	$("#messages_lab_location_state").addOption(states, false);
	$("#messages_lab_location_phone").mask("(999) 999-9999");
	$("#messages_lab_location_fax").mask("(999) 999-9999");
	$("#messages_lab_location_electronic_order").addOption({"":"Select Electronic Order Interface","PeaceHealth":"PeaceHealth Labs"}, false);
	$("#messages_lab_insurance_client").click(function(){
		var text = "Bill Client";
		var old = $("#messages_lab_insurance").val();
		if(old){
			var pos = old.lastIndexOf('\n');
			if (pos == -1) {
				var old1 = old + '\n';
			} else {
				var a = old.slice(pos);
				if (a == '') {
					var old1 = old;
				} else {
					var old1 = old + '\n';
				}
			}
		} else {
			var old1 = '';
		}
		$("#messages_lab_insurance").val(old1+text);
	});
	$("#messages_lab_orders_pending_date").datepicker();
	$("#messages_lab_date_obtained").datepicker();
	$('#messages_lab_time_obtained').timepicker({
		'scrollDefaultNow': true,
		'timeFormat': 'h:i A',
		'step': 15
	});
	$('#messages_lab_medication_obtained').timepicker({
		'scrollDefaultNow': true,
		'timeFormat': 'h:i A',
		'step': 15
	});
	$("#messages_lab_obtained_import").click(function(){
		var a1 = $("#messages_lab_date_obtained");
		var b1 = $("#messages_lab_time_obtained");
		var bValid = true;
		bValid = bValid && checkEmpty(a1,"Date Obtained");
		bValid = bValid && checkEmpty(b1,"Time Obtained");
		if (bValid) {
			var item = '';
			var a = $("#messages_lab_fasting").val();
			if(a){
				item += 'Fasting: ' + $("#messages_lab_fasting").val() + '\n';
			}
			item += 'Date/Time specimen obtained: ' + $("#messages_lab_date_obtained").val() + ', ' + $("#messages_lab_time_obtained").val() + '\n';
			var b = $("#messages_lab_location_obtained").val();
			if(b != ''){
				item += 'Body location of specimen: ' + $("#messages_lab_location_obtained").val() + '\n';
			}
			var c = $("#messages_lab_medication_obtained").val();
			if(c != ''){
				item += 'Time of last dosage of medication: ' + $("#messages_lab_medication_obtained").val() + '\n';
			}
			var old = $("#messages_lab_obtained").val();
			if(old){
				var pos = old.lastIndexOf('\n');
				if (pos == -1) {
					var old1 = old + '\n';
				} else {
					var a = old.slice(pos);
					if (a == '') {
						var old1 = old;
					} else {
						var old1 = old + '\n';
					}
				}
			} else {
				var old1 = '';
			}
			$("#messages_lab_obtained").val(old1+item);
			$("#messages_lab_date_obtained").val(currentDate);
			$("#messages_lab_time_obtained").val(currentTime);
			$("#messages_lab_location_obtained").val('');
			$("#messages_lab_medication_obtained").val('');
		}
	});
	$("#messages_print_lab").click(function(){
		var lab = $("#messages_lab_orders_id");
		var bValid = true;
		bValid = bValid && checkEmpty(lab,"Lab Order");
		if (bValid) {
			var order_id = $("#messages_lab_orders_id").val();
			window.open("print_orders/" + order_id);
		}
	});
	$("#messages_electronic_lab").click(function(){
		var lab = $("#messages_lab_orders_id");
		var bValid = true;
		bValid = bValid && checkEmpty(lab,"Lab Order");
		if (bValid) {
			var order_id = $("#messages_lab_orders_id").val();
			if(order_id){
				$.ajax({
					type: "POST",
					url: "ajaxchart/electronic-orders",
					data: "orders_id=" + order_id,
					success: function(data){
						$.jGrowl(data);
					}
				});
			} else {
				$.jGrowl("Please complete the form");
			}
		}
	});
	$("#messages_fax_lab").click(function(){
		var lab = $("#messages_lab_orders_id");
		var bValid = true;
		bValid = bValid && checkEmpty(lab,"Lab Order");
		if (bValid) {
			var order_id = $("#messages_lab_orders_id").val();
			if(order_id){
				$.ajax({
					type: "POST",
					url: "ajaxchart/fax-orders",
					data: "orders_id=" + order_id,
					success: function(data){
						$.jGrowl(data);
					}
				});
			} else {
				$.jGrowl("Please complete the form");
			}
		}
	});
	$("#messages_done_lab").click(function(){
		$("#messages_lab_action_dialog").dialog('close');
		$("#messages_lab_orders_id").val('');
		reload_grid("messages_lab_list");
	});
	$("#messages_edit_lab_location").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(event, ui) {
			$("#messages_lab_location_city").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/city",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#messages_lab_location_facility").focus();
			var id = $("#messages_lab_location").val();
			if(id){
				$("#messages_edit_lab_location").dialog("option", "title", "Edit Laboratory Provider");
				$.ajax({
					type: "POST",
					url: "ajaxsearch/orders-provider1",
					data: "address_id=" + id,
					dataType: "json",
					success: function(data){
						$.each(data, function(key, value){
							$("#messages_edit_lab_location_form :input[name='" + key + "']").val(value);
						});
					}
				});
			} else {
				$("#messages_edit_lab_location").dialog("option", "title", "Add Laboratory Provider");
			}
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#messages_edit_lab_location_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#messages_edit_lab_location_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/edit-orders-provider/Laboratory",
							data: str,
							dataType: "json",
							success: function(data){
								$.jGrowl(data.message);
								$("#messages_edit_lab_location_form").clearForm();
								$("#messages_edit_lab_location").dialog('close');
								$("#messages_lab_location").removeOption(/./);
								$.ajax({
									url: "ajaxsearch/orders-provider/Laboratory",
									dataType: "json",
									type: "POST",
									success: function(data1){
										if(data1.response =='true'){
											$("#messages_lab_location").addOption({"":"Add lab provider."}, false);
											$("#messages_lab_location").addOption(data1.message, false);
											$("#messages_lab_location").val(data.id);
										} else {
											$("#messages_lab_location").addOption({"":"No lab provider.  Click Add."}, false);
										}
									}
								});
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$("#messages_edit_lab_location_form").clearForm();
				$("#messages_edit_lab_location").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	var user_id = noshdata.user_id;
	$("#messages_lab_orders_type").addOption({"0":'Global',user_id:'Personal'}, false);
	$("#add_test_cpt").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Save': function() {
				var a = encodeURIComponent($("#messages_lab").val());
				var b = encodeURIComponent($("#messages_lab_cpt").val());
				var c = encodeURIComponent($("#messages_lab_orders_type").val());
				var d = encodeURIComponent($("#messages_lab_snomed").val());
				$.ajax({
					type: "POST",
					url: "ajaxchart/add-orderslist",
					data: "orders_description=" + a + "&cpt=" + b + "&orders_category=Laboratory&user_id=" + c + "&snomed=" + d,
					success: function(data){
						$.jGrowl(data);
					}
				});
				if(b){
					a = a + ', CPT ' + b;
				}
				var terms = split($("#messages_lab_orders_text").val());
				terms.pop();
				terms.push(a);
				terms.push( "" );
				$("#messages_lab_orders").focus();
				$("#messages_lab_orders").val(terms.join( "\n" ));
				$("#add_test_cpt_form").clearForm();
				$("#add_test_cpt").dialog('close');
				return false;
			},
			Cancel: function() {
				var terms = split($("#messages_lab_orders_text").val());
				terms.pop();
				terms.push( "" );
				$("#messages_lab_orders").focus();
				$("#messages_lab_orders").val(terms.join( "\n" ));
				$("#add_test_cpt_form").clearForm();
				$("#add_test_cpt").dialog('close');
				return false;
			}
		},
		open: function(event, ui) {
			$.ajax({
				url: "ajaxdashboard/check-snomed-extension",
				type: "POST",
				success: function(data){
					if(data =='y'){
						$("#add_test_snomed_div").show();
						$("#snomed_tree").jstree({
							"plugins" : [ "json_data", "sort", "ui", "themeroller" ],
							"json_data" : {
								"ajax" : {
									"type": 'POST',
									"url": function (node) {
										var nodeId = "";
										var url = "";
										if (node == -1) {
											url = "ajaxsearch/snomed-parent/lab";
										} else {
											nodeId = node.attr('id');
											url = "ajaxsearch/snomed-child/" + nodeId;
										}
										return url;
									},
									"success": function (new_data) {
										return new_data;
									}
								}
							},
							"themeroller" : {
								"item" : 'ui-widget-content'
							}
						}).bind("select_node.jstree", function (event, data) {
							$("#messages_lab_snomed").val(data.rslt.obj.attr("id"));
						});
						$("#messages_lab_snomed").autocomplete({
							source: function (req, add){
								$.ajax({
									url: "ajaxsearch/snomed/procedure",
									dataType: "json",
									type: "POST",
									data: req,
									success: function(data){
										if(data.response =='true'){
											add(data.message);
										}
									}
								});
							},
							minLength: 3
						});
					} else {
						$("#add_test_snomed_div").hide();
					}
				}
			});
			$("#messages_lab_cpt").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/cpt",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							} else {
								var addterm = [{"label": req.term + ": Select to add CPT to database.", "value":"*/add/*", "value1": req.term}];
								add(addterm);
							}
						}
					});
				},
				select: function(event, ui){
					if (ui.item.value == "*/add/*") {
						$("#configuration_cpt_form").clearForm();
						if (ui.item.value1.length > 5) {
							$("#configuration_cpt_description").val(ui.item.value1);
						} else {
							$("#configuration_cpt_code").val(ui.item.value1);
						}
						$('#configuration_cpt_origin').val("messages_lab_cpt");
						$('#configuration_cpt_dialog').dialog('open');
						$('#configuration_cpt_dialog').dialog('option', 'title', "Add CPT Code");
					}
				},
				minLength: 3
			});
			$("#messages_lab_orders_type").val('0');
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messages_lab_orderslist_link").button().click(function(){
		$("#configuration_dialog").dialog('open');
		$("#configuration_accordion").accordion("option", "active", 3);
	});
	$("#messages_lab_aoe_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 300, 
		width: 500, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Save': function() {
				var aoe_answer = '';
				var aoe_code = '';
				$(".aoe_required").each(function() {
					var required_id = $(this).attr('id');
					var input_id = required_id + "_input";
					var code_id = required_id + "_code";
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					var bValid = true;
					bValid = bValid && checkEmpty(id1, text);
					if (bValid) {
						if (aoe_answer != '') {
							aoe_answer = aoe_answer + "|" + $("#" + input_id).val();
						} else {
							aoe_answer = $("#" + input_id).val();
						}
						if (aoe_code != '') {
							aoe_code = aoe_code + "|" + $("#" + code_id).val();
						} else {
							aoe_code = $("#" + code_id).val();
						}
					}
				});
				var a = $("#aoe_value").val() + "; AOEAnswer: " + aoe_answer + "; AOECode: " + aoe_code;
				var terms = split($("#messages_lab_orders_text").val());
				terms.pop();
				terms.push(a);
				terms.push( "" );
				var b = terms.join( "\n" );
				var c = b.length;
				$("#messages_lab_orders").val(b).caret(c);
				$("#messages_lab_aoe_dialog_form").clearForm();
				$("#messages_lab_aoe_dialog_form").children().removeClass("aoe_required");
				$("#messages_lab_aoe_dialog_form").children().hide();
				$("#messages_lab_aoe_dialog").dialog('close');
				return false;
			},
			Cancel: function() {
				var terms = split($("#messages_lab_orders_text").val());
				terms.pop();
				terms.push( "" );
				var b = terms.join( "\n" );
				var c = b.length;
				$("#messages_lab_orders").val(b).caret(c);
				$("#messages_lab_aoe_dialog_form").clearForm();
				$("#messages_lab_aoe_dialog_form").children().removeClass("aoe_required");
				$("#messages_lab_aoe_dialog_form").children().hide();
				$("#messages_lab_aoe_dialog").dialog('close');
				return false;
			}
		}
	});
});
$(document).ready(function() {
	$("#messages_rad_accordion").accordion({ 
		heightStyle: "content" ,
		activate: function (event, ui) {
			var id = ui.newPanel[0].id;
			$("#" + id + " .text").first().focus();
		}
	});
	$("#messages_rad_accordion .ui-accordion-content").each(function(){
		$(this).find(".text").last().on('keydown', function(e) {
			if (e.which == 9) {
				if (!e.shiftKey) {
					var active = $("#messages_rad_accordion").accordion("option", "active");
					if (active < 4) {
						$("#messages_rad_accordion").accordion("option", "active", active + 1);
					}
				}
			}
		});
	});
	$("#messages_rad_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(){
			jQuery("#messages_rad_list").jqGrid('GridUnload');
			jQuery("#messages_rad_list").jqGrid({
				url: "ajaxchart/orders-list/radiology",
				postData: {t_messages_id: function(){return $("#messages_rad_t_messages_id_origin").val();}},
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Tests','Diagnosis','Location1','Location','Insurance','Provider','Order Date'],
				colModel:[
					{name:'orders_id',index:'orders_id',width:1,hidden:true},
					{name:'orders_radiology',index:'orders_radiology',width:300},
					{name:'orders_radiology_icd',index:'orders_radiology_icd',width:200},
					{name:'address_id',index:'address_id',hidden:true},
					{name:'displayname',index:'displayname',width:100},
					{name:'orders_insurance',index:'orders_insurance',hidden:true},
					{name:'encounter_provider',index:'encounter_provider',hidden:true},
					{name:'orders_pending_date',index:'orders_pending_date',hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#messages_rad_list_pager'),
				sortname: 'orders_id',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Imaging Orders",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#messages_rad_list_pager',{search:false,edit:false,add:false,del:false});
		},
		buttons: {
			'Save': function() {
				var origin = $("#messages_rad_origin").val();
				if (origin == 'message') {
					var id = $("#t_messages_id").val();
					$.ajax({
						type: "POST",
						url: "ajaxchart/import-orders/radiology",
						data: "t_messages_id=" + id,
						success: function(data){
							var old = $("#t_messages_message").val();
							var old1 = old.trim();
							if(data != ''){
								if (old1 != '') {
									var a = old1+'\n\n'+data;
								} else {
									var a = data;
								}
								$("#t_messages_message").val(a);
							}
						}
					});
				} else {
					checkorders();
				}
				$("#messages_rad_origin").val('');
				$("#messages_rad_t_messages_id_origin").val('');
				$("#messages_rad_dialog").dialog('close');
			},
			Cancel: function() {
				$("#messages_rad_origin").val('');
				$("#messages_rad_t_messages_id_origin").val('');
				$("#messages_rad_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	
	$("#messages_add_rad").click(function(){
		load_outside_providers('rad','add');
		var a = $("#messages_rad_t_messages_id_origin").val();
		if (a == '') {
			$("#messages_rad_eid").val(noshdata.eid);
		} else {
			$("#messages_rad_t_messages_id").val(a);
		}
		$("#messages_rad_status").html('');
		if ($("#messages_rad_provider_list").val() == '' && noshdata.group_id == '2') {
			$("#messages_rad_provider_list").val(noshdata.user_id);
		}
		$("#messages_rad_location").val('');
		var currentDate = getCurrentDate();
		$('#messages_rad_orders_pending_date').val(currentDate);
		$("#messages_rad_edit_fields").dialog("option", "title", "Add Imaging Order");
		$("#messages_rad_edit_fields").dialog('open');
	});
	$("#messages_edit_rad").click(function(){
		var item = jQuery("#messages_rad_list").getGridParam('selrow');
		if(item){
			load_outside_providers('rad','edit');
			jQuery("#messages_rad_list").GridToForm(item,"#edit_messages_rad_form");
			var status = 'Details for Radiology Order #' + item;
			$("#messages_rad_status").html(status);
			if ($("#messages_rad_provider_list").val() == '' && noshdata.group_id == '2') {
				$("#messages_rad_provider_list").val(noshdata.user_id);
			}
			var date = $('#messages_rad_orders_pending_date').val();
			var edit_date = editDate1(date);
			$('#messages_rad_orders_pending_date').val(edit_date);
			var a = $("#messages_rad_t_messages_id_origin").val();
			if (a == '') {
				$("#messages_rad_eid").val(noshdata.eid);
			} else {
				$("#messages_rad_t_messages_id").val(a);
			}
			$("#messages_rad_edit_fields").dialog("option", "title", "Edit Imaging Order");
			$("#messages_rad_edit_fields").dialog('open');
		} else {
			$.jGrowl("Please select order to edit!");
		}
	});
	$("#messages_resend_rad").click(function(){
		var item = jQuery("#messages_rad_list").getGridParam('selrow');
		if(item){
			$("#messages_rad_orders_id").val(item);
			var a = $("#messages_rad_t_messages_id_origin").val();
			$("#messages_rad_t_messages_id").val(a);
			$('#messages_rad_choice').html("Choose an action for the radiology order, reference number " + item);
			$("#messages_rad_action_dialog").dialog('open');
		} else {
			$.jGrowl("Please select order to edit!");
		}
	});
	$("#messages_delete_rad").click(function(){
		var item = jQuery("#messages_rad_list").getGridParam('selrow');
		if(item){
			$.ajax({
				url: "ajaxchart/delete-orders/Imaging",
				type: "POST",
				data: "orders_id=" + item,
				success: function(data){
					$.jGrowl(data);
					reload_grid("messages_rad_list");
				}
			});
		} else {
			$.jGrowl("Please select order to delete!");
		}
	});
	$("#messages_rad_edit_fields").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(){
			jQuery("#messages_rad_insurance_grid").jqGrid('GridUnload');
			jQuery("#messages_rad_insurance_grid").jqGrid({
				url: "ajaxdashboard/insurance",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Insurance','ID Number','Group Number','Priority','Lastname','Firstname','DOB','Gender','Address','City','State','Zip','Copay','Deductible','Comments','Address ID','Relationship'],
				colModel:[
					{name:'insurance_id',index:'insurance_id',width:1,hidden:true},
					{name:'insurance_plan_name',index:'insurance_plan_name',width:350},
					{name:'insurance_id_num',index:'insurance_id_num',width:100},
					{name:'insurance_group',index:'insurance_group',width:100},
					{name:'insurance_order',index:'insurance_order',width:105},
					{name:'insurance_insu_lastname',index:'insurance_insu_lastname',width:1,hidden:true},
					{name:'insurance_insu_firstname',index:'insurance_insu_firstname',width:1,hidden:true},
					{name:'insurance_insu_dob',index:'insurance_insu_dob',width:1,hidden:true},
					{name:'insurance_insu_gender',index:'insurance_insu_gender',width:1,hidden:true},
					{name:'insurance_insu_address',index:'insurance_insu_address',width:1,hidden:true},
					{name:'insurance_insu_city',index:'insurance_insu_city',width:1,hidden:true},
					{name:'insurance_insu_state',index:'insurance_insu_state',width:1,hidden:true},
					{name:'insurance_insu_zip',index:'insurance_insu_zip',width:1,hidden:true},
					{name:'insurance_copay',index:'insurance_copay',width:1,hidden:true},
					{name:'insurance_deductible',index:'insurance_deductible',width:1,hidden:true},
					{name:'insurance_comments', index:'insurance_comments',width:1,hidden:true},
					{name:'address_id',index:'address_id',width:1,hidden:true},
					{name:'insurance_relationship',index:'insurance_relationship',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#messages_rad_insurance_pager'),
				sortname: 'insurance_order',
			 	viewrecords: true,
			 	sortorder: "asc",
			 	caption:"Insurance Payors - Click to select insurance for imaging order",
			 	height: "100%",
			 	onSelectRow: function(id){
			 		var insurance_plan_name = jQuery("#messages_rad_insurance_grid").getCell(id,'insurance_plan_name');
					var insurance_id_num = jQuery("#messages_rad_insurance_grid").getCell(id,'insurance_id_num');
					var insurance_group = jQuery("#messages_rad_insurance_grid").getCell(id,'insurance_group');
					var insurance_insu_lastname = jQuery("#messages_rad_insurance_grid").getCell(id,'insurance_insu_lastname');
					var insurance_insu_firstname = jQuery("#messages_rad_insurance_grid").getCell(id,'insurance_insu_firstname');
					var address_id = jQuery("#messages_rad_insurance_grid").getCell(id,'address_id');
					$.ajax({
						url: "ajaxsearch/payor-id/" + address_id,
						type: "POST",
						success: function(data){
							var text = insurance_plan_name + '; Payor ID: ' + data + '; ID: ' + insurance_id_num;
							if(insurance_group != ''){
								text += "; Group: " + insurance_group;
							}
							text += "; " + insurance_insu_lastname + ", " + insurance_insu_firstname;
							var old = $("#messages_rad_insurance").val();
							if(old){
								var pos = old.lastIndexOf('\n');
								if (pos == -1) {
									var old1 = old + '\n';
								} else {
									var a = old.slice(pos);
									if (a == '') {
										var old1 = old;
									} else {
										var old1 = old + '\n';
									}
								}
							} else {
								var old1 = '';
							}
							$("#messages_rad_insurance").val(old1+text);
						}
					});
				},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#messages_rad_insurance_pager',{search:false,edit:false,add:false,del:false});
			if (noshdata.group_id == '2') {
				$(".nosh_provider_exclude").hide();
			} else {
				$(".nosh_provider_exclude").show();
			}
			$("#messages_rad_codes").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/icd",
						dataType: "json",
						type: "POST",
						data: "term=" + extractLast(req.term),
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				search: function() {
					var term = extractLast( this.value );
					if ( term.length < 2 ) {
						return false;
					}
				},
				focus: function() {
					return false;
				},
				select: function(event, ui){
					var terms = split( this.value );
					terms.pop();
					terms.push( ui.item.value );
					terms.push( "" );
					this.value = terms.join( "\n" );
					return false;
				}
			});
			$("#messages_rad_orders").catcomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/rad",
						dataType: "json",
						type: "POST",
						data: "term=" + extractLast(req.term),
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							} else {
								var addterm = [{"label": extractLast(req.term) + ": Select to add order to database.", "value":"*/add/*", "value1": extractLast(req.term), "category":"New Item"}];
								add(addterm);
							}
						}
					});
				},
				search: function() {
					var term = extractLast( this.value );
					if ( term.length < 2 ) {
						return false;
					}
				},
				focus: function() {
					return false;
				},
				select: function(event, ui){
					if (ui.item.value == "*/add/*") {
						$("#messages_rad").val(ui.item.value1);
						$("#messages_rad_orders_text").val(this.value);
						$("#add_test_cpt1").dialog('open');
					} else {
						var terms = split( this.value );
						terms.pop();
						terms.push( ui.item.value );
						terms.push( "" );
						this.value = terms.join( "\n" );
						return false;
					}
				}
			});
			$("#messages_rad_accordion").accordion("option", "active", 0);
			$("#messages_rad_orders").focus();
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#edit_messages_rad_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_messages_rad_form").serialize();
					$.ajax({
						type: "POST",
						url: "ajaxchart/add-orders/radiology",
						data: str,
						dataType: "json",
						success: function(data){
							$.jGrowl(data.message);
							$('#messages_rad_choice').html(data.choice);
							$("#messages_rad_action_dialog").dialog('open');
							$("#edit_messages_rad_form").clearForm();
							$("#messages_rad_orders_id").val(data.id);
							$("#messages_rad_edit_fields").dialog('close');
							reload_grid("alerts");
							reload_grid("messages_rad_list");
							if(noshdata.pending_orders_id != '') {
								var old = $("#situation").val();
								if (old != '') {
									var b = old + '\n\n' + data.pending;
								} else {
									var b = data.pending;
								}
								$("#situation").val(b);
								$.ajax({
									type: "POST",
									url: "ajaxchart/complete-alert-order/" + noshdata.pending_orders_id,
									success: function(data){
										$.jGrowl(data);
										noshdata.pending_orders_id = '';
										reload_grid("alerts_pending");
									}
								});
							}
						}
					});
				}
			},
			Cancel: function() {
				$("#edit_messages_rad_form").clearForm();
				$("#messages_rad_edit_fields").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messages_rad_action_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 200, 
		width: 500, 
		modal: true,
		closeOnEscape: false,
		dialogClass: "noclose",
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$(".messages_rad_button_clear").click(function(){
		var id = $(this).attr('id');
		var parent_id = id.replace('_clear', '');
		$("#" + parent_id).val('');
	});
	$("#messages_rad_issues").click(function() {
		$("#issues_list_dialog").dialog('open');
		$('#issues_pmh_header').hide();
		$('#issues_psh_header').hide();
		$('#issues_rad_header').show();
		$('#issues_lab_header').hide();
		$('#issues_cp_header').hide();
		$('#issues_ref_header').hide();
		$('#issues_assessment_header').hide();
	});
	$("#messages_select_rad_location2").click(function (){
		$("#messages_edit_rad_location").dialog('open');
	});
	$("#messages_rad_location_state").addOption(states, false);
	$("#messages_rad_location_phone").mask("(999) 999-9999");
	$("#messages_rad_location_fax").mask("(999) 999-9999");
	$("#messages_rad_insurance_client").click(function(){
		var text = "Bill Client";
		var old = $("#messages_rad_insurance").val();
		if(old){
			var pos = old.lastIndexOf('\n');
			if (pos == -1) {
				var old1 = old + '\n';
			} else {
				var a = old.slice(pos);
				if (a == '') {
					var old1 = old;
				} else {
					var old1 = old + '\n';
				}
			}
		} else {
			var old1 = '';
		}
		$("#messages_rad_insurance").val(old1+text);
	});
	$("#messages_rad_orders_pending_date").datepicker();
	$("#messages_print_rad").click(function(){
		var rad = $("#messages_rad_orders_id");
		var bValid = true;
		bValid = bValid && checkEmpty(rad,"Radiology Order");
		if (bValid) {
			var order_id = $("#messages_rad_orders_id").val();
			window.open("print_orders/" + order_id);
		}
	});
	$("#messages_electronic_rad").click(function(){
		$.jGrowl('Future feature!');
	});
	$("#messages_fax_rad").click(function(){
		var rad = $("#messages_rad_orders_id");
		var bValid = true;
		bValid = bValid && checkEmpty(rad,"Radiology Order");
		if (bValid) {
			var order_id = $("#messages_rad_orders_id").val();
			if(order_id){
				$.ajax({
					type: "POST",
					url: "ajaxchart/fax-orders",
					data: "orders_id=" + order_id,
					success: function(data){
						$.jGrowl(data);
					}
				});
			} else {
				$.jGrowl("Please complete the form");
			}
		}
	});
	$("#messages_done_rad").click(function(){
		$("#messages_rad_action_dialog").dialog('close');
		$("#messages_rad_orders_id").val('');
		reload_grid("messages_rad_list");
	});
	$("#messages_edit_rad_location").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(event, ui) {
			$("#messages_rad_location_city").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/city",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#messages_rad_location_facility").focus();
			var id = $("#messages_rad_location").val();
			if(id){
				$("#messages_edit_rad_location").dialog("option", "title", "Edit Imaging Provider");
				$.ajax({
					type: "POST",
					url: "ajaxsearch/orders-provider1",
					data: "address_id=" + id,
					dataType: "json",
					success: function(data){
						$.each(data, function(key, value){
							$("#messages_edit_rad_location_form :input[name='" + key + "']").val(value);
						});
					}
				});
			} else {
				$("#messages_edit_rad_location").dialog("option", "title", "Add Imaging Provider");
			}
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#messages_edit_rad_location_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#messages_edit_rad_location_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/edit-orders-provider/Radiology",
							data: str,
							dataType: "json",
							success: function(data){
								$.jGrowl(data.message);
								$("#messages_edit_rad_location_form").clearForm();
								$("#messages_edit_rad_location").dialog('close');
								$("#messages_rad_location").removeOption(/./);
								$.ajax({
									url: "ajaxsearch/orders-provider/Radiology",
									dataType: "json",
									type: "POST",
									success: function(data1){
										if(data1.response =='true'){
											$("#messages_rad_location").addOption({"":"Add imaging provider."}, false);
											$("#messages_rad_location").addOption(data1.message, false);
											$("#messages_rad_location").val(data.id);
										} else {
											$("#messages_rad_location").addOption({"":"No imaging provider.  Click Add."}, false);
										}
									}
								});
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$("#messages_edit_rad_location_form").clearForm();
				$("#messages_edit_rad_location").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	var user_id = noshdata.user_id;
	$("#messages_rad_orders_type").addOption({"0":'Global',user_id:'Personal'}, false);
	$("#add_test_cpt1").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Save': function() {
				var a = encodeURIComponent($("#messages_rad").val());
				var b = encodeURIComponent($("#messages_rad_cpt").val());
				var c = encodeURIComponent($("#messages_rad_orders_type").val());
				var d = encodeURIComponent($("#messages_rad_snomed").val());
				$.ajax({
					type: "POST",
					url: "ajaxchart/add-orderslist",
					data: "orders_description=" + a + "&cpt=" + b + "&orders_category=Radiology&user_id=" + c + "&snomed=" + d,
					success: function(data){
						$.jGrowl(data);
					}
				});
				if(b){
					a = a + ', CPT ' + b;
				}
				var terms = split($("#messages_rad_orders_text").val());
				terms.pop();
				terms.push(a);
				terms.push( "" );
				$("#messages_rad_orders").focus();
				$("#messages_rad_orders").val(terms.join( "\n" ));
				$("#add_test_cpt1_form").clearForm();
				$("#add_test_cpt1").dialog('close');
				return false;
			},
			Cancel: function() {
				var terms = split($("#messages_rad_orders_text").val());
				terms.pop();
				terms.push( "" );
				$("#messages_rad_orders").focus();
				$("#messages_rad_orders").val(terms.join( "\n" ));
				$("#add_test_cpt1_form").clearForm();
				$("#add_test_cpt1").dialog('close');
				return false;
			}
		},
		open: function(event, ui) {
			$.ajax({
				url: "ajaxdashboard/check-snomed-extension",
				type: "POST",
				success: function(data){
					if(data =='y'){
						$("#add_test_snomed_div1").show();
						$("#snomed_tree1").jstree({
							"plugins" : [ "json_data", "sort", "ui", "themeroller" ],
							"json_data" : {
								"ajax" : {
									"type": 'POST',
									"url": function (node) {
										var nodeId = "";
										var url = "";
										if (node == -1) {
											url = "ajaxsearch/snomed-parent/imaging";
										} else {
											nodeId = node.attr('id');
											url = "ajaxsearch/snomed-child/" + nodeId;
										}
										return url;
									},
									"success": function (new_data) {
										return new_data;
									}
								}
							},
							"themeroller" : {
								"item" : 'ui-widget-content'
							}
						}).bind("select_node.jstree", function (event, data) {
							$("#messages_rad_snomed").val(data.rslt.obj.attr("id"));
						});
						$("#messages_rad_snomed").autocomplete({
							source: function (req, add){
								$.ajax({
									url: "ajaxsearch/snomed/procedure",
									dataType: "json",
									type: "POST",
									data: req,
									success: function(data){
										if(data.response =='true'){
											add(data.message);
										}
									}
								});
							},
							minLength: 3
						});
					} else {
						$("#add_test_snomed_div1").hide();
					}
				}
			});
			$("#messages_rad_cpt").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/cpt",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							} else {
								var addterm = [{"label": req.term + ": Select to add CPT to database.", "value":"*/add/*", "value1": req.term}];
								add(addterm);
							}
						}
					});
				},
				select: function(event, ui){
					if (ui.item.value == "*/add/*") {
						$("#configuration_cpt_form").clearForm();
						if (ui.item.value1.length > 5) {
							$("#configuration_cpt_description").val(ui.item.value1);
						} else {
							$("#configuration_cpt_code").val(ui.item.value1);
						}
						$('#configuration_cpt_origin').val("messages_rad_cpt");
						$('#configuration_cpt_dialog').dialog('open');
						$('#configuration_cpt_dialog').dialog('option', 'title', "Add CPT Code");
					}
				},
				minLength: 3
			});
			$("#messages_rad_orders_type").val('0');
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messages_rad_orderslist_link").button().click(function(){
		$("#configuration_dialog").dialog('open');
		$("#configuration_accordion").accordion("option", "active", 4);
	});
});
$(document).ready(function() {
	$("#messages_cp_accordion").accordion({ 
		heightStyle: "content" ,
		activate: function (event, ui) {
			var id = ui.newPanel[0].id;
			$("#" + id + " .text").first().focus();
		}
	});
	$("#messages_cp_accordion .ui-accordion-content").each(function(){
		$(this).find(".text").last().on('keydown', function(e) {
			if (e.which == 9) {
				if (!e.shiftKey) {
					var active = $("#messages_cp_accordion").accordion("option", "active");
					if (active < 4) {
						$("#messages_cp_accordion").accordion("option", "active", active + 1);
					}
				}
			}
		});
	});
	$("#messages_cp_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(){
			jQuery("#messages_cp_list").jqGrid('GridUnload');
			jQuery("#messages_cp_list").jqGrid({
				url: "ajaxchart/orders-list/cp",
				postData: {t_messages_id: function(){return $("#messages_cp_t_messages_id_origin").val();}},
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Tests','Diagnosis','Location1','Location','Insurance','Provider','Order Date'],
				colModel:[
					{name:'orders_id',index:'orders_id',width:1,hidden:true},
					{name:'orders_cp',index:'orders_cp',width:300},
					{name:'orders_cp_icd',index:'orders_cp_icd',width:200},
					{name:'address_id',index:'address_id',hidden:true},
					{name:'displayname',index:'displayname',width:100},
					{name:'orders_insurance',index:'orders_insurance',hidden:true},
					{name:'encounter_provider',index:'encounter_provider',hidden:true},
					{name:'orders_pending_date',index:'orders_pending_date',hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#messages_cp_list_pager'),
				sortname: 'orders_id',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Cardiopulmonary Orders",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#messages_cp_list_pager',{search:false,edit:false,add:false,del:false});
		},
		buttons: {
			'Save': function() {
				var origin = $("#messages_cp_origin").val();
				if (origin == 'message') {
					var id = $("#t_messages_id").val();
					$.ajax({
						type: "POST",
						url: "ajaxchart/import-orders/cp",
						data: "t_messages_id=" + id,
						success: function(data){
							var old = $("#t_messages_message").val();
							var old1 = old.trim();
							if(data != ''){
								if (old1 != '') {
									var a = old1+'\n\n'+data;
								} else {
									var a = data;
								}
								$("#t_messages_message").val(a);
							}
						}
					});
				} else {
					checkorders();
				}
				$("#messages_cp_origin").val('');
				$("#messages_cp_t_messages_id_origin").val('');
				$("#messages_cp_dialog").dialog('close');
			},
			Cancel: function() {
				$("#messages_cp_origin").val('');
				$("#messages_cp_t_messages_id_origin").val('');
				$("#messages_cp_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messages_add_cp").click(function(){
		load_outside_providers('cp','add');
		var a = $("#messages_cp_t_messages_id_origin").val();
		if (a == '') {
			$("#messages_cp_eid").val(noshdata.eid);
		} else {
			$("#messages_cp_t_messages_id").val(a);
		}
		$("#messages_cp_status").html('');
		if ($("#messages_cp_provider_list").val() == '' && noshdata.group_id == '2') {
			$("#messages_cp_provider_list").val(noshdata.user_id);
		}
		$("#messages_cp_location").val('');
		var currentDate = getCurrentDate();
		$('#messages_cp_orders_pending_date').val(currentDate);
		$("#messages_cp_edit_fields").dialog("option", "title", "Add Cardiopulmonary Order");
		$("#messages_cp_edit_fields").dialog('open');
	});
	$("#messages_edit_cp").click(function(){
		var item = jQuery("#messages_cp_list").getGridParam('selrow');
		if(item){
			load_outside_providers('cp','edit');
			jQuery("#messages_cp_list").GridToForm(item,"#edit_messages_cp_form");
			var status = 'Details for Cardiopulmonary Order #' + item;
			$("#messages_cp_status").html(status);
			if ($("#messages_cp_provider_list").val() == '' && noshdata.group_id == '2') {
				$("#messages_cp_provider_list").val(noshdata.user_id);
			}
			var date = $('#messages_cp_orders_pending_date').val();
			var edit_date = editDate1(date);
			$('#messages_cp_orders_pending_date').val(edit_date);
			var a = $("#messages_cp_t_messages_id_origin").val();
			if (a == '') {
				$("#messages_cp_eid").val(noshdata.eid);
			} else {
				$("#messages_cp_t_messages_id").val(a);
			}
			$("#messages_cp_edit_fields").dialog("option", "title", "Edit Cardiopulmonary Order");
			$("#messages_cp_edit_fields").dialog('open');
		} else {
			$.jGrowl("Please select order to edit!");
		}
	});
	$("#messages_resend_cp").click(function(){
		var item = jQuery("#messages_cp_list").getGridParam('selrow');
		if(item){
			$("#messages_cp_orders_id").val(item);
			$('#messages_cp_choice').html("Choose an action for the cardiopulmonary order, reference number " + item);
			$("#messages_cp_action_dialog").dialog('open');
		} else {
			$.jGrowl("Please select order to edit!");
		}
	});
	$("#messages_delete_cp").click(function(){
		var item = jQuery("#messages_cp_list").getGridParam('selrow');
		if(item){
			$.ajax({
				url: "ajaxchart/delete-orders/Cardiopulmonary",
				type: "POST",
				data: "orders_id=" + item,
				success: function(data){
					$.jGrowl(data);
					reload_grid("messages_cp_list");
				}
			});
		} else {
			$.jGrowl("Please select order to delete!");
		}
	});
	$("#messages_cp_edit_fields").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(){
			jQuery("#messages_cp_insurance_grid").jqGrid('GridUnload');
			jQuery("#messages_cp_insurance_grid").jqGrid({
				url: "ajaxdashboard/insurance",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Insurance','ID Number','Group Number','Priority','Lastname','Firstname','DOB','Gender','Address','City','State','Zip','Copay','Deductible','Comments','Address ID','Relationship'],
				colModel:[
					{name:'insurance_id',index:'insurance_id',width:1,hidden:true},
					{name:'insurance_plan_name',index:'insurance_plan_name',width:350},
					{name:'insurance_id_num',index:'insurance_id_num',width:100},
					{name:'insurance_group',index:'insurance_group',width:100},
					{name:'insurance_order',index:'insurance_order',width:105},
					{name:'insurance_insu_lastname',index:'insurance_insu_lastname',width:1,hidden:true},
					{name:'insurance_insu_firstname',index:'insurance_insu_firstname',width:1,hidden:true},
					{name:'insurance_insu_dob',index:'insurance_insu_dob',width:1,hidden:true},
					{name:'insurance_insu_gender',index:'insurance_insu_gender',width:1,hidden:true},
					{name:'insurance_insu_address',index:'insurance_insu_address',width:1,hidden:true},
					{name:'insurance_insu_city',index:'insurance_insu_city',width:1,hidden:true},
					{name:'insurance_insu_state',index:'insurance_insu_state',width:1,hidden:true},
					{name:'insurance_insu_zip',index:'insurance_insu_zip',width:1,hidden:true},
					{name:'insurance_copay',index:'insurance_copay',width:1,hidden:true},
					{name:'insurance_deductible',index:'insurance_deductible',width:1,hidden:true},
					{name:'insurance_comments', index:'insurance_comments',width:1,hidden:true},
					{name:'address_id',index:'address_id',width:1,hidden:true},
					{name:'insurance_relationship',index:'insurance_relationship',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#messages_cp_insurance_pager'),
				sortname: 'insurance_order',
			 	viewrecords: true,
			 	sortorder: "asc",
			 	caption:"Insurance Payors - Click to select insurance for imaging order",
			 	height: "100%",
			 	onSelectRow: function(id){
			 		var insurance_plan_name = jQuery("#messages_cp_insurance_grid").getCell(id,'insurance_plan_name');
					var insurance_id_num = jQuery("#messages_cp_insurance_grid").getCell(id,'insurance_id_num');
					var insurance_group = jQuery("#messages_cp_insurance_grid").getCell(id,'insurance_group');
					var insurance_insu_lastname = jQuery("#messages_cp_insurance_grid").getCell(id,'insurance_insu_lastname');
					var insurance_insu_firstname = jQuery("#messages_cp_insurance_grid").getCell(id,'insurance_insu_firstname');
					var address_id = jQuery("#messages_cp_insurance_grid").getCell(id,'address_id');
					$.ajax({
						url: "ajaxsearch/payor-id/" + address_id,
						type: "POST",
						success: function(data){
							var text = insurance_plan_name + '; Payor ID: ' + data + '; ID: ' + insurance_id_num;
							if(insurance_group != ''){
								text += "; Group: " + insurance_group;
							}
							text += "; " + insurance_insu_lastname + ", " + insurance_insu_firstname;
							var old = $("#messages_cp_insurance").val();
							if(old){
								var pos = old.lastIndexOf('\n');
								if (pos == -1) {
									var old1 = old + '\n';
								} else {
									var a = old.slice(pos);
									if (a == '') {
										var old1 = old;
									} else {
										var old1 = old + '\n';
									}
								}
							} else {
								var old1 = '';
							}
							$("#messages_cp_insurance").val(old1+text);
						}
					});
				},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#messages_cp_insurance_pager',{search:false,edit:false,add:false,del:false});
			if (noshdata.group_id == '2') {
				$(".nosh_provider_exclude").hide();
			} else {
				$(".nosh_provider_exclude").show();
			}
			$("#messages_cp_codes").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/icd",
						dataType: "json",
						type: "POST",
						data: "term=" + extractLast(req.term),
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				search: function() {
					var term = extractLast( this.value );
					if ( term.length < 2 ) {
						return false;
					}
				},
				focus: function() {
					return false;
				},
				select: function(event, ui){
					var terms = split( this.value );
					terms.pop();
					terms.push( ui.item.value );
					terms.push( "" );
					this.value = terms.join( "\n" );
					return false;
				}
			});
			$("#messages_cp_orders").catcomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/cp",
						dataType: "json",
						type: "POST",
						data: "term=" + extractLast(req.term),
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							} else {
								var addterm = [{"label": extractLast(req.term) + ": Select to add order to database.", "value":"*/add/*", "value1": extractLast(req.term), "category":"New Item"}];
								add(addterm);
							}
						}
					});
				},
				search: function() {
					var term = extractLast( this.value );
					if ( term.length < 2 ) {
						return false;
					}
				},
				focus: function() {
					return false;
				},
				select: function(event, ui){
					if (ui.item.value == "*/add/*") {
						$("#messages_cp").val(ui.item.value1);
						$("#messages_cp_orders_text").val(this.value);
						$("#add_test_cpt2").dialog('open');
					} else {
						var terms = split( this.value );
						terms.pop();
						terms.push( ui.item.value );
						terms.push( "" );
						this.value = terms.join( "\n" );
						return false;
					}
				}
			});
			$("#messages_cp_accordion").accordion("option", "active", 0);
			$("#messages_cp_orders").focus();
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#edit_messages_cp_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_messages_cp_form").serialize();
					$.ajax({
						type: "POST",
						url: "ajaxchart/add-orders/cp",
						data: str,
						dataType: "json",
						success: function(data){
							$.jGrowl(data.message);
							$('#messages_cp_choice').html(data.choice);
							$("#messages_cp_action_dialog").dialog('open');
							$("#edit_messages_cp_form").clearForm();
							$("#messages_cp_orders_id").val(data.id);
							$("#messages_cp_edit_fields").dialog('close');
							reload_grid("alerts");
							reload_grid("messages_cp_list");
							if(noshdata.pending_orders_id1 != '') {
								var old = $("#situation").val();
								if (old != '') {
									var b = old + '\n\n' + data.pending;
								} else {
									var b = data.pending;
								}
								$("#situation").val(b);
								$.ajax({
									type: "POST",
									url: "ajaxchart/complete-alert-order/" + noshdata.pending_orders_id1,
									success: function(data){
										$.jGrowl(data);
										noshdata.pending_orders_id1 = '';
										reload_grid("alerts_pending");
									}
								});
							}
						}
					});
				}
			},
			Cancel: function() {
				$("#edit_messages_cp_form").clearForm();
				$("#messages_cp_edit_fields").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messages_cp_action_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 200, 
		width: 500, 
		modal: true,
		closeOnEscape: false,
		dialogClass: "noclose",
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$(".messages_cp_button_clear").click(function(){
		var id = $(this).attr('id');
		var parent_id = id.replace('_clear', '');
		$("#" + parent_id).val('');
	});
	$("#messages_cp_issues").click(function() {
		$("#issues_list_dialog").dialog('open');
		$('#issues_pmh_header').hide();
		$('#issues_psh_header').hide();
		$('#issues_cp_header').show();
		$('#issues_lab_header').hide();
		$('#issues_rad_header').hide();
		$('#issues_ref_header').hide();
		$('#issues_assessment_header').hide();
	});
	$("#messages_select_cp_location2").click(function (){
		$("#messages_edit_cp_location").dialog('open');
	});
	$("#messages_cp_location_state").addOption(states, false);
	$("#messages_cp_location_phone").mask("(999) 999-9999");
	$("#messages_cp_location_fax").mask("(999) 999-9999");
	$("#messages_cp_insurance_client").click(function(){
		var text = "Bill Client";
		var old = $("#messages_cp_insurance").val();
		if(old){
			var pos = old.lastIndexOf('\n');
			if (pos == -1) {
				var old1 = old + '\n';
			} else {
				var a = old.slice(pos);
				if (a == '') {
					var old1 = old;
				} else {
					var old1 = old + '\n';
				}
			}
		} else {
			var old1 = '';
		}
		$("#messages_cp_insurance").val(old1+text);
	});
	$("#messages_cp_orders_pending_date").datepicker();
	$("#messages_print_cp").click(function(){
		var cp = $("#messages_cp_orders_id");
		var bValid = true;
		bValid = bValid && checkEmpty(cp,"Cardioopulmonary Order");
		if (bValid) {
			var order_id = $("#messages_cp_orders_id").val();
			window.open("print_orders/" + order_id);
		}
	});
	$("#messages_electronic_cp").click(function(){
		$.jGrowl('Future feature!');
	});
	$("#messages_fax_cp").click(function(){
		var cp = $("#messages_cp_orders_id");
		var bValid = true;
		bValid = bValid && checkEmpty(cp,"Cardiopulmonary Order");
		if (bValid) {
			var order_id = $("#messages_cp_orders_id").val();
			if(order_id){
				$.ajax({
					type: "POST",
					url: "ajaxchart/fax-orders",
					data: "orders_id=" + order_id,
					success: function(data){
						$.jGrowl(data);
					}
				});
			} else {
				$.jGrowl("Please complete the form");
			}
		}
	});
	$("#messages_done_cp").click(function(){
		$("#messages_cp_action_dialog").dialog('close');
		$("#messages_cp_orders_id").val('');
		reload_grid("messages_cp_list");
	});
	$("#messages_edit_cp_location").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(event, ui) {
			$("#messages_cp_location_city").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/city",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#messages_cp_location_facility").focus();
			var id = $("#messages_cp_location").val();
			if(id){
				$("#messages_edit_cp_location").dialog("option", "title", "Edit Cardiopulmonary Provider");
				$.ajax({
					type: "POST",
					url: "ajaxsearch/orders-provider1",
					data: "address_id=" + id,
					dataType: "json",
					success: function(data){
						$.each(data, function(key, value){
							$("#messages_edit_cp_location_form :input[name='" + key + "']").val(value);
						});
					}
				});
			} else {
				$("#messages_edit_cp_location").dialog("option", "title", "Add Cardioopulmonary Provider");
			}
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#messages_edit_cp_location_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#messages_edit_cp_location_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/edit-orders-provider/Cardiopulmonary",
							data: str,
							dataType: "json",
							success: function(data){
								$.jGrowl(data.message);
								$("#messages_edit_cp_location_form").clearForm();
								$("#messages_edit_cp_location").dialog('close');
								$("#messages_cp_location").removeOption(/./);
								$.ajax({
									url: "ajaxsearch/orders-provider/Cardiopulmonary",
									dataType: "json",
									type: "POST",
									success: function(data1){
										if(data1.response =='true'){
											$("#messages_cp_location").addOption({"":"Add cardiopulmonary provider."});
											$("#messages_cp_location").addOption(data1.message);
											$("#messages_cp_location").val(data.id);
										} else {
											$("#messages_cp_location").addOption({"":"No cardiopulmonary provider.  Click Add."});
										}
									}
								});
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$("#messages_edit_cp_location_form").clearForm();
				$("#messages_edit_cp_location").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	var user_id = noshdata.user_id;
	$("#messages_cp_orders_type").addOption({"0":'Global',user_id:'Personal'});
	$("#add_test_cpt2").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Save': function() {
				var a = encodeURIComponent($("#messages_cp").val());
				var b = encodeURIComponent($("#messages_cp_cpt").val());
				var c = encodeURIComponent($("#messages_cp_orders_type").val());
				var d = encodeURIComponent($("#messages_cp_snomed").val());
				$.ajax({
					type: "POST",
					url: "ajaxchart/add-orderslist",
					data: "orders_description=" + a + "&cpt=" + b + "&orders_category=Cardiopulmonary&user_id=" + c + "&snomed=" + d,
					success: function(data){
						$.jGrowl(data);
					}
				});
				if(b){
					a = a + ', CPT ' + b;
				}
				var terms = split($("#messages_cp_orders_text").val());
				terms.pop();
				terms.push(a);
				terms.push( "" );
				$("#messages_cp_orders").focus();
				$("#messages_cp_orders").val(terms.join( "\n" ));
				$("#add_test_cpt2_form").clearForm();
				$("#add_test_cpt2").dialog('close');
				return false;
			},
			Cancel: function() {
				var terms = split($("#messages_cp_orders_text").val());
				terms.pop();
				terms.push( "" );
				$("#messages_cp_orders").focus();
				$("#messages_cp_orders").val(terms.join( "\n" ));
				$("#add_test_cpt2_form").clearForm();
				$("#add_test_cpt2").dialog('close');
				return false;
			}
		},
		open: function(event, ui) {
			$.ajax({
				url: "ajaxdashboard/check-snomed-extension",
				type: "POST",
				success: function(data){
					if(data =='y'){
						$("#add_test_snomed_div2").show();
						$("#snomed_tree2").jstree({
							"plugins" : [ "json_data", "sort", "ui", "themeroller" ],
							"json_data" : {
								"ajax" : {
									"type": 'POST',
									"url": function (node) {
										var nodeId = "";
										var url = "";
										if (node == -1) {
											url = "ajaxsearch/snomed-parent/cp";
										} else {
											nodeId = node.attr('id');
											url = "ajaxsearch/snomed-child/" + nodeId;
										}
										return url;
									},
									"success": function (new_data) {
										return new_data;
									}
								}
							},
							"themeroller" : {
								"item" : 'ui-widget-content'
							}
						}).bind("select_node.jstree", function (event, data) {
							$("#messages_cp_snomed").val(data.rslt.obj.attr("id"));
						});
						$("#messages_cp_snomed").autocomplete({
							source: function (req, add){
								$.ajax({
									url: "ajaxsearch/snomed/procedure",
									dataType: "json",
									type: "POST",
									data: req,
									success: function(data){
										if(data.response =='true'){
											add(data.message);
										}
									}
								});
							},
							minLength: 3
						});
					} else {
						$("#add_test_snomed_div2").hide();
					}
				}
			});
			$("#messages_cp_cpt").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/cpt",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							} else {
								var addterm = [{"label": req.term + ": Select to add CPT to database.", "value":"*/add/*", "value1": req.term}];
								add(addterm);
							}
						}
					});
				},
				select: function(event, ui){
					if (ui.item.value == "*/add/*") {
						$("#configuration_cpt_form").clearForm();
						if (ui.item.value1.length > 5) {
							$("#configuration_cpt_description").val(ui.item.value1);
						} else {
							$("#configuration_cpt_code").val(ui.item.value1);
						}
						$('#configuration_cpt_origin').val("messages_lab_cpt");
						$('#configuration_cpt_dialog').dialog('open');
						$('#configuration_cpt_dialog').dialog('option', 'title', "Add CPT Code");
					}
				},
				minLength: 3
			});
			$("#messages_cp_orders_type").val('0');
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messages_cp_orderslist_link").button().click(function(){
		$("#configuration_dialog").dialog('open');
		$("#configuration_accordion").accordion("option", "active", 5);
	});
});
$(document).ready(function() {
	$("#messages_ref_accordion").accordion({ 
		heightStyle: "content" ,
		activate: function (event, ui) {
			var id = ui.newPanel[0].id;
			$("#" + id + " .text").first().focus();
		}
	});
	$("#messages_ref_accordion .ui-accordion-content").each(function(){
		$(this).find(".text").last().on('keydown', function(e) {
			if (e.which == 9) {
				if (!e.shiftKey) {
					var active = $("#messages_ref_accordion").accordion("option", "active");
					if (active < 4) {
						$("#messages_ref_accordion").accordion("option", "active", active + 1);
					}
				}
			}
		});
	});
	$("#messages_ref_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(){
			jQuery("#messages_ref_list").jqGrid('GridUnload');
			jQuery("#messages_ref_list").jqGrid({
				url: "ajaxchart/orders-list/referrals",
				postData: {t_messages_id: function(){return $("#messages_ref_t_messages_id_origin").val();}},
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Referral','Diagnosis','Location1','Location','Insurance','Provider','Order Date'],
				colModel:[
					{name:'orders_id',index:'orders_id',width:1,hidden:true},
					{name:'orders_referrals',index:'orders_referrals',width:300},
					{name:'orders_referrals_icd',index:'orders_referrals_icd',width:200},
					{name:'address_id',index:'address_id',hidden:true},
					{name:'displayname',index:'displayname',width:100},
					{name:'orders_insurance',index:'orders_insurance',hidden:true},
					{name:'encounter_provider',index:'encounter_provider',hidden:true},
					{name:'orders_pending_date',index:'orders_pending_date',hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#messages_ref_list_pager'),
				sortname: 'orders_id',
			 	viewrecords: true,
			 	sortorder: "desc",
			 	caption:"Referral Orders",
			 	height: "100%",
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#messages_ref_list_pager',{search:false,edit:false,add:false,del:false});
		},
		buttons: {
			'Save': function() {
				var origin = $("#messages_ref_origin").val();
				if (origin == 'message') {
					var id = $("#t_messages_id").val();
					$.ajax({
						type: "POST",
						url: "ajaxchart/import-orders/referrals",
						data: "t_messages_id=" + id,
						success: function(data){
							var old = $("#t_messages_message").val();
							var old1 = old.trim();
							if(data != ''){
								if (old1 != '') {
									var a = old1+'\n\n'+data;
								} else {
									var a = data;
								}
								$("#t_messages_message").val(a);
							}
						}
					});
				} else {
					checkorders();
				}
				$("#messages_ref_origin").val('');
				$("#messages_ref_t_messages_id_origin").val('');
				$("#messages_ref_dialog").dialog('close');
			},
			Cancel: function() {
				$("#messages_ref_origin").val('');
				$("#messages_ref_t_messages_id_origin").val('');
				$("#messages_ref_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$('#messages_specialty_select').change(function() {
		if ($(this).val() != ""){
			$("#messages_ref_location").removeOption(/./);
			$.ajax({
				url: "ajaxsearch/ref-provider/" + $(this).val(),
				dataType: "json",
				type: "POST",
				success: function(data){
					if(data.response =='true'){
						$("#messages_ref_location").addOption({"":"Add referral provider."}, false);
						$("#messages_ref_location").addOption(data.message, false);
					} else {
						$("#messages_ref_location").addOption({"":"No referral provider.  Click Add."}, false);
					}
				}
			});
		}
	});
	$("#messages_add_ref").click(function(){
		var a = $("#messages_ref_t_messages_id_origin").val();
		if (a == '') {
			$("#messages_ref_eid").val(noshdata.eid);
		} else {
			$("#messages_ref_t_messages_id").val(a);
		}
		$("#messages_ref_status").html('');
		$("#messages_ref_location").val('');
		$("#messages_specialty_select").val('');
		$("#messages_ref_template").val('');
		if (noshdata.group_id == '2') {
			$("#messages_ref_provider_list").val(noshdata.user_id);
		} else {
			$("#messages_ref_provider_list").val('');
		}
		var currentDate = getCurrentDate();
		$('#messages_ref_orders_pending_date').val(currentDate);
		$("#messages_specialty_select").removeOption(/./);
		$.ajax({
			url: "ajaxsearch/ref-provider-specialty",
			dataType: "json",
			type: "POST",
			success: function(data){
				if(data.response =='true'){
					$("#messages_specialty_select").addOption({"":"All specialties."}, false);
					$("#messages_specialty_select").addOption(data.message, false);
				} else {
					$("#messages_specialty_select").addOption({"":"No specialties.  Click Add."}, false);
				}
			}
		});
		$("#messages_ref_location").removeOption(/./);
		$.ajax({
			url: "ajaxsearch/ref-provider/all",
			dataType: "json",
			type: "POST",
			success: function(data){
				if(data.response =='true'){
					$("#messages_ref_location").addOption({"":"Add referral provider."}, false);
					$("#messages_ref_location").addOption(data.message, false);
				} else {
					$("#messages_ref_location").addOption({"":"No referral provider.  Click Add."}, false);
				}
			}
		});
		$("#messages_ref_edit_fields").dialog("option", "title", "Add Referral");
		$("#messages_ref_edit_fields").dialog('open');
	});
	$("#messages_edit_ref").click(function(){
		var item = jQuery("#messages_ref_list").getGridParam('selrow');
		if(item){
			$("#messages_specialty_select").removeOption(/./);
			$.ajax({
				url: "ajaxsearch/ref-provider-specialty",
				dataType: "json",
				type: "POST",
				async: false,
				success: function(data){
					if(data.response =='true'){
						$("#messages_specialty_select").addOption({"":"All specialties."}, false);
						$("#messages_specialty_select").addOption(data.message, false);
					} else {
						$("#messages_specialty_select").addOption({"":"No specialties.  Click Add."}, false);
					}
				}
			});
			$("#messages_ref_location").removeOption(/./);
			$.ajax({
				url: "ajaxsearch/ref-provider/all",
				dataType: "json",
				type: "POST",
				async: false,
				success: function(data){
					if(data.response =='true'){
						$("#messages_ref_location").addOption({"":"Add referral provider."}, false);
						$("#messages_ref_location").addOption(data.message, false);
					} else {
						$("#messages_ref_location").addOption({"":"No referral provider.  Click Add."}, false);
					}
				}
			});
			jQuery("#messages_ref_list").GridToForm(item,"#edit_messages_ref_form");
			var status = 'Details for Referral Order #' + item;
			$("#messages_ref_status").html(status);
			$("#messages_ref_template").val('');
			if ($("#messages_ref_provider_list").val() == '' && noshdata.group_id == '2') {
				$("#messages_ref_provider_list").val(noshdata.user_id);
			}
			var a = $("#messages_ref_t_messages_id_origin").val();
			if (a == '') {
				$("#messages_ref_eid").val(noshdata.eid);
			} else {
				$("#messages_ref_t_messages_id").val(a);
			}
			$("#messages_ref_edit_fields").dialog("option", "title", "Edit Referral");
			$("#messages_ref_edit_fields").dialog('open');
		} else {
			$.jGrowl("Please select order to edit!");
		}
	});
	$("#messages_resend_ref").click(function(){
		var item = jQuery("#messages_ref_list").getGridParam('selrow');
		if(item){
			$("#messages_ref_orders_id").val(item);
			$('#messages_ref_choice').html("Choose an action for the referral order, reference number " + item);
			$("#messages_ref_action_dialog").dialog('open');
		} else {
			$.jGrowl("Please select order to edit!");
		}
	});
	$("#messages_delete_ref").click(function(){
		var item = jQuery("#messages_ref_list").getGridParam('selrow');
		if(item){
			$.ajax({
				url: "ajaxchart/delete-orders/Referral",
				type: "POST",
				data: "orders_id=" + item,
				success: function(data){
					$.jGrowl(data);
					reload_grid("messages_ref_list");
				}
			});
		} else {
			$.jGrowl("Please select order to delete!");
		}
	});
	$("#messages_ref_edit_fields").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(){
			jQuery("#messages_ref_insurance_grid").jqGrid('GridUnload');
			jQuery("#messages_ref_insurance_grid").jqGrid({
				url: "ajaxdashboard/insurance",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Insurance','ID Number','Group Number','Priority','Lastname','Firstname','DOB','Gender','Address','City','State','Zip','Copay','Deductible','Comments','Address ID','Relationship'],
				colModel:[
					{name:'insurance_id',index:'insurance_id',width:1,hidden:true},
					{name:'insurance_plan_name',index:'insurance_plan_name',width:350},
					{name:'insurance_id_num',index:'insurance_id_num',width:100},
					{name:'insurance_group',index:'insurance_group',width:100},
					{name:'insurance_order',index:'insurance_order',width:105},
					{name:'insurance_insu_lastname',index:'insurance_insu_lastname',width:1,hidden:true},
					{name:'insurance_insu_firstname',index:'insurance_insu_firstname',width:1,hidden:true},
					{name:'insurance_insu_dob',index:'insurance_insu_dob',width:1,hidden:true},
					{name:'insurance_insu_gender',index:'insurance_insu_gender',width:1,hidden:true},
					{name:'insurance_insu_address',index:'insurance_insu_address',width:1,hidden:true},
					{name:'insurance_insu_city',index:'insurance_insu_city',width:1,hidden:true},
					{name:'insurance_insu_state',index:'insurance_insu_state',width:1,hidden:true},
					{name:'insurance_insu_zip',index:'insurance_insu_zip',width:1,hidden:true},
					{name:'insurance_copay',index:'insurance_copay',width:1,hidden:true},
					{name:'insurance_deductible',index:'insurance_deductible',width:1,hidden:true},
					{name:'insurance_comments', index:'insurance_comments',width:1,hidden:true},
					{name:'address_id',index:'address_id',width:1,hidden:true},
					{name:'insurance_relationship',index:'insurance_relationship',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#messages_ref_insurance_pager'),
				sortname: 'insurance_order',
			 	viewrecords: true,
			 	sortorder: "asc",
			 	caption:"Insurance Payors - Click to select insurance for imaging order",
			 	height: "100%",
			 	onSelectRow: function(id){
			 		var insurance_plan_name = jQuery("#messages_ref_insurance_grid").getCell(id,'insurance_plan_name');
					var insurance_id_num = jQuery("#messages_ref_insurance_grid").getCell(id,'insurance_id_num');
					var insurance_group = jQuery("#messages_ref_insurance_grid").getCell(id,'insurance_group');
					var insurance_insu_lastname = jQuery("#messages_ref_insurance_grid").getCell(id,'insurance_insu_lastname');
					var insurance_insu_firstname = jQuery("#messages_ref_insurance_grid").getCell(id,'insurance_insu_firstname');
					var address_id = jQuery("#messages_ref_insurance_grid").getCell(id,'address_id');
					$.ajax({
						url: "ajaxsearch/payor-id/" + address_id,
						type: "POST",
						success: function(data){
							var text = insurance_plan_name + '; Payor ID: ' + data + '; ID: ' + insurance_id_num;
							if(insurance_group != ''){
								text += "; Group: " + insurance_group;
							}
							text += "; " + insurance_insu_lastname + ", " + insurance_insu_firstname;
							var old = $("#messages_ref_insurance").val();
							if(old){
								var pos = old.lastIndexOf('\n');
								if (pos == -1) {
									var old1 = old + '\n';
								} else {
									var a = old.slice(pos);
									if (a == '') {
										var old1 = old;
									} else {
										var old1 = old + '\n';
									}
								}
							} else {
								var old1 = '';
							}
							$("#messages_ref_insurance").val(old1+text);
						}
					});
				},
			 	jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#messages_ref_insurance_pager',{search:false,edit:false,add:false,del:false});
			$("#messages_ref_template").removeOption(/./);
			$.ajax({
				type: "POST",
				url: "ajaxchart/get-ref-templates-list",
				dataType: "json",
				success: function(data){
					$('#messages_ref_template').addOption({"":"*Select a template"}, false);
					$('#messages_ref_template').addOption(data.options, false);
					$('#messages_ref_template').sortOptions();
				}
			});
			if (noshdata.group_id == '2') {
				$(".nosh_provider_exclude").hide();
			} else {
				$(".nosh_provider_exclude").show();
			}
			$("#messages_ref_codes").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/icd",
						dataType: "json",
						type: "POST",
						data: "term=" + extractLast(req.term),
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				search: function() {
					var term = extractLast( this.value );
					if ( term.length < 2 ) {
						return false;
					}
				},
				focus: function() {
					return false;
				},
				select: function(event, ui){
					var terms = split( this.value );
					terms.pop();
					terms.push( ui.item.value );
					terms.push( "" );
					this.value = terms.join( "\n" );
					return false;
				}
			});
			$("#messages_ref_accordion").accordion("option", "active", 0);
			$("#messages_ref_orders").focus();
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#edit_messages_ref_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_messages_ref_form").serialize();
					$.ajax({
						type: "POST",
						url: "ajaxchart/add-orders/referrals",
						data: str,
						dataType: "json",
						success: function(data){
							$.jGrowl(data.message);
							$('#messages_ref_choice').html(data.choice);
							$("#messages_ref_action_dialog").dialog('open');
							$("#edit_messages_ref_form").clearForm();
							$("#messages_ref_orders_id").val(data.id);
							$("#messages_ref_edit_fields").dialog('close');
							$('#messages_ref_form').html('');
							reload_grid("alerts");
							reload_grid("messages_ref_list");
						}
					});
				}
			},
			Cancel: function() {
				$("#edit_messages_ref_form").clearForm();
				$("#messages_ref_edit_fields").dialog('close');
				$('#messages_ref_form').html('');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messages_ref_action_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 200, 
		width: 500, 
		modal: true,
		closeOnEscape: false,
		dialogClass: "noclose",
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$(".messages_ref_button_clear").click(function(){
		var id = $(this).attr('id');
		var parent_id = id.replace('_clear', '');
		$("#" + parent_id).val('');
	});
	$("#messages_ref_issues").click(function() {
		$("#issues_list_dialog").dialog('open');
		$('#issues_pmh_header').hide();
		$('#issues_psh_header').hide();
		$('#issues_ref_header').show();
		$('#issues_lab_header').hide();
		$('#issues_rad_header').hide();
		$('#issues_cp_header').hide();
		$('#issues_assessment_header').hide();
	});	
	$("#messages_select_ref_location2").click(function (){
		$("#messages_edit_ref_location").dialog('open');
	});
	$("#messages_ref_location_state").addOption(states, false);
	$("#messages_ref_location_phone").mask("(999) 999-9999");
	$("#messages_ref_location_fax").mask("(999) 999-9999");
	$("#messages_ref_insurance_client").click(function(){
		var text = "Bill Client";
		var old = $("#messages_ref_insurance").val();
		if(old){
			var pos = old.lastIndexOf('\n');
			if (pos == -1) {
				var old1 = old + '\n';
			} else {
				var a = old.slice(pos);
				if (a == '') {
					var old1 = old;
				} else {
					var old1 = old + '\n';
				}
			}
		} else {
			var old1 = '';
		}
		$("#messages_ref_insurance").val(old1+text);
	});
	
	$("#messages_print_ref").click(function(){
		var ref = $("#messages_ref_orders_id");
		var bValid = true;
		bValid = bValid && checkEmpty(ref,"Referral Order");
		if (bValid) {
			var order_id = $("#messages_ref_orders_id").val();
			window.open("print_orders/" + order_id);
		}
	});
	$("#messages_electronic_ref").click(function(){
		$.jGrowl('Future feature!');
	});
	$("#messages_fax_ref").click(function(){
		var ref = $("#messages_ref_orders_id");
		var bValid = true;
		bValid = bValid && checkEmpty(ref,"Referral Order");
		if (bValid) {
			var order_id = $("#messages_ref_orders_id").val();
			if(order_id){
				$.ajax({
					type: "POST",
					url: "ajaxchart/fax-orders",
					data: "orders_id=" + order_id,
					success: function(data){
						$.jGrowl(data);
					}
				});
			} else {
				$.jGrowl("Please complete the form");
			}
		}
	});
	$("#messages_done_ref").click(function(){
		$("#messages_ref_action_dialog").dialog('close');
		$("#messages_ref_orders_id").val('');
		reload_grid("messages_ref_list");
	});
	$("#messages_edit_ref_location").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function(event, ui) {
			$("#messages_ref_location_specialty").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/specialty1",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#messages_ref_location_city").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/city",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
			$("#messages_ref_location_lastname").focus();
			var id = $("#messages_ref_location").val();
			if(id){
				$("#messages_edit_ref_location").dialog("option", "title", "Edit Referral Provider");
				$.ajax({
					type: "POST",
					url: "ajaxsearch/orders-provider1",
					data: "address_id=" + id,
					dataType: "json",
					success: function(data){
						$.each(data, function(key, value){
							$("#messages_edit_ref_location_form :input[name='" + key + "']").val(value);
						});
					}
				});
			} else {
				$("#messages_edit_ref_location").dialog("option", "title", "Add Referral Provider");
			}
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#messages_edit_ref_location_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#messages_edit_ref_location_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxchart/edit-orders-provider/Referral",
							data: str,
							dataType: "json",
							success: function(data){
								$.jGrowl(data.message);
								$("#messages_edit_ref_location_form").clearForm();
								$("#messages_edit_ref_location").dialog('close');
								$("#messages_ref_location").removeOption(/./);
								$.ajax({
									url: "ajaxsearch/ref-provider/all",
									dataType: "json",
									type: "POST",
									success: function(data1){
										if(data1.response =='true'){
											$("#messages_ref_location").addOption({"":"Add referral provider."});
											$("#messages_ref_location").addOption(data1.message, false);
											$("#messages_ref_location").val(data.id);
										} else {
											$("#messages_ref_location").addOption({"":"No referral provider.  Click Add."}, false);
										}
									}
								});
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$("#messages_edit_ref_location_form").clearForm();
				$("#messages_edit_ref_location").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	var user_id = noshdata.user_id;
	$("#messages_ref_orders_type").addOption({"0":'Global',user_id:'Personal'}, false);
	$("#add_test_cpt3").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Save': function() {
				var a = encodeURIComponent($("#messages_ref").val());
				var b = encodeURIComponent($("#messages_ref_cpt").val());
				var c = encodeURIComponent($("#messages_ref_orders_type").val());
				var d = encodeURIComponent($("#messages_ref_snomed").val());
				$.ajax({
					type: "POST",
					url: "ajaxchart/add-orderslist",
					data: "orders_description=" + a + "&cpt=" + b + "&orders_category=Referral&user_id=" + c + "&snomed=" + d,
					success: function(data){
						$.jGrowl(data);
					}
				});
				if(b){
					a = a + ', CPT ' + b;
				}
				var terms = split($("#messages_ref_orders_text").val());
				terms.pop();
				terms.push(a);
				terms.push( "" );
				$("#messages_ref_orders").focus();
				$("#messages_ref_orders").val(terms.join( "\n" ));
				$("#add_test_cpt3_form").clearForm();
				$("#add_test_cpt3").dialog('close');
				return false;
			},
			Cancel: function() {
				var terms = split($("#messages_ref_orders_text").val());
				terms.pop();
				terms.push( "" );
				$("#messages_ref_orders").focus();
				$("#messages_ref_orders").val(terms.join( "\n" ));
				$("#add_test_cpt3_form").clearForm();
				$("#add_test_cpt3").dialog('close');
				return false;
			}
		},
		open: function(event, ui) {
			$.ajax({
				url: "ajaxdashboard/check-snomed-extension",
				type: "POST",
				success: function(data){
					if(data =='y'){
						$("#add_test_snomed_div3").show();
						$("#snomed_tree3").jstree({
							"plugins" : [ "json_data", "sort", "ui", "themeroller" ],
							"json_data" : {
								"ajax" : {
									"type": 'POST',
									"url": function (node) {
										var nodeId = "";
										var url = "";
										if (node == -1) {
											url = "ajaxsearch/snomed-parent/ref";
										} else {
											nodeId = node.attr('id');
											url = "ajaxsearch/snomed-child/" + nodeId;
										}
										return url;
									},
									"success": function (new_data) {
										return new_data;
									}
								}
							},
							"themeroller" : {
								"item" : 'ui-widget-content'
							}
						}).bind("select_node.jstree", function (event, data) {
							$("#messages_ref_snomed").val(data.rslt.obj.attr("id"));
						});
						$("#messages_ref_snomed").autocomplete({
							source: function (req, add){
								$.ajax({
									url: "ajaxsearch/snomed/procedure",
									dataType: "json",
									type: "POST",
									data: req,
									success: function(data){
										if(data.response =='true'){
											add(data.message);
										}
									}
								});
							},
							minLength: 3
						});
					} else {
						$("#add_test_snomed_div3").hide();
					}
				}
			});
			$("#messages_ref_cpt").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/cpt",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							} else {
								var addterm = [{"label": req.term + ": Select to add CPT to database.", "value":"*/add/*", "value1": req.term}];
								add(addterm);
							}
						}
					});
				},
				select: function(event, ui){
					if (ui.item.value == "*/add/*") {
						$("#configuration_cpt_form").clearForm();
						if (ui.item.value1.length > 5) {
							$("#configuration_cpt_description").val(ui.item.value1);
						} else {
							$("#configuration_cpt_code").val(ui.item.value1);
						}
						$('#configuration_cpt_origin').val("messages_ref_cpt");
						$('#configuration_cpt_dialog').dialog('open');
						$('#configuration_cpt_dialog').dialog('option', 'title', "Add CPT Code");
					}
				},
				minLength: 3
			});
			$("#messages_ref_orders_type").val('0');
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messages_ref_orderslist_link").button().click(function(){
		$("#configuration_dialog").dialog('open');
		$("#configuration_accordion").accordion("option", "active", 6);
	});
	$('#messages_ref_template').change(function (){
		var a = $(this).val();
		if (a != "") {
			$.ajax({
				type: "POST",
				url: "ajaxchart/get-ref-template/" + a,
				dataType: "json",
				success: function(data){
					$('#messages_ref_form').html('');
					$('#messages_ref_form').dform(data);
					$('.ref_buttonset').buttonset();
					$('input.ref_other[type="checkbox"]').button();
					$(".ref_select").chosen();
				}
			});
		}
	});
	$("#messages_ref_template_save").click(function(){
		$.ajax({
			type: "POST",
			url: "ajaxchart/make-referral",
			dataType: "json",
			success: function(data){
				var preview = "Requested action:\n";
				var b = $(".ref_hidden").val();
				preview += b + '\n';
				$('input.ref_intro[type="checkbox"]').each(function (){
					if ($(this).is(':checked')) {
						preview += $(this).val() + '\n';
					}
				});
				$('select.ref_intro').each(function (){
					if ($(this).val() != "") {
						var select_label = $(this).parent().children('span').html();
						preview += select_label + " " + $(this).val() + '\n';
					}
				});
				$('input.ref_intro[type="text"]').each(function (){
					if ($(this).val() != "") {
						var label = $(this).attr("placeholder");
						preview += label + ": " + $(this).val() + '\n';
					}
				});
				preview += '\n';
				var issues = data.issues;
				preview += "Active Issues:";
				var issues_len = issues.length;
				for(var i=0; i<issues_len; i++) {
					preview += '\n' + issues[i];
				}
				preview += '\n\n';
				var meds = data.meds;
				preview += "Active Medications:";
				var meds_len = meds.length;
				for(var j=0; j<meds_len; j++) {
					preview += '\n' + meds[j];
				}
				preview += '\n\n';
				var allergies = data.allergies;
				preview += "Allergies:";
				var allergies_len = allergies.length;
				for(var k=0; k<allergies_len; k++) {
					preview += '\n' + allergies[k];
				}
				preview += '\n\n';
				$('input.ref_after[type="checkbox"]').each(function (){
					if ($(this).is(':checked')) {
						preview += $(this).val() + '\n';
					}
				});
				$('select.ref_after').each(function (){
					if ($(this).val() != "") {
						var select_label = $(this).parent().children('span').html();
						preview += select_label + " " + $(this).val() + '\n';
					}
				});
				$('input.ref_after[type="text"]').each(function (){
					if ($(this).val() != "") {
						var label = $(this).attr("placeholder");
						preview += label + ": " + $(this).val() + '\n';
					}
				});
				preview += '\n' + 'Sincerely,' + '\n\n' + data.displayname;
				var terms = split($("#messages_ref_orders").val());
				terms.pop();
				terms.push( preview );
				terms.push( "" );
				var new_terms = terms.join( "\n" );
				$("#messages_ref_orders").val(new_terms);
				$('#messages_ref_form').clearDiv();
			}
		});
	});
	swipe();
});
$(document).ready(function() {
	function mail_status(cellvalue, options, rowObject){
		if (cellvalue == "y") {
			return "<span class='ui-icon ui-icon-mail-open'></span>";
		} else {
			return "<span class='ui-icon ui-icon-mail-closed'></span>";
		}
	}
	function statusfn (cellvalue, options, rowObject){
		if (cellvalue == '1') {
			return 'Sent';
		} else {
			return 'Not Sent';
		}
	}
	function loadfaxjob() {
		$.ajax({
			type: "POST",
			url: "ajaxmessaging/sendfinal",
			dataType: "json",
			success: function(data){
				if (data.task == "Draft") {
					$("#faxsubject").val(data.faxsubject);
					if (data.faxcoverpage == 'yes') {
						$("#faxcoverpage").prop('checked', true);
						$(".formmessagecoverpage").show();
						$("#faxmessage").val(data.faxmessage);
					} else {
						$("#faxcoverpage").prop('checked', false);
						$(".formmessagecoverpage").hide();
						$("#faxmessage").val('');
					}
				} else {
					$("#sendfinal").clearForm();
				}
				$.jGrowl(data.message);
			}
		});
	}
	$("#nosh_messaging").click(function() {
		$("#messaging_dialog").dialog('open');
	});
	$("#dashboard_messaging").click(function() {
		$("#messaging_dialog").dialog('open');
	});
	$("#dashboard_documents").click(function() {
		$("#messaging_dialog").dialog('open');
		$("#messaging_accordion").accordion({active: 1});
	});
	$("#messaging_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 640, 
		width: 800, 
		draggable: false,
		resizable: false,
		open: function(event, ui) {
			$("#messaging_accordion").accordion({ heightStyle: "content" });
			jQuery("#internal_inbox").jqGrid('GridUnload');
			jQuery("#internal_inbox").jqGrid({
				url:"ajaxmessaging/internal-inbox",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','To','','Date','FromID','From','Subject','Message','CC','PID','Patient Name','Body Text','Telephone Messages ID','Document ID'],
				colModel:[
					{name:'message_id',index:'message_id',width:1,hidden:true},
					{name:'message_to',index:'message_to',width:1,hidden:true},
					{name:'read',index:'read',width:15,formatter:mail_status},
					{name:'date',index:'date',width:120},
					{name:'message_from',index:'message_from',width:1,hidden:true},
					{name:'displayname',index:'displayname',width:175},
					{name:'subject',index:'subject',width:240},
					{name:'body',index:'body',width:1,hidden:true},
					{name:'cc',index:'cc',width:1,hidden:true},
					{name:'pid',index:'pid',width:1,hidden:true},
					{name:'patient_name',index:'patient_name',width:1,hidden:true},
					{name:'bodytext',index:'bodytext',width:1,hidden:true},
					{name:'t_messages_id',index:'t_messages_id',width:1,hidden:true},
					{name:'documents_id',index:'documents_id',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#internal_inbox_pager'),
				sortname: 'date',
				viewrecords: true,
				sortorder: "desc",
				caption:"Inbox",
				height: "100%",
				multiselect: true,
				multiboxonly: true,
				onCellSelect: function(id,iCol) {
					if (iCol > 0) {
						var row = jQuery("#internal_inbox").getRowData(id);
						var text = '<br><strong>From:</strong> ' + row['displayname'] + '<br><br><strong>Date:</strong> ' + row['date'] + '<br><br><strong>Subject:</strong> ' + row['subject'] + '<br><br><strong>Message:</strong> ' + row['bodytext']; 
						var rawtext = 'From:  ' + row['displayname'] + '\nDate: ' + row['date'] + '\nSubject: ' + row['subject'] + '\n\nMessage: ' + row['body']; 
						$("#message_view1").html(text);
						$("#message_view_rawtext").val(rawtext);
						$("#message_view_message_id").val(id);
						$("#message_view_from").val(row['message_from']);
						$("#message_view_to").val(row['message_to']);
						$("#message_view_cc").val(row['cc']);
						$("#message_view_subject").val(row['subject']);
						$("#message_view_body").val(row['body']);
						$("#message_view_date").val(row['date']);
						$("#message_view_pid").val(row['pid']);
						$("#message_view_patient_name").val(row['patient_name']);
						$("#message_view_t_messages_id").val(row['t_messages_id']);
						$("#message_view_documents_id").val(row['documents_id']);
						messages_tags();
						if (row['pid'] == '' || row['pid'] == "0") {
							$("#export_message").hide();
						} else {
							$("#export_message").show();
						}
						$("#internal_messages_view_dialog").dialog('open');
						setTimeout(function() {
							var a = $("#internal_messages_view_dialog" ).dialog("isOpen");
							if (a) {
								var id = $("#message_view_message_id").val();
								var documents_id = $("#message_view_documents_id").val();
								if (documents_id == '') {
									documents_id = '0';
								}
								$.ajax({
									type: "POST",
									url: "ajaxmessaging/read-message/" + id + "/" + documents_id,
									success: function(data){
										$.jGrowl(data);
										reload_grid("internal_inbox");
									}
								});
							}
						}, 3000);
					}
				}
			}).navGrid('#internal_inbox_pager',{search:false,edit:false,add:false,del:false
			}).navButtonAdd('#internal_inbox_pager',{
				caption:"Delete Message", 
				buttonicon:"ui-icon-trash", 
				onClickButton: function(){ 
					var id = jQuery("#internal_inbox").getGridParam('selarrrow');
					if(id){
						var count = id.length;
						for (var i = 0; i < count; i++) {
							$.ajax({
								type: "POST",
								url: "ajaxmessaging/delete-message",
								data: "message_id=" + id[i],
								success: function(data){
									$.jGrowl(data);
								}
							});
						}
						reload_grid("internal_inbox");
					} else {
						$.jGrowl('Choose message(s) to delete!');
					}
				}, 
				position:"last"
			});
			jQuery("#internal_draft").jqGrid('GridUnload');
			jQuery("#internal_draft").jqGrid({
				url:"ajaxmessaging/internal-draft",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','To','CC','Subject','Message','PID','Patient Name'],
				colModel:[
					{name:'message_id',index:'message_id',width:1,hidden:true},
					{name:'date',index:'date',width:120},
					{name:'message_to',index:'message_to',width:90},
					{name:'cc',index:'cc',width:90},
					{name:'subject',index:'subject',width:250},
					{name:'body',index:'body',width:1,hidden:true},
					{name:'pid',index:'pid',width:1,hidden:true},
					{name:'patient_name',index:'patient_name',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#internal_draft_pager'),
				sortname: 'date',
				viewrecords: true,
				sortorder: "desc",
				caption:"Drafts",
				height: "100%",
				multiselect: true,
				multiboxonly: true,
				hiddengrid: true,
				onCellSelect: function(id,iCol) {
					if (iCol > 0) {
						jQuery("#internal_draft").GridToForm(id,"#internal_messages_form_id");
						$("#internal_messages_dialog").dialog('open');
						messages_tags();
						$("#messages_subject").focus();
					}
				}
			}).navGrid('#internal_draft_pager',{search:false,edit:false,add:false,del:false
			}).navButtonAdd('#internal_draft_pager',{
				caption:"Delete Message", 
				buttonicon:"ui-icon-trash", 
				onClickButton: function(){ 
					var id = jQuery("#internal_draft").getGridParam('selarrrow');
					if(id){
						var count = id.length;
						for (var i = 0; i < count; i++) {
							$.ajax({
								type: "POST",
								url: "ajaxmessaging/delete-message",
								data: "message_id=" + id[i],
								success: function(data){
									$.jGrowl(data);
								}
							});
						}
						reload_grid("internal_draft");
					} else {
						$.jGrowl('Choose message(s) to delete!');
					}
				}, 
				position:"last"
			});
			jQuery("#internal_outbox").jqGrid('GridUnload');
			jQuery("#internal_outbox").jqGrid({
				url:"ajaxmessaging/internal-outbox",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','To','CC','Subject','PID','Message'],
				colModel:[
					{name:'message_id',index:'message_id',width:1,hidden:true},
					{name:'date',index:'date',width:120},
					{name:'message_to',index:'message_to',width:90},
					{name:'cc',index:'cc',width:90},
					{name:'subject',index:'subject',width:250},
					{name:'pid',index:'pid',width:1,hidden:true},
					{name:'body',index:'body',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#internal_outbox_pager'),
				sortname: 'date',
				viewrecords: true,
				sortorder: "desc",
				caption:"Sent Messages",
				height: "100%",
				multiselect: true,
				multiboxonly: true,
				hiddengrid: true,
				onCellSelect: function(id,iCol) {
					if (iCol > 0) {
						var row = jQuery("#internal_outbox").getRowData(id);
						var text = '<br><strong>To:</strong>  ' + row['message_to'] + '<br><strong>CC:</strong> ' + row['cc'] + '<br<br><strong>Date:</strong>  ' + row['date'] + '<br><br><strong>Subject:</strong>  ' + row['subject'] + '<br><br><strong>Message:</strong> ' + row['body']; 
						$("#message_view2").html(text);
						$("#message_view_message_id").val(id);
						$("#message_view_subject1").val(row['subject']);
						$("#message_view_body1").val(row['body']);
						$("#message_view_date1").val(row['date']);
						$("#message_view_pid1").val(row['pid']);
						messages_tags();
						if (row['pid'] == '' || row['pid'] == "0") {
							$("#export_message1").hide();
						} else {
							$("#export_message1").show();
						}
						$("#internal_messages_view2_dialog").dialog('open');
					}
				}
			}).navGrid('#internal_outbox_pager',{search:false,edit:false,add:false,del:false});
			if (noshdata.group_id != '100') {
				jQuery("#received_faxes").jqGrid('GridUnload');
				jQuery("#received_faxes").jqGrid({
					url:"ajaxmessaging/receive-fax",
					datatype: "json",
					mtype: "POST",
					colNames:['ID','Date','Pages','From','FileName','FaxPath'],
					colModel:[
						{name:'received_id',index:'received_id',width:1,hidden:true},
						{name:'fileDateTime',index:'fileDate',width:150},
						{name:'filePages',index:'filePages',width:50},
						{name:'fileFrom',index:'fileFrom',width:350},
						{name:'fileName',index:'fileName',width:1,hidden:true},
						{name:'filePath',index:'filePath',width:1,hidden:true}
					],
					rowNum:10,
					rowList:[10,20,30],
					pager: jQuery('#received_faxes_pager'),
					sortname: 'fileDateTime',
					viewrecords: true,
					sortorder: "desc",
					height: "100%",
					caption:"Received Faxes",
					onSelectRow: function(id){
						$("#view_received_id").val(id);
						$.ajax({
							type: "POST",
							url: "ajaxmessaging/view-fax/" + id,
							dataType: "json",
							success: function(data){
								$("#embedURL1").html(data.html);
								$("#fax_filepath").val(data.filepath);
								$("#fax_view_dialog").dialog('open');
							}
						});
					},
					emptyrecords:"No faxes received.",
					jsonReader: { repeatitems : false, id: "0" }
				}).navGrid('#received_faxes_pager',{search:false,edit:false,add:false,del:false});
				jQuery("#draft_faxes").jqGrid('GridUnload');
				jQuery("#draft_faxes").jqGrid({
					url:"ajaxmessaging/drafts-list",
					datatype: "json",
					mtype: "POST",
					colNames:['ID','Fax Subject'],
					colModel:[
						{name:'job_id',index:'job_id',width:100},
						{name:'faxsubject',index:'faxsubject',width:455}
					],
					rowNum:10,
					rowList:[10,20,30],
					pager: jQuery('#draft_faxes_pager'),
					sortname: 'job_id',
					viewrecords: true,
					sortorder: "desc",
					caption:"Draft Faxes",
					height:"100%",
					emptyrecords:"No drafts",
					hiddengrid: true,
					onSelectRow: function(id){
						$.ajax({
							type: "POST",
							url: "ajaxmessaging/set-id",
							data: "job_id=" + id,
							success: function(data){
								loadfaxjob();
								$("#messaging_fax_dialog").dialog('open');
							}
						});
					},
					jsonReader: { repeatitems : false, id: "0" }
				}).navGrid('#draft_faxes_pager',{search:false,edit:false,add:false,del:false});
				jQuery("#sent_faxes").jqGrid('GridUnload');
				jQuery("#sent_faxes").jqGrid({
					url:"ajaxmessaging/sent-list",
					datatype: "json",
					mtype: "POST",
					colNames:['ID','Sent Date','Fax Subject','Status'],
					colModel:[
						{name:'job_id',index:'job_id',width:50},
						{name:'sentdate',index:'sentdate',width:100},
						{name:'faxsubject',index:'faxsubject',width:295},
						{name:'success',index:'success',width:100,formatter:statusfn}
					],
					rowNum:10,
					rowList:[10,20,30],
					pager: jQuery('#sent_faxes_pager'),
					sortname: 'job_id',
					viewrecords: true,
					sortorder: "desc",
					height: "100%",
					caption:"Sent Faxes",
					hiddengrid: true,
					onSelectRow: function(id){
						$.ajax({
							type: "POST",
							url: "ajaxmessaging/set-id",
							data: "job_id=" + id,
							success: function(data){
								loadfaxjob();
								$("#messaging_fax_dialog").dialog('open');
							}
						});
					},
					emptyrecords:"No sent faxes.",
					jsonReader: { repeatitems : false, id: "0" }
				}).navGrid('#sent_faxes_pager',{search:false,edit:false,add:false,del:false});
				jQuery("#received_scans").jqGrid('GridUnload');
				jQuery("#received_scans").jqGrid({
					url:"ajaxmessaging/scans",
					datatype: "json",
					mtype: "POST",
					colNames:['ID','Date','Pages','File Name','FaxPath'],
					colModel:[
						{name:'scans_id',index:'scans_id',width:1,hidden:true},
						{name:'fileDateTime',index:'fileDate',width:150},
						{name:'filePages',index:'filePages',width:50},
						{name:'fileName',index:'fileName',width:350},
						{name:'filePath',index:'filePath',width:1,hidden:true}
					],
					rowNum:10,
					rowList:[10,20,30],
					pager: jQuery('#received_scans_pager'),
					sortname: 'fileDateTime',
					viewrecords: true,
					sortorder: "desc",
					height: "100%",
					caption:"Scanned Documents",
					onCellSelect: function(id,iCol){
						if (iCol > 0) {
							$("#view_scans_id").val(id);
							$.ajax({
								type: "POST",
								url: "ajaxmessaging/view-scan/" + id,
								dataType: "json",
								success: function(data){
									$("#embedURL3").html(data.html);
									$("#scan_filepath").val(data.filepath);
									$("#scan_view_dialog").dialog('open');
								}
							});
						}
					},
					emptyrecords:"No scanned documents.",
					multiselect: true,
					multiboxonly: true,
					jsonReader: { repeatitems : false, id: "0" }
				}).navGrid('#received_scans_pager',{search:false,edit:false,add:false,del:false});
				jQuery("#all_contacts_list").jqGrid('GridUnload');
				jQuery("#all_contacts_list").jqGrid({
					url:"ajaxmessaging/all-contacts",
					datatype: "json",
					mtype: "POST",
					colNames:['ID','Name','Specialty','Last Name','First Name','Prefix','Suffix','Facility','Street Address 1','Street Address 2','City','State','Zip','Phone','Fax','Email','Comments','NPI'],
					colModel:[
						{name:'address_id',index:'address_id',width:1,hidden:true},
						{name:'displayname',index:'displayname',width:150},
						{name:'specialty',index:'specialty',width:125},
						{name:'lastname',index:'lastname',width:1,hidden:true},
						{name:'firstname',index:'firstname',width:1,hidden:true},
						{name:'prefix',index:'prefix',width:1,hidden:true},
						{name:'suffix',index:'suffix',width:1,hidden:true},
						{name:'facility',index:'facility',width:1,hidden:true},
						{name:'street_address1',index:'street_address1',width:125},
						{name:'street_address2',index:'street_address2',width:1,hidden:true},
						{name:'city',index:'city',width: 75},
						{name:'state',index:'state',width:25},
						{name:'zip',index:'zip',width:1,hidden:true},
						{name:'phone',index:'phone',width:75},
						{name:'fax',index:'fax',width:75},
						{name:'email',index:'email',width:1,hidden:true},
						{name:'comments',index:'comments',width:1,hidden:true},
						{name:'npi',index:'npi',width:1,hidden:true}
					],
					rowNum:10,
					rowList:[10,20,30],
					pager: jQuery('#all_contacts_list_pager'),
					sortname: 'displayname',
					viewrecords: true,
					sortorder: "asc",
					height: "100%",
					caption:"Address Book",
					emptyrecords:"No contacts.",
					jsonReader: { repeatitems : false, id: "0" }
				}).navGrid('#all_contacts_list_pager',{search:false,edit:false,add:false,del:false});
			}
		},
		position: { my: 'center', at: 'top', of: '#maincontent' }
	});
	$.ajax({
		type: "POST",
		url: "ajaxsearch/all-users2",
		dataType: "json",
		success: function(data){
			$("#messages_to").addOption(data, false).trigger("liszt:updated");
			$("#messages_cc").addOption(data, false).trigger("liszt:updated");
		}
	});
	$("#new_internal_message").click(function(){
		$("#internal_messages_form").clearForm();
		$("#internal_messages_form_id").show();
		$("#message_view_wrapper").hide();
 		$("#message_view_wrapper2").hide();
 		$("#messages_tags").hide();
 		$("#internal_messages_dialog").dialog('open');
		$("#messages_subject").focus();
	});
	$("#internal_messages_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Send': function() {
				var bValid = true;
				$("#internal_messages_form_id").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#internal_messages_form_id").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxmessaging/send-message",
							data: str,
							success: function(data){
								$.jGrowl(data);
								$("#internal_messages_form_id").clearForm();
								$("#messages_to").trigger("liszt:updated");
								$("#messages_cc").trigger("liszt:updated");
								$("#internal_messages_dialog").dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			'Draft': function() {
				var str = $("#internal_messages_form_id").serialize();
				if(str){
					$.ajax({
						type: "POST",
						url: "ajaxmessaging/draft-message",
						data: str,
						success: function(data){
							$.jGrowl(data);
							$("#internal_messages_form_id").clearForm();
							$("#messages_to").trigger("liszt:updated");
							$("#messages_cc").trigger("liszt:updated");
							$("#internal_messages_dialog").dialog('close');
						}
					});
				} else {
					$.jGrowl("Please complete the form");
				}
			},
			Cancel: function() {
				var message_id = $("#messages_message_id").val();
				if (message_id == '') {
					$("#internal_messages_form_id").clearForm();
					$("#internal_messages_dialog").dialog('close');
				} else {
					$.ajax({
						type: "POST",
						url: "ajaxmessaging/delete-message",
						data: "message_id=" + message_id,
						success: function(data){
							$.jGrowl(data);
							$("#internal_messages_form_id").clearForm();
							$("#internal_messages_dialog").dialog('close');
						}
					});
				}
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#internal_messages_view_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#internal_messages_view2_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messages_to").chosen();
	$("#messages_cc").chosen();
	$("#messages_patient").autocomplete({
		source: function (req, add){
			$.ajax({
				url: "ajaxsearch/search",
				dataType: "json",
				type: "POST",
				data: req,
				success: function(data){
					if(data.response =='true'){
						add(data.message);
					}
				}
			});
		},
		minLength: 1,
		select: function(event, ui){
			$("#messages_pid").val(ui.item.id);
			$("messages_to").focus();
		}
	});
	$("#create_patient_message").click(function() {
		$.ajax({
			type: "POST",
			url: "ajaxsearch/patient-is-user",
			dataType: 'json',
			success: function(data){
				if (data.message == 'yes') {
					$("#internal_messages_form").clearForm();
					$("#messages_to").val(data.messages_to);
					$("#messages_patient").val(data.messages_patient);
					$("#messages_pid").val(data.pid);
					$("#internal_messages_dialog").dialog('open');
					$("#messages_subject").focus();
				} else {
					$.jGrowl("Patient is not a portal user.  Register the patient so that you can send a secure direct message to the patient.");
				}
			}
		});
	});
	$("#reply_message").click(function(){
		var to = $("#message_view_from").val();
		$("#messages_to_hidden").val(to);
		$.ajax({
			type: "POST",
			url: "ajaxmessaging/get-displayname",
			data: "id=" + to,
			success: function(data){
				$("#messages_to").val(data);
				$("#messages_to").trigger("liszt:updated");
			}
		});
		var from = $("#message_view_from").val();
		$.ajax({
			type: "POST",
			url: "ajaxmessaging/get-displayname",
			data: "id=" + from,
			success: function(data){
				var date = $("#message_view_date").val();
				var body = $("#message_view_body").val();
				var newbody = '\n\n' + 'On ' + date + ', ' + data + ' wrote:\n---------------------------------\n' + body;
				$("#messages_body").val(newbody).caret(0);
			}
		});
		var subject = 'Re: ' + $("#message_view_subject").val();
		$("#messages_subject").val(subject);
		var pid = $("#message_view_pid").val();
		var patient_name = $("#message_view_patient_name").val();
		var t_messages_id = $("#message_view_t_messages_id").val();
		$("#messages_pid").val(pid);
		$("#messages_patient").val(patient_name);
		$("#messages_t_messages_id").val(t_messages_id);
		$("#internal_messages_view_dialog").dialog('close');
		$("#internal_messages_dialog").dialog('open');
		$("#messages_body").focus();
	});
	$("#reply_all_message").click(function(){
		var to = $("#message_view_from").val();
		var cc = $("#message_view_cc").val();
		$("#messages_to_hidden").val(to);
		$("#messages_cc_hidden").val(cc);
		if (cc == ''){
			$.ajax({
				type: "POST",
				url: "ajaxmessaging/get-displayname",
				data: "id=" + to,
				success: function(data){
					$("#messages_to").val(data);
					$("#messages_to").trigger("liszt:updated");
				}
			});
		} else {
			var to1 = to + ';' + cc;
			$.ajax({
				type: "POST",
				url: "ajaxmessaging/get-displayname1",
				data: "id=" + to1,
				success: function(data){
					var a_array = String(data).split(";");
					var a_length = a_array.length;
					for (var i = 0; i < a_length; i++) {
						$("#messages_to").selectOptions(a_array[i]);
					}
					$("#messages_to").trigger("liszt:updated");
				}
			});
		}
		var from = $("#message_view_from").val();
		$.ajax({
			type: "POST",
			url: "ajaxmessaging/get-displayname",
			data: "id=" + from,
			success: function(data){
				var date = $("#message_view_date").val();
				var body = $("#message_view_body").val();
				var newbody = '\n\n' + 'On ' + date + ', ' + data + ' wrote:\n---------------------------------\n' + body;
				$("#messages_body").val(newbody).caret(0);
			}
		});
		var subject = 'Re: ' + $("#message_view_subject").val();
		$("#messages_subject").val(subject);
		var pid = $("#message_view_pid").val();
		var patient_name = $("#message_view_patient_name").val();
		$("#messages_pid").val(pid);
		$("#messages_patient").val(patient_name);
		$("#internal_messages_view_dialog").dialog('close');
		$("#internal_messages_dialog").dialog('open');
		$("#messages_body").focus();
	});
	$("#forward_message").click(function(){
		var rawtext = $("#message_view_rawtext").val();
		var newbody = '\n\n--------Forwarded Message--------\n' + rawtext;
		$("#messages_body").val(newbody);
		var subject = 'Fwd: ' + $("#message_view_subject").val();
		$("#messages_subject").val(subject);
		$("#internal_messages_view_dialog").dialog('open');
		$("#internal_messages_dialog").dialog('open');
		$("#messages_to").focus();
	});
	$("#internal_open_chart").click(function(){
		var pid = $("#message_view_pid").val();
		console.log(pid);
		if(pid){
			var oldpt = noshdata.pid;
			if(!oldpt){
				$.ajax({
					type: "POST",
					url: "ajaxsearch/openchart",
					dataType: "json",
					data: "pid=" + pid,
					success: function(data){
						window.location = data.url;
					}
				});
			} else {
				if(pid == oldpt){
					$.jGrowl("Patient chart already open!");
				} else {
					$.ajax({
						type: "POST",
						url: "ajaxsearch/openchart",
						dataType: "json",
						data: "pid=" + pid,
						success: function(data){
							window.location = data.url;
						}
					});
				}
			}
		} else {
			$.jGrowl("Please enter patient to open chart!");
		}
	});
	$("#export_message").click(function(){
		var pid = $("#message_view_pid").val();
		var str = $("#internal_messages_view_form").serialize();
		if(pid){
			$.ajax({
				type: "POST",
				url: "ajaxmessaging/export-message",
				data: str,
				success: function(data){
					$.jGrowl(data);
				}
			});
		} else {
			$.jGrowl("No patient is associated with this message!");
		}
	});
	$("#export_message1").click(function(){
		var pid = $("#message_view_pid1").val();
		var str = $("#internal_messages_view2_form").serialize();
		if(pid){
			$.ajax({
				type: "POST",
				url: "ajaxmessaging/export-message",
				data: str,
				success: function(data){
					$.jGrowl(data);
				}
			});
		} else {
			$.jGrowl("No patient is associated with this message!");
		}
	});
	$("#messaging_fax_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#messaging_fax_accordion").accordion({ heightStyle: "content" });
			jQuery("#send_list").jqGrid('GridUnload');
			jQuery("#send_list").jqGrid({
				url: "ajaxmessaging/send-list",
				editurl: "ajaxmessaging/edit-send-list",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Recipient','Fax Number'],
				colModel:[
					{name:'sendlist_id',index:'sendlist_id',width:1,hidden:true},
					{name:'faxrecipient',index:'faxrecipient',width:300,editable:true},
					{name:'faxnumber',index:'faxnumber',width:100,editable:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#send_list_pager'),
				sortname: 'faxrecipient',
				viewrecords: true,
				sortorder: "desc",
				caption:"Fax Recipients",
				emptyrecords:"No recipients.",
				height: "100%",
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#send_list_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#pages_list").jqGrid('GridUnload');
			jQuery("#pages_list").jqGrid({
				url:"ajaxmessaging/pages-list",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','File','Pages','Full Path'],
				colModel:[
					{name:'pages_id',index:'pages_id',width:1,hidden:true},
					{name:'file_original',index:'file_original',width:300},
					{name:'pagecount',index:'pagecount',width:100},
					{name:'file',index:'file',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#pages_list_pager'),
				sortname: 'pages_id',
				viewrecords: true,
				sortorder: "asc",
				caption:"Fax Pages",
				emptyrecords:"No pages.",
				height: "100%",
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#pages_list_pager',{search:false,edit:false,add:false,del:false});
			$("#quick_search_contact").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/all-contacts",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 2,
				select: function(event, ui){
					$.ajax({
						type: "POST",
						url: "ajaxmessaging/add-fax-recipient",
						data: "displayname=" + ui.item.value + "&fax=" + ui.item.fax,
						success: function(data){
							$.jGrowl(data);
							reload_grid("send_list");
						}
					});
				}
			});
			$("#quick_search_contact").focus();
		},
		buttons: {
			'Send': function() {
				var str = $("#sendfinal").serialize();
				if(str){
					$.ajax({
						type: "POST",
						url: "ajaxmessaging/send-fax",
						data: str,
						success: function(data){
							$.jGrowl(data);
							$("#sendfinal").clearForm();
							$("#messaging_fax_dialog").dialog('close');
						}
					});
				} else {
					$.jGrowl("Please complete the form");
				}
			},
			'Draft': function() {
				var str = $("#sendfinal").serialize();
				if(str){
					$.ajax({
						type: "POST",
						url: "ajaxmessaging/send-fax/yes",
						data: str,
						success: function(data){
							$.jGrowl(data);
							$("#sendfinal").clearForm();
							$("#messaging_fax_dialog").dialog('close');
						}
					});
				} else {
					$.jGrowl("Please complete the form");
				}
			},
			Cancel: function() {
				$.ajax({
					type: "POST",
					url: "ajaxmessaging/cancel-fax",
					success: function(data){
						$.jGrowl(data);
						$("#sendfinal").clearForm();
						$("#messaging_fax_dialog").dialog('close');
						reload_grid("draft_faxes");
					}
				});
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#fax_view_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		modal: true,
		close: function(event, ui) {
			var a = $("#fax_filepath").val();
			$.ajax({
				type: "POST",
				url: "ajaxmessaging/close-fax",
				data: "fax_filepath=" + a,
				success: function(data){
					$("#embedURL1").html('');
					$("#fax_filepath").val('');
					$("#view_received_id").val('');
					$("#import_fax_pages").val('');
				}
			});	
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#new_fax").click(function(){
		$("#sendfinal").clearForm();
		$.ajax({
			type: "POST",
			url: "ajaxmessaging/new-fax",
			success: function(data){
				$.jGrowl(data);
				$("#faxcoverpage").prop('checked', false);
				$(".formmessagecoverpage").hide();
				$("#faxmessage").val('');
				$("#messaging_fax_dialog").dialog('open');
			}
		});	
	});
	$("#delete_fax").click(function(){
		var click_id = jQuery("#received_faxes").getGridParam('selrow');
		if(click_id){
			if(confirm('Are you sure you want to delete this fax?')){ 
				var click_filePath = jQuery("#received_faxes").getCell(click_id,'filePath');
				var click_fileName = jQuery("#received_faxes").getCell(click_id,'fileName');
				$.ajax({
					type: "POST",
					url: "ajaxmessaging/deletefax",
					data: "filePath=" + click_filePath + "&fileName=" + click_fileName,
					success: function(data){
						$.jGrowl(data);
						reload_grid("received_faxes");
					}
				});
			}
		} else {
			$.jGrowl("Please select fax to delete!");
		}
	});
	$("#fax_import_documents_type").addOption({"Laboratory":"Laboratory","Imaging":"Imaging","Cardiopulmonary":"Cardiopulmonary","Endoscopy":"Endoscopy","Referrals":"Referrals","Past Records":"Past Records","Other Forms":"Other Forms"}, false);
	$("#fax_import_documents_date").mask("99/99/9999");
	$("#fax_import_documents_date").datepicker();
	$("#fax_import_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#fax_import_patient_search").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/search",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 1,
				select: function(event, ui){
					$("#fax_pid").val(ui.item.id);
				}
			});
			$("#fax_import_documents_from").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/document-from",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 2
			});
			$("#fax_import_documents_desc").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/document-description",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 2
			});
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#fax_import_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#fax_import_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxmessaging/fax-import",
							data: str,
							success: function(data){
								$.jGrowl(data);
								$('#fax_import_form').clearForm();
								$("#fax_import_message").html('');
								$('#fax_import_dialog').dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#fax_import_form').clearForm();
				$("#fax_import_message").html('');
				$('#fax_import_dialog').dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#save_fax").click(function() {
		var id = $("#view_received_id").val();
		window.open("view_fax/" + id);
	});
	$("#import_fax").click(function() {
		var id = $("#view_received_id").val();
		var pages = $("#import_fax_pages").val();
		var row = jQuery("#received_faxes").getRowData(id);
		if (pages != '') {
			var text = "Enter details for importing fax from " + row['fileFrom'] + ", pages " + pages + ":";
		} else {
			var text = "Enter details for importing fax from " + row['fileFrom'] + ":";
		}
		$("#fax_received_id").val(id);
		$("#fax_import_pages").val(pages);
		$("#fax_import_message").html(text);
		$("#fax_import_dialog").dialog('open');
		$("#fax_patient_search").focus();
	});
	$("#addrecipient").click(function(){
		jQuery("#send_list").editGridRow("new",{closeAfterAdd:true});
	});
	$("#editrecipient").click(function(){
		var clickedit = jQuery("#send_list").getGridParam('selrow');
		if(clickedit){ 
			jQuery("#send_list").editGridRow(clickedit,{closeAfterEdit:true});
		} else {
			$.jGrowl("Please select recipient to edit!");
		}
	});
	$("#removerecipient").click(function(){
		var clickremove = jQuery("#send_list").getGridParam('selrow');
			if(clickremove){
				jQuery("#send_list").delGridRow(clickremove);
			} else {
				$.jGrowl("Please select recipient to remove!");
			}
	});
	var myUpload2 = $("#addfile").upload({
		action: 'pages_upload',
		onComplete: function(data){
			$.jGrowl(data);
			reload_grid("pages_list");
		}
	});
	$("#pages_view_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		modal: true,
		close: function(event, ui) {
			var a = $("#pages_view_filepath").val();
			$.ajax({
				type: "POST",
				url: "ajaxmessaging/close-fax",
				data: "fax_filepath=" + a,
				success: function(data){
					$("#embedURL2").html('');
				}
			});
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#viewpage").click(function(){
		var id = jQuery("#pages_list").getGridParam('selrow');
		if(id){
			$.ajax({
				type: "POST",
				url: "ajaxmessaging/view-page/" + id,
				dataType: "json",
				success: function(data){
					$("#embedURL2").html(data.html);
					$("#pages_view_filepath").val(data.filepath);
					$("#pages_view_dialog").dialog('open');
				}
			});
		}
	});
	$("#delfile").click(function(){
		var clickremove = jQuery("#pages_list").getGridParam('selrow');
		if(clickremove){ 
			var click_file = jQuery("#pages_list").getCell(clickremove,'file');
			var click_pages_id = jQuery("#pages_list").getCell(clickremove,'pages_id');
			$.ajax({
				type: "POST",
				url: "ajaxmessaging/deletepage",
				data: "file=" + click_file + "&pages_id=" + click_pages_id,
				success: function(data){
					$.jGrowl(data);
					reload_grid("pages_list");
				}
			});
		} else {
			$.jGrowl("Please select files to remove!");
		}
	});
	$("#faxcoverpage").click(function(){
		if ($("#faxcoverpage").is(":checked")) {
			$(".formmessagecoverpage").show();
		} else {
			$(".formmessagecoverpage").hide();
			$("#faxmessage").val('');
		}
	});
	
	$("#scan_import_documents_type").addOption({"Laboratory":"Laboratory","Imaging":"Imaging","Cardiopulmonary":"Cardiopulmonary","Endoscopy":"Endoscopy","Referrals":"Referrals","Past Records":"Past Records","Other Forms":"Other Forms"}, false);
	$("#scan_import_documents_date").mask("99/99/9999");
	$("#scan_import_documents_date").datepicker();
	$("#scan_import_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#scan_patient_search").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/search",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 1,
				select: function(event, ui){
					$("#scan_pid").val(ui.item.id);
				}
			});
			$("#scan_import_documents_from").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/document-from",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 2
			});
			$("#scan_import_documents_desc").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/document-description",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 2
			});
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#scan_import_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#scan_import_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxmessaging/scan-import",
							data: str,
							success: function(data){
								$.jGrowl(data);
								$('#scan_import_form').clearForm();
								$("#scan_import_message").html('');
								$('#scan_import_dialog').dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#scan_import_form').clearForm();
				$("#scan_import_message").html('');
				$('#scan_import_dialog').dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#savescan").click(function(){
		var click_id = jQuery("#received_scans").getGridParam('selrow');
		if(click_id){
			$("#scan_scans_id").val(click_id);
			var row = jQuery("#received_scans").getRowData(click_id);
			var text = "Enter details for importing document named " + row['fileName'] + ":";
			$("#scan_import_message").html(text);
			$("#scan_import_dialog").dialog('open');
			$("#scan_patient_search").focus();
		}
	});
	$("#delete_scan").click(function(){
		var click_id = jQuery("#received_scans").getGridParam('selarrrow');
		if(click_id){
			if(confirm('Are you sure you want to delete the seletected documents?')){ 
				var count = click_id.length;
				for (var i = 0; i < count; i++) {
					$.ajax({
						type: "POST",
						url: "ajaxmessaging/deletescan",
						data: "scans_id=" + click_id[i],
						success: function(data){
						}
					});
				}
				$.jGrowl('Deleted ' + i + ' documents!');
				reload_grid("received_scans");
			}
		} else {
			$.jGrowl("Please select document to delete!");
		}
	});
	$("#save_scan").click(function() {
		var id = $("#view_scans_id").val();
		window.open("view_scan/" + id);
	});
	$("#import_scan").click(function(){
		var id = $("#view_scans_id").val();
		var pages = $("#import_scan_pages").val();
		var row = jQuery("#received_scans").getRowData(id);
		if (pages != '') {
			var text = "Enter details for importing document named " + row['fileFrom'] + ", pages " + pages + ":";
		} else {
			var text = "Enter details for importing document named " + row['fileName'] + ":";
		}
		$("#scan_scans_id").val(id);
		$("#scan_import_pages").val(pages);
		$("#scan_import_message").html(text);
		$("#scan_import_dialog").dialog('open');
		$("#scan_patient_search").focus();
	});
	$("#scan_view_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		modal: true,
		close: function(event, ui) {
			var a = $("#scan_filepath").val();
			$.ajax({
				type: "POST",
				url: "ajaxmessaging/close-scan",
				data: "scan_filepath=" + a,
				success: function(data){
					$("#embedURL3").html('');
					$("#scan_filepath").val('');
					$("#view_scans_id").val('');
					$("#import_scan_pages").val('');
				}
			});	
		}
	});
	
	var myUpload3 = $("#import_csv").upload({
		action: 'import_contact',
		onComplete: function(data){
			$.jGrowl(data);
			reload_grid("all_contacts_list");
		}
	});
	$("#export_address_csv").click(function(){
		window.open("export_address_csv");
	});
	$("#messaging_add_contact").click(function(){
		$('#messaging_contact_form').clearForm();
		$('#contacts_dialog').dialog('open');
		$("#messaging_lastname").focus();
	});

	$("#messaging_edit_contact").click(function(){
		var item = jQuery("#all_contacts_list").getGridParam('selrow');
		if(item){
			jQuery("#all_contacts_list").GridToForm(item,"#messaging_contact_form");
			$('#contacts_dialog').dialog('open');
			$("#messaging_lastname").focus();
		} else {
			$.jGrowl("Please select contact to edit!")
		}
	});
	$("#messaging_delete_contact").click(function(){
		var item = jQuery("#all_contacts_list").getGridParam('selrow');
		if(item){
			if(confirm('Are you sure you want to delete this contact?')){
				$.ajax({
					type: "POST",
					url: "ajaxmessaging/delete-contact",
					data: "address_id=" + item,
					success: function(data){
						$.jGrowl(data);
						reload_grid("all_contacts_list");
					}
				});
			}
		} else {
			$.jGrowl("Please select contact to delete!")
		}
	});
	$("#contacts_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#messaging_contact_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#messaging_contact_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxmessaging/edit-contact",
							data: str,
							success: function(data){
								$.jGrowl(data);
								$("#messaging_contact_form").clearForm();
								$("#contacts_dialog").dialog('close');
								reload_grid("all_contacts_list");
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$("#messaging_contact_form").clearForm();
				$("#contacts_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#messaging_specialty").autocomplete({
		source: function (req, add){
			$.ajax({
				url: "ajaxsearch/specialty1",
				dataType: "json",
				type: "POST",
				data: req,
				success: function(data){
					if(data.response =='true'){
						add(data.message);
					}
				}
			});
		},
		minLength: 3
	});
	$("#messaging_city").autocomplete({
		source: function (req, add){
			$.ajax({
				url: "ajaxsearch/city",
				dataType: "json",
				type: "POST",
				data: req,
				success: function(data){
					if(data.response =='true'){
						add(data.message);
					}
				}
			});
		},
		minLength: 3
	});
	$("#messaging_state").addOption(states, false);
	$("#messaging_phone").mask("(999) 999-9999");
	$("#messaging_fax").mask("(999) 999-9999");
	$("#messaging_npi").autocomplete({
		source: function (req, add){
			$.ajax({
				url: "ajaxsearch/npi-lookup",
				dataType: "json",
				type: "POST",
				data: req,
				success: function(data){
					if(data.response =='true'){
						add(data.message);
					}
				}
			});
		},
		minLength: 3,
		open: function() { 
			$('.ui-menu').width(300);
		}
	}).focus(function() {
		var a = $("#messaging_lastname").val();
		var b = $("#messaging_firstname").val();
		var c = $("#messaging_state").val();
		if (a != "" && b != "" && c != "") {
			var q = a + "," + b + "," + c
			$("#messaging_npi").autocomplete("search", q);
		}
	}).mask("9999999999");
	$("#messages_tags").tagit({
		tagSource: function (req, add){
			$.ajax({
				url: "ajaxsearch/search-tags",
				dataType: "json",
				type: "POST",
				data: req,
				success: function(data){
					if(data.response =='true'){
						add(data.message);
					}
				}
			});
		},
		tagsChanged: function(a, b) {
			if($("#internal_messages_form_id").is(":hidden")) {
				var c = $("#message_view_message_id").val();
			} else {
				var c = $("#messages_message_id").val(); 
			}
			if (b == "added") {
				$.ajax({
					type: "POST",
					url: "ajaxsearch/save-tag/message_id/" + c,
					data: 'tag=' + a
				});
			}
			if (b == "popped") {
				$.ajax({
					type: "POST",
					url: "ajaxsearch/remove-tag/message_id/" + c,
					data: 'tag=' + a
				});
			}
		}
	});
	function messages_tags() {
		$("#messages_tags").show();
		if($("#internal_messages_form_id").is(":hidden")) {
			var id = $("#message_view_message_id").val();
		} else {
			var id = $("#messages_message_id").val();
		}
		$.ajax({
			type: "POST",
			url: "ajaxsearch/get-tags/message_id/" + id,
			dataType: "json",
			success: function(data){
				$("#messages_tags").tagit("fill",data);
			}
		});
	}
});
var timeoutHnd1;
function doSearch1(ev){ 
	if(timeoutHnd1) 
		clearTimeout(timeoutHnd1);
		timeoutHnd1 = setTimeout(gridReload1,500);
}
function gridReload1(){ 
	var mask = jQuery("#search_all_contact").val();
	jQuery("#all_contacts_list").setGridParam({url:"ajaxmessaging/all-contacts/"+mask,page:1}).trigger("reloadGrid");
}
$(document).ready(function() {
	function schedule_autosave() {
		var d = $('#providers_calendar').fullCalendar('getDate');
		var n = d.getFullYear();
		n = n + "," + d.getMonth();
		n = n + "," + d.getDate();
		var view = $('#providers_calendar').fullCalendar('getView');
		n = n + "," + view.name;
		$.cookie('nosh-schedule', n, { path: '/' });
	}
	function addMinutes(date, minutes) {
		return new Date(date.getTime() + minutes*60000);
	}
	function isOverlapping(start){
		var array = $('#providers_calendar').fullCalendar('clientEvents');
		var end = addMinutes(start, 15);
		for(i in array){
			if(!(array[i].start >= end || array[i].end <= start)){
				return true;
			}
		}
		return false;
	}
	function loadappt() {
		$("#patient_appt").show();
		$("#start_form").show();
		$("#reason_form").show();
		$("#other_event").hide();
		$("#event_choose").hide();
		$("#patient_search").focus();
	}
	function loadevent() {
		$("#patient_appt").hide();
		$("#other_event").show();
		$("#start_form").show();
		$("#reason_form").show();
		$("#event_choose").hide();
		$("#reason").focus();
	}
	function loadcalendar (y,m,d,view) {
		$('#providers_calendar').fullCalendar('destroy');
		$('#providers_calendar').fullCalendar({
			year: y,
			month: m,
			date: d,
			weekends: noshdata.weekends,
			minTime: noshdata.minTime,
			maxTime: noshdata.maxTime,
			theme: true,
			allDayDefault: false,
			slotMinutes: 15,
			defaultView: view,
			aspectRatio: 0.8,
			header: {
				left: 'prev,next today',
				center: 'title',
				right: 'agendaWeek,agendaDay'
			},
			editable: true,
			events: function(start, end, callback) {
				var starttime = Math.round(start.getTime() / 1000);
				var endtime = Math.round(end.getTime() / 1000);
				$.ajax({
					type: "POST",
					url: "ajaxschedule/provider-schedule",
					dataType: 'json',
					data: "start=" + starttime + "&end=" + endtime,
					success: function(events) {
						callback(events);
					}
				});
			},
			dayClick: function(date, allDay, jsEvent, view) {
				if (allDay) {
					$.jGrowl('Clicked on the entire day: ' + date);
				} else {
					if (noshdata.group_id != '1') {
						if (noshdata.group_id != '100') {
							$("#event_dialog").dialog('open');
							$("#title").focus();
							$("#start_date").val($.fullCalendar.formatDate(date, 'MM/dd/yyyy'));
							$("#start_time").val($.fullCalendar.formatDate(date, 'hh:mmTT'));
							$("#end").val('');
							$("#schedule_visit_type").val('');
							$("#end_row").show();
							$("#title").val('');
							$("#reason").val('');
							$("#until").val('');
							$("#until_row").hide();
							$('#repeat').val('');
							$('#status').val('');
							$("#delete_form").hide();
							$(".nosh_schedule_exist_event").hide();
							$("#patient_appt").hide();
							$("#other_event").hide();
							$("#until_row").hide();
							$("#start_form").hide();
							$("#reason_form").hide();
							$("#event_choose").show();
						} else {
							if (isOverlapping(date)) {
								$.jGrowl('You cannot schedule an appointment in this time slot!');
							} else {
								$("#schedule_visit_type").focus();
								$("#start").text($.fullCalendar.formatDate(date, 'dddd, MM/dd/yyyy, hh:mmTT'));
								$("#start_date").val($.fullCalendar.formatDate(date, 'MM/dd/yyyy'));
								$("#start_time").val($.fullCalendar.formatDate(date, 'hh:mmTT'));
								$("#end").val('');
								$("#schedule_visit_type").val('');
								$("#reason").val('');
								$("#until").val('');
								$("#until_row").hide();
								$('#repeat').val('');
								$("#delete_form").hide("fast");
								$("#patient_appt").show();
								$("#start_form").show();
								$("#reason_form").show();
								$("#other_event").hide();
								$("#event_choose").hide();
								$("#event_dialog").dialog('open');
							}
						}
					}
				}
			},
			eventClick: function(calEvent, jsEvent, view) {
				if (noshdata.group_id != '1') {
					if (calEvent.editable != false) {
						$("#event_dialog").dialog('open');
						$("#title").focus();
					}
					$("#event_id").val(calEvent.id);
					$("#event_id_span").text(calEvent.id);
					$("#schedule_pid").val(calEvent.pid);
					$("#pid_span").text(calEvent.pid);
					$("#timestamp_span").text(calEvent.timestamp);
					$("#start_date").val($.fullCalendar.formatDate(calEvent.start, 'MM/dd/yyyy'));
					$("#start_time").val($.fullCalendar.formatDate(calEvent.start, 'hh:mmTT'));
					$("#end").val($.fullCalendar.formatDate(calEvent.end, 'hh:mmTT'));
					$("#schedule_title").val(calEvent.title);
					$("#schedule_visit_type").val(calEvent.visit_type);
					if (calEvent.visit_type){
						loadappt();
						$("#patient_search").val(calEvent.title);
						$("#end").val('');
					} else {
						loadevent();
					}
					$("#reason").val(calEvent.reason);
					$("#repeat").val(calEvent.repeat);
					$("#until").val(calEvent.until);
					var repeat_select = $("#repeat").val();
					if (repeat_select != ''){
						$("#until_row").show();
					} else {
						$("#until_row").hide();
						$("#until").val('');
					}
					$("#status").val(calEvent.status);
					$("#delete_form").show();
					$(".nosh_schedule_exist_event").show();
					$("#event_choose").hide();
				}
			},
			eventDrop: function(event,dayDelta,minuteDelta,allDay,revertFunc) {
				if (noshdata.group_id != '1') {
					var start = Math.round(event.start.getTime() / 1000);
					var end = Math.round(event.end.getTime() / 1000);
					if(start){
						$.ajax({
							type: "POST",
							url: "ajaxschedule/drag-event",
							data: "start=" + start + "&end=" + end + "&id=" + event.id,
							success: function(data){
								$.jGrowl("Event updated!");
							}
						});
					} else {
						revertFunc();
					}
					$('.fc-event').each(function(){
						$(this).tooltip('disable');
					});
				} else {
					revertFunc();
					$.jGrowl("You don't have permission to do this!");
				}
			},
			eventResize: function(event,dayDelta,minuteDelta,allDay,revertFunc) {
				if (noshdata.group_id != '1') {
					var start = Math.round(event.start.getTime() / 1000);
					var end = Math.round(event.end.getTime() / 1000);
					if(start){
						$.ajax({
							type: "POST",
							url: "ajaxschedule/drag-event",
							data: "start=" + start + "&end=" + end + "&id=" + event.id,
							success: function(data){
								$.jGrowl("Event updated!");
							}
						});
					} else {
						revertFunc();
					}
					$('.fc-event').each(function(){
						$(this).tooltip('disable');
					});
				} else {
					revertFunc();
					$.jGrowl("You don't have permission to do this!");
				}
			},
			eventRender: function(event, element) {
				var display = 'Reason: ' + event.reason + '<br>Status: ' + event.status;
				element.tooltip({
					items: element,
					hide: false,
					show: false,
					content: display
				});
				element.tooltip('enable');
			}
		});
		$('#providers_datepicker').datepicker('destroy');
		$('#providers_datepicker').datepicker({
			inline: true,
			onSelect: function(dateText, inst) {
				var d = new Date(dateText);
				$('#providers_calendar').fullCalendar('gotoDate', d);
				var n = d.getFullYear();
				n = n + "," + d.getMonth();
				n = n + "," + d.getDate();
				var view = $('#providers_calendar').fullCalendar('getView');
				n = n + "," + view.name;
				$.cookie('nosh-schedule', n, { path: '/' });
			}
		});
	}
	$("#schedule_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 640, 
		width: 925, 
		draggable: false,
		resizable: false,
		open: function(event, ui) {
			$("#provider_list2").removeOption(/./);
			$.ajax({
				url: "ajaxsearch/provider-select",
				dataType: "json",
				type: "POST",
				success: function(data){
					$("#provider_list2").addOption({"":"Select a provider."});
					$("#provider_list2").addOption(data, false);
					if (noshdata.group_id == '2') {
						$.ajax({
							type: "POST",
							url: "ajaxschedule/set-default-provider",
							success: function(data){
								$('#provider_list2').val(noshdata.user_id);
								if( $.cookie('nosh-schedule') === undefined){
									var d = new Date();
									var y = d.getFullYear();
									var m = d.getMonth();
									var d = d.getDate();
									loadcalendar(y,m,d,'agendaWeek');
								} else {
									var n =  $.cookie('nosh-schedule').split(",");
									loadcalendar(n[0],n[1],n[2],n[3]);
								}
								$("#schedule_visit_type").removeOption(/./);
								$.ajax({
									url: "ajaxsearch/visit-types/" + noshdata.user_id,
									dataType: "json",
									type: "POST",
									async: false,
									success: function(data){
										if (data.response == 'true') {
											$("#schedule_visit_type").addOption(data.message, false);
										} else {
											$("#schedule_visit_type").addOption({"":"No visit types available."},false);
										}
									}
								});
								setInterval(schedule_autosave, 10000);
							}
						});
					}
				}
			});
			$("#provider_list2").focus();
		},
		close: function(event, ui) {
			if (noshdata.group_id == '100') {
				$("#schedule_patient_step").hide();
			}
		},
		position: { my: 'center', at: 'top', of: '#maincontent' }
	});
	$("#nosh_schedule").click(function() {
		$("#schedule_dialog").dialog('open');
	});
	$("#dashboard_schedule").click(function() {
		$("#schedule_dialog").dialog('open');
	});
	$("#admin_schedule_preview").click(function() {
		$("#schedule_dialog").dialog('open');
	});
	$('#provider_list2').change(function() {
		var id = $('#provider_list2').val();
		if(id){
			$.ajax({
				type: "POST",
				url: "ajaxschedule/set-provider",
				data: "id=" + id,
				success: function(data){
					if( $.cookie('nosh-schedule') === undefined){
						var d = new Date();
						var y = d.getFullYear();
						var m = d.getMonth();
						var d = d.getDate();
						loadcalendar(y,m,d,'agendaWeek');
					} else {
						var n =  $.cookie('nosh-schedule').split(",");
						loadcalendar(n[0],n[1],n[2],n[3]);
					}
					if (noshdata.group_id == '100') {
						$("#schedule_patient_step").show();
					}
					$("#schedule_visit_type").removeOption(/./);
					$.ajax({
						url: "ajaxsearch/visit-types/" + id,
						dataType: "json",
						type: "POST",
						async: false,
						success: function(data){
							if (data.response == 'true') {
								$("#schedule_visit_type").addOption(data.message, false);
							} else {
								$("#schedule_visit_type").addOption({"":"No visit types available."},false);
							}
						}
					});
				}
			});
		} 
	});
	$("#event_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 450, 
		width: 600, 
		modal: true, 
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#patient_search").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/search",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 1,
				select: function(event, ui){
					$("#schedule_pid").val(ui.item.id);
					$("#schedule_title").val(ui.item.value);
				}
			});
			if (noshdata.group_id == '100') {
				$("#schedule_dialog_open_chart").hide();
			}
		},
		buttons: [{
			text: 'Save',
			id: 'schedule_dialog_save',
			class: 'nosh_button_save',
			click: function() {
				var end= $("#end").val();
				var visit_type = $("#schedule_visit_type").val();
				var pid = $("#pid").val();
				if (pid == '') {
					var reason = $("#reason").val();
					$("#title").val(reason);
				}
				if ($("#repeat").val() != '' && $("#event_id").val() != '' && $("#event_id").val().indexOf("R") === -1) {
					var event_id = $("#event_id").val();
					$("#event_id").val("N" + event_id);
				}
				if ($("#repeat").val() == '' && $("#event_id").val() != '' && $("#event_id").val().indexOf("R") !== -1) {
					var event_id1 = $("#event_id").val();
					$("#event_id").val("N" + event_id1);
				}
				var str = $("#event_form").serialize();
				if(str){
					if (visit_type == '' || visit_type == null && end == '') {
						$.jGrowl("No visit type or end time selected!");
					} else {
						$('#dialog_load').dialog('option', 'title', "Saving...").dialog('open');
						$.ajax({
							type: "POST",
							url: "ajaxschedule/edit-event",
							data: str,
							success: function(data){
								$("#providers_calendar").fullCalendar('removeEvents');
								$("#event_dialog").dialog('close');
								$("#event_form").clearForm();
								$("#providers_calendar").fullCalendar('refetchEvents');
								$('#dialog_load').dialog('close');
							}
						});
					}
				} else {
					$.jGrowl("Error saving appointment!");
				}
			}
		},{
			text: 'Open Chart',
			id: 'schedule_dialog_open_chart',
			class: 'nosh_button_open nosh_schedule_exist_event',
			click: function() {
				var pid = $("#schedule_pid").val();
				if(pid){
					var oldpt = noshdata.pid;
					if(!oldpt){
						$.ajax({
							type: "POST",
							url: "ajaxsearch/openchart",
							dataType: "json",
							data: "pid=" + pid,
							success: function(data){
								window.location = data.url;
							}
						});
					} else {
						if(pid == oldpt){
							$.jGrowl("Patient chart already open!");
						} else {
							$.ajax({
								type: "POST",
								url: "ajaxsearch/openchart",
								dataType: "json",
								data: "pid=" + pid,
								success: function(data){
									window.location = data.url;
								}
							});
						}
					}
				} else {
					$.jGrowl("Please enter patient to open chart!");
				}
			}
		},{
			text: 'Delete',
			id: 'schedule_dialog_delete_event',
			class: 'nosh_button_delete nosh_schedule_exist_event',
			click: function() {
				if(confirm('Are you sure you want to delete this appointment?')){ 
					var appt_id = $("#event_id").val();
					$.ajax({
						type: "POST",
						url: "ajaxschedule/delete-event",
						data: "appt_id=" + appt_id,
						success: function(data){
							$("#providers_calendar").fullCalendar('removeEvents');
							$("#event_dialog").dialog('close');
							$("#event_form").clearForm();
							$("#providers_calendar").fullCalendar('refetchEvents');
						}
					});
				} 
			}
		},{
			text: 'Cancel',
			id: 'schedule_dialog_cancel',
			class: 'nosh_button_cancel',
			click: function() {
				$("#event_dialog").dialog('close');
				$("#event_form").clearForm();
			}
		}],
		close: function(event, ui) {
			$("#other_event").hide();
			$("#patient_appt").hide();
			$("#until_row").hide();
			$("#delete_form").hide();
			$(".nosh_schedule_exist_event").hide();
			$("#start_form").hide();
			$("#reason_form").hide();
			$("#event_choose").hide();
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#status").addOption({"":"None.","Pending":"Pending","Reminder Sent":"Reminder Sent","Attended":"Attended","LMC":"Last Minute Cancellation","DNKA":"Did Not Keep Appointment"}, false);
	$("#repeat").addOption({"":"None.","86400":"Every Day","604800":"Every Week","1209600":"Every Other Week"}, false);
	$('#patient_appt_button').click(function() {
		loadappt();
	});
	$('#event_appt_button').click(function() {
		loadevent();
	});
	if (noshdata.group_id != '100') {
		$("#start_date").datepicker();
	}
	$("#until").datepicker();
	$('#start_time').timepicker({
		'scrollDefaultNow': true,
		'timeFormat': 'h:i A',
		'step': noshdata.schedule_increment
	});
	$('#end').timepicker({
		'scrollDefaultNow': true,
		'timeFormat': 'h:i A',
		'step': noshdata.schedule_increment
	});
	$('#schedule_visit_type').change(function() {
		var visit_type_select = $("#schedule_visit_type").val();
		if (visit_type_select != ''){
			$("#end_row").hide();
			$("#end").val('');
		} else {
			$("#end_row").show();
		}
	});
	$('#repeat').change(function() {
		var repeat_select = $("#repeat").val();
		if (repeat_select != ''){
			$("#until_row").show();
		} else {
			$("#until_row").hide();
			$("#until").val('');
		}
	});
});
$(document).ready(function() {
	function signedlabel (cellvalue, options, rowObject){
		if (cellvalue == 'No') {
			return 'Draft';
		}
		if (cellvalue == 'Yes') {
			return 'Signed';
		}
	}
	function batchlabel (cellvalue, options, rowObject){
		if (cellvalue == 'No') {
			return 'None';
		}
		if (cellvalue == 'Pend') {
			return 'Print Image';
		}
		if (cellvalue == 'HCFA') {
			return 'HCFA-1500';
		}
	}
	$("#nosh_financial").click(function() {
		$("#financial_dialog").dialog('open');
	});
	$("#dashboard_billing").click(function() {
		$("#financial_dialog").dialog('open');
	});
	$("#financial_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 640, 
		width: 925, 
		draggable: false,
		resizable: false,
		open: function(event, ui) {
			$("#financial_accordion").accordion({ heightStyle: "content" });
			jQuery("#submit_list").jqGrid('GridUnload');
			jQuery("#submit_list").jqGrid({
				url:"ajaxfinancial/submit-list",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','Status','Batch Type','Last Name','First Name','Chief Complaint'],
				colModel:[
					{name:'eid',index:'eid',width:1,hidden:true},
					{name:'encounter_DOS',index:'encounter_DOS',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'encounter_signed',index:'encounter_signed',width:110,formatter:signedlabel},
					{name:'bill_submitted',index:'bill_submitted',width:110,formatter:batchlabel},
					{name:'lastname',index:'lastname',width:125},
					{name:'firstname',index:'firstname',width:125},
					{name:'encounter_cc',index:'encounter_cc',width:225}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#submit_list_pager'),
				sortname: 'encounter_DOS',
				viewrecords: true,
				sortorder: "desc",
				caption:"Billed Encounters Waiting to be Submitted",
				height: "100%",
				onSelectRow: function(id) {
					$("#billing_eid").val(id);
					$("#submit_bill_dialog").dialog('open');
				},
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#submit_list_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#bills_done").jqGrid('GridUnload');
			jQuery("#bills_done").jqGrid({
				url:"ajaxfinancial/bills-done",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','Last Name','First Name','Chief Complaint','Charges','Total Balance'],
				colModel:[
					{name:'eid',index:'eid',width:1,hidden:true},
					{name:'encounter_DOS',index:'encounter_DOS',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'lastname',index:'lastname',width:125},
					{name:'firstname',index:'firstname',width:125},
					{name:'encounter_cc',index:'encounter_cc',width:220},
					{name:'charges',index:'charges',width:100,formatter:'currency',formatoptions:{decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "$ "}},
					{name:'balance',index:'balance',width:100,formatter:'currency',formatoptions:{decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "$ "}}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#bills_done_pager'),
				sortname: 'encounter_DOS',
				viewrecords: true,
				sortorder: "desc",
				caption:"Billed Encounters that have been Processed",
				height: "100%",
				loadComplete: function(data) {
					var id1 = $('#billing_list_eid').val();
					if (id1 != '') {
						jQuery("#bills_done").expandSubGridRow(id1);
						$('#billing_list_eid').val('');
					}
				},
				hiddengrid: true,
				subGrid: true,
				subGridRowExpanded: function(subgrid_id, row_id) {
					var subgrid_table_id, pager_id;
					subgrid_table_id = subgrid_id+"_t";
					pager_id = "p_"+subgrid_table_id;
					$("#"+subgrid_id).html("<table id='"+subgrid_table_id+"' class='scroll'></table><div id='"+pager_id+"' class='scroll'></div>");
					jQuery("#"+subgrid_table_id).jqGrid({
						url: "ajaxchart/billing-payment-history1/"+row_id,
						datatype: "json",
						mtype: "POST",
						colNames:['ID','Date of Payment','Payment Amount','Payment Type'],
						colModel:[
							{name:"billing_core_id",index:"billing_core_id",width:1,hidden:true},
							{name:"dos_f",index:"dos_f",width:100,formatter:'date',formatoptions:{srcformat:"m/d/Y", newformat: "ISO8601Short"}},
							{name:"payment",index:"payment",width:200,formatter:'currency',formatoptions:{decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "$ "}},
							{name:"payment_type",index:"payment_type",width:300,align:"right"}, 
						], 
						rowNum:10,
						pager: pager_id,
						sortname: 'dos_f', 
						sortorder: "desc", 
						height: '100%',
						footerrow : true,
						userDataOnFooter : true,
						onSelectRow: function(id) {
							$('#billing_billing_core_id').val(id);
			 				$.ajax({
								type: "POST",
								url: "ajaxchart/get-payment",
								data: "id=" + id,
								dataType: "json",
								success: function(data){
									$.each(data, function(key, value){
										$("#billing_payment_form :input[name='" + key + "']").val(value);
										var input_id = $("#billing_payment_form :input[name='" + key + "']").attr('id');
										$("#" + input_id + "_old").val(value);
									});
									$('#billing_payment_dialog').dialog('open');
								}
							});
						},
						jsonReader: { repeatitems : false, id: "0" }
					});
					jQuery("#"+subgrid_table_id).jqGrid('navGrid',"#"+pager_id,{
						search:false,
						edit:false,
						add:false,
						del:false
					}).jqGrid('navButtonAdd',"#"+pager_id,{
						caption:"Delete Payment", 
						buttonicon:"ui-icon-trash", 
						onClickButton: function(){ 
							var id = jQuery(this).getGridParam('selrow');
							if(id){
				 				$('#billing_billing_core_id').val(id);
				 				$.ajax({
									type: "POST",
									url: "ajaxchart/get-payment",
									data: "id=" + id,
									dataType: "json",
									success: function(data){
										$('#billing_list_eid').val(data.eid);
									}
								});
				 				if(confirm('Are you sure you want to delete this payment?')){
									$.ajax({
										type: "POST",
										url: "ajaxchart/delete-payment1",
										data: "id=" + id,
										dataType: 'json',
										success: function(data){
											$.jGrowl(data.message);
											$("#billing_encounters").setCell(data.id,"balance",data.balance); 
										}
									});
									jQuery(this).trigger("reloadGrid");
									total_balance();
								}
							} else {
								$.jGrowl('Choose payment to delete!');
							}
						}, 
						position:"last"
					});
				}
			}).navGrid('#bills_done_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#outstanding_balance").jqGrid('GridUnload');
			jQuery("#outstanding_balance").jqGrid({
				url:"ajaxfinancial/outstanding-balance",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Last Name','First Name','Balance','Notes'],
				colModel:[
					{name:'pid',index:'pid',width:100},
					{name:'lastname',index:'lastname',width:150},
					{name:'firstname',index:'firstname',width:150},
					{name:'balance',index:'balance',width:100,formatter:'currency',formatoptions:{decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "$ "}},
					{name:'billing_notes',index:'billing_notes',width:300}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#outstanding_balance_pager'),
				sortname: 'lastname',
				viewrecords: true,
				sortorder: "desc",
				caption:"Patients with Outstanding Balances - Clicking on a row will open the patient's chart.",
				height: "100%",
				onSelectRow: function(id) {
					$.ajax({
						type: "POST",
						url: "ajaxsearch/openchart",
						data: "pid=" + id,
						success: function(data){
							$.ajax({
								type: "POST",
								url: "ajaxfinancial/billing-set",
								dataType: "json",
								success: function(data){
									window.location = data.url;
								}
							});
						}
					});
				},
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#outstanding_balance_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#monthly_stats").jqGrid('GridUnload');
			jQuery("#monthly_stats").jqGrid({
				url:"ajaxfinancial/monthly-stats",
				datatype: "json",
				mtype: "POST",
				colNames:['Month','Patients Seen','Total Billed','Total Payments','DNKA','LMC'],
				colModel:[
					{name:'month',index:'month',width:100},
					{name:'patients_seen',index:'patients_seen',width:100},
					{name:'total_billed',index:'total_billed',width:100,formatter:'currency',formatoptions:{decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "$ "}},
					{name:'total_payments',index:'total_payments',width:100,formatter:'currency',formatoptions:{decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "$ "}},
					{name:'dnka',index:'dnka',width:100},
					{name:'lmc',index:'lmc',width:100}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#monthly_stats_pager'),
				sortname: 'month',
				viewrecords: true,
				sortorder: "desc",
				caption:"Monthly Statistics - Expand Row for Insurance Statistics",
				hiddengrid: true,
				height: "100%",
				subGrid: true,
				subGridRowExpanded: function(subgrid_id, row_id) {
					var subgrid_table_id, pager_id;
					subgrid_table_id = subgrid_id+"_t2";
					pager_id = "p2_"+subgrid_table_id;
					$("#"+subgrid_id).html("<table id='"+subgrid_table_id+"' class='scroll'></table><div id='"+pager_id+"' class='scroll'></div>");
					jQuery("#"+subgrid_table_id).jqGrid({
						url:"ajaxfinancial/monthly-stats-insurance/"+row_id,
						datatype: "json",
						mtype: "POST",
						colNames:['Insurance','Patients Seen'],
						colModel:[
							{name:"insuranceplan",index:"insuranceplan",width:300},
							{name:"ins_patients_seen",index:"ins_patients_seen",width:100}
						], 
						rowNum:10,
						pager: pager_id,
						sortname: 'insuranceplan', 
						sortorder: "desc", 
						height: '100%'
					});
					jQuery("#"+subgrid_table_id).jqGrid('navGrid',"#"+pager_id,{
						search:false,
						edit:false,
						add:false,
						del:false
					});
				}
			}).navGrid('#monthly_stats_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#yearly_stats").jqGrid('GridUnload');
			jQuery("#yearly_stats").jqGrid({
				url:"ajaxfinancial/yearly-stats",
				datatype: "json",
				mtype: "POST",
				colNames:['Year','Patients Seen','Total Billed','Total Payments','DNKA','LMC'],
				colModel:[
					{name:'year',index:'year',width:100},
					{name:'patients_seen',index:'patients_seen',width:100},
					{name:'total_billed',index:'total_billed',width:100,formatter:'currency',formatoptions:{decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "$ "}},
					{name:'total_payments',index:'total_payments',width:100,formatter:'currency',formatoptions:{decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "$ "}},
					{name:'dnka',index:'dnka',width:100},
					{name:'lmc',index:'lmc',width:100}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#yearly_stats_pager'),
				sortname: 'year',
				viewrecords: true,
				sortorder: "desc",
				caption:"Yearly Statistics - Expand Row for Insurance Statistics",
				hiddengrid: true,
				height: "100%",
				subGrid: true,
				subGridRowExpanded: function(subgrid_id, row_id) {
					var subgrid_table_id, pager_id;
					subgrid_table_id = subgrid_id+"_t3";
					pager_id = "p3_"+subgrid_table_id;
					$("#"+subgrid_id).html("<table id='"+subgrid_table_id+"' class='scroll'></table><div id='"+pager_id+"' class='scroll'></div>");
					jQuery("#"+subgrid_table_id).jqGrid({
						url:"ajaxfinancial/yearly-stats-insurance/"+row_id,
						datatype: "json",
						mtype: "POST",
						colNames:['Insurance','Patients Seen'],
						colModel:[
							{name:"insuranceplan",index:"insuranceplan",width:300},
							{name:"ins_patients_seen",index:"ins_patients_seen",width:100}
						], 
						rowNum:10,
						pager: pager_id,
						sortname: 'insuranceplan', 
						sortorder: "desc", 
						height: '100%'
					});
					jQuery("#"+subgrid_table_id).jqGrid('navGrid',"#"+pager_id,{
						search:false,
						edit:false,
						add:false,
						del:false
					});
				}
			}).navGrid('#yearly_stats_pager',{search:false,edit:false,add:false,del:false});
		},
		position: { my: 'center', at: 'top', of: '#maincontent' }
	});
	$("#submit_bill_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 400, 
		width: 500, 
		modal: true,
		draggable: false,
		resizable: false,
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#submit_batch_printimage").click(function(){
		var eid = $("#billing_eid").val();
		$.ajax({
			type: "POST",
			url: "ajaxfinancial/add-queue/Pend",
			data: "eid=" + eid,
			success: function(data){
				$.jGrowl(data);
				$("#billing_eid").val('');
				reload_grid("submit_list");
				$("#submit_bill_dialog").dialog('close');
			}
		});	
	});
	$("#submit_batch_hcfa").click(function(){
		var eid = $("#billing_eid").val();
		$.ajax({
			type: "POST",
			url: "ajaxfinancial/add-queue/HCFA",
			data: "eid=" + eid,
			success: function(data){
				$.jGrowl(data);
				$("#billing_eid").val('');
				reload_grid("submit_list");
				$("#submit_bill_dialog").dialog('close');
			}
		});	
	});
	$("#submit_single_printimage").click(function(){
		var eid = $("#billing_eid").val();
		window.open("printimage_single/" + eid);
		$("#billing_eid").val('');
		reload_grid("submit_list");
		reload_grid("bills_done");
		$("#submit_bill_dialog").dialog('close');
	});
	$("#submit_hcfa").click(function(){
		var eid = $("#billing_eid").val();
		window.open("generate_hcfa/n/" + eid);
		$("#billing_eid").val('');
		reload_grid("submit_list");
		reload_grid("bills_done");
		$("#submit_bill_dialog").dialog('close');
	});
	$("#submit_hcfa2").click(function(){
		var eid = $("#billing_eid").val();
		window.open("generate_hcfa/y/" + eid);
		$("#billing_eid").val('');
		reload_grid("submit_list");
		reload_grid("bills_done");
		$("#submit_bill_dialog").dialog('close');
	});
	$("#submit_batch").click(function(){
		$.ajax({
			type: "POST",
			url: "ajaxfinancial/check-batch/Pend/n",
			dataType: "json",
			async: false,
			success: function(data){
				if (data.response == 'OK') {
					noshdata.success_doc = true;
					noshdata.type = data.type;
					noshdata.filename = data.filename;
					reload_grid("submit_list");
					reload_grid("bills_done");
				} else {
					$.jGrowl(data.response);
				}
			}
		});
		if (noshdata.success_doc == true) {
			window.open("print_batch/" + noshdata.type + "/" + noshdata.filename);
			noshdata.success_doc = false;
			noshdata.type = '';
			noshdata.filename= '';
		}
	});
	$("#submit_batch1").click(function(){
		$.ajax({
			type: "POST",
			url: "ajaxfinancial/check-batch/HCFA/n",
			dataType: "json",
			async: false,
			success: function(data){
				if (data.response == 'OK') {
					noshdata.success_doc = true;
					noshdata.type = data.type;
					noshdata.filename = data.filename;
					reload_grid("submit_list");
					reload_grid("bills_done");
				} else {
					$.jGrowl(data.response);
				}
			}
		});
		if (noshdata.success_doc == true) {
			window.open("print_batch/" + noshdata.type + "/" + noshdata.filename);
			noshdata.success_doc = false;
			noshdata.type = '';
			noshdata.filename= '';
		}
	});
	$("#submit_batch2").click(function(){
		$.ajax({
			type: "POST",
			url: "ajaxfinancial/check-batch/HCFA/y",
			dataType: "json",
			async: false,
			success: function(data){
				if (data.response == 'OK') {
					noshdata.success_doc = true;
					noshdata.type = data.type;
					noshdata.filename = data.filename;
					reload_grid("submit_list");
					reload_grid("bills_done");
				} else {
					$.jGrowl(data.response);
				}
			}
		});
		if (noshdata.success_doc == true) {
			window.open("print_batch/" + noshdata.type + "/" + noshdata.filename);
			noshdata.success_doc = false;
			noshdata.type = '';
			noshdata.filename= '';
		}
	});
	$("#bill_resubmit").click(function(){
		var eid = jQuery("#bills_done").getGridParam('selrow');
		$.ajax({
			type: "POST",
			url: "ajaxfinancial/bill-resubmit",
			data: "eid=" + eid,
			success: function(data){
				$.jGrowl(data);
				reload_grid("bills_done");
				reload_grid("submit_list");
			}
		});
	});
	$("#payment_encounter_charge1").click(function(){
		var item = jQuery("#bills_done").getGridParam('selrow');
		if(item){
			$('#billing_payment_eid').val(item);
			var currentDate = getCurrentDate();
			$('#billing_payment_dos_f').val(currentDate);
			$('#billing_payment_dialog').dialog('open');
			$("#billing_payment_payment").focus();
		} else {
			$.jGrowl("Please select encounter to add payment!");
		}
	});
	$("#financial_query_type").addOption({"":"Choose query type","payment_type":"Payment type","cpt":"CPT Codes"}).change(function(){
		var a = $("#financial_query_type").val();
		if (a == "payment_type") {
			$.ajax({
				type: "POST",
				url: "ajaxfinancial/query-payment-type-list",
				dataType: "json",
				success: function(data){
					$("#financial_query_variables").removeOption(/./);
					$("#financial_query_variables").addOption(data, false).trigger("liszt:updated");
				}
			});
			$.ajax({
				type: "POST",
				url: "ajaxfinancial/query-year-list",
				dataType: "json",
				success: function(data){
					$("#financial_query_year").removeOption(/./);
					$("#financial_query_year").addOption(data, false).trigger("liszt:updated");
				}
			});
		}
		if (a == "cpt") {
			$.ajax({
				type: "POST",
				url: "ajaxfinancial/query-cpt-list",
				dataType: "json",
				success: function(data){
					$("#financial_query_variables").removeOption(/./);
					$("#financial_query_variables").addOption(data, false).trigger("liszt:updated");
				}
			});
			$.ajax({
				type: "POST",
				url: "ajaxfinancial/query-year-list",
				dataType: "json",
				success: function(data){
					$("#financial_query_year").removeOption(/./);
					$("#financial_query_year").addOption(data, false).trigger("liszt:updated");
				}
			});
		}
		if (a == "") {
			$("#financial_query_variables").removeOption(/./).trigger("liszt:updated");
			$("#financial_query_year").removeOption(/./).trigger("liszt:updated");

		}
	});
	$("#financial_query_type").val('');
	$("#financial_query_variables").chosen();
	$("#financial_query_year").chosen();
	$("#financial_query_submit").button().click(function(){
		var a = $("#financial_query_type");
		var b = $("#financial_query_variables");
		var c = $("#financial_query_year");
		var bValid = true;
		bValid = bValid && checkEmpty(a,"Search");
		bValid = bValid && checkEmpty(b,"Variables");
		bValid = bValid && checkEmpty(c,"Year");
		if (bValid) {
			var json_result = $("#financial_query_form").serializeObject();
			jQuery("#financial_query_results").jqGrid('GridUnload');
			jQuery("#financial_query_results").jqGrid({
				url:"ajaxfinancial/financial-query",
				datatype: "json",
				postData: json_result,
				mtype: "POST",
				colNames:['ID','Date','Last Name','First Name','Amount','Type'],
				colModel:[
					{name:'billing_core_id',index:'billing_core_id',width:1,hidden:true},
					{name:'dos_f',index:'dos_f',width:150,formatter:'date',formatoptions:{srcformat:"m/d/y", newformat: "ISO8601Short"}},
					{name:'lastname',index:'lastname',width:150,sortable:false},
					{name:'firstname',index:'firstname',width:150,sortable:false},
					{name:'amount',index:'amount',width:150,sortable:false},
					{name:'type',index:'type',width:150,sortable:false}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#financial_query_results_pager'),
				sortname: 'dos_f',
				viewrecords: true,
				sortorder: "desc",
				caption:"Search Results",
				height: "100%",
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#financial_query_results_pager',{search:false,edit:false,add:false,del:false});
		}
	});
	$("#financial_query_reset").button().click(function(){
		$("#financial_query_form").clearForm();
		$("#financial_query_type").val('');
		jQuery("#financial_query_results").jqGrid('GridUnload');
		$("#financial_query_year").removeOption(/./).trigger("liszt:updated");
		$("#financial_query_variables").removeOption(/./).trigger("liszt:updated");
	});
	$("#financial_query_print").button().click(function(){
		var bValid = true;
		$("#financial_query_form").find("[required]").each(function() {
			var input_id = $(this).attr('id');
			var id1 = $("#" + input_id); 
			var text = $("label[for='" + input_id + "']").html();
			bValid = bValid && checkEmpty(id1, text);
		});
		if (bValid) {
			var json_result = $("#financial_query_form").serializeObject();
			$.ajax({
				type: "POST",
				url: "ajaxfinancial/financial-query-print",
				data: json_result,
				dataType: "json",
				async: false,
				success: function(data){
					if (data.message == 'OK') {
						noshdata.success_doc = true;
						noshdata.id_doc = data.id_doc;
					} else {
						$.jGrowl(data.message);
					}
				}
			});
			if (noshdata.success_doc == true) {
				window.open("financial_query_print/" + noshdata.id_doc);
				noshdata.success_doc = '';
				noshdata.id_doc = '';
			}
		}
	});
});
$(document).ready(function() {
	function super_query() {
		$("#super_query_div").html('Search patients with the following filters:<br><button type="button" id="search_add" class="nosh_button_add">Add </button> <input type="hidden" name="search_join[]" id="search_join_first" value="start"></input><select name="search_field[]" id="search_field_1" class="text search_field_class"></select> <select name="search_op[]" id="search_op_1" class="text search_op_class"></select> <input type="text" name="search_desc[]" id="search_desc_1"  class="text search_desc_class"></input>');
		loadbuttons();
		$("#search_field_1").addOption({"":"Select Field","age":"Patient's age","insurance":"Patient's primary insurance","issue":"Patient's active medical issue list","billing":"Patient's billing code","rxl_medication":"Patient's active medication list","imm_immunization":"Patient's immunization list","sup_supplement":"Patient's active supplement list","zip":"Zip code where patient resides","city":"City where patient resides"},false);
		$("#search_op_1").addOption({"":"Select Operator"},false);
		$("#search_field_1").change(function(){
			var a = $("#search_field_1").val();
			if (a == "age") {
				$("#search_op_1").removeOption(/./);
				$("#search_op_1").addOption({"":"Select Operator","less than":"is less than","equal":"is equal to","greater than":"is greater than","contains":"contains","not equal":"is not equal to"},false);
				$("#search_desc_1").val("");
			}
			if (a == "issue" || a == "rxl_medication" || a == "imm_immunization" || a == "insurance" || a == "sup_supplement" || a == "zip" || a == "city") {
				$("#search_op_1").removeOption(/./);
				$("#search_op_1").addOption({"":"Select Operator","equal":"is equal to","contains":"contains","not equal":"is not equal to"},false);
				$("#search_desc_1").val("");
			}
			if (a == "billing") {
				$("#search_op_1").removeOption(/./);
				$("#search_op_1").addOption({"":"Select Operator","equal":"is equal to","not equal":"is not equal to"},false);
				$("#search_desc_1").val("");
				$("#search_desc_1").autocomplete({
					source: function (req, add){
						$.ajax({
							url: "ajaxsearch/cpt",
							dataType: "json",
							type: "POST",
							data: req,
							success: function(data){
								if(data.response =='true'){
									add(data.message);
								}
							}
						});
					},
					minLength: 3
				});
			}
		});
		$("#search_op_1").change(function(){
			var a = $("#search_op_1").val();
			if (a == "between") {
				$("#search_desc_1").val(" AND ");
			}
		});
		$("#search_gender_both").prop('checked',true);
		$("#search_add").click(function() {
			var a = $("#super_query_div > :last-child").attr("id");
			var a1 = a.split("_");
			var count = parseInt(a1[2]) + 1;
			$("#super_query_div").append('<br><select name="search_join[]" id="search_join_'+count+'" class="text search_join_class"></select> <select name="search_field[]" id="search_field_'+count+'" class="text search_field_class"></select> <select name="search_op[]" id="search_op_'+count+'" class="text search_op_class"></select> <input type="text" name="search_desc[]" id="search_desc_'+count+'"  class="text search_desc_class"></input>');
			$("#search_field_"+count).addOption({"":"Select Field","age":"Patient's age","insurance":"Patient's primary insurance","issue":"Patient's active medical issue list","billing":"Patient's billing code","rxl_medication":"Patient's active medication list","imm_immunization":"Patient's immunization list","sup_supplement":"Patient's active supplement list","sup_supplement":"Patient's active supplement list","zip":"Zip code where patient resides","city":"City where patient resides"},false);
			$("#search_op_"+count).addOption({"":"Select Operator"},false);
			$("#search_join_"+count).addOption({"AND":"And (&)","OR":"Or (||)"},false);
			$("#search_field_"+count).change(function(){
				var a = $("#search_field_"+count).val();
				if (a == "age") {
					$("#search_op_"+count).removeOption(/./);
					$("#search_op_"+count).addOption({"":"Select Operator","less than":"is less than","equal":"is equal to","greater than":"is greater than","between":"is between"},false);
					$("#search_desc_"+count).val("");
				}
				if (a == "issue" || a == "rxl_medication" || a == "imm_immunization" || a == "insurance" || a == "sup_supplement" || a == "zip" || a == "city") {
					$("#search_op_"+count).removeOption(/./);
					$("#search_op_"+count).addOption({"":"Select Operator","equal":"is equal to","contains":"contains","not equal":"is not equal to"},false);
					$("#search_desc_"+count).val("");
				}
				if (a == "billing") {
					$("#search_op_"+count).removeOption(/./);
					$("#search_op_"+count).addOption({"":"Select Operator","equal":"is equal to","not equal":"is not equal to"},false);
					$("#search_desc_"+count).val("");
					$("#search_desc_"+count).autocomplete({
						source: function (req, add){
							$.ajax({
								url: "ajaxsearch/cpt');?>",
								dataType: "json",
								type: "POST",
								data: req,
								success: function(data){
									if(data.response =='true'){
										add(data.message);
									}
								}
							});
						},
						minLength: 3
					});
				}
			});
			$("#search_op_"+count).change(function(){
				var a = $("#search_op_"+count).val();
				if (a == "between") {
					$("#search_desc_"+count).val(" AND ");
				}
			});
		});
	}
	function tag_grid_reload() {
		var a = $("#tags_search").val();
		if (a !== null) {
			var json_result = $("#tag_query_form").serializeObject();
			var b = $("#tag_patient").val();
			if (b != '') {
				var pid = $("#tag_pid").val();
			} else {
				var pid = '0';
			}
			jQuery("#tag_query_results").jqGrid('GridUnload');
			jQuery("#tag_query_results").jqGrid({
				url:"ajaxoffice/tag-query/" + pid,
				datatype: "json",
				postData: json_result,
				mtype: "POST",
				colNames:['Index','PID','Last Name','First Name','Date','Document Type','Document Type Index','ID'],
				colModel:[
					{name:'index',index:'index',width:1,hidden:true},
					{name:'pid',index:'pid',width:50},
					{name:'lastname',index:'lastname',width:150,sortable:false},
					{name:'firstname',index:'firstname',width:150,sortable:false},
					{name:'doc_date',index:'doc_date',width:150,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"},sortable:false},
					{name:'doctype',index:'doctype',width:150,sortable:false},
					{name:'doctype_index',index:'doctype_index',width:1,hidden:true},
					{name:'doc_id',index:'doc_id',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#tag_query_results_pager'),
				sortname: 'pid',
				viewrecords: true,
				sortorder: "asc",
				caption:"Search Results",
				height: "100%",
				jsonReader: { repeatitems : false, id: "0" },
				onSelectRow: function(row_id) {
					var row = $(this).getRowData(row_id);
					if (row['doctype_index'] == 'eid') {
						$("#tag_modal_view").load('ajaxoffice/modal-view/' + row['doc_id'] + '/' + row['pid']);
						$("#tag_modal_view_dialog").dialog("option", "title", "Encounter");
					}
					if (row['doctype_index'] == 't_messages_id') {
						$.ajax({
							type: "POST",
							url: "ajaxoffice/telephone-messages-view/" + row['doc_id'] + '/' + row['pid'],
							success: function(data){
								$("#tag_modal_view").html(data);
								$("#tag_modal_view_dialog").dialog("option", "title", "Patient Message");
							}
						});
					}
					if (row['doctype_index'] == 'message_id') {
						$.ajax({
							type: "POST",
							url: "ajaxoffice/messages-view/" + row['doc_id'] + '/' + row['pid'],
							success: function(data){
								$("#tag_modal_view").html(data);
								$("#tag_modal_view_dialog").dialog("option", "title", "Message");
							}
						});
					}
					if (row['doctype_index'] == 'documents_id') {
						$.ajax({
							type: "POST",
							url: "ajaxoffice/documents-view/" + row['doc_id'] + '/' + row['pid'],
							dataType: "json",
							success: function(data){
								$("#tag_modal_view").html(data.html);
								$("#tag_document_filepath").val(data.filepath);
								$("#tag_modal_view_dialog").dialog("option", "title", "Document");
							}
						});
					}
					if (row['doctype_index'] == 'mtm_id') {
						$.ajax({
							type: "POST",
							url: "ajaxoffice/mtm-view/" + row['doc_id'] + '/' + row['pid'],
							success: function(data){
								$("#tag_modal_view").html(data);
								$("#tag_modal_view_dialog").dialog("option", "title", "Medication Therapy Management");
							}
						});
					}
					if (row['doctype_index'] == 'appt_id') {
						$.ajax({
							type: "POST",
							url: "ajaxoffice/appt-view/" + row['doc_id'] + '/' + row['pid'],
							success: function(data){
								$("#tag_modal_view").html(data);
								$("#tag_modal_view_dialog").dialog("option", "title", "Appointment Details");
							}
						});
					}
					if (row['doctype_index'] == 'hippa_id') {
						$.ajax({
							type: "POST",
							url: "ajaxoffice/hippa-view/" + row['doc_id'] + '/' + row['pid'],
							success: function(data){
								$("#tag_modal_view").html(data);
								$("#tag_modal_view_dialog").dialog("option", "title", "Records Release Details");
							}
						});
					}
					if (row['doctype_index'] == 'tests_id') {
						$.ajax({
							type: "POST",
							url: "ajaxoffice/tests-view/" + row['doc_id'] + '/' + row['pid'],
							success: function(data){
								$("#tag_modal_view").html(data);
								$("#tag_modal_view_dialog").dialog("option", "title", "Test Details");
							}
						});
					}
					$("#tag_modal_view_dialog").dialog('open');
				}
			}).navGrid('#tag_query_results_pager',{search:false,edit:false,add:false,del:false});
		} else {
			jQuery("#tag_query_results").jqGrid('GridUnload');
		}
	}
	super_query();
	$("#nosh_office").click(function() {
		$("#office_dialog").dialog('open');
	});
	$("#office_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 640, 
		width: 925, 
		draggable: false,
		resizable: false,
		open: function(event, ui) {
			$("#office_accordion").accordion({ heightStyle: "content" });
			jQuery("#vaccine_inventory").jqGrid('GridUnload');
			jQuery("#vaccine_inventory").jqGrid({
				url:"ajaxoffice/vaccine-inventory",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Purchased','Expiration Date','Vaccine','Quantity','Lot','Manufacturer','Brand','CVX','CPT'],
				colModel:[
					{name:'vaccine_id',index:'vaccine_id',width:1,hidden:true},
					{name:'date_purchase',index:'date_purchase',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'imm_expiration',index:'imm_expiration',width:100,hidden:true,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'imm_immunization',index:'imm_immunization',width:500},
					{name:'quantity',index:'quantity',width:100},
					{name:'imm_lot',index:'imm_lot',width:1,hidden:true},
					{name:'imm_manufacturer',index:'imm_manufacturer',width:1,hidden:true},
					{name:'imm_brand',index:'imm_brand',width:1,hidden:true},
					{name:'imm_cvxcode',index:'imm_cvxcode',width:1,hidden:true},
					{name:'cpt',index:'cpt',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#vaccine_inventory_pager'),
				sortname: 'imm_immunization',
				viewrecords: true,
				sortorder: "desc",
				caption:"Vaccine Inventory",
				height: "100%",
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#vaccine_inventory_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#vaccine_inventory_inactive").jqGrid('GridUnload');
			jQuery("#vaccine_inventory_inactive").jqGrid({
				url:"ajaxoffice/vaccine-inventory-inactive",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Purchased','Expiration Date','Vaccine','Quantity','Lot','Manufacturer','Brand','CVX','CPT'],
				colModel:[
					{name:'vaccine_id',index:'vaccine_id',width:1,hidden:true},
					{name:'date_purchase',index:'date_purchase',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'imm_expiration',index:'imm_expiration',width:100,hidden:true,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'imm_immunization',index:'imm_immunization',width:600},
					{name:'quantity',index:'quantity',width:1,hidden:true},
					{name:'imm_lot',index:'imm_lot',width:1,hidden:true},
					{name:'imm_manufacturer',index:'imm_manufacturer',width:1,hidden:true},
					{name:'imm_brand',index:'imm_brand',width:1,hidden:true},
					{name:'imm_cvxcode',index:'imm_cvxcode',width:1,hidden:true},
					{name:'cpt',index:'cpt',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#vaccine_inventory_inactive_pager'),
				sortname: 'imm_immunization',
				viewrecords: true,
				sortorder: "desc",
				caption:"Inactive Vaccine Inventory",
				height: "100%",
				hiddengrid: true,
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#vaccine_inventory_inactive_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#vaccine_temp").jqGrid('GridUnload');
			jQuery("#vaccine_temp").jqGrid({
				url:"ajaxoffice/vaccine-temp",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date','Temperature','Action Taken If Out of Range'],
				colModel:[
					{name:'temp_id',index:'temp_id',width:1,hidden:true},
					{name:'date',index:'date',width:200},
					{name:'temp',index:'temp',width:100},
					{name:'action',index:'temp',width:500},
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#vaccine_temp_pager'),
				sortname: 'date',
				viewrecords: true,
				sortorder: "desc",
				caption:"Vaccine Temperatures",
				height: "100%",
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#vaccine_temp_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#supplements_inventory").jqGrid('GridUnload');
			jQuery("#supplements_inventory").jqGrid({
				url:"ajaxoffice/supplement-inventory",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Purchased','Expiration Date','Supplement','Strength','Quantity','Manufacturer','Lot','CPT','Charge'],
				colModel:[
					{name:'supplement_id',index:'supplement_id',width:1,hidden:true},
					{name:'date_purchase',index:'date_purchase',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'sup_expiration',index:'sup_expiration',width:100,hidden:true,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'sup_description',index:'sup_description',width:500},
					{name:'sup_strength',index:'sup_strength',width:1,hidden:true},
					{name:'quantity',index:'quantity',width:100},
					{name:'sup_manufacturer',index:'sup_manufacturer',width:1,hidden:true},
					{name:'sup_lot',index:'sup_lot',width:1,hidden:true},
					{name:'cpt',index:'cpt',width:1,hidden:true},
					{name:'charge',index:'charge',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#supplements_inventory_pager'),
				sortname: 'sup_description',
				viewrecords: true,
				sortorder: "asc",
				caption:"Supplement Inventory",
				height: "100%",
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#supplements_inventory_pager',{search:false,edit:false,add:false,del:false});
			jQuery("#supplements_inventory_inactive").jqGrid('GridUnload');
			jQuery("#supplements_inventory_inactive").jqGrid({
				url:"ajaxoffice/supplement-inventory-inactive",
				datatype: "json",
				mtype: "POST",
				colNames:['ID','Date Purchased','Expiration Date','Supplement','Strength','Quantity','Manufacturer','Lot','CPT','Charge'],
				colModel:[
					{name:'supplement_id',index:'supplement_id',width:1,hidden:true},
					{name:'date_purchase',index:'date_purchase',width:100,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'sup_expiration',index:'sup_expiration',width:100,hidden:true,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}},
					{name:'sup_description',index:'sup_description',width:600},
					{name:'sup_strength',index:'sup_strength',width:1,hidden:true},
					{name:'quantity',index:'quantity',width:1,hidden:true},
					{name:'sup_manufacturer',index:'imm_manufacturer',width:1,hidden:true},
					{name:'sup_lot',index:'sup_lot',width:1,hidden:true},
					{name:'cpt',index:'cpt',width:1,hidden:true},
					{name:'charge',index:'charge',width:1,hidden:true}
				],
				rowNum:10,
				rowList:[10,20,30],
				pager: jQuery('#supplements_inventory_inactive_pager'),
				sortname: 'sup_description',
				viewrecords: true,
				sortorder: "asc",
				caption:"Inactive Supplements Inventory",
				height: "100%",
				hiddengrid: true,
				jsonReader: { repeatitems : false, id: "0" }
			}).navGrid('#supplements_inventory_inactive_pager',{search:false,edit:false,add:false,del:false});
			$.ajax({
				type: "POST",
				url: "ajaxoffice/age-percentage",
				dataType: "json",
				success: function(data){
					$("#age_group1").html(data.group1);
					$("#age_group2").html(data.group2);
					$("#age_group3").html(data.group3);
				}
			});
			$.ajax({
				type: "POST",
				url: "ajaxoffice/get-sales-tax",
				success: function(data){
					$("#sales_tax").val(data);
				}
			});
			$.ajax({
				type: "POST",
				url: "ajaxsearch/search-tags1",
				dataType: "json",
				success: function(data){
					if (data.message == "OK") {
						$("#tags_search").addOption(data, false).removeOption("message").trigger("liszt:updated");
					} else {
						$.jGrowl(data.message);
					}
				}
			});
		},
		position: { my: 'center', at: 'top', of: '#maincontent' }
	});
	$("#edit_vaccine_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 400, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#edit_vaccine_imm_immunization").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/imm",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3,
				select: function(event, ui){
					$("#imm_cvxcode").val(ui.item.cvx);
				}
			});
			$("#edit_vaccine_cpt").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/cpt",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3
			});
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#edit_vaccine_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_vaccine_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxoffice/edit-vaccine",
							data: str,
							success: function(data){
								$.jGrowl(data);
								reload_grid("vaccine_inventory");
								$('#edit_vaccine_form').clearForm();
								$('#edit_vaccine_dialog').dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#edit_vaccine_form').clearForm();
				$('#edit_vaccine_dialog').dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#edit_vaccine_imm_expiration").mask("99/99/9999").datepicker();
	$("#edit_vaccine_date_purchase").mask("99/99/9999").datepicker();
	$("#reactivate_vaccine_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 200, 
		width: 500, 
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Reactivate': function() {
				var bValid = true;
				$("#reactivate_vaccine_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#reactivate_vaccine_form").serialize();
					$.ajax({
						type: "POST",
						url: "ajaxoffice/reactivate-vaccine",
						data: str,
						success: function(data){
							$.jGrowl(data);
							reload_grid("vaccine_inventory_inactive");
							reload_grid("vaccine_inventory");
							$("#reactivate_vaccine_form").clearForm();
							$("#reactivate_vaccine_dialog").dialog('close');
						}
					});
				}
			},
			Cancel: function() {
				$("#reactivate_vaccine_form").clearForm();
				$("#reactivate_vaccine_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#add_vaccine").click(function(){
		$('#edit_vaccine_dialog').dialog('option', 'title', "Add Vaccine");
		$('#edit_vaccine_dialog').dialog('open');
		$("#edit_vaccine_imm_immunization").focus();
	});
	$("#edit_vaccine").click(function(){
		var item = jQuery("#vaccine_inventory").getGridParam('selrow');
		if(item){
			jQuery("#vaccine_inventory").GridToForm(item,"#edit_vaccine_form");
			var date = $('#edit_vaccine_imm_expiration').val();
			var edit_date = editDate(date);
			$('#edit_vaccine_imm_expiration').val(edit_date);
			$('#edit_vaccine_dialog').dialog('option', 'title', "Edit Vaccine");
			$('#edit_vaccine_dialog').dialog('open');
			$("#edit_vaccine_imm_immunization").focus();
		} else {
			$.jGrowl("Please select vaccine to edit!")
		}
	});
	$("#inactivate_vaccine").click(function(){
		var item = jQuery("#vaccine_inventory").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxoffice/inactivate-vaccine",
				data: "vaccine_id=" + item,
				success: function(data){
					$.jGrowl(data);
					reload_grid("vaccine_inventory");
					reload_grid("vaccine_inventory_inactive");
				}
			});
		} else {
			$.jGrowl("Please select vaccine to inactivate!")
		}
	});
	$("#delete_vaccine").click(function(){
		var item = jQuery("#vaccine_inventory").getGridParam('selrow');
		if(item){
			if(confirm('Are you sure you want to delete this vaccination entry?  This is not recommended unless entering the vaccine was a mistake!')){ 
				$.ajax({
					type: "POST",
					url: "ajaxoffice/delete-vaccine",
					data: "vaccine_id=" + item,
					success: function(data){
						$.jGrowl(data);
						reload_grid("vaccine_inventory");
						reload_grid("vaccine_inventory_inactive");
					}
				});
			}
		} else {
			$.jGrowl("Please select vaccine to delete!")
		}
	});
	$("#reactivate_vaccine").click(function(){
		var item = jQuery("#vaccine_inventory_inactive").getGridParam('selrow');
		if(item){
			$("#reactivate_vaccine_id").val(item);
			$("#reactivate_vaccine_dialog").dialog('open');
			$("#reactivate_quantity").focus();
		} else {
			$.jGrowl("Please select vaccine to reactivate!")
		}
	});
	$("#edit_vaccine_temp_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 300, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#edit_vaccine_temp_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_vaccine_temp_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxoffice/edit-temp",
							data: str,
							success: function(data){
								$.jGrowl(data);
								reload_grid("vaccine_temp");
								$('#edit_vaccine_temp_form').clearForm();
								$('#edit_vaccine_temp_dialog').dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#edit_vaccine_temp_form').clearForm();
				$('#edit_vaccine_temp_dialog').dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#temp_date").mask("99/99/9999").datepicker();
	$('#temp_time').timepicker({
		'scrollDefaultNow': true,
		'timeFormat': 'h:i A',
		'step': 15
	});
	$("#add_temp").click(function(){
		var date = getCurrentDate();
		var time = getCurrentTime();
		$('#edit_vaccine_temp_date').val(date);
		$('#edit_vaccine_temp_time').val(time);
		$('#edit_vaccine_temp_dialog').dialog('option', 'title', "Add Vaccine Temperature");
		$('#edit_vaccine_temp_dialog').dialog('open');
		$("#edit_vaccine_temp").focus();
	});
	$("#edit_temp").click(function(){
		var item = jQuery("#vaccine_temp").getGridParam('selrow');
		if(item){
			jQuery("#vaccine_temp").GridToForm(item,"#edit_vaccine_temp_form");
			var date = $('#edit_vaccine_temp_date').val();
			var edit_date = editDate1(date);
			$('#edit_vaccine_temp_date').val(edit_date);
			var edit_time = editDate2(date);
			$('#edit_vaccinetemp_time').val(edit_time);
			$('#edit_vaccine_temp_dialog').dialog('option', 'title', "Edit Vaccine Temperature");
			$('#edit_vaccine_temp_dialog').dialog('open');
			$("#edit_vaccine_temp").focus();
		} else {
			$.jGrowl("Please select vaccine to edit!")
		}
	});
	$("#delete_temp").click(function(){
		var item = jQuery("#vaccine_temp").getGridParam('selrow');
		if(item){
			if(confirm('Are you sure you want to delete this vaccine temperature entry?  This is not recommended unless entering the temperature was a mistake!')){ 
				$.ajax({
					type: "POST",
					url: "ajaxoffice/delete-temp",
					data: "temp_id=" + item,
					success: function(data){
						$.jGrowl(data);
						reload_grid("vaccine_temp");
						reload_grid("vaccine_temp_inactive");
					}
				});
			}
		} else {
			$.jGrowl("Please select vaccine temperature to delete!")
		}
	});
	$("#edit_supplement_sup_expiration").mask("99/99/9999").datepicker();
	$("#edit_supplement_sup_date_purchase").mask("99/99/9999").datepicker();
	$("#sales_tax").focusout(function(){
		$.ajax({
			type: "POST",
			url: "ajaxoffice/update-sales-tax",
			data: "sales_tax=" + $(this).val(),
			success: function(data){
				$.jGrowl(data);
			}
		});
	});
	$("#supplements_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		open: function (event, ui) {
			$("#edit_supplement_sup_description").autocomplete({
				source: function (req, add){
					$.ajax({
						url: "ajaxsearch/sup-cpt",
						dataType: "json",
						type: "POST",
						data: req,
						success: function(data){
							if(data.response =='true'){
								add(data.message);
							}
						}
					});
				},
				minLength: 3,
				select: function(event, ui){
					$("#edit_supplement_sup_cpt").val(ui.item.cpt);
					$("#edit_supplement_sup_quantity").val(ui.item.quantity);
					$("#edit_supplement_sup_charge").val(ui.item.charge);
					$("#edit_supplement_sup_manufacturer").val(ui.item.charge.manufacturer);
				}
			});
		},
		buttons: {
			'Save': function() {
				var bValid = true;
				$("#edit_supplement_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#edit_supplement_form").serialize();
					if(str){
						$.ajax({
							type: "POST",
							url: "ajaxoffice/edit-supplement",
							data: str,
							success: function(data){
								$.jGrowl(data);
								reload_grid("supplements_inventory");
								$('#edit_supplement_form').clearForm();
								$('#supplements_dialog').dialog('close');
							}
						});
					} else {
						$.jGrowl("Please complete the form");
					}
				}
			},
			Cancel: function() {
				$('#edit_supplement_form').clearForm();
				$('#supplements_dialog').dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#add_supplement").button().click(function(){
		$('#supplements_dialog').dialog('option', 'title', "Add Supplement");
		$("#supplements_dialog").dialog('open');
		$("#edit_supplement_sup_description").focus();
	});
	$("#edit_supplement").button().click(function(){
		var item = jQuery("#supplements_inventory").getGridParam('selrow');
		if(item){
			jQuery("#supplements_inventory").GridToForm(item,"#edit_supplement_form");
			var date = $('#edit_supplement_sup_expiration').val();
			var edit_date = editDate(date);
			$('#edit_supplement_sup_expiration').val(edit_date);
			$('#supplements_dialog').dialog('option', 'title', "Edit Supplement");
			$("#supplements_dialog").dialog('open');
			$("#edit_supplement_sup_description").focus();
		} else {
			$.jGrowl("Please select supplement to edit!")
		}
	});
	$("#inactivate_supplement").button().click(function(){
		var item = jQuery("#supplements_inventory").getGridParam('selrow');
		if(item){
			$.ajax({
				type: "POST",
				url: "ajaxoffice/inactivate-supplement",
				data: "supplement_id=" + item,
				success: function(data){
					$.jGrowl(data);
					reload_grid("supplements_inventory");
					reload_grid("supplements_inventory_inactive");
				}
			});
		} else {
			$.jGrowl("Please select supplement to inactivate!")
		}
	});
	$("#delete_supplement").button().click(function(){
		var item = jQuery("#supplements_inventory").getGridParam('selrow');
		if(item){
			if(confirm('Are you sure you want to delete this supplement entry?  This is not recommended unless entering the supplement was a mistake!')){ 
				$.ajax({
					type: "POST",
					url: "ajaxoffice/delete-supplement",
					data: "supplement_id=" + item,
					success: function(data){
						$.jGrowl(data);
						reload_grid("supplements_inventory");
						reload_grid("supplements_inventory_inactive");
					}
				});
			}
		} else {
			$.jGrowl("Please select supplement to delete!")
		}
	});
	$("#reactivate_supplement").button().click(function(){
		var item = jQuery("#supplements_inventory_inactive").getGridParam('selrow');
		if(item){
			$("#reactivate_supplement_inventory_id").val(item);
			$("#reactivate_supplement_dialog").dialog('open');
			$("#reactivate_sup_quantity").focus();
		} else {
			$.jGrowl("Please select supplement to reactivate!")
		}
	});
	$("#reactivate_supplement_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 200, 
		width: 500, 
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Reactivate': function() {
				var bValid = true;
				$("#reactivate_supplement_form").find("[required]").each(function() {
					var input_id = $(this).attr('id');
					var id1 = $("#" + input_id); 
					var text = $("label[for='" + input_id + "']").html();
					bValid = bValid && checkEmpty(id1, text);
				});
				if (bValid) {
					var str = $("#reactivate_supplement_form").serialize();
					$.ajax({
						type: "POST",
						url: "ajaxoffice/reactivate-supplement",
						data: str,
						success: function(data){
							$.jGrowl(data);
							reload_grid("supplements_inventory_inactive");
							reload_grid("supplements_inventory");
							$("#reactivate_supplement_form").clearForm();
							$("#reactivate_supplement_dialog").dialog('close');
						}
					});
				}
			},
			Cancel: function() {
				$("#reactivate_supplement_form").clearForm();
				$("#reactivate_supplement_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#super_query_submit").click(function(){
		var json_result = $("#super_query_form").serializeObject();
		jQuery("#super_query_results").jqGrid('GridUnload');
		jQuery("#super_query_results").jqGrid({
			url:"ajaxoffice/super-query",
			datatype: "json",
			postData: json_result,
			mtype: "POST",
			colNames:['PID','Last Name','First Name','DOB'],
			colModel:[
				{name:'pid',index:'pid',width:50},
				{name:'lastname',index:'lastname',width:150},
				{name:'firstname',index:'firstname',width:150},
				{name:'DOB',index:'DOB',width:150,formatter:'date',formatoptions:{srcformat:"ISO8601Long", newformat: "ISO8601Short"}}
			],
			rowNum:10,
			rowList:[10,20,30],
			pager: jQuery('#super_query_results_pager'),
			sortname: 'lastname',
		 	viewrecords: true,
		 	sortorder: "asc",
		 	caption:"Search Results",
		 	height: "100%",
		 	jsonReader: { repeatitems : false, id: "0" }
		}).navGrid('#super_query_results_pager',{search:false,edit:false,add:false,del:false});
	});
	$("#super_query_reset").click(function(){
		super_query();
		$("#super_query_form").clearForm();
		$("#search_gender_both").prop('checked',true);
		$("#search_join_first").val('start');
		jQuery("#super_query_results").jqGrid('GridUnload');
	});
	$("#tags_search").chosen().change(function() {
		tag_grid_reload();
	});
	$("#tag_patient").autocomplete({
		source: function (req, add){
			$.ajax({
				url: "ajaxsearch/search",
				dataType: "json",
				type: "POST",
				data: req,
				success: function(data){
					if(data.response =='true'){
						add(data.message);
					}
				}
			});
		},
		minLength: 1,
		select: function(event, ui){
			$("#tag_pid").val(ui.item.id);
		}
	}).change(function() {
		tag_grid_reload();
	});
	$("#tag_modal_view_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		draggable: false,
		resizable: false,
		close: function(event, ui) {
			var a = $("#tag_document_filepath").val();
			if (a != '') {
				$.ajax({
					type: "POST",
					url: "ajaxoffice/close-document",
					data: "document_filepath=" + a,
					success: function(data){
						$("#tag_document_filepath").val('');
						$("#tag_view_document_id").val('');
					}
				});	
			}
			$("#tag_modal_view").html('');
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#export_demographics").button().click(function(){
		window.open("export_demographics/all");
	});
	$("#export_demographics1").button().click(function(){
		window.open("export_demographics/active");
	});
});
$(document).ready(function() {
	$("#growth_chart_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 100, 
		width: 700, 
		modal: true,
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#gc_list").click(function(){
		$("#growth_chart_dialog").dialog('open');
	});
	$("#dashboard_growth_chart").click(function(){
		$("#growth_chart_dialog").dialog('open');
	});
	$("#graph_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 500, 
		width: 800, 
		modal: true,
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#graph_load").dialog({
		height: 100,
		autoOpen: false,
		modal: true,
		closeOnEscape: false,
		beforeclose: function (event, ui) { return false; },
		dialogClass: "noclose",
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$(document).on("click", '.weight_chart', function() {
		var origin = $(this).hasClass('menu');
		$("#graph_load").dialog('open');
		var options = {
			chart: {
				renderTo: 'container',
				defaultSeriesType: 'line',
				marginRight: 130,
				marginBottom: 50,
				width: 750
			},
			title: {
				text: '',
				x: -20
			},
			xAxis: {
				title: {
					text: ''
				},
				labels: {
					step: 180
				},
				categories: []
			},
			yAxis: {
				title: {
					text: ''
				},
				plotLines: [{
					value: 0,
					width: 1,
					color: '#808080'
				}]
			},
			tooltip: {
				enabled: false
			},
			legend: {
				layout: 'vertical',
				align: 'right',
				verticalAlign: 'top',
				x: -10,
				y: 100,
				borderWidth: 0
			},
			series: [
				{name: '95%', type: 'spline', data: []},
				{name: '90%', type: 'spline', data: []},
				{name: '75%', type: 'spline', data: []},
				{name: '50%', type: 'spline', data: []},
				{name: '25%', type: 'spline', data: []},
				{name: '10%', type: 'spline', data: []},
				{name: '5%', type: 'spline', data: []},
				{type: 'line', data: []}
			],
			credits: {
				href: 'http://noshemr.wordpress.com',
				text: 'NOSH ChartingSystem'
			},
			plotOptions: {
				spline: {
					marker: {
						enabled: false
					}
				}
			}
		};
		$.ajax({
			type: "POST",
			url: "ajaxcommon/growth-chart/weight-age",
			dataType: "json",
			success: function(data){
				options.title.text = data.title;
				options.xAxis.title.text = data.xaxis;
				options.yAxis.title.text = data.yaxis;
				options.xAxis.categories = data.categories;
				options.series[0].data = data.P95;
				options.series[1].data = data.P90;
				options.series[2].data = data.P75;
				options.series[3].data = data.P50;
				options.series[4].data = data.P25;
				options.series[5].data = data.P10;
				options.series[6].data = data.P5;
				options.series[7].data = data.patient;
				options.series[7].name = data.patientname;
				var chart = new Highcharts.Chart(options);
				$("#graph_load").dialog('close');
				$("#graph_dialog").dialog('open');
				if (origin == false) {
					var note = $("#vitals_vitals_other").val();
					if (note == '') {
						var newnote = 'Weight-to-age percentile: ' + data.percentile + '.';
					} else {
						var newnote = note + '  Weight-to-age percentile: ' + data.percentile + '.';
					}
					$("#vitals_vitals_other").val(newnote);
					vitals_autosave();
				}
			}
		});
	});
	$(document).on("click", '.height_chart', function() {
		var origin = $(this).hasClass('menu');
		$("#graph_load").dialog('open');
		var options = {
			chart: {
				renderTo: 'container',
				defaultSeriesType: 'line',
				marginRight: 130,
				marginBottom: 50,
				width: 750
			},
			title: {
				text: '',
				x: -20
			},
			xAxis: {
				title: {
					text: ''
				},
				labels: {
					step: 180
				},
				categories: []
			},
			yAxis: {
				title: {
					text: ''
				},
				plotLines: [{
					value: 0,
					width: 1,
					color: '#808080'
				}]
			},
			tooltip: {
				enabled: false
			},
			legend: {
				layout: 'vertical',
				align: 'right',
				verticalAlign: 'top',
				x: -10,
				y: 100,
				borderWidth: 0
			},
			series: [
				{name: '95%', type: 'spline', data: []},
				{name: '90%', type: 'spline', data: []},
				{name: '75%', type: 'spline', data: []},
				{name: '50%', type: 'spline', data: []},
				{name: '25%', type: 'spline', data: []},
				{name: '10%', type: 'spline', data: []},
				{name: '5%', type: 'spline', data: []},
				{type: 'line', data: []}
			],
			credits: {
				href: 'http://noshemr.wordpress.com',
				text: 'NOSH ChartingSystem'
			},
			plotOptions: {
				spline: {
					marker: {
						enabled: false
					}
				}
			}
		};
		$.ajax({
			type: "POST",
			url: "ajaxcommon/growth-chart/height-age",
			dataType: "json",
			success: function(data){
				options.title.text = data.title;
				options.xAxis.title.text = data.xaxis;
				options.yAxis.title.text = data.yaxis;
				options.xAxis.categories = data.categories;
				options.series[0].data = data.P95;
				options.series[1].data = data.P90;
				options.series[2].data = data.P75;
				options.series[3].data = data.P50;
				options.series[4].data = data.P25;
				options.series[5].data = data.P10;
				options.series[6].data = data.P5;
				options.series[7].data = data.patient;
				options.series[7].name = data.patientname;
				var chart = new Highcharts.Chart(options);
				$("#graph_load").dialog('close');
				$("#graph_dialog").dialog('open');
				if (origin == false) {
					var note = $("#vitals_vitals_other").val();
					if (note == '') {
						var newnote = 'Height-to-age percentile: ' + data.percentile + '.';
					} else {
						var newnote = note + '  Height-to-age percentile: ' + data.percentile + '.';
					}
					$("#vitals_vitals_other").val(newnote);
					vitals_autosave();
				}
			}
		});
	});
	$(document).on("click", '.hc_chart', function() {
		var origin = $(this).hasClass('menu');
		$("#graph_load").dialog('open');
		var options = {
			chart: {
				renderTo: 'container',
				defaultSeriesType: 'line',
				marginRight: 130,
				marginBottom: 50,
				width: 750
			},
			title: {
				text: '',
				x: -20
			},
			xAxis: {
				title: {
					text: ''
				},
				labels: {
					step: 180
				},
				categories: []
			},
			yAxis: {
				title: {
					text: ''
				},
				plotLines: [{
					value: 0,
					width: 1,
					color: '#808080'
				}]
			},
			tooltip: {
				enabled: false
			},
			legend: {
				layout: 'vertical',
				align: 'right',
				verticalAlign: 'top',
				x: -10,
				y: 100,
				borderWidth: 0
			},
			series: [
				{name: '95%', type: 'spline', data: []},
				{name: '90%', type: 'spline', data: []},
				{name: '75%', type: 'spline', data: []},
				{name: '50%', type: 'spline', data: []},
				{name: '25%', type: 'spline', data: []},
				{name: '10%', type: 'spline', data: []},
				{name: '5%', type: 'spline', data: []},
				{type: 'line', data: []}
			],
			credits: {
				href: 'http://noshemr.wordpress.com',
				text: 'NOSH ChartingSystem'
			},
			plotOptions: {
				spline: {
					marker: {
						enabled: false
					}
				}
			}
		};
		$.ajax({
			type: "POST",
			url: "ajaxcommon/growth-chart/head-age",
			dataType: "json",
			success: function(data){
				options.title.text = data.title;
				options.xAxis.title.text = data.xaxis;
				options.yAxis.title.text = data.yaxis;
				options.xAxis.categories = data.categories;
				options.series[0].data = data.P95;
				options.series[1].data = data.P90;
				options.series[2].data = data.P75;
				options.series[3].data = data.P50;
				options.series[4].data = data.P25;
				options.series[5].data = data.P10;
				options.series[6].data = data.P5;
				options.series[7].data = data.patient;
				options.series[7].name = data.patientname;
				var chart = new Highcharts.Chart(options);
				$("#graph_load").dialog('close');
				$("#graph_dialog").dialog('open');
				if (origin == false) {
					var note = $("#vitals_vitals_other").val();
					if (note == '') {
						var newnote = 'Head circumference-to-age percentile: ' + data.percentile + '.';
					} else {
						var newnote = note + '  Head circumference-to-age percentile: ' + data.percentile + '.';
					}
					$("#vitals_vitals_other").val(newnote);
					vitals_autosave();
				}
			}
		});
	});
	$(document).on("click", '.bmi_chart', function() {
		var origin = $(this).hasClass('menu');
		$("#graph_load").dialog('open');
		var options = {
			chart: {
				renderTo: 'container',
				defaultSeriesType: 'line',
				marginRight: 130,
				marginBottom: 50,
				width: 750
			},
			title: {
				text: '',
				x: -20
			},
			xAxis: {
				title: {
					text: ''
				},
				labels: {
					step: 180
				},
				categories: []
			},
			yAxis: {
				title: {
					text: ''
				},
				plotLines: [{
					value: 0,
					width: 1,
					color: '#808080'
				}]
			},
			tooltip: {
				enabled: false
			},
			legend: {
				layout: 'vertical',
				align: 'right',
				verticalAlign: 'top',
				x: -10,
				y: 100,
				borderWidth: 0
			},
			series: [
				{name: '95%', type: 'spline', data: []},
				{name: '90%', type: 'spline', data: []},
				{name: '75%', type: 'spline', data: []},
				{name: '50%', type: 'spline', data: []},
				{name: '25%', type: 'spline', data: []},
				{name: '10%', type: 'spline', data: []},
				{name: '5%', type: 'spline', data: []},
				{type: 'spline', data: []}
			],
			credits: {
				href: 'http://noshemr.wordpress.com',
				text: 'NOSH ChartingSystem'
			},
			plotOptions: {
				spline: {
					marker: {
						enabled: false
					}
				}
			}
		};
		$.ajax({
			type: "POST",
			url: "ajaxcommon/growth-chart/bmi-age",
			dataType: "json",
			success: function(data){
				options.title.text = data.title;
				options.xAxis.title.text = data.xaxis;
				options.yAxis.title.text = data.yaxis;
				options.xAxis.categories = data.categories;
				options.series[0].data = data.P95;
				options.series[1].data = data.P90;
				options.series[2].data = data.P75;
				options.series[3].data = data.P50;
				options.series[4].data = data.P25;
				options.series[5].data = data.P10;
				options.series[6].data = data.P5;
				options.series[7].data = data.patient;
				options.series[7].name = data.patientname;
				var chart = new Highcharts.Chart(options);
				$("#graph_load").dialog('close');
				$("#graph_dialog").dialog('open');
				if (origin == false) {
					var note = $("#vitals_vitals_other").val();
					if (note == '') {
						var newnote = 'BMI-to-age percentile: ' + data.percentile + '.';
					} else {
						var newnote = note + '  BMI-to-age percentile: ' + data.percentile + '.';
					}
					$("#vitals_vitals_other").val(newnote);
					vitals_autosave();
				}
			}
		});
	});
	$(document).on("click", '.weight_height_chart', function() {
		var origin = $(this).hasClass('menu');
		$("#graph_load").dialog('open');
		var options = {
			chart: {
				renderTo: 'container',
				defaultSeriesType: 'line',
				marginRight: 130,
				marginBottom: 50,
				width: 750
			},
			title: {
				text: '',
				x: -20
			},
			xAxis: {
				title: {
					text: ''
				}
			},
			yAxis: {
				title: {
					text: ''
				},
				plotLines: [{
					value: 0,
					width: 1,
					color: '#808080'
				}]
			},
			tooltip: {
				enabled: false
			},
			legend: {
				layout: 'vertical',
				align: 'right',
				verticalAlign: 'top',
				x: -10,
				y: 100,
				borderWidth: 0
			},
			series: [
				{name: '95%', type: 'spline', data: []},
				{name: '90%', type: 'spline', data: []},
				{name: '75%', type: 'spline', data: []},
				{name: '50%', type: 'spline', data: []},
				{name: '25%', type: 'spline', data: []},
				{name: '10%', type: 'spline', data: []},
				{name: '5%', type: 'spline', data: []},
				{type: 'line', data: []}
			],
			credits: {
				href: 'http://noshemr.wordpress.com',
				text: 'NOSH ChartingSystem'
			},
			plotOptions: {
				spline: {
					marker: {
						enabled: false
					}
				}
			}
		};
		$.ajax({
			type: "POST",
			url: "ajaxcommon/growth-chart/weight-height",
			dataType: "json",
			success: function(data){
				options.title.text = data.title;
				options.xAxis.title.text = data.xaxis;
				options.yAxis.title.text = data.yaxis;
				options.series[0].data = data.P95;
				options.series[1].data = data.P90;
				options.series[2].data = data.P75;
				options.series[3].data = data.P50;
				options.series[4].data = data.P25;
				options.series[5].data = data.P10;
				options.series[6].data = data.P5;
				options.series[7].data = data.patient;
				options.series[7].name = data.patientname;
				var chart = new Highcharts.Chart(options);
				$("#graph_load").dialog('close');
				$("#graph_dialog").dialog('open');
				if (origin == false) {
					var note = $("#vitals_vitals_other").val();
					if (note == '') {
						var newnote = 'Weight-to-height percentile: ' + data.percentile + '.';
					} else {
						var newnote = note + '  Weight-to-height percentile: ' + data.percentile + '.';
					}
					$("#vitals_vitals_other").val(newnote);
					vitals_autosave();
				}
			}
		});
	});
});
$(document).ready(function() {
	$('#wPaint').wPaint({
		path: noshdata.path,
		menuOrientation: 'horizontal',
		menuOffsetLeft: 0,
		menuOffsetTop: -78
	});
	$("#image_select").change(function() {
		var a = $("#image_select").val();
		if (a != '') {
			$.ajax({
				url: "ajaxsearch/image-select-dimensions",
				data: "file=" + a,
				dataType: "json",
				type: "POST",
				success: function(data){
					$('#wPaint').css({
						width: data.width,
						height: data.height
					}).wPaint('resize');
					$('.wPaint-menu-name-main').css({width:579});
					$('.wPaint-menu-name-text').css({width:182,left:0,top:42});
					$('.wPaint-menu-select').css({"overflow-y":"scroll"});
					//$('.wPaint-menu-name-main').parent().css({
						//width: 579,
						//left: 0,
						//top: -68
					//});
					//$('.wPaint-menu-name-text').parent().css({
						//width: 579,
						//left: 0,
						//top: -26
					//});
					$('#wPaint').wPaint('image', a);
					$("#image_eid").val(noshdata.eid);
					$("#image_pid").val(noshdata.pid);
					$("#image_dialog").dialog('open');
					
				}
			});
		}
	});
	$("#image_dialog_preview").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		open: function(event, ui) {
			$("#image_select").removeOption(/./);
			$.ajax({
				url: "ajaxsearch/image-select",
				dataType: "json",
				type: "POST",
				success: function(data){
					$("#image_select").addOption({"":"Select an image to annotate."}, false);
					$("#image_select").addOption(data, false);
				}
			});
			loadimagepreview();
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	$("#image_encounter").click(function(){
		$("#image_dialog_preview").dialog('open');
	});
	$("#image_dialog").dialog({ 
		bgiframe: true, 
		autoOpen: false, 
		height: 580, 
		width: 800, 
		draggable: false,
		resizable: false,
		closeOnEscape: false,
		dialogClass: "noclose",
		buttons: {
			'Save': function() {
				var imageData = $("#wPaint").wPaint("image");
				$("#image_data").val(imageData);
				var str = $("#image_form").serialize();
				$.ajax({
					url: "ajaxchart/image-save",
					type: "POST",
					data: str,
					success: function(data){
						$.jGrowl(data);
						$('#wPaint').wPaint('clear');
						$('#image_form').clearForm();
						$("#image_dialog").dialog('close');
						loadimagepreview();
					}
				});
			},
			'Save As New Image': function() {
				var imageData = $("#wPaint").wPaint("image");
				$("#image_id").val('');
				$("#image_data").val(imageData);
				var str = $("#image_form").serialize();
				$.ajax({
					url: "ajaxchart/image-save",
					type: "POST",
					data: str,
					success: function(data){
						$.jGrowl(data);
						$('#wPaint').wPaint('clear');
						$('#image_form').clearForm();
						$("#image_dialog").dialog('close');
						loadimagepreview();
					}
				});
			},
			Cancel: function() {
				$('#wPaint').wPaint('clear');
				$('#image_form').clearForm();
				$("#image_dialog").dialog('close');
			}
		},
		position: { my: 'center', at: 'center', of: '#maincontent' }
	});
	var myUpload5 = $("#add_photo").upload({
		action: 'photoupload',
		onComplete: function(data){
			loadimagepreview();
		}
	});
});
